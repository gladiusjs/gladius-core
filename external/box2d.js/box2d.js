// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";


// *** Environment setup code ***
var arguments_ = [];

var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  print = function(x) {
    process['stdout'].write(x + '\n');
  };
  printErr = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');

  read = function(filename) {
    var ret = nodeFS['readFileSync'](filename).toString();
    if (!ret && filename[0] != '/') {
      filename = __dirname.split('/').slice(0, -1).join('/') + '/src/' + filename;
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  load = function(f) {
    globalEval(read(f));
  };

  arguments_ = process['argv'].slice(2);

} else if (ENVIRONMENT_IS_SHELL) {
  // Polyfill over SpiderMonkey/V8 differences
  if (!this['read']) {
    this['read'] = function(f) { snarf(f) };
  }

  if (!this['arguments']) {
    arguments_ = scriptArgs;
  } else {
    arguments_ = arguments;
  }

} else if (ENVIRONMENT_IS_WEB) {
  this['print'] = printErr = function(x) {
    console.log(x);
  };

  this['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (this['arguments']) {
    arguments_ = arguments;
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  this['load'] = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}

if (typeof load == 'undefined' && typeof read != 'undefined') {
  this['load'] = function(f) {
    globalEval(read(f));
  };
}

if (typeof printErr === 'undefined') {
  this['printErr'] = function(){};
}

if (typeof print === 'undefined') {
  this['print'] = printErr;
}
// *** Environment setup code ***


try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
if (!Module.arguments) {
  Module.arguments = arguments_;
}
if (Module.print) {
  print = Module.print;
}

  
// Warning: .ll contains i64 or double values. These 64-bit values are dangerous in USE_TYPED_ARRAYS == 2. We store i64 as i32, and double as float. This can cause serious problems!
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ [^}]* }>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type[type.length-1] == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      assert(type.fields.length === struct.length, 'Number of named fields must match the type for ' + typeName);
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;

function abort(text) {
  print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number' or 'string' (use 'number' for any C pointer).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType.
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  function toC(value, type) {
    if (type == 'string') {
      var ret = STACKTOP;
      Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  return fromC(func.apply(null, cArgs), returnType);
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': HEAP32[((ptr)>>2)]=value; break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[((ptr+4)>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[((ptr+4)>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

// Allocates memory for some data and initializes it properly.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[(ptr+i)]);
    if (nullTerminated && t == nullByte) { break; } else {}
    ret += t;
    i += 1;
    if (!nullTerminated && i == length) { break; }
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  printErr('Warning: Enlarging memory arrays, this is not fast! ' + [STATICTOP, TOTAL_MEMORY]);
  assert(STATICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

var base = intArrayFromString('(null)'); // So printing %s of NULL gives '(null)'
                                         // Also this ensures we leave 0 as an invalid address, 'NULL'
STATICTOP = base.length;
for (var i = 0; i < base.length; i++) {
  HEAP8[(i)]=base[i]
}

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);
var tempDoubleI8  = HEAP8.subarray(tempDoublePtr);
var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);
var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);
var tempDoubleF64 = new Float64Array(HEAP8.buffer).subarray(tempDoublePtr >> 3);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
  tempDoubleI8[4] = HEAP8[ptr+4];
  tempDoubleI8[5] = HEAP8[ptr+5];
  tempDoubleI8[6] = HEAP8[ptr+6];
  tempDoubleI8[7] = HEAP8[ptr+7];
}
STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}


// Copies a list of num items on the HEAP into a
// a normal JavaScript array of numbers
function Array_copy(ptr, num) {
  return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr+num)); // Make a normal array out of the typed 'view'
                                                                   // Consider making a typed array here, for speed?
  return HEAP.slice(ptr, ptr+num);
}
Module['Array_copy'] = Array_copy;

// Copies a list of num items on the HEAP into a
// JavaScript typed array.
function TypedArray_copy(ptr, num) {
  // TODO: optimize this!
  var arr = new Uint8Array(num);
  for (var i = 0; i < num; ++i) {
    arr[i] = HEAP8[(ptr+i)];
  }
  return arr.buffer;
}
Module['TypedArray_copy'] = TypedArray_copy;

function String_len(ptr) {
  var i = 0;
  while (HEAP8[(ptr+i)]) i++; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i;
}
Module['String_len'] = String_len;

// Copies a C-style string, terminated by a zero, from the HEAP into
// a normal JavaScript array of numbers
function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len-1] = 0;
  return ret;
}
Module['String_copy'] = String_copy;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull) {
  var ret = [];
  var t;
  var i = 0;
  while (i < stringy.length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + stringy[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var i = 0;
  while (i < string.length) {
    var chr = string.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + string[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    HEAP8[(buffer+i)]=chr
    i = i + 1;
  }
  if (!dontAddNull) {
    HEAP8[(buffer+i)]=0
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// === Body ===




function __Z5b2MinIiET_S0_S0_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0) < (($4)|0);
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  ;
  return $8;
}


function __Z5b2MaxIiET_S0_S0_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0) > (($4)|0);
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  ;
  return $8;
}


function __ZN12b2BroadPhase12UnBufferMoveEi($this, $proxyId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $i;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $5=$i;
      var $6=(($3+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0) < (($7)|0);
      if ($8) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $10=$i;
      var $11=(($3+32)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+($10<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$2;
      var $16=(($14)|0)==(($15)|0);
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $18=$i;
      var $19=(($3+32)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($18<<2))|0);
      HEAP32[(($21)>>2)]=-1;
      __label__ = 7; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $24=$i;
      var $25=(($24+1)|0);
      $i=$25;
      __label__ = 2; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5b2DotRK6b2Vec2S1_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5*$8;
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12*$15;
  var $17=$9+$16;
  ;
  return $17;
}


function __ZN6b2Vec27SetZeroEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAPF32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAPF32[(($4)>>2)]=0;
  ;
  return;
}


function __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $proxyId;
  $1=$this;
  $2=$aabb;
  $3=$userData;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$3;
  var $8=__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($5, $6, $7);
  $proxyId=$8;
  var $9=(($4+28)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+1)|0);
  HEAP32[(($9)>>2)]=$11;
  var $12=$proxyId;
  __ZN12b2BroadPhase10BufferMoveEi($4, $12);
  var $13=$proxyId;
  ;
  return $13;
}


function __ZN12b2BroadPhase10BufferMoveEi($this, $proxyId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $oldBuffer;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+36)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0)==(($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $10=(($3+32)|0);
      var $11=HEAP32[(($10)>>2)];
      $oldBuffer=$11;
      var $12=(($3+36)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13<<1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=(($3+36)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16<<2))|0);
      var $18=__Z7b2Alloci($17);
      var $19=$18;
      var $20=(($3+32)|0);
      HEAP32[(($20)>>2)]=$19;
      var $21=(($3+32)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$oldBuffer;
      var $25=$24;
      var $26=(($3+40)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=((($27<<2))|0);
      assert($28 % 1 === 0, 'memcpy given ' + $28 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($23, $25, $28, 1);
      var $29=$oldBuffer;
      var $30=$29;
      __Z6b2FreePv($30);
      __label__ = 3; break;
    case 3: 
      var $32=$2;
      var $33=(($3+40)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($3+32)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+($34<<2))|0);
      HEAP32[(($37)>>2)]=$32;
      var $38=(($3+40)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+1)|0);
      HEAP32[(($38)>>2)]=$40;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2BroadPhase12DestroyProxyEi($this, $proxyId) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase12UnBufferMoveEi($3, $4);
  var $5=(($3+28)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6-1)|0);
  HEAP32[(($5)>>2)]=$7;
  var $8=(($3)|0);
  var $9=$2;
  __ZN13b2DynamicTree12DestroyProxyEi($8, $9);
  ;
  return;
}


function __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $buffer;
      $1=$this;
      $2=$proxyId;
      $3=$aabb;
      $4=$displacement;
      var $5=$1;
      var $6=(($5)|0);
      var $7=$2;
      var $8=$3;
      var $9=$4;
      var $10=__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($6, $7, $8, $9);
      var $11=(($10)&1);
      $buffer=$11;
      var $12=$buffer;
      var $13=(($12) & 1);
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $15=$2;
      __ZN12b2BroadPhase10BufferMoveEi($5, $15);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2BroadPhase10TouchProxyEi($this, $proxyId) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase10BufferMoveEi($3, $4);
  ;
  return;
}


function __ZN12b2BroadPhase13QueryCallbackEi($this, $proxyId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $oldBuffer;
      $2=$this;
      $3=$proxyId;
      var $4=$2;
      var $5=$3;
      var $6=(($4+56)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0)==(($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $11=(($4+52)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($4+48)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|0)==(($14)|0);
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $17=(($4+44)|0);
      var $18=HEAP32[(($17)>>2)];
      $oldBuffer=$18;
      var $19=(($4+48)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20<<1))|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($4+48)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23*12)|0);
      var $25=__Z7b2Alloci($24);
      var $26=$25;
      var $27=(($4+44)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($4+44)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=$oldBuffer;
      var $32=$31;
      var $33=(($4+52)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34*12)|0);
      assert($35 % 1 === 0, 'memcpy given ' + $35 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($30, $32, $35, 1);
      var $36=$oldBuffer;
      var $37=$36;
      __Z6b2FreePv($37);
      __label__ = 5; break;
    case 5: 
      var $39=$3;
      var $40=(($4+56)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=__Z5b2MinIiET_S0_S0_($39, $41);
      var $43=(($4+52)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($4+44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+$44*12)|0);
      var $48=(($47)|0);
      HEAP32[(($48)>>2)]=$42;
      var $49=$3;
      var $50=(($4+56)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=__Z5b2MaxIiET_S0_S0_($49, $51);
      var $53=(($4+52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($4+44)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+$54*12)|0);
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$52;
      var $59=(($4+52)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+1)|0);
      HEAP32[(($59)>>2)]=$61;
      $1=1;
      __label__ = 6; break;
    case 6: 
      var $63=$1;
      ;
      return $63;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold, $circleA, $xfA, $circleB, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $pA=__stackBase__;
      var $pB=__stackBase__+8;
      var $d=__stackBase__+16;
      var $distSqr;
      var $rA;
      var $rB;
      var $radius;
      $1=$manifold;
      $2=$circleA;
      $3=$xfA;
      $4=$circleB;
      $5=$xfB;
      var $6=$1;
      var $7=(($6+60)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$3;
      var $9=$2;
      var $10=(($9+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pA, $8, $10);
      var $11=$5;
      var $12=$4;
      var $13=(($12+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pB, $11, $13);
      __ZmiRK6b2Vec2S1_($d, $pB, $pA);
      var $14=__Z5b2DotRK6b2Vec2S1_($d, $d);
      $distSqr=$14;
      var $15=$2;
      var $16=$15;
      var $17=(($16+8)|0);
      var $18=HEAPF32[(($17)>>2)];
      $rA=$18;
      var $19=$4;
      var $20=$19;
      var $21=(($20+8)|0);
      var $22=HEAPF32[(($21)>>2)];
      $rB=$22;
      var $23=$rA;
      var $24=$rB;
      var $25=$23+$24;
      $radius=$25;
      var $26=$distSqr;
      var $27=$radius;
      var $28=$radius;
      var $29=$27*$28;
      var $30=$26 > $29;
      if ($30) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $33=$1;
      var $34=(($33+56)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$1;
      var $36=(($35+48)|0);
      var $37=$2;
      var $38=(($37+12)|0);
      var $39=$36;
      var $40=$38;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[(($39+4)>>2)]=HEAP32[(($40+4)>>2)];
      var $41=$1;
      var $42=(($41+40)|0);
      __ZN6b2Vec27SetZeroEv($42);
      var $43=$1;
      var $44=(($43+60)|0);
      HEAP32[(($44)>>2)]=1;
      var $45=$1;
      var $46=(($45)|0);
      var $47=(($46)|0);
      var $48=(($47)|0);
      var $49=$4;
      var $50=(($49+12)|0);
      var $51=$48;
      var $52=$50;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[(($51+4)>>2)]=HEAP32[(($52+4)>>2)];
      var $53=$1;
      var $54=(($53)|0);
      var $55=(($54)|0);
      var $56=(($55+16)|0);
      var $57=$56;
      HEAP32[(($57)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5b2MulRK11b2TransformRK6b2Vec2($agg_result, $T, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  var $x;
  var $y;
  $1=$T;
  $2=$v;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=(($4+4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=$6*$9;
  var $11=$1;
  var $12=(($11+8)|0);
  var $13=(($12)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$2;
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=$14*$17;
  var $19=$10-$18;
  var $20=$1;
  var $21=(($20)|0);
  var $22=(($21)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$19+$23;
  $x=$24;
  var $25=$1;
  var $26=(($25+8)|0);
  var $27=(($26)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$2;
  var $30=(($29)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$28*$31;
  var $33=$1;
  var $34=(($33+8)|0);
  var $35=(($34+4)|0);
  var $36=HEAPF32[(($35)>>2)];
  var $37=$2;
  var $38=(($37+4)|0);
  var $39=HEAPF32[(($38)>>2)];
  var $40=$36*$39;
  var $41=$32+$40;
  var $42=$1;
  var $43=(($42)|0);
  var $44=(($43+4)|0);
  var $45=HEAPF32[(($44)>>2)];
  var $46=$41+$45;
  $y=$46;
  var $47=$x;
  var $48=$y;
  __ZN6b2Vec2C1Eff($agg_result, $47, $48);
  ;
  return;
}


function __ZmiRK6b2Vec2S1_($agg_result, $a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5-$8;
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12-$15;
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  ;
  return;
}


function __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $polygonA, $xfA, $circleB, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $c=__stackBase__;
      var $cLocal=__stackBase__+8;
      var $normalIndex;
      var $separation;
      var $radius;
      var $vertexCount;
      var $vertices;
      var $normals;
      var $i;
      var $s;
      var $6=__stackBase__+16;
      var $vertIndex1;
      var $vertIndex2;
      var $v1=__stackBase__+24;
      var $v2=__stackBase__+32;
      var $7=__stackBase__+40;
      var $8=__stackBase__+48;
      var $u1;
      var $9=__stackBase__+56;
      var $10=__stackBase__+64;
      var $u2;
      var $11=__stackBase__+72;
      var $12=__stackBase__+80;
      var $13=__stackBase__+88;
      var $14=__stackBase__+96;
      var $faceCenter=__stackBase__+104;
      var $15=__stackBase__+112;
      var $separation1;
      var $16=__stackBase__+120;
      $1=$manifold;
      $2=$polygonA;
      $3=$xfA;
      $4=$circleB;
      $5=$xfB;
      var $17=$1;
      var $18=(($17+60)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=$5;
      var $20=$4;
      var $21=(($20+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($c, $19, $21);
      var $22=$3;
      __Z6b2MulTRK11b2TransformRK6b2Vec2($cLocal, $22, $c);
      $normalIndex=0;
      $separation=-3.4028234663852886e+38;
      var $23=$2;
      var $24=$23;
      var $25=(($24+8)|0);
      var $26=HEAPF32[(($25)>>2)];
      var $27=$4;
      var $28=$27;
      var $29=(($28+8)|0);
      var $30=HEAPF32[(($29)>>2)];
      var $31=$26+$30;
      $radius=$31;
      var $32=$2;
      var $33=(($32+148)|0);
      var $34=HEAP32[(($33)>>2)];
      $vertexCount=$34;
      var $35=$2;
      var $36=(($35+20)|0);
      var $37=(($36)|0);
      $vertices=$37;
      var $38=$2;
      var $39=(($38+84)|0);
      var $40=(($39)|0);
      $normals=$40;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $42=$i;
      var $43=$vertexCount;
      var $44=(($42)|0) < (($43)|0);
      if ($44) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $46=$i;
      var $47=$normals;
      var $48=(($47+($46<<3))|0);
      var $49=$i;
      var $50=$vertices;
      var $51=(($50+($49<<3))|0);
      __ZmiRK6b2Vec2S1_($6, $cLocal, $51);
      var $52=__Z5b2DotRK6b2Vec2S1_($48, $6);
      $s=$52;
      var $53=$s;
      var $54=$radius;
      var $55=$53 > $54;
      if ($55) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 26; break;
    case 5: 
      var $58=$s;
      var $59=$separation;
      var $60=$58 > $59;
      if ($60) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $62=$s;
      $separation=$62;
      var $63=$i;
      $normalIndex=$63;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $66=$i;
      var $67=(($66+1)|0);
      $i=$67;
      __label__ = 2; break;
    case 9: 
      var $69=$normalIndex;
      $vertIndex1=$69;
      var $70=$vertIndex1;
      var $71=(($70+1)|0);
      var $72=$vertexCount;
      var $73=(($71)|0) < (($72)|0);
      if ($73) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $75=$vertIndex1;
      var $76=(($75+1)|0);
      var $79 = $76;__label__ = 12; break;
    case 11: 
      var $79 = 0;__label__ = 12; break;
    case 12: 
      var $79;
      $vertIndex2=$79;
      var $80=$vertIndex1;
      var $81=$vertices;
      var $82=(($81+($80<<3))|0);
      var $83=$v1;
      var $84=$82;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[(($83+4)>>2)]=HEAP32[(($84+4)>>2)];
      var $85=$vertIndex2;
      var $86=$vertices;
      var $87=(($86+($85<<3))|0);
      var $88=$v2;
      var $89=$87;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($88)>>2)]=HEAP32[(($89)>>2)];HEAP32[(($88+4)>>2)]=HEAP32[(($89+4)>>2)];
      var $90=$separation;
      var $91=$90 < 1.1920928955078125e-7;
      if ($91) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $93=$1;
      var $94=(($93+60)|0);
      HEAP32[(($94)>>2)]=1;
      var $95=$1;
      var $96=(($95+56)|0);
      HEAP32[(($96)>>2)]=1;
      var $97=$1;
      var $98=(($97+40)|0);
      var $99=$normalIndex;
      var $100=$normals;
      var $101=(($100+($99<<3))|0);
      var $102=$98;
      var $103=$101;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[(($102+4)>>2)]=HEAP32[(($103+4)>>2)];
      var $104=$1;
      var $105=(($104+48)|0);
      __ZplRK6b2Vec2S1_($8, $v1, $v2);
      __ZmlfRK6b2Vec2($7, 0.5, $8);
      var $106=$105;
      var $107=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[(($106+4)>>2)]=HEAP32[(($107+4)>>2)];
      var $108=$1;
      var $109=(($108)|0);
      var $110=(($109)|0);
      var $111=(($110)|0);
      var $112=$4;
      var $113=(($112+12)|0);
      var $114=$111;
      var $115=$113;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[(($114+4)>>2)]=HEAP32[(($115+4)>>2)];
      var $116=$1;
      var $117=(($116)|0);
      var $118=(($117)|0);
      var $119=(($118+16)|0);
      var $120=$119;
      HEAP32[(($120)>>2)]=0;
      __label__ = 26; break;
    case 14: 
      __ZmiRK6b2Vec2S1_($9, $cLocal, $v1);
      __ZmiRK6b2Vec2S1_($10, $v2, $v1);
      var $122=__Z5b2DotRK6b2Vec2S1_($9, $10);
      $u1=$122;
      __ZmiRK6b2Vec2S1_($11, $cLocal, $v2);
      __ZmiRK6b2Vec2S1_($12, $v1, $v2);
      var $123=__Z5b2DotRK6b2Vec2S1_($11, $12);
      $u2=$123;
      var $124=$u1;
      var $125=$124 <= 0;
      if ($125) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $127=__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal, $v1);
      var $128=$radius;
      var $129=$radius;
      var $130=$128*$129;
      var $131=$127 > $130;
      if ($131) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 26; break;
    case 17: 
      var $134=$1;
      var $135=(($134+60)|0);
      HEAP32[(($135)>>2)]=1;
      var $136=$1;
      var $137=(($136+56)|0);
      HEAP32[(($137)>>2)]=1;
      var $138=$1;
      var $139=(($138+40)|0);
      __ZmiRK6b2Vec2S1_($13, $cLocal, $v1);
      var $140=$139;
      var $141=$13;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[(($140+4)>>2)]=HEAP32[(($141+4)>>2)];
      var $142=$1;
      var $143=(($142+40)|0);
      var $144=__ZN6b2Vec29NormalizeEv($143);
      var $145=$1;
      var $146=(($145+48)|0);
      var $147=$146;
      var $148=$v1;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($147)>>2)]=HEAP32[(($148)>>2)];HEAP32[(($147+4)>>2)]=HEAP32[(($148+4)>>2)];
      var $149=$1;
      var $150=(($149)|0);
      var $151=(($150)|0);
      var $152=(($151)|0);
      var $153=$4;
      var $154=(($153+12)|0);
      var $155=$152;
      var $156=$154;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($155)>>2)]=HEAP32[(($156)>>2)];HEAP32[(($155+4)>>2)]=HEAP32[(($156+4)>>2)];
      var $157=$1;
      var $158=(($157)|0);
      var $159=(($158)|0);
      var $160=(($159+16)|0);
      var $161=$160;
      HEAP32[(($161)>>2)]=0;
      __label__ = 26; break;
    case 18: 
      var $163=$u2;
      var $164=$163 <= 0;
      if ($164) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $166=__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal, $v2);
      var $167=$radius;
      var $168=$radius;
      var $169=$167*$168;
      var $170=$166 > $169;
      if ($170) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 26; break;
    case 21: 
      var $173=$1;
      var $174=(($173+60)|0);
      HEAP32[(($174)>>2)]=1;
      var $175=$1;
      var $176=(($175+56)|0);
      HEAP32[(($176)>>2)]=1;
      var $177=$1;
      var $178=(($177+40)|0);
      __ZmiRK6b2Vec2S1_($14, $cLocal, $v2);
      var $179=$178;
      var $180=$14;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[(($179+4)>>2)]=HEAP32[(($180+4)>>2)];
      var $181=$1;
      var $182=(($181+40)|0);
      var $183=__ZN6b2Vec29NormalizeEv($182);
      var $184=$1;
      var $185=(($184+48)|0);
      var $186=$185;
      var $187=$v2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($186)>>2)]=HEAP32[(($187)>>2)];HEAP32[(($186+4)>>2)]=HEAP32[(($187+4)>>2)];
      var $188=$1;
      var $189=(($188)|0);
      var $190=(($189)|0);
      var $191=(($190)|0);
      var $192=$4;
      var $193=(($192+12)|0);
      var $194=$191;
      var $195=$193;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($194)>>2)]=HEAP32[(($195)>>2)];HEAP32[(($194+4)>>2)]=HEAP32[(($195+4)>>2)];
      var $196=$1;
      var $197=(($196)|0);
      var $198=(($197)|0);
      var $199=(($198+16)|0);
      var $200=$199;
      HEAP32[(($200)>>2)]=0;
      __label__ = 25; break;
    case 22: 
      __ZplRK6b2Vec2S1_($15, $v1, $v2);
      __ZmlfRK6b2Vec2($faceCenter, 0.5, $15);
      __ZmiRK6b2Vec2S1_($16, $cLocal, $faceCenter);
      var $202=$vertIndex1;
      var $203=$normals;
      var $204=(($203+($202<<3))|0);
      var $205=__Z5b2DotRK6b2Vec2S1_($16, $204);
      $separation1=$205;
      var $206=$separation1;
      var $207=$radius;
      var $208=$206 > $207;
      if ($208) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 26; break;
    case 24: 
      var $211=$1;
      var $212=(($211+60)|0);
      HEAP32[(($212)>>2)]=1;
      var $213=$1;
      var $214=(($213+56)|0);
      HEAP32[(($214)>>2)]=1;
      var $215=$1;
      var $216=(($215+40)|0);
      var $217=$vertIndex1;
      var $218=$normals;
      var $219=(($218+($217<<3))|0);
      var $220=$216;
      var $221=$219;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($220)>>2)]=HEAP32[(($221)>>2)];HEAP32[(($220+4)>>2)]=HEAP32[(($221+4)>>2)];
      var $222=$1;
      var $223=(($222+48)|0);
      var $224=$223;
      var $225=$faceCenter;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($224)>>2)]=HEAP32[(($225)>>2)];HEAP32[(($224+4)>>2)]=HEAP32[(($225+4)>>2)];
      var $226=$1;
      var $227=(($226)|0);
      var $228=(($227)|0);
      var $229=(($228)|0);
      var $230=$4;
      var $231=(($230+12)|0);
      var $232=$229;
      var $233=$231;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($232)>>2)]=HEAP32[(($233)>>2)];HEAP32[(($232+4)>>2)]=HEAP32[(($233+4)>>2)];
      var $234=$1;
      var $235=(($234)|0);
      var $236=(($235)|0);
      var $237=(($236+16)|0);
      var $238=$237;
      HEAP32[(($238)>>2)]=0;
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2BroadPhaseC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=(($4)|0);
      FUNCTION_TABLE[__ZN13b2DynamicTreeC1Ev]($5);
      var $6=(($4+28)|0);
      HEAP32[(($6)>>2)]=0;
      var $7=(($4+48)|0);
      HEAP32[(($7)>>2)]=16;
      var $8=(($4+52)|0);
      HEAP32[(($8)>>2)]=0;
      var $9=(($4+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10*12)|0);
      var $12 = (function() { try { __THREW__ = false; return __Z7b2Alloci($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $14=$12;
      var $15=(($4+44)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=(($4+36)|0);
      HEAP32[(($16)>>2)]=16;
      var $17=(($4+40)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=(($4+36)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19<<2))|0);
      var $21 = (function() { try { __THREW__ = false; return __Z7b2Alloci($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $23=$21;
      var $24=(($4+32)|0);
      HEAP32[(($24)>>2)]=$23;
      ;
      return;
    case 4: 
      var $26=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $27=$26.f0;
      $2=$27;
      var $28=$26.f1;
      $3=$28;
      var $29=(($4)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN13b2DynamicTreeD1Ev]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $32=$2;
      var $33=$2;
      var $34=$3;
      var $35=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $33, tempValue);
      var $36=($35.f1 = $34, $35);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 7: 
      var $38=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2BroadPhaseD2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      (function() { try { __THREW__ = false; return __Z6b2FreePv($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=(($4+44)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      (function() { try { __THREW__ = false; return __Z6b2FreePv($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=(($4)|0);
      FUNCTION_TABLE[__ZN13b2DynamicTreeD1Ev]($13);
      ;
      return;
    case 4: 
      var $15=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $16=$15.f0;
      $2=$16;
      var $17=$15.f1;
      $3=$17;
      var $18=(($4)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN13b2DynamicTreeD1Ev]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $21=$2;
      var $22=$2;
      var $23=$3;
      var $24=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $22, tempValue);
      var $25=($24.f1 = $23, $24);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 7: 
      var $27=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Vec2C2Eff($this, $x, $y) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$x;
  $3=$y;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  HEAPF32[(($5)>>2)]=$6;
  var $7=(($4+4)|0);
  var $8=$3;
  HEAPF32[(($7)>>2)]=$8;
  ;
  return;
}


function __ZN6b2Vec23SetEff($this, $x_, $y_) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$x_;
  $3=$y_;
  var $4=$1;
  var $5=$2;
  var $6=(($4)|0);
  HEAPF32[(($6)>>2)]=$5;
  var $7=$3;
  var $8=(($4+4)|0);
  HEAPF32[(($8)>>2)]=$7;
  ;
  return;
}


function __Z6b2MulTRK11b2TransformRK6b2Vec2($agg_result, $T, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  var $px;
  var $py;
  var $x;
  var $y;
  $1=$T;
  $2=$v;
  var $3=$2;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$1;
  var $7=(($6)|0);
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=$5-$9;
  $px=$10;
  var $11=$2;
  var $12=(($11+4)|0);
  var $13=HEAPF32[(($12)>>2)];
  var $14=$1;
  var $15=(($14)|0);
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=$13-$17;
  $py=$18;
  var $19=$1;
  var $20=(($19+8)|0);
  var $21=(($20+4)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$px;
  var $24=$22*$23;
  var $25=$1;
  var $26=(($25+8)|0);
  var $27=(($26)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$py;
  var $30=$28*$29;
  var $31=$24+$30;
  $x=$31;
  var $32=$1;
  var $33=(($32+8)|0);
  var $34=(($33)|0);
  var $35=HEAPF32[(($34)>>2)];
  var $36=(-$35);
  var $37=$px;
  var $38=$36*$37;
  var $39=$1;
  var $40=(($39+8)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$py;
  var $44=$42*$43;
  var $45=$38+$44;
  $y=$45;
  var $46=$x;
  var $47=$y;
  __ZN6b2Vec2C1Eff($agg_result, $46, $47);
  ;
  return;
}


function __ZmlfRK6b2Vec2($agg_result, $s, $a) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$s;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$3*$6;
  var $8=$1;
  var $9=$2;
  var $10=(($9+4)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=$8*$11;
  __ZN6b2Vec2C1Eff($agg_result, $7, $12);
  ;
  return;
}


function __ZplRK6b2Vec2S1_($agg_result, $a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5+$8;
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12+$15;
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  ;
  return;
}


function __Z17b2DistanceSquaredRK6b2Vec2S1_($a, $b) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $c=__stackBase__;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  __ZmiRK6b2Vec2S1_($c, $3, $4);
  var $5=__Z5b2DotRK6b2Vec2S1_($c, $c);
  STACKTOP = __stackBase__;
  return $5;
}


function __ZN6b2Vec29NormalizeEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $length;
      var $invLength;
      $2=$this;
      var $3=$2;
      var $4=__ZNK6b2Vec26LengthEv($3);
      $length=$4;
      var $5=$length;
      var $6=$5 < 1.1920928955078125e-7;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $9=$length;
      var $10=1/$9;
      $invLength=$10;
      var $11=$invLength;
      var $12=(($3)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=$13*$11;
      HEAPF32[(($12)>>2)]=$14;
      var $15=$invLength;
      var $16=(($3+4)|0);
      var $17=HEAPF32[(($16)>>2)];
      var $18=$17*$15;
      HEAPF32[(($16)>>2)]=$18;
      var $19=$length;
      $1=$19;
      __label__ = 4; break;
    case 4: 
      var $21=$1;
      ;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Vec26LengthEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $2;
  $2=$this;
  var $3=$2;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=$5*$7;
  var $9=(($3+4)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=(($3+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$10*$12;
  var $14=$8+$13;
  var $15=$1;
  HEAPF32[(($1)>>2)]=$14;
  var $16=HEAPF32[(($1)>>2)];
  var $17=_sqrtf($16);
  var $18=$1;
  STACKTOP = __stackBase__;
  return $17;
}


function __ZN6b2Vec2C1Eff($this, $x, $y) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$x;
  $3=$y;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Vec2C2Eff($4, $5, $6);
  ;
  return;
}


function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edgeA, $xfA, $circleB, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 212; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $Q=__stackBase__;
      var $6=__stackBase__+8;
      var $A=__stackBase__+16;
      var $B=__stackBase__+24;
      var $e=__stackBase__+32;
      var $u;
      var $7=__stackBase__+40;
      var $v;
      var $8=__stackBase__+48;
      var $radius;
      var $cf=__stackBase__+56;
      var $P=__stackBase__+60;
      var $d=__stackBase__+68;
      var $dd;
      var $A1=__stackBase__+76;
      var $B1=__stackBase__+84;
      var $e1=__stackBase__+92;
      var $u1;
      var $9=__stackBase__+100;
      var $P1=__stackBase__+108;
      var $d2=__stackBase__+116;
      var $dd3;
      var $B2=__stackBase__+124;
      var $A2=__stackBase__+132;
      var $e2=__stackBase__+140;
      var $v2;
      var $10=__stackBase__+148;
      var $den;
      var $P4=__stackBase__+156;
      var $11=__stackBase__+164;
      var $12=__stackBase__+172;
      var $13=__stackBase__+180;
      var $d5=__stackBase__+188;
      var $dd6;
      var $n=__stackBase__+196;
      var $14=__stackBase__+204;
      $1=$manifold;
      $2=$edgeA;
      $3=$xfA;
      $4=$circleB;
      $5=$xfB;
      var $15=$1;
      var $16=(($15+60)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=$3;
      var $18=$5;
      var $19=$4;
      var $20=(($19+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $18, $20);
      __Z6b2MulTRK11b2TransformRK6b2Vec2($Q, $17, $6);
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=$A;
      var $24=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[(($23+4)>>2)]=HEAP32[(($24+4)>>2)];
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=$B;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      __ZmiRK6b2Vec2S1_($e, $B, $A);
      __ZmiRK6b2Vec2S1_($7, $B, $Q);
      var $29=__Z5b2DotRK6b2Vec2S1_($e, $7);
      $u=$29;
      __ZmiRK6b2Vec2S1_($8, $Q, $A);
      var $30=__Z5b2DotRK6b2Vec2S1_($e, $8);
      $v=$30;
      var $31=$2;
      var $32=$31;
      var $33=(($32+8)|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=$4;
      var $36=$35;
      var $37=(($36+8)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=$34+$38;
      $radius=$39;
      var $40=(($cf+1)|0);
      HEAP8[($40)]=0;
      var $41=(($cf+3)|0);
      HEAP8[($41)]=0;
      var $42=$v;
      var $43=$42 <= 0;
      if ($43) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $45=$P;
      var $46=$A;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[(($45+4)>>2)]=HEAP32[(($46+4)>>2)];
      __ZmiRK6b2Vec2S1_($d, $Q, $P);
      var $47=__Z5b2DotRK6b2Vec2S1_($d, $d);
      $dd=$47;
      var $48=$dd;
      var $49=$radius;
      var $50=$radius;
      var $51=$49*$50;
      var $52=$48 > $51;
      if ($52) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 25; break;
    case 4: 
      var $55=$2;
      var $56=(($55+44)|0);
      var $57=HEAP8[($56)];
      var $58=(($57) & 1);
      if ($58) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $60=$2;
      var $61=(($60+28)|0);
      var $62=$A1;
      var $63=$61;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[(($62+4)>>2)]=HEAP32[(($63+4)>>2)];
      var $64=$B1;
      var $65=$A;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[(($64+4)>>2)]=HEAP32[(($65+4)>>2)];
      __ZmiRK6b2Vec2S1_($e1, $B1, $A1);
      __ZmiRK6b2Vec2S1_($9, $B1, $Q);
      var $66=__Z5b2DotRK6b2Vec2S1_($e1, $9);
      $u1=$66;
      var $67=$u1;
      var $68=$67 > 0;
      if ($68) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 25; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $72=(($cf)|0);
      HEAP8[($72)]=0;
      var $73=(($cf+2)|0);
      HEAP8[($73)]=0;
      var $74=$1;
      var $75=(($74+60)|0);
      HEAP32[(($75)>>2)]=1;
      var $76=$1;
      var $77=(($76+56)|0);
      HEAP32[(($77)>>2)]=0;
      var $78=$1;
      var $79=(($78+40)|0);
      __ZN6b2Vec27SetZeroEv($79);
      var $80=$1;
      var $81=(($80+48)|0);
      var $82=$81;
      var $83=$P;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[(($82+4)>>2)]=HEAP32[(($83+4)>>2)];
      var $84=$1;
      var $85=(($84)|0);
      var $86=(($85)|0);
      var $87=(($86+16)|0);
      var $88=$87;
      HEAP32[(($88)>>2)]=0;
      var $89=$1;
      var $90=(($89)|0);
      var $91=(($90)|0);
      var $92=(($91+16)|0);
      var $93=$92;
      var $94=$93;
      var $95=$cf;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($94)]=HEAP8[($95)];HEAP8[($94+1)]=HEAP8[($95+1)];HEAP8[($94+2)]=HEAP8[($95+2)];HEAP8[($94+3)]=HEAP8[($95+3)];
      var $96=$1;
      var $97=(($96)|0);
      var $98=(($97)|0);
      var $99=(($98)|0);
      var $100=$4;
      var $101=(($100+12)|0);
      var $102=$99;
      var $103=$101;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[(($102+4)>>2)]=HEAP32[(($103+4)>>2)];
      __label__ = 25; break;
    case 9: 
      var $105=$u;
      var $106=$105 <= 0;
      if ($106) { __label__ = 10; break; } else { __label__ = 17; break; }
    case 10: 
      var $108=$P1;
      var $109=$B;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[(($108+4)>>2)]=HEAP32[(($109+4)>>2)];
      __ZmiRK6b2Vec2S1_($d2, $Q, $P1);
      var $110=__Z5b2DotRK6b2Vec2S1_($d2, $d2);
      $dd3=$110;
      var $111=$dd3;
      var $112=$radius;
      var $113=$radius;
      var $114=$112*$113;
      var $115=$111 > $114;
      if ($115) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 25; break;
    case 12: 
      var $118=$2;
      var $119=(($118+45)|0);
      var $120=HEAP8[($119)];
      var $121=(($120) & 1);
      if ($121) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $123=$2;
      var $124=(($123+36)|0);
      var $125=$B2;
      var $126=$124;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($125)>>2)]=HEAP32[(($126)>>2)];HEAP32[(($125+4)>>2)]=HEAP32[(($126+4)>>2)];
      var $127=$A2;
      var $128=$B;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($127)>>2)]=HEAP32[(($128)>>2)];HEAP32[(($127+4)>>2)]=HEAP32[(($128+4)>>2)];
      __ZmiRK6b2Vec2S1_($e2, $B2, $A2);
      __ZmiRK6b2Vec2S1_($10, $Q, $A2);
      var $129=__Z5b2DotRK6b2Vec2S1_($e2, $10);
      $v2=$129;
      var $130=$v2;
      var $131=$130 > 0;
      if ($131) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 25; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $135=(($cf)|0);
      HEAP8[($135)]=1;
      var $136=(($cf+2)|0);
      HEAP8[($136)]=0;
      var $137=$1;
      var $138=(($137+60)|0);
      HEAP32[(($138)>>2)]=1;
      var $139=$1;
      var $140=(($139+56)|0);
      HEAP32[(($140)>>2)]=0;
      var $141=$1;
      var $142=(($141+40)|0);
      __ZN6b2Vec27SetZeroEv($142);
      var $143=$1;
      var $144=(($143+48)|0);
      var $145=$144;
      var $146=$P1;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[(($145+4)>>2)]=HEAP32[(($146+4)>>2)];
      var $147=$1;
      var $148=(($147)|0);
      var $149=(($148)|0);
      var $150=(($149+16)|0);
      var $151=$150;
      HEAP32[(($151)>>2)]=0;
      var $152=$1;
      var $153=(($152)|0);
      var $154=(($153)|0);
      var $155=(($154+16)|0);
      var $156=$155;
      var $157=$156;
      var $158=$cf;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($157)]=HEAP8[($158)];HEAP8[($157+1)]=HEAP8[($158+1)];HEAP8[($157+2)]=HEAP8[($158+2)];HEAP8[($157+3)]=HEAP8[($158+3)];
      var $159=$1;
      var $160=(($159)|0);
      var $161=(($160)|0);
      var $162=(($161)|0);
      var $163=$4;
      var $164=(($163+12)|0);
      var $165=$162;
      var $166=$164;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[(($165+4)>>2)]=HEAP32[(($166+4)>>2)];
      __label__ = 25; break;
    case 17: 
      var $168=__Z5b2DotRK6b2Vec2S1_($e, $e);
      $den=$168;
      var $169=$den;
      var $170=$169 > 0;
      if ($170) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      ___assert_func(((STRING_TABLE.__str)|0), 127, ((STRING_TABLE.___PRETTY_FUNCTION____Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_)|0), ((STRING_TABLE.__str1)|0));
      __label__ = 20; break;
    case 20: 
      var $174=$den;
      var $175=1/$174;
      var $176=$u;
      __ZmlfRK6b2Vec2($12, $176, $A);
      var $177=$v;
      __ZmlfRK6b2Vec2($13, $177, $B);
      __ZplRK6b2Vec2S1_($11, $12, $13);
      __ZmlfRK6b2Vec2($P4, $175, $11);
      __ZmiRK6b2Vec2S1_($d5, $Q, $P4);
      var $178=__Z5b2DotRK6b2Vec2S1_($d5, $d5);
      $dd6=$178;
      var $179=$dd6;
      var $180=$radius;
      var $181=$radius;
      var $182=$180*$181;
      var $183=$179 > $182;
      if ($183) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      __label__ = 25; break;
    case 22: 
      var $186=(($e+4)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=(-$187);
      var $189=(($e)|0);
      var $190=HEAPF32[(($189)>>2)];
      __ZN6b2Vec2C1Eff($n, $188, $190);
      __ZmiRK6b2Vec2S1_($14, $Q, $A);
      var $191=__Z5b2DotRK6b2Vec2S1_($n, $14);
      var $192=$191 < 0;
      if ($192) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $194=(($n)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=(-$195);
      var $197=(($n+4)|0);
      var $198=HEAPF32[(($197)>>2)];
      var $199=(-$198);
      __ZN6b2Vec23SetEff($n, $196, $199);
      __label__ = 24; break;
    case 24: 
      var $201=__ZN6b2Vec29NormalizeEv($n);
      var $202=(($cf)|0);
      HEAP8[($202)]=0;
      var $203=(($cf+2)|0);
      HEAP8[($203)]=1;
      var $204=$1;
      var $205=(($204+60)|0);
      HEAP32[(($205)>>2)]=1;
      var $206=$1;
      var $207=(($206+56)|0);
      HEAP32[(($207)>>2)]=1;
      var $208=$1;
      var $209=(($208+40)|0);
      var $210=$209;
      var $211=$n;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($210)>>2)]=HEAP32[(($211)>>2)];HEAP32[(($210+4)>>2)]=HEAP32[(($211+4)>>2)];
      var $212=$1;
      var $213=(($212+48)|0);
      var $214=$213;
      var $215=$A;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($214)>>2)]=HEAP32[(($215)>>2)];HEAP32[(($214+4)>>2)]=HEAP32[(($215+4)>>2)];
      var $216=$1;
      var $217=(($216)|0);
      var $218=(($217)|0);
      var $219=(($218+16)|0);
      var $220=$219;
      HEAP32[(($220)>>2)]=0;
      var $221=$1;
      var $222=(($221)|0);
      var $223=(($222)|0);
      var $224=(($223+16)|0);
      var $225=$224;
      var $226=$225;
      var $227=$cf;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($226)]=HEAP8[($227)];HEAP8[($226+1)]=HEAP8[($227+1)];HEAP8[($226+2)]=HEAP8[($227+2)];HEAP8[($226+3)]=HEAP8[($227+3)];
      var $228=$1;
      var $229=(($228)|0);
      var $230=(($229)|0);
      var $231=(($230)|0);
      var $232=$4;
      var $233=(($232+12)|0);
      var $234=$231;
      var $235=$233;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($234)>>2)]=HEAP32[(($235)>>2)];HEAP32[(($234+4)>>2)]=HEAP32[(($235+4)>>2)];
      __label__ = 25; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($this, $manifold, $edgeA, $xfA, $polygonB, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 500; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7=__stackBase__;
      var $8=__stackBase__+16;
      var $hasVertex0;
      var $hasVertex3;
      var $edge1=__stackBase__+24;
      var $offset1;
      var $9=__stackBase__+32;
      var $offset0;
      var $offset2;
      var $convex1;
      var $convex2;
      var $edge0=__stackBase__+40;
      var $10=__stackBase__+48;
      var $edge2=__stackBase__+56;
      var $11=__stackBase__+64;
      var $12=__stackBase__+72;
      var $13=__stackBase__+80;
      var $14=__stackBase__+88;
      var $15=__stackBase__+96;
      var $16=__stackBase__+104;
      var $17=__stackBase__+112;
      var $18=__stackBase__+120;
      var $19=__stackBase__+128;
      var $20=__stackBase__+136;
      var $21=__stackBase__+144;
      var $22=__stackBase__+152;
      var $23=__stackBase__+160;
      var $24=__stackBase__+168;
      var $25=__stackBase__+176;
      var $26=__stackBase__+184;
      var $27=__stackBase__+192;
      var $28=__stackBase__+200;
      var $29=__stackBase__+208;
      var $30=__stackBase__+216;
      var $31=__stackBase__+224;
      var $32=__stackBase__+232;
      var $33=__stackBase__+240;
      var $34=__stackBase__+248;
      var $35=__stackBase__+256;
      var $36=__stackBase__+264;
      var $37=__stackBase__+272;
      var $38=__stackBase__+280;
      var $i;
      var $39=__stackBase__+288;
      var $40=__stackBase__+296;
      var $edgeAxis=__stackBase__+304;
      var $polygonAxis=__stackBase__+316;
      var $k_relativeTol;
      var $k_absoluteTol;
      var $primaryAxis=__stackBase__+328;
      var $ie=__stackBase__+340;
      var $rf=__stackBase__+364;
      var $bestIndex;
      var $bestValue;
      var $i1;
      var $value;
      var $i12;
      var $i2;
      var $41=__stackBase__+420;
      var $42=__stackBase__+428;
      var $clipPoints1=__stackBase__+436;
      var $clipPoints2=__stackBase__+460;
      var $np;
      var $pointCount;
      var $i3;
      var $separation;
      var $43=__stackBase__+484;
      var $cp;
      var $44=__stackBase__+492;
      $1=$this;
      $2=$manifold;
      $3=$edgeA;
      $4=$xfA;
      $5=$polygonB;
      $6=$xfB;
      var $45=$1;
      var $46=(($45+132)|0);
      var $47=$4;
      var $48=$6;
      __Z6b2MulTRK11b2TransformS1_($7, $47, $48);
      var $49=$46;
      var $50=$7;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[(($49+4)>>2)]=HEAP32[(($50+4)>>2)];HEAP32[(($49+8)>>2)]=HEAP32[(($50+8)>>2)];HEAP32[(($49+12)>>2)]=HEAP32[(($50+12)>>2)];
      var $51=(($45+148)|0);
      var $52=(($45+132)|0);
      var $53=$5;
      var $54=(($53+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $52, $54);
      var $55=$51;
      var $56=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[(($55+4)>>2)]=HEAP32[(($56+4)>>2)];
      var $57=(($45+156)|0);
      var $58=$3;
      var $59=(($58+28)|0);
      var $60=$57;
      var $61=$59;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[(($60+4)>>2)]=HEAP32[(($61+4)>>2)];
      var $62=(($45+164)|0);
      var $63=$3;
      var $64=(($63+12)|0);
      var $65=$62;
      var $66=$64;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[(($65+4)>>2)]=HEAP32[(($66+4)>>2)];
      var $67=(($45+172)|0);
      var $68=$3;
      var $69=(($68+20)|0);
      var $70=$67;
      var $71=$69;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[(($70+4)>>2)]=HEAP32[(($71+4)>>2)];
      var $72=(($45+180)|0);
      var $73=$3;
      var $74=(($73+36)|0);
      var $75=$72;
      var $76=$74;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[(($75+4)>>2)]=HEAP32[(($76+4)>>2)];
      var $77=$3;
      var $78=(($77+44)|0);
      var $79=HEAP8[($78)];
      var $80=(($79) & 1);
      var $81=(($80)&1);
      $hasVertex0=$81;
      var $82=$3;
      var $83=(($82+45)|0);
      var $84=HEAP8[($83)];
      var $85=(($84) & 1);
      var $86=(($85)&1);
      $hasVertex3=$86;
      var $87=(($45+172)|0);
      var $88=(($45+164)|0);
      __ZmiRK6b2Vec2S1_($edge1, $87, $88);
      var $89=__ZN6b2Vec29NormalizeEv($edge1);
      var $90=(($45+196)|0);
      var $91=(($edge1+4)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=(($edge1)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=(-$94);
      __ZN6b2Vec23SetEff($90, $92, $95);
      var $96=(($45+196)|0);
      var $97=(($45+148)|0);
      var $98=(($45+164)|0);
      __ZmiRK6b2Vec2S1_($9, $97, $98);
      var $99=__Z5b2DotRK6b2Vec2S1_($96, $9);
      $offset1=$99;
      $offset0=0;
      $offset2=0;
      $convex1=0;
      $convex2=0;
      var $100=$hasVertex0;
      var $101=(($100) & 1);
      if ($101) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $103=(($45+164)|0);
      var $104=(($45+156)|0);
      __ZmiRK6b2Vec2S1_($edge0, $103, $104);
      var $105=__ZN6b2Vec29NormalizeEv($edge0);
      var $106=(($45+188)|0);
      var $107=(($edge0+4)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=(($edge0)|0);
      var $110=HEAPF32[(($109)>>2)];
      var $111=(-$110);
      __ZN6b2Vec23SetEff($106, $108, $111);
      var $112=__Z7b2CrossRK6b2Vec2S1_($edge0, $edge1);
      var $113=$112 >= 0;
      var $114=(($113)&1);
      $convex1=$114;
      var $115=(($45+188)|0);
      var $116=(($45+148)|0);
      var $117=(($45+156)|0);
      __ZmiRK6b2Vec2S1_($10, $116, $117);
      var $118=__Z5b2DotRK6b2Vec2S1_($115, $10);
      $offset0=$118;
      __label__ = 3; break;
    case 3: 
      var $120=$hasVertex3;
      var $121=(($120) & 1);
      if ($121) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $123=(($45+180)|0);
      var $124=(($45+172)|0);
      __ZmiRK6b2Vec2S1_($edge2, $123, $124);
      var $125=__ZN6b2Vec29NormalizeEv($edge2);
      var $126=(($45+204)|0);
      var $127=(($edge2+4)|0);
      var $128=HEAPF32[(($127)>>2)];
      var $129=(($edge2)|0);
      var $130=HEAPF32[(($129)>>2)];
      var $131=(-$130);
      __ZN6b2Vec23SetEff($126, $128, $131);
      var $132=__Z7b2CrossRK6b2Vec2S1_($edge1, $edge2);
      var $133=$132 > 0;
      var $134=(($133)&1);
      $convex2=$134;
      var $135=(($45+204)|0);
      var $136=(($45+148)|0);
      var $137=(($45+172)|0);
      __ZmiRK6b2Vec2S1_($11, $136, $137);
      var $138=__Z5b2DotRK6b2Vec2S1_($135, $11);
      $offset2=$138;
      __label__ = 5; break;
    case 5: 
      var $140=$hasVertex0;
      var $141=(($140) & 1);
      if ($141) { __label__ = 6; break; } else { __label__ = 44; break; }
    case 6: 
      var $143=$hasVertex3;
      var $144=(($143) & 1);
      if ($144) { __label__ = 7; break; } else { __label__ = 44; break; }
    case 7: 
      var $146=$convex1;
      var $147=(($146) & 1);
      if ($147) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 8: 
      var $149=$convex2;
      var $150=(($149) & 1);
      if ($150) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: 
      var $152=$offset0;
      var $153=$152 >= 0;
      if ($153) { var $161 = 1;__label__ = 12; break; } else { __label__ = 10; break; }
    case 10: 
      var $155=$offset1;
      var $156=$155 >= 0;
      if ($156) { var $161 = 1;__label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $158=$offset2;
      var $159=$158 >= 0;
      var $161 = $159;__label__ = 12; break;
    case 12: 
      var $161;
      var $162=(($45+248)|0);
      var $163=(($161)&1);
      HEAP8[($162)]=$163;
      var $164=(($45+248)|0);
      var $165=HEAP8[($164)];
      var $166=(($165) & 1);
      if ($166) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $168=(($45+212)|0);
      var $169=(($45+196)|0);
      var $170=$168;
      var $171=$169;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($170)>>2)]=HEAP32[(($171)>>2)];HEAP32[(($170+4)>>2)]=HEAP32[(($171+4)>>2)];
      var $172=(($45+228)|0);
      var $173=(($45+188)|0);
      var $174=$172;
      var $175=$173;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($174)>>2)]=HEAP32[(($175)>>2)];HEAP32[(($174+4)>>2)]=HEAP32[(($175+4)>>2)];
      var $176=(($45+236)|0);
      var $177=(($45+204)|0);
      var $178=$176;
      var $179=$177;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($178)>>2)]=HEAP32[(($179)>>2)];HEAP32[(($178+4)>>2)]=HEAP32[(($179+4)>>2)];
      __label__ = 15; break;
    case 14: 
      var $181=(($45+212)|0);
      var $182=(($45+196)|0);
      __ZNK6b2Vec2ngEv($12, $182);
      var $183=$181;
      var $184=$12;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[(($183+4)>>2)]=HEAP32[(($184+4)>>2)];
      var $185=(($45+228)|0);
      var $186=(($45+196)|0);
      __ZNK6b2Vec2ngEv($13, $186);
      var $187=$185;
      var $188=$13;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($187)>>2)]=HEAP32[(($188)>>2)];HEAP32[(($187+4)>>2)]=HEAP32[(($188+4)>>2)];
      var $189=(($45+236)|0);
      var $190=(($45+196)|0);
      __ZNK6b2Vec2ngEv($14, $190);
      var $191=$189;
      var $192=$14;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($191)>>2)]=HEAP32[(($192)>>2)];HEAP32[(($191+4)>>2)]=HEAP32[(($192+4)>>2)];
      __label__ = 15; break;
    case 15: 
      __label__ = 43; break;
    case 16: 
      var $195=$convex1;
      var $196=(($195) & 1);
      if ($196) { __label__ = 17; break; } else { __label__ = 25; break; }
    case 17: 
      var $198=$offset0;
      var $199=$198 >= 0;
      if ($199) { var $209 = 1;__label__ = 21; break; } else { __label__ = 18; break; }
    case 18: 
      var $201=$offset1;
      var $202=$201 >= 0;
      if ($202) { __label__ = 19; break; } else { var $207 = 0;__label__ = 20; break; }
    case 19: 
      var $204=$offset2;
      var $205=$204 >= 0;
      var $207 = $205;__label__ = 20; break;
    case 20: 
      var $207;
      var $209 = $207;__label__ = 21; break;
    case 21: 
      var $209;
      var $210=(($45+248)|0);
      var $211=(($209)&1);
      HEAP8[($210)]=$211;
      var $212=(($45+248)|0);
      var $213=HEAP8[($212)];
      var $214=(($213) & 1);
      if ($214) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $216=(($45+212)|0);
      var $217=(($45+196)|0);
      var $218=$216;
      var $219=$217;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($218)>>2)]=HEAP32[(($219)>>2)];HEAP32[(($218+4)>>2)]=HEAP32[(($219+4)>>2)];
      var $220=(($45+228)|0);
      var $221=(($45+188)|0);
      var $222=$220;
      var $223=$221;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($222)>>2)]=HEAP32[(($223)>>2)];HEAP32[(($222+4)>>2)]=HEAP32[(($223+4)>>2)];
      var $224=(($45+236)|0);
      var $225=(($45+196)|0);
      var $226=$224;
      var $227=$225;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($226)>>2)]=HEAP32[(($227)>>2)];HEAP32[(($226+4)>>2)]=HEAP32[(($227+4)>>2)];
      __label__ = 24; break;
    case 23: 
      var $229=(($45+212)|0);
      var $230=(($45+196)|0);
      __ZNK6b2Vec2ngEv($15, $230);
      var $231=$229;
      var $232=$15;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($231)>>2)]=HEAP32[(($232)>>2)];HEAP32[(($231+4)>>2)]=HEAP32[(($232+4)>>2)];
      var $233=(($45+228)|0);
      var $234=(($45+204)|0);
      __ZNK6b2Vec2ngEv($16, $234);
      var $235=$233;
      var $236=$16;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($235)>>2)]=HEAP32[(($236)>>2)];HEAP32[(($235+4)>>2)]=HEAP32[(($236+4)>>2)];
      var $237=(($45+236)|0);
      var $238=(($45+196)|0);
      __ZNK6b2Vec2ngEv($17, $238);
      var $239=$237;
      var $240=$17;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($239)>>2)]=HEAP32[(($240)>>2)];HEAP32[(($239+4)>>2)]=HEAP32[(($240+4)>>2)];
      __label__ = 24; break;
    case 24: 
      __label__ = 42; break;
    case 25: 
      var $243=$convex2;
      var $244=(($243) & 1);
      if ($244) { __label__ = 26; break; } else { __label__ = 34; break; }
    case 26: 
      var $246=$offset2;
      var $247=$246 >= 0;
      if ($247) { var $257 = 1;__label__ = 30; break; } else { __label__ = 27; break; }
    case 27: 
      var $249=$offset0;
      var $250=$249 >= 0;
      if ($250) { __label__ = 28; break; } else { var $255 = 0;__label__ = 29; break; }
    case 28: 
      var $252=$offset1;
      var $253=$252 >= 0;
      var $255 = $253;__label__ = 29; break;
    case 29: 
      var $255;
      var $257 = $255;__label__ = 30; break;
    case 30: 
      var $257;
      var $258=(($45+248)|0);
      var $259=(($257)&1);
      HEAP8[($258)]=$259;
      var $260=(($45+248)|0);
      var $261=HEAP8[($260)];
      var $262=(($261) & 1);
      if ($262) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $264=(($45+212)|0);
      var $265=(($45+196)|0);
      var $266=$264;
      var $267=$265;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($266)>>2)]=HEAP32[(($267)>>2)];HEAP32[(($266+4)>>2)]=HEAP32[(($267+4)>>2)];
      var $268=(($45+228)|0);
      var $269=(($45+196)|0);
      var $270=$268;
      var $271=$269;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($270)>>2)]=HEAP32[(($271)>>2)];HEAP32[(($270+4)>>2)]=HEAP32[(($271+4)>>2)];
      var $272=(($45+236)|0);
      var $273=(($45+204)|0);
      var $274=$272;
      var $275=$273;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($274)>>2)]=HEAP32[(($275)>>2)];HEAP32[(($274+4)>>2)]=HEAP32[(($275+4)>>2)];
      __label__ = 33; break;
    case 32: 
      var $277=(($45+212)|0);
      var $278=(($45+196)|0);
      __ZNK6b2Vec2ngEv($18, $278);
      var $279=$277;
      var $280=$18;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($279)>>2)]=HEAP32[(($280)>>2)];HEAP32[(($279+4)>>2)]=HEAP32[(($280+4)>>2)];
      var $281=(($45+228)|0);
      var $282=(($45+196)|0);
      __ZNK6b2Vec2ngEv($19, $282);
      var $283=$281;
      var $284=$19;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($283)>>2)]=HEAP32[(($284)>>2)];HEAP32[(($283+4)>>2)]=HEAP32[(($284+4)>>2)];
      var $285=(($45+236)|0);
      var $286=(($45+188)|0);
      __ZNK6b2Vec2ngEv($20, $286);
      var $287=$285;
      var $288=$20;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($287)>>2)]=HEAP32[(($288)>>2)];HEAP32[(($287+4)>>2)]=HEAP32[(($288+4)>>2)];
      __label__ = 33; break;
    case 33: 
      __label__ = 41; break;
    case 34: 
      var $291=$offset0;
      var $292=$291 >= 0;
      if ($292) { __label__ = 35; break; } else { var $300 = 0;__label__ = 37; break; }
    case 35: 
      var $294=$offset1;
      var $295=$294 >= 0;
      if ($295) { __label__ = 36; break; } else { var $300 = 0;__label__ = 37; break; }
    case 36: 
      var $297=$offset2;
      var $298=$297 >= 0;
      var $300 = $298;__label__ = 37; break;
    case 37: 
      var $300;
      var $301=(($45+248)|0);
      var $302=(($300)&1);
      HEAP8[($301)]=$302;
      var $303=(($45+248)|0);
      var $304=HEAP8[($303)];
      var $305=(($304) & 1);
      if ($305) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $307=(($45+212)|0);
      var $308=(($45+196)|0);
      var $309=$307;
      var $310=$308;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($309)>>2)]=HEAP32[(($310)>>2)];HEAP32[(($309+4)>>2)]=HEAP32[(($310+4)>>2)];
      var $311=(($45+228)|0);
      var $312=(($45+196)|0);
      var $313=$311;
      var $314=$312;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($313)>>2)]=HEAP32[(($314)>>2)];HEAP32[(($313+4)>>2)]=HEAP32[(($314+4)>>2)];
      var $315=(($45+236)|0);
      var $316=(($45+196)|0);
      var $317=$315;
      var $318=$316;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($317)>>2)]=HEAP32[(($318)>>2)];HEAP32[(($317+4)>>2)]=HEAP32[(($318+4)>>2)];
      __label__ = 40; break;
    case 39: 
      var $320=(($45+212)|0);
      var $321=(($45+196)|0);
      __ZNK6b2Vec2ngEv($21, $321);
      var $322=$320;
      var $323=$21;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($322)>>2)]=HEAP32[(($323)>>2)];HEAP32[(($322+4)>>2)]=HEAP32[(($323+4)>>2)];
      var $324=(($45+228)|0);
      var $325=(($45+204)|0);
      __ZNK6b2Vec2ngEv($22, $325);
      var $326=$324;
      var $327=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($326)>>2)]=HEAP32[(($327)>>2)];HEAP32[(($326+4)>>2)]=HEAP32[(($327+4)>>2)];
      var $328=(($45+236)|0);
      var $329=(($45+188)|0);
      __ZNK6b2Vec2ngEv($23, $329);
      var $330=$328;
      var $331=$23;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($330)>>2)]=HEAP32[(($331)>>2)];HEAP32[(($330+4)>>2)]=HEAP32[(($331+4)>>2)];
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 80; break;
    case 44: 
      var $337=$hasVertex0;
      var $338=(($337) & 1);
      if ($338) { __label__ = 45; break; } else { __label__ = 59; break; }
    case 45: 
      var $340=$convex1;
      var $341=(($340) & 1);
      if ($341) { __label__ = 46; break; } else { __label__ = 52; break; }
    case 46: 
      var $343=$offset0;
      var $344=$343 >= 0;
      if ($344) { var $349 = 1;__label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $346=$offset1;
      var $347=$346 >= 0;
      var $349 = $347;__label__ = 48; break;
    case 48: 
      var $349;
      var $350=(($45+248)|0);
      var $351=(($349)&1);
      HEAP8[($350)]=$351;
      var $352=(($45+248)|0);
      var $353=HEAP8[($352)];
      var $354=(($353) & 1);
      if ($354) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $356=(($45+212)|0);
      var $357=(($45+196)|0);
      var $358=$356;
      var $359=$357;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($358)>>2)]=HEAP32[(($359)>>2)];HEAP32[(($358+4)>>2)]=HEAP32[(($359+4)>>2)];
      var $360=(($45+228)|0);
      var $361=(($45+188)|0);
      var $362=$360;
      var $363=$361;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($362)>>2)]=HEAP32[(($363)>>2)];HEAP32[(($362+4)>>2)]=HEAP32[(($363+4)>>2)];
      var $364=(($45+236)|0);
      var $365=(($45+196)|0);
      __ZNK6b2Vec2ngEv($24, $365);
      var $366=$364;
      var $367=$24;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($366)>>2)]=HEAP32[(($367)>>2)];HEAP32[(($366+4)>>2)]=HEAP32[(($367+4)>>2)];
      __label__ = 51; break;
    case 50: 
      var $369=(($45+212)|0);
      var $370=(($45+196)|0);
      __ZNK6b2Vec2ngEv($25, $370);
      var $371=$369;
      var $372=$25;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($371)>>2)]=HEAP32[(($372)>>2)];HEAP32[(($371+4)>>2)]=HEAP32[(($372+4)>>2)];
      var $373=(($45+228)|0);
      var $374=(($45+196)|0);
      var $375=$373;
      var $376=$374;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($375)>>2)]=HEAP32[(($376)>>2)];HEAP32[(($375+4)>>2)]=HEAP32[(($376+4)>>2)];
      var $377=(($45+236)|0);
      var $378=(($45+196)|0);
      __ZNK6b2Vec2ngEv($26, $378);
      var $379=$377;
      var $380=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($379)>>2)]=HEAP32[(($380)>>2)];HEAP32[(($379+4)>>2)]=HEAP32[(($380+4)>>2)];
      __label__ = 51; break;
    case 51: 
      __label__ = 58; break;
    case 52: 
      var $383=$offset0;
      var $384=$383 >= 0;
      if ($384) { __label__ = 53; break; } else { var $389 = 0;__label__ = 54; break; }
    case 53: 
      var $386=$offset1;
      var $387=$386 >= 0;
      var $389 = $387;__label__ = 54; break;
    case 54: 
      var $389;
      var $390=(($45+248)|0);
      var $391=(($389)&1);
      HEAP8[($390)]=$391;
      var $392=(($45+248)|0);
      var $393=HEAP8[($392)];
      var $394=(($393) & 1);
      if ($394) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $396=(($45+212)|0);
      var $397=(($45+196)|0);
      var $398=$396;
      var $399=$397;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($398)>>2)]=HEAP32[(($399)>>2)];HEAP32[(($398+4)>>2)]=HEAP32[(($399+4)>>2)];
      var $400=(($45+228)|0);
      var $401=(($45+196)|0);
      var $402=$400;
      var $403=$401;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($402)>>2)]=HEAP32[(($403)>>2)];HEAP32[(($402+4)>>2)]=HEAP32[(($403+4)>>2)];
      var $404=(($45+236)|0);
      var $405=(($45+196)|0);
      __ZNK6b2Vec2ngEv($27, $405);
      var $406=$404;
      var $407=$27;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($406)>>2)]=HEAP32[(($407)>>2)];HEAP32[(($406+4)>>2)]=HEAP32[(($407+4)>>2)];
      __label__ = 57; break;
    case 56: 
      var $409=(($45+212)|0);
      var $410=(($45+196)|0);
      __ZNK6b2Vec2ngEv($28, $410);
      var $411=$409;
      var $412=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($411)>>2)]=HEAP32[(($412)>>2)];HEAP32[(($411+4)>>2)]=HEAP32[(($412+4)>>2)];
      var $413=(($45+228)|0);
      var $414=(($45+196)|0);
      var $415=$413;
      var $416=$414;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($415)>>2)]=HEAP32[(($416)>>2)];HEAP32[(($415+4)>>2)]=HEAP32[(($416+4)>>2)];
      var $417=(($45+236)|0);
      var $418=(($45+188)|0);
      __ZNK6b2Vec2ngEv($29, $418);
      var $419=$417;
      var $420=$29;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($419)>>2)]=HEAP32[(($420)>>2)];HEAP32[(($419+4)>>2)]=HEAP32[(($420+4)>>2)];
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 79; break;
    case 59: 
      var $424=$hasVertex3;
      var $425=(($424) & 1);
      if ($425) { __label__ = 60; break; } else { __label__ = 74; break; }
    case 60: 
      var $427=$convex2;
      var $428=(($427) & 1);
      if ($428) { __label__ = 61; break; } else { __label__ = 67; break; }
    case 61: 
      var $430=$offset1;
      var $431=$430 >= 0;
      if ($431) { var $436 = 1;__label__ = 63; break; } else { __label__ = 62; break; }
    case 62: 
      var $433=$offset2;
      var $434=$433 >= 0;
      var $436 = $434;__label__ = 63; break;
    case 63: 
      var $436;
      var $437=(($45+248)|0);
      var $438=(($436)&1);
      HEAP8[($437)]=$438;
      var $439=(($45+248)|0);
      var $440=HEAP8[($439)];
      var $441=(($440) & 1);
      if ($441) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $443=(($45+212)|0);
      var $444=(($45+196)|0);
      var $445=$443;
      var $446=$444;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($445)>>2)]=HEAP32[(($446)>>2)];HEAP32[(($445+4)>>2)]=HEAP32[(($446+4)>>2)];
      var $447=(($45+228)|0);
      var $448=(($45+196)|0);
      __ZNK6b2Vec2ngEv($30, $448);
      var $449=$447;
      var $450=$30;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($449)>>2)]=HEAP32[(($450)>>2)];HEAP32[(($449+4)>>2)]=HEAP32[(($450+4)>>2)];
      var $451=(($45+236)|0);
      var $452=(($45+204)|0);
      var $453=$451;
      var $454=$452;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($453)>>2)]=HEAP32[(($454)>>2)];HEAP32[(($453+4)>>2)]=HEAP32[(($454+4)>>2)];
      __label__ = 66; break;
    case 65: 
      var $456=(($45+212)|0);
      var $457=(($45+196)|0);
      __ZNK6b2Vec2ngEv($31, $457);
      var $458=$456;
      var $459=$31;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($458)>>2)]=HEAP32[(($459)>>2)];HEAP32[(($458+4)>>2)]=HEAP32[(($459+4)>>2)];
      var $460=(($45+228)|0);
      var $461=(($45+196)|0);
      __ZNK6b2Vec2ngEv($32, $461);
      var $462=$460;
      var $463=$32;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($462)>>2)]=HEAP32[(($463)>>2)];HEAP32[(($462+4)>>2)]=HEAP32[(($463+4)>>2)];
      var $464=(($45+236)|0);
      var $465=(($45+196)|0);
      var $466=$464;
      var $467=$465;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($466)>>2)]=HEAP32[(($467)>>2)];HEAP32[(($466+4)>>2)]=HEAP32[(($467+4)>>2)];
      __label__ = 66; break;
    case 66: 
      __label__ = 73; break;
    case 67: 
      var $470=$offset1;
      var $471=$470 >= 0;
      if ($471) { __label__ = 68; break; } else { var $476 = 0;__label__ = 69; break; }
    case 68: 
      var $473=$offset2;
      var $474=$473 >= 0;
      var $476 = $474;__label__ = 69; break;
    case 69: 
      var $476;
      var $477=(($45+248)|0);
      var $478=(($476)&1);
      HEAP8[($477)]=$478;
      var $479=(($45+248)|0);
      var $480=HEAP8[($479)];
      var $481=(($480) & 1);
      if ($481) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $483=(($45+212)|0);
      var $484=(($45+196)|0);
      var $485=$483;
      var $486=$484;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($485)>>2)]=HEAP32[(($486)>>2)];HEAP32[(($485+4)>>2)]=HEAP32[(($486+4)>>2)];
      var $487=(($45+228)|0);
      var $488=(($45+196)|0);
      __ZNK6b2Vec2ngEv($33, $488);
      var $489=$487;
      var $490=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($489)>>2)]=HEAP32[(($490)>>2)];HEAP32[(($489+4)>>2)]=HEAP32[(($490+4)>>2)];
      var $491=(($45+236)|0);
      var $492=(($45+196)|0);
      var $493=$491;
      var $494=$492;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($493)>>2)]=HEAP32[(($494)>>2)];HEAP32[(($493+4)>>2)]=HEAP32[(($494+4)>>2)];
      __label__ = 72; break;
    case 71: 
      var $496=(($45+212)|0);
      var $497=(($45+196)|0);
      __ZNK6b2Vec2ngEv($34, $497);
      var $498=$496;
      var $499=$34;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($498)>>2)]=HEAP32[(($499)>>2)];HEAP32[(($498+4)>>2)]=HEAP32[(($499+4)>>2)];
      var $500=(($45+228)|0);
      var $501=(($45+204)|0);
      __ZNK6b2Vec2ngEv($35, $501);
      var $502=$500;
      var $503=$35;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($502)>>2)]=HEAP32[(($503)>>2)];HEAP32[(($502+4)>>2)]=HEAP32[(($503+4)>>2)];
      var $504=(($45+236)|0);
      var $505=(($45+196)|0);
      var $506=$504;
      var $507=$505;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($506)>>2)]=HEAP32[(($507)>>2)];HEAP32[(($506+4)>>2)]=HEAP32[(($507+4)>>2)];
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      __label__ = 78; break;
    case 74: 
      var $511=$offset1;
      var $512=$511 >= 0;
      var $513=(($45+248)|0);
      var $514=(($512)&1);
      HEAP8[($513)]=$514;
      var $515=(($45+248)|0);
      var $516=HEAP8[($515)];
      var $517=(($516) & 1);
      if ($517) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      var $519=(($45+212)|0);
      var $520=(($45+196)|0);
      var $521=$519;
      var $522=$520;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($521)>>2)]=HEAP32[(($522)>>2)];HEAP32[(($521+4)>>2)]=HEAP32[(($522+4)>>2)];
      var $523=(($45+228)|0);
      var $524=(($45+196)|0);
      __ZNK6b2Vec2ngEv($36, $524);
      var $525=$523;
      var $526=$36;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($525)>>2)]=HEAP32[(($526)>>2)];HEAP32[(($525+4)>>2)]=HEAP32[(($526+4)>>2)];
      var $527=(($45+236)|0);
      var $528=(($45+196)|0);
      __ZNK6b2Vec2ngEv($37, $528);
      var $529=$527;
      var $530=$37;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($529)>>2)]=HEAP32[(($530)>>2)];HEAP32[(($529+4)>>2)]=HEAP32[(($530+4)>>2)];
      __label__ = 77; break;
    case 76: 
      var $532=(($45+212)|0);
      var $533=(($45+196)|0);
      __ZNK6b2Vec2ngEv($38, $533);
      var $534=$532;
      var $535=$38;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($534)>>2)]=HEAP32[(($535)>>2)];HEAP32[(($534+4)>>2)]=HEAP32[(($535+4)>>2)];
      var $536=(($45+228)|0);
      var $537=(($45+196)|0);
      var $538=$536;
      var $539=$537;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($538)>>2)]=HEAP32[(($539)>>2)];HEAP32[(($538+4)>>2)]=HEAP32[(($539+4)>>2)];
      var $540=(($45+236)|0);
      var $541=(($45+196)|0);
      var $542=$540;
      var $543=$541;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($542)>>2)]=HEAP32[(($543)>>2)];HEAP32[(($542+4)>>2)]=HEAP32[(($543+4)>>2)];
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      __label__ = 80; break;
    case 80: 
      var $548=$5;
      var $549=(($548+148)|0);
      var $550=HEAP32[(($549)>>2)];
      var $551=(($45)|0);
      var $552=(($551+128)|0);
      HEAP32[(($552)>>2)]=$550;
      $i=0;
      __label__ = 81; break;
    case 81: 
      var $554=$i;
      var $555=$5;
      var $556=(($555+148)|0);
      var $557=HEAP32[(($556)>>2)];
      var $558=(($554)|0) < (($557)|0);
      if ($558) { __label__ = 82; break; } else { __label__ = 84; break; }
    case 82: 
      var $560=$i;
      var $561=(($45)|0);
      var $562=(($561)|0);
      var $563=(($562+($560<<3))|0);
      var $564=(($45+132)|0);
      var $565=$i;
      var $566=$5;
      var $567=(($566+20)|0);
      var $568=(($567+($565<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($39, $564, $568);
      var $569=$563;
      var $570=$39;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($569)>>2)]=HEAP32[(($570)>>2)];HEAP32[(($569+4)>>2)]=HEAP32[(($570+4)>>2)];
      var $571=$i;
      var $572=(($45)|0);
      var $573=(($572+64)|0);
      var $574=(($573+($571<<3))|0);
      var $575=(($45+132)|0);
      var $576=(($575+8)|0);
      var $577=$i;
      var $578=$5;
      var $579=(($578+84)|0);
      var $580=(($579+($577<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($40, $576, $580);
      var $581=$574;
      var $582=$40;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($581)>>2)]=HEAP32[(($582)>>2)];HEAP32[(($581+4)>>2)]=HEAP32[(($582+4)>>2)];
      __label__ = 83; break;
    case 83: 
      var $584=$i;
      var $585=(($584+1)|0);
      $i=$585;
      __label__ = 81; break;
    case 84: 
      var $587=(($45+244)|0);
      HEAPF32[(($587)>>2)]=0.019999999552965164;
      var $588=$2;
      var $589=(($588+60)|0);
      HEAP32[(($589)>>2)]=0;
      __ZN12b2EPCollider21ComputeEdgeSeparationEv($edgeAxis, $45);
      var $590=(($edgeAxis)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=(($591)|0)==0;
      if ($592) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      __label__ = 138; break;
    case 86: 
      var $595=(($edgeAxis+8)|0);
      var $596=HEAPF32[(($595)>>2)];
      var $597=(($45+244)|0);
      var $598=HEAPF32[(($597)>>2)];
      var $599=$596 > $598;
      if ($599) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      __label__ = 138; break;
    case 88: 
      __ZN12b2EPCollider24ComputePolygonSeparationEv($polygonAxis, $45);
      var $602=(($polygonAxis)|0);
      var $603=HEAP32[(($602)>>2)];
      var $604=(($603)|0)!=0;
      if ($604) { __label__ = 89; break; } else { __label__ = 91; break; }
    case 89: 
      var $606=(($polygonAxis+8)|0);
      var $607=HEAPF32[(($606)>>2)];
      var $608=(($45+244)|0);
      var $609=HEAPF32[(($608)>>2)];
      var $610=$607 > $609;
      if ($610) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      __label__ = 138; break;
    case 91: 
      $k_relativeTol=0.9800000190734863;
      $k_absoluteTol=0.0010000000474974513;
      var $613=(($polygonAxis)|0);
      var $614=HEAP32[(($613)>>2)];
      var $615=(($614)|0)==0;
      if ($615) { __label__ = 92; break; } else { __label__ = 93; break; }
    case 92: 
      var $617=$primaryAxis;
      var $618=$edgeAxis;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($617)>>2)]=HEAP32[(($618)>>2)];HEAP32[(($617+4)>>2)]=HEAP32[(($618+4)>>2)];HEAP32[(($617+8)>>2)]=HEAP32[(($618+8)>>2)];
      __label__ = 97; break;
    case 93: 
      var $620=(($polygonAxis+8)|0);
      var $621=HEAPF32[(($620)>>2)];
      var $622=(($edgeAxis+8)|0);
      var $623=HEAPF32[(($622)>>2)];
      var $624=$623*0.9800000190734863;
      var $625=$624+0.0010000000474974513;
      var $626=$621 > $625;
      if ($626) { __label__ = 94; break; } else { __label__ = 95; break; }
    case 94: 
      var $628=$primaryAxis;
      var $629=$polygonAxis;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($628)>>2)]=HEAP32[(($629)>>2)];HEAP32[(($628+4)>>2)]=HEAP32[(($629+4)>>2)];HEAP32[(($628+8)>>2)]=HEAP32[(($629+8)>>2)];
      __label__ = 96; break;
    case 95: 
      var $631=$primaryAxis;
      var $632=$edgeAxis;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($631)>>2)]=HEAP32[(($632)>>2)];HEAP32[(($631+4)>>2)]=HEAP32[(($632+4)>>2)];HEAP32[(($631+8)>>2)]=HEAP32[(($632+8)>>2)];
      __label__ = 96; break;
    case 96: 
      __label__ = 97; break;
    case 97: 
      var $635=(($ie)|0);
      var $636=(($635+24)|0);
      var $638 = $635;__label__ = 98; break;
    case 98: 
      var $638;
      __ZN12b2ClipVertexC1Ev($638);
      var $639=(($638+12)|0);
      var $640=(($639)|0)==(($636)|0);
      if ($640) { __label__ = 99; break; } else { var $638 = $639;__label__ = 98; break; }
    case 99: 
      __ZN15b2ReferenceFaceC1Ev($rf);
      var $642=(($primaryAxis)|0);
      var $643=HEAP32[(($642)>>2)];
      var $644=(($643)|0)==1;
      if ($644) { __label__ = 100; break; } else { __label__ = 113; break; }
    case 100: 
      var $646=$2;
      var $647=(($646+56)|0);
      HEAP32[(($647)>>2)]=1;
      $bestIndex=0;
      var $648=(($45+212)|0);
      var $649=(($45)|0);
      var $650=(($649+64)|0);
      var $651=(($650)|0);
      var $652=__Z5b2DotRK6b2Vec2S1_($648, $651);
      $bestValue=$652;
      $i1=1;
      __label__ = 101; break;
    case 101: 
      var $654=$i1;
      var $655=(($45)|0);
      var $656=(($655+128)|0);
      var $657=HEAP32[(($656)>>2)];
      var $658=(($654)|0) < (($657)|0);
      if ($658) { __label__ = 102; break; } else { __label__ = 106; break; }
    case 102: 
      var $660=(($45+212)|0);
      var $661=$i1;
      var $662=(($45)|0);
      var $663=(($662+64)|0);
      var $664=(($663+($661<<3))|0);
      var $665=__Z5b2DotRK6b2Vec2S1_($660, $664);
      $value=$665;
      var $666=$value;
      var $667=$bestValue;
      var $668=$666 < $667;
      if ($668) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $670=$value;
      $bestValue=$670;
      var $671=$i1;
      $bestIndex=$671;
      __label__ = 104; break;
    case 104: 
      __label__ = 105; break;
    case 105: 
      var $674=$i1;
      var $675=(($674+1)|0);
      $i1=$675;
      __label__ = 101; break;
    case 106: 
      var $677=$bestIndex;
      $i12=$677;
      var $678=$i12;
      var $679=(($678+1)|0);
      var $680=(($45)|0);
      var $681=(($680+128)|0);
      var $682=HEAP32[(($681)>>2)];
      var $683=(($679)|0) < (($682)|0);
      if ($683) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $685=$i12;
      var $686=(($685+1)|0);
      var $689 = $686;__label__ = 109; break;
    case 108: 
      var $689 = 0;__label__ = 109; break;
    case 109: 
      var $689;
      $i2=$689;
      var $690=(($ie)|0);
      var $691=(($690)|0);
      var $692=$i12;
      var $693=(($45)|0);
      var $694=(($693)|0);
      var $695=(($694+($692<<3))|0);
      var $696=$691;
      var $697=$695;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($696)>>2)]=HEAP32[(($697)>>2)];HEAP32[(($696+4)>>2)]=HEAP32[(($697+4)>>2)];
      var $698=(($ie)|0);
      var $699=(($698+8)|0);
      var $700=$699;
      var $701=(($700)|0);
      HEAP8[($701)]=0;
      var $702=$i12;
      var $703=(($702) & 255);
      var $704=(($ie)|0);
      var $705=(($704+8)|0);
      var $706=$705;
      var $707=(($706+1)|0);
      HEAP8[($707)]=$703;
      var $708=(($ie)|0);
      var $709=(($708+8)|0);
      var $710=$709;
      var $711=(($710+2)|0);
      HEAP8[($711)]=1;
      var $712=(($ie)|0);
      var $713=(($712+8)|0);
      var $714=$713;
      var $715=(($714+3)|0);
      HEAP8[($715)]=0;
      var $716=(($ie+12)|0);
      var $717=(($716)|0);
      var $718=$i2;
      var $719=(($45)|0);
      var $720=(($719)|0);
      var $721=(($720+($718<<3))|0);
      var $722=$717;
      var $723=$721;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($722)>>2)]=HEAP32[(($723)>>2)];HEAP32[(($722+4)>>2)]=HEAP32[(($723+4)>>2)];
      var $724=(($ie+12)|0);
      var $725=(($724+8)|0);
      var $726=$725;
      var $727=(($726)|0);
      HEAP8[($727)]=0;
      var $728=$i2;
      var $729=(($728) & 255);
      var $730=(($ie+12)|0);
      var $731=(($730+8)|0);
      var $732=$731;
      var $733=(($732+1)|0);
      HEAP8[($733)]=$729;
      var $734=(($ie+12)|0);
      var $735=(($734+8)|0);
      var $736=$735;
      var $737=(($736+2)|0);
      HEAP8[($737)]=1;
      var $738=(($ie+12)|0);
      var $739=(($738+8)|0);
      var $740=$739;
      var $741=(($740+3)|0);
      HEAP8[($741)]=0;
      var $742=(($45+248)|0);
      var $743=HEAP8[($742)];
      var $744=(($743) & 1);
      if ($744) { __label__ = 110; break; } else { __label__ = 111; break; }
    case 110: 
      var $746=(($rf)|0);
      HEAP32[(($746)>>2)]=0;
      var $747=(($rf+4)|0);
      HEAP32[(($747)>>2)]=1;
      var $748=(($rf+8)|0);
      var $749=(($45+164)|0);
      var $750=$748;
      var $751=$749;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($750)>>2)]=HEAP32[(($751)>>2)];HEAP32[(($750+4)>>2)]=HEAP32[(($751+4)>>2)];
      var $752=(($rf+16)|0);
      var $753=(($45+172)|0);
      var $754=$752;
      var $755=$753;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($754)>>2)]=HEAP32[(($755)>>2)];HEAP32[(($754+4)>>2)]=HEAP32[(($755+4)>>2)];
      var $756=(($rf+24)|0);
      var $757=(($45+196)|0);
      var $758=$756;
      var $759=$757;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($758)>>2)]=HEAP32[(($759)>>2)];HEAP32[(($758+4)>>2)]=HEAP32[(($759+4)>>2)];
      __label__ = 112; break;
    case 111: 
      var $761=(($rf)|0);
      HEAP32[(($761)>>2)]=1;
      var $762=(($rf+4)|0);
      HEAP32[(($762)>>2)]=0;
      var $763=(($rf+8)|0);
      var $764=(($45+172)|0);
      var $765=$763;
      var $766=$764;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($765)>>2)]=HEAP32[(($766)>>2)];HEAP32[(($765+4)>>2)]=HEAP32[(($766+4)>>2)];
      var $767=(($rf+16)|0);
      var $768=(($45+164)|0);
      var $769=$767;
      var $770=$768;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($769)>>2)]=HEAP32[(($770)>>2)];HEAP32[(($769+4)>>2)]=HEAP32[(($770+4)>>2)];
      var $771=(($rf+24)|0);
      var $772=(($45+196)|0);
      __ZNK6b2Vec2ngEv($41, $772);
      var $773=$771;
      var $774=$41;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($773)>>2)]=HEAP32[(($774)>>2)];HEAP32[(($773+4)>>2)]=HEAP32[(($774+4)>>2)];
      __label__ = 112; break;
    case 112: 
      __label__ = 117; break;
    case 113: 
      var $777=$2;
      var $778=(($777+56)|0);
      HEAP32[(($778)>>2)]=2;
      var $779=(($ie)|0);
      var $780=(($779)|0);
      var $781=(($45+164)|0);
      var $782=$780;
      var $783=$781;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($782)>>2)]=HEAP32[(($783)>>2)];HEAP32[(($782+4)>>2)]=HEAP32[(($783+4)>>2)];
      var $784=(($ie)|0);
      var $785=(($784+8)|0);
      var $786=$785;
      var $787=(($786)|0);
      HEAP8[($787)]=0;
      var $788=(($primaryAxis+4)|0);
      var $789=HEAP32[(($788)>>2)];
      var $790=(($789) & 255);
      var $791=(($ie)|0);
      var $792=(($791+8)|0);
      var $793=$792;
      var $794=(($793+1)|0);
      HEAP8[($794)]=$790;
      var $795=(($ie)|0);
      var $796=(($795+8)|0);
      var $797=$796;
      var $798=(($797+2)|0);
      HEAP8[($798)]=0;
      var $799=(($ie)|0);
      var $800=(($799+8)|0);
      var $801=$800;
      var $802=(($801+3)|0);
      HEAP8[($802)]=1;
      var $803=(($ie+12)|0);
      var $804=(($803)|0);
      var $805=(($45+172)|0);
      var $806=$804;
      var $807=$805;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($806)>>2)]=HEAP32[(($807)>>2)];HEAP32[(($806+4)>>2)]=HEAP32[(($807+4)>>2)];
      var $808=(($ie+12)|0);
      var $809=(($808+8)|0);
      var $810=$809;
      var $811=(($810)|0);
      HEAP8[($811)]=0;
      var $812=(($primaryAxis+4)|0);
      var $813=HEAP32[(($812)>>2)];
      var $814=(($813) & 255);
      var $815=(($ie+12)|0);
      var $816=(($815+8)|0);
      var $817=$816;
      var $818=(($817+1)|0);
      HEAP8[($818)]=$814;
      var $819=(($ie+12)|0);
      var $820=(($819+8)|0);
      var $821=$820;
      var $822=(($821+2)|0);
      HEAP8[($822)]=0;
      var $823=(($ie+12)|0);
      var $824=(($823+8)|0);
      var $825=$824;
      var $826=(($825+3)|0);
      HEAP8[($826)]=1;
      var $827=(($primaryAxis+4)|0);
      var $828=HEAP32[(($827)>>2)];
      var $829=(($rf)|0);
      HEAP32[(($829)>>2)]=$828;
      var $830=(($rf)|0);
      var $831=HEAP32[(($830)>>2)];
      var $832=(($831+1)|0);
      var $833=(($45)|0);
      var $834=(($833+128)|0);
      var $835=HEAP32[(($834)>>2)];
      var $836=(($832)|0) < (($835)|0);
      if ($836) { __label__ = 114; break; } else { __label__ = 115; break; }
    case 114: 
      var $838=(($rf)|0);
      var $839=HEAP32[(($838)>>2)];
      var $840=(($839+1)|0);
      var $843 = $840;__label__ = 116; break;
    case 115: 
      var $843 = 0;__label__ = 116; break;
    case 116: 
      var $843;
      var $844=(($rf+4)|0);
      HEAP32[(($844)>>2)]=$843;
      var $845=(($rf+8)|0);
      var $846=(($rf)|0);
      var $847=HEAP32[(($846)>>2)];
      var $848=(($45)|0);
      var $849=(($848)|0);
      var $850=(($849+($847<<3))|0);
      var $851=$845;
      var $852=$850;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($851)>>2)]=HEAP32[(($852)>>2)];HEAP32[(($851+4)>>2)]=HEAP32[(($852+4)>>2)];
      var $853=(($rf+16)|0);
      var $854=(($rf+4)|0);
      var $855=HEAP32[(($854)>>2)];
      var $856=(($45)|0);
      var $857=(($856)|0);
      var $858=(($857+($855<<3))|0);
      var $859=$853;
      var $860=$858;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($859)>>2)]=HEAP32[(($860)>>2)];HEAP32[(($859+4)>>2)]=HEAP32[(($860+4)>>2)];
      var $861=(($rf+24)|0);
      var $862=(($rf)|0);
      var $863=HEAP32[(($862)>>2)];
      var $864=(($45)|0);
      var $865=(($864+64)|0);
      var $866=(($865+($863<<3))|0);
      var $867=$861;
      var $868=$866;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($867)>>2)]=HEAP32[(($868)>>2)];HEAP32[(($867+4)>>2)]=HEAP32[(($868+4)>>2)];
      __label__ = 117; break;
    case 117: 
      var $870=(($rf+32)|0);
      var $871=(($rf+24)|0);
      var $872=(($871+4)|0);
      var $873=HEAPF32[(($872)>>2)];
      var $874=(($rf+24)|0);
      var $875=(($874)|0);
      var $876=HEAPF32[(($875)>>2)];
      var $877=(-$876);
      __ZN6b2Vec23SetEff($870, $873, $877);
      var $878=(($rf+44)|0);
      var $879=(($rf+32)|0);
      __ZNK6b2Vec2ngEv($42, $879);
      var $880=$878;
      var $881=$42;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($880)>>2)]=HEAP32[(($881)>>2)];HEAP32[(($880+4)>>2)]=HEAP32[(($881+4)>>2)];
      var $882=(($rf+32)|0);
      var $883=(($rf+8)|0);
      var $884=__Z5b2DotRK6b2Vec2S1_($882, $883);
      var $885=(($rf+40)|0);
      HEAPF32[(($885)>>2)]=$884;
      var $886=(($rf+44)|0);
      var $887=(($rf+16)|0);
      var $888=__Z5b2DotRK6b2Vec2S1_($886, $887);
      var $889=(($rf+52)|0);
      HEAPF32[(($889)>>2)]=$888;
      var $890=(($clipPoints1)|0);
      var $891=(($890+24)|0);
      var $893 = $890;__label__ = 118; break;
    case 118: 
      var $893;
      __ZN12b2ClipVertexC1Ev($893);
      var $894=(($893+12)|0);
      var $895=(($894)|0)==(($891)|0);
      if ($895) { __label__ = 119; break; } else { var $893 = $894;__label__ = 118; break; }
    case 119: 
      var $897=(($clipPoints2)|0);
      var $898=(($897+24)|0);
      var $900 = $897;__label__ = 120; break;
    case 120: 
      var $900;
      __ZN12b2ClipVertexC1Ev($900);
      var $901=(($900+12)|0);
      var $902=(($901)|0)==(($898)|0);
      if ($902) { __label__ = 121; break; } else { var $900 = $901;__label__ = 120; break; }
    case 121: 
      var $904=(($clipPoints1)|0);
      var $905=(($ie)|0);
      var $906=(($rf+32)|0);
      var $907=(($rf+40)|0);
      var $908=HEAPF32[(($907)>>2)];
      var $909=(($rf)|0);
      var $910=HEAP32[(($909)>>2)];
      var $911=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($904, $905, $906, $908, $910);
      $np=$911;
      var $912=$np;
      var $913=(($912)|0) < 2;
      if ($913) { __label__ = 122; break; } else { __label__ = 123; break; }
    case 122: 
      __label__ = 138; break;
    case 123: 
      var $916=(($clipPoints2)|0);
      var $917=(($clipPoints1)|0);
      var $918=(($rf+44)|0);
      var $919=(($rf+52)|0);
      var $920=HEAPF32[(($919)>>2)];
      var $921=(($rf+4)|0);
      var $922=HEAP32[(($921)>>2)];
      var $923=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($916, $917, $918, $920, $922);
      $np=$923;
      var $924=$np;
      var $925=(($924)|0) < 2;
      if ($925) { __label__ = 124; break; } else { __label__ = 125; break; }
    case 124: 
      __label__ = 138; break;
    case 125: 
      var $928=(($primaryAxis)|0);
      var $929=HEAP32[(($928)>>2)];
      var $930=(($929)|0)==1;
      if ($930) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      var $932=$2;
      var $933=(($932+40)|0);
      var $934=(($rf+24)|0);
      var $935=$933;
      var $936=$934;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($935)>>2)]=HEAP32[(($936)>>2)];HEAP32[(($935+4)>>2)]=HEAP32[(($936+4)>>2)];
      var $937=$2;
      var $938=(($937+48)|0);
      var $939=(($rf+8)|0);
      var $940=$938;
      var $941=$939;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($940)>>2)]=HEAP32[(($941)>>2)];HEAP32[(($940+4)>>2)]=HEAP32[(($941+4)>>2)];
      __label__ = 128; break;
    case 127: 
      var $943=$2;
      var $944=(($943+40)|0);
      var $945=(($rf)|0);
      var $946=HEAP32[(($945)>>2)];
      var $947=$5;
      var $948=(($947+84)|0);
      var $949=(($948+($946<<3))|0);
      var $950=$944;
      var $951=$949;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($950)>>2)]=HEAP32[(($951)>>2)];HEAP32[(($950+4)>>2)]=HEAP32[(($951+4)>>2)];
      var $952=$2;
      var $953=(($952+48)|0);
      var $954=(($rf)|0);
      var $955=HEAP32[(($954)>>2)];
      var $956=$5;
      var $957=(($956+20)|0);
      var $958=(($957+($955<<3))|0);
      var $959=$953;
      var $960=$958;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($959)>>2)]=HEAP32[(($960)>>2)];HEAP32[(($959+4)>>2)]=HEAP32[(($960+4)>>2)];
      __label__ = 128; break;
    case 128: 
      $pointCount=0;
      $i3=0;
      __label__ = 129; break;
    case 129: 
      var $963=$i3;
      var $964=(($963)|0) < 2;
      if ($964) { __label__ = 130; break; } else { __label__ = 137; break; }
    case 130: 
      var $966=(($rf+24)|0);
      var $967=$i3;
      var $968=(($clipPoints2+$967*12)|0);
      var $969=(($968)|0);
      var $970=(($rf+8)|0);
      __ZmiRK6b2Vec2S1_($43, $969, $970);
      var $971=__Z5b2DotRK6b2Vec2S1_($966, $43);
      $separation=$971;
      var $972=$separation;
      var $973=(($45+244)|0);
      var $974=HEAPF32[(($973)>>2)];
      var $975=$972 <= $974;
      if ($975) { __label__ = 131; break; } else { __label__ = 135; break; }
    case 131: 
      var $977=$2;
      var $978=(($977)|0);
      var $979=(($978)|0);
      var $980=$pointCount;
      var $981=(($979+$980*20)|0);
      $cp=$981;
      var $982=(($primaryAxis)|0);
      var $983=HEAP32[(($982)>>2)];
      var $984=(($983)|0)==1;
      if ($984) { __label__ = 132; break; } else { __label__ = 133; break; }
    case 132: 
      var $986=$cp;
      var $987=(($986)|0);
      var $988=(($45+132)|0);
      var $989=$i3;
      var $990=(($clipPoints2+$989*12)|0);
      var $991=(($990)|0);
      __Z6b2MulTRK11b2TransformRK6b2Vec2($44, $988, $991);
      var $992=$987;
      var $993=$44;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($992)>>2)]=HEAP32[(($993)>>2)];HEAP32[(($992+4)>>2)]=HEAP32[(($993+4)>>2)];
      var $994=$cp;
      var $995=(($994+16)|0);
      var $996=$i3;
      var $997=(($clipPoints2+$996*12)|0);
      var $998=(($997+8)|0);
      var $999=$995;
      var $1000=$998;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($999)>>2)]=HEAP32[(($1000)>>2)];
      __label__ = 134; break;
    case 133: 
      var $1002=$cp;
      var $1003=(($1002)|0);
      var $1004=$i3;
      var $1005=(($clipPoints2+$1004*12)|0);
      var $1006=(($1005)|0);
      var $1007=$1003;
      var $1008=$1006;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1007)>>2)]=HEAP32[(($1008)>>2)];HEAP32[(($1007+4)>>2)]=HEAP32[(($1008+4)>>2)];
      var $1009=$i3;
      var $1010=(($clipPoints2+$1009*12)|0);
      var $1011=(($1010+8)|0);
      var $1012=$1011;
      var $1013=(($1012+3)|0);
      var $1014=HEAP8[($1013)];
      var $1015=$cp;
      var $1016=(($1015+16)|0);
      var $1017=$1016;
      var $1018=(($1017+2)|0);
      HEAP8[($1018)]=$1014;
      var $1019=$i3;
      var $1020=(($clipPoints2+$1019*12)|0);
      var $1021=(($1020+8)|0);
      var $1022=$1021;
      var $1023=(($1022+2)|0);
      var $1024=HEAP8[($1023)];
      var $1025=$cp;
      var $1026=(($1025+16)|0);
      var $1027=$1026;
      var $1028=(($1027+3)|0);
      HEAP8[($1028)]=$1024;
      var $1029=$i3;
      var $1030=(($clipPoints2+$1029*12)|0);
      var $1031=(($1030+8)|0);
      var $1032=$1031;
      var $1033=(($1032+1)|0);
      var $1034=HEAP8[($1033)];
      var $1035=$cp;
      var $1036=(($1035+16)|0);
      var $1037=$1036;
      var $1038=(($1037)|0);
      HEAP8[($1038)]=$1034;
      var $1039=$i3;
      var $1040=(($clipPoints2+$1039*12)|0);
      var $1041=(($1040+8)|0);
      var $1042=$1041;
      var $1043=(($1042)|0);
      var $1044=HEAP8[($1043)];
      var $1045=$cp;
      var $1046=(($1045+16)|0);
      var $1047=$1046;
      var $1048=(($1047+1)|0);
      HEAP8[($1048)]=$1044;
      __label__ = 134; break;
    case 134: 
      var $1050=$pointCount;
      var $1051=(($1050+1)|0);
      $pointCount=$1051;
      __label__ = 135; break;
    case 135: 
      __label__ = 136; break;
    case 136: 
      var $1054=$i3;
      var $1055=(($1054+1)|0);
      $i3=$1055;
      __label__ = 129; break;
    case 137: 
      var $1057=$pointCount;
      var $1058=$2;
      var $1059=(($1058+60)|0);
      HEAP32[(($1059)>>2)]=$1057;
      __label__ = 138; break;
    case 138: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Vec2C2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZN5b2RotC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __Z5b2MinIfET_S0_S0_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3 < $4;
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  ;
  return $8;
}


function __Z7b2CrossRK6b2Vec2S1_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6+4)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5*$8;
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12*$15;
  var $17=$9-$16;
  ;
  return $17;
}


function __Z6b2MulTRK11b2TransformS1_($agg_result, $A, $B) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=__stackBase__+8;
  var $5=__stackBase__+16;
  $1=$A;
  $2=$B;
  __ZN11b2TransformC1Ev($agg_result);
  var $6=(($agg_result+8)|0);
  var $7=$1;
  var $8=(($7+8)|0);
  var $9=$2;
  var $10=(($9+8)|0);
  __Z6b2MulTRK5b2RotS1_($3, $8, $10);
  var $11=$6;
  var $12=$3;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[(($11+4)>>2)]=HEAP32[(($12+4)>>2)];
  var $13=(($agg_result)|0);
  var $14=$1;
  var $15=(($14+8)|0);
  var $16=$2;
  var $17=(($16)|0);
  var $18=$1;
  var $19=(($18)|0);
  __ZmiRK6b2Vec2S1_($5, $17, $19);
  __Z6b2MulTRK5b2RotRK6b2Vec2($4, $15, $5);
  var $20=$13;
  var $21=$4;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[(($20+4)>>2)]=HEAP32[(($21+4)>>2)];
  STACKTOP = __stackBase__;
  return;
}


function __ZNK6b2Vec2ngEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec2C1Ev($agg_result);
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=(-$7);
  __ZN6b2Vec23SetEff($agg_result, $5, $8);
  ;
  return;
}


function __Z5b2MulRK5b2RotRK6b2Vec2($agg_result, $q, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$q;
  $2=$v;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5*$8;
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12*$15;
  var $17=$9-$16;
  var $18=$1;
  var $19=(($18)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=$2;
  var $22=(($21)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$20*$23;
  var $25=$1;
  var $26=(($25+4)|0);
  var $27=HEAPF32[(($26)>>2)];
  var $28=$2;
  var $29=(($28+4)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$27*$30;
  var $32=$24+$31;
  __ZN6b2Vec2C1Eff($agg_result, $17, $32);
  ;
  return;
}


function __ZN12b2EPCollider21ComputeEdgeSeparationEv($agg_result, $this) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      var $s;
      var $2=__stackBase__;
      $1=$this;
      var $3=$1;
      var $4=(($agg_result)|0);
      HEAP32[(($4)>>2)]=1;
      var $5=(($3+248)|0);
      var $6=HEAP8[($5)];
      var $7=(($6) & 1);
      var $8=$7 ? 0 : 1;
      var $9=(($agg_result+4)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=(($agg_result+8)|0);
      HEAPF32[(($10)>>2)]=3.4028234663852886e+38;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $12=$i;
      var $13=(($3)|0);
      var $14=(($13+128)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|0) < (($15)|0);
      if ($16) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $18=(($3+212)|0);
      var $19=$i;
      var $20=(($3)|0);
      var $21=(($20)|0);
      var $22=(($21+($19<<3))|0);
      var $23=(($3+164)|0);
      __ZmiRK6b2Vec2S1_($2, $22, $23);
      var $24=__Z5b2DotRK6b2Vec2S1_($18, $2);
      $s=$24;
      var $25=$s;
      var $26=(($agg_result+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      var $28=$25 < $27;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $30=$s;
      var $31=(($agg_result+8)|0);
      HEAPF32[(($31)>>2)]=$30;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $34=$i;
      var $35=(($34+1)|0);
      $i=$35;
      __label__ = 2; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2EPCollider24ComputePolygonSeparationEv($agg_result, $this) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $perp=__stackBase__;
      var $i;
      var $n=__stackBase__+8;
      var $s1;
      var $2=__stackBase__+16;
      var $s2;
      var $3=__stackBase__+24;
      var $s;
      var $4=__stackBase__+32;
      var $5=__stackBase__+40;
      $1=$this;
      var $6=$1;
      var $7=(($agg_result)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=(($agg_result+4)|0);
      HEAP32[(($8)>>2)]=-1;
      var $9=(($agg_result+8)|0);
      HEAPF32[(($9)>>2)]=-3.4028234663852886e+38;
      var $10=(($6+212)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      var $13=(-$12);
      var $14=(($6+212)|0);
      var $15=(($14)|0);
      var $16=HEAPF32[(($15)>>2)];
      __ZN6b2Vec2C1Eff($perp, $13, $16);
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $18=$i;
      var $19=(($6)|0);
      var $20=(($19+128)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18)|0) < (($21)|0);
      if ($22) { __label__ = 3; break; } else { __label__ = 16; break; }
    case 3: 
      var $24=$i;
      var $25=(($6)|0);
      var $26=(($25+64)|0);
      var $27=(($26+($24<<3))|0);
      __ZNK6b2Vec2ngEv($n, $27);
      var $28=$i;
      var $29=(($6)|0);
      var $30=(($29)|0);
      var $31=(($30+($28<<3))|0);
      var $32=(($6+164)|0);
      __ZmiRK6b2Vec2S1_($2, $31, $32);
      var $33=__Z5b2DotRK6b2Vec2S1_($n, $2);
      $s1=$33;
      var $34=$i;
      var $35=(($6)|0);
      var $36=(($35)|0);
      var $37=(($36+($34<<3))|0);
      var $38=(($6+172)|0);
      __ZmiRK6b2Vec2S1_($3, $37, $38);
      var $39=__Z5b2DotRK6b2Vec2S1_($n, $3);
      $s2=$39;
      var $40=$s1;
      var $41=$s2;
      var $42=__Z5b2MinIfET_S0_S0_($40, $41);
      $s=$42;
      var $43=$s;
      var $44=(($6+244)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=$43 > $45;
      if ($46) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $48=(($agg_result)|0);
      HEAP32[(($48)>>2)]=2;
      var $49=$i;
      var $50=(($agg_result+4)|0);
      HEAP32[(($50)>>2)]=$49;
      var $51=$s;
      var $52=(($agg_result+8)|0);
      HEAPF32[(($52)>>2)]=$51;
      __label__ = 17; break;
    case 5: 
      var $54=__Z5b2DotRK6b2Vec2S1_($n, $perp);
      var $55=$54 >= 0;
      if ($55) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $57=(($6+236)|0);
      __ZmiRK6b2Vec2S1_($4, $n, $57);
      var $58=(($6+212)|0);
      var $59=__Z5b2DotRK6b2Vec2S1_($4, $58);
      var $60=$59 < -0.03490658849477768;
      if ($60) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 15; break;
    case 8: 
      __label__ = 12; break;
    case 9: 
      var $64=(($6+228)|0);
      __ZmiRK6b2Vec2S1_($5, $n, $64);
      var $65=(($6+212)|0);
      var $66=__Z5b2DotRK6b2Vec2S1_($5, $65);
      var $67=$66 < -0.03490658849477768;
      if ($67) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 15; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $71=$s;
      var $72=(($agg_result+8)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$71 > $73;
      if ($74) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $76=(($agg_result)|0);
      HEAP32[(($76)>>2)]=2;
      var $77=$i;
      var $78=(($agg_result+4)|0);
      HEAP32[(($78)>>2)]=$77;
      var $79=$s;
      var $80=(($agg_result+8)|0);
      HEAPF32[(($80)>>2)]=$79;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $83=$i;
      var $84=(($83+1)|0);
      $i=$84;
      __label__ = 2; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2ClipVertexC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2ClipVertexC2Ev($2);
  ;
  return;
}


function __ZN15b2ReferenceFaceC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ReferenceFaceC2Ev($2);
  ;
  return;
}


function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edgeA, $xfA, $polygonB, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 252; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $collider=__stackBase__;
  $1=$manifold;
  $2=$edgeA;
  $3=$xfA;
  $4=$polygonB;
  $5=$xfB;
  __ZN12b2EPColliderC1Ev($collider);
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider, $6, $7, $8, $9, $10);
  STACKTOP = __stackBase__;
  return;
}


function __ZN12b2EPColliderC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2EPColliderC2Ev($2);
  ;
  return;
}


function __ZN12b2EPColliderC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN13b2TempPolygonC1Ev($3);
  var $4=(($2+132)|0);
  __ZN11b2TransformC1Ev($4);
  var $5=(($2+148)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+156)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=(($2+164)|0);
  __ZN6b2Vec2C1Ev($7);
  var $8=(($2+172)|0);
  __ZN6b2Vec2C1Ev($8);
  var $9=(($2+180)|0);
  __ZN6b2Vec2C1Ev($9);
  var $10=(($2+188)|0);
  __ZN6b2Vec2C1Ev($10);
  var $11=(($2+196)|0);
  __ZN6b2Vec2C1Ev($11);
  var $12=(($2+204)|0);
  __ZN6b2Vec2C1Ev($12);
  var $13=(($2+212)|0);
  __ZN6b2Vec2C1Ev($13);
  var $14=(($2+228)|0);
  __ZN6b2Vec2C1Ev($14);
  var $15=(($2+236)|0);
  __ZN6b2Vec2C1Ev($15);
  ;
  return;
}


function __ZN13b2TempPolygonC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2TempPolygonC2Ev($2);
  ;
  return;
}


function __ZN11b2TransformC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2TransformC2Ev($2);
  ;
  return;
}


function __ZN6b2Vec2C1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec2C2Ev($2);
  ;
  return;
}


function __ZN11b2TransformC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN5b2RotC1Ev($4);
  ;
  return;
}


function __ZN5b2RotC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN5b2RotC2Ev($2);
  ;
  return;
}


function __ZN13b2TempPolygonC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=(($4+64)|0);
      var $7 = $4;__label__ = 2; break;
    case 2: 
      var $7;
      __ZN6b2Vec2C1Ev($7);
      var $8=(($7+8)|0);
      var $9=(($8)|0)==(($5)|0);
      if ($9) { __label__ = 3; break; } else { var $7 = $8;__label__ = 2; break; }
    case 3: 
      var $11=(($2+64)|0);
      var $12=(($11)|0);
      var $13=(($12+64)|0);
      var $15 = $12;__label__ = 4; break;
    case 4: 
      var $15;
      __ZN6b2Vec2C1Ev($15);
      var $16=(($15+8)|0);
      var $17=(($16)|0)==(($13)|0);
      if ($17) { __label__ = 5; break; } else { var $15 = $16;__label__ = 4; break; }
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ReferenceFaceC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+16)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+24)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+32)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=(($2+44)|0);
  __ZN6b2Vec2C1Ev($7);
  ;
  return;
}


function __ZN12b2ClipVertexC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  ;
  return;
}


function __Z6b2MulTRK5b2RotS1_($agg_result, $q, $r) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$q;
  $2=$r;
  __ZN5b2RotC1Ev($agg_result);
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5*$8;
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12*$15;
  var $17=$9-$16;
  var $18=(($agg_result)|0);
  HEAPF32[(($18)>>2)]=$17;
  var $19=$1;
  var $20=(($19+4)|0);
  var $21=HEAPF32[(($20)>>2)];
  var $22=$2;
  var $23=(($22+4)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=$21*$24;
  var $26=$1;
  var $27=(($26)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$2;
  var $30=(($29)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$28*$31;
  var $33=$25+$32;
  var $34=(($agg_result+4)|0);
  HEAPF32[(($34)>>2)]=$33;
  ;
  return;
}


function __Z6b2MulTRK5b2RotRK6b2Vec2($agg_result, $q, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$q;
  $2=$v;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5*$8;
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12*$15;
  var $17=$9+$16;
  var $18=$1;
  var $19=(($18)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=(-$20);
  var $22=$2;
  var $23=(($22)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=$21*$24;
  var $26=$1;
  var $27=(($26+4)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+4)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$28*$31;
  var $33=$25+$32;
  __ZN6b2Vec2C1Eff($agg_result, $17, $33);
  ;
  return;
}


function __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold, $polyA, $xfA, $polyB, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 212; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $totalRadius;
      var $edgeA=__stackBase__;
      var $separationA;
      var $edgeB=__stackBase__+4;
      var $separationB;
      var $poly1;
      var $poly2;
      var $xf1=__stackBase__+8;
      var $xf2=__stackBase__+24;
      var $edge1;
      var $flip;
      var $k_relativeTol;
      var $k_absoluteTol;
      var $incidentEdge=__stackBase__+40;
      var $count1;
      var $vertices1;
      var $iv1;
      var $iv2;
      var $v11=__stackBase__+64;
      var $v12=__stackBase__+72;
      var $localTangent=__stackBase__+80;
      var $localNormal=__stackBase__+88;
      var $planePoint=__stackBase__+96;
      var $6=__stackBase__+104;
      var $tangent=__stackBase__+112;
      var $normal=__stackBase__+120;
      var $7=__stackBase__+128;
      var $8=__stackBase__+136;
      var $frontOffset;
      var $sideOffset1;
      var $sideOffset2;
      var $clipPoints1=__stackBase__+144;
      var $clipPoints2=__stackBase__+168;
      var $np;
      var $9=__stackBase__+192;
      var $pointCount;
      var $i;
      var $separation;
      var $cp;
      var $10=__stackBase__+200;
      var $cf=__stackBase__+208;
      $1=$manifold;
      $2=$polyA;
      $3=$xfA;
      $4=$polyB;
      $5=$xfB;
      var $11=$1;
      var $12=(($11+60)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=$2;
      var $14=$13;
      var $15=(($14+8)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=$4;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAPF32[(($19)>>2)];
      var $21=$16+$20;
      $totalRadius=$21;
      HEAP32[(($edgeA)>>2)]=0;
      var $22=$2;
      var $23=$3;
      var $24=$4;
      var $25=$5;
      var $26=__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA, $22, $23, $24, $25);
      $separationA=$26;
      var $27=$separationA;
      var $28=$totalRadius;
      var $29=$27 > $28;
      if ($29) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 30; break;
    case 3: 
      HEAP32[(($edgeB)>>2)]=0;
      var $32=$4;
      var $33=$5;
      var $34=$2;
      var $35=$3;
      var $36=__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB, $32, $33, $34, $35);
      $separationB=$36;
      var $37=$separationB;
      var $38=$totalRadius;
      var $39=$37 > $38;
      if ($39) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 30; break;
    case 5: 
      __ZN11b2TransformC1Ev($xf1);
      __ZN11b2TransformC1Ev($xf2);
      $k_relativeTol=0.9800000190734863;
      $k_absoluteTol=0.0010000000474974513;
      var $42=$separationB;
      var $43=$separationA;
      var $44=$43*0.9800000190734863;
      var $45=$44+0.0010000000474974513;
      var $46=$42 > $45;
      if ($46) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $48=$4;
      $poly1=$48;
      var $49=$2;
      $poly2=$49;
      var $50=$5;
      var $51=$xf1;
      var $52=$50;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[(($51+4)>>2)]=HEAP32[(($52+4)>>2)];HEAP32[(($51+8)>>2)]=HEAP32[(($52+8)>>2)];HEAP32[(($51+12)>>2)]=HEAP32[(($52+12)>>2)];
      var $53=$3;
      var $54=$xf2;
      var $55=$53;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[(($54+4)>>2)]=HEAP32[(($55+4)>>2)];HEAP32[(($54+8)>>2)]=HEAP32[(($55+8)>>2)];HEAP32[(($54+12)>>2)]=HEAP32[(($55+12)>>2)];
      var $56=HEAP32[(($edgeB)>>2)];
      $edge1=$56;
      var $57=$1;
      var $58=(($57+56)|0);
      HEAP32[(($58)>>2)]=2;
      $flip=1;
      __label__ = 8; break;
    case 7: 
      var $60=$2;
      $poly1=$60;
      var $61=$4;
      $poly2=$61;
      var $62=$3;
      var $63=$xf1;
      var $64=$62;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[(($63+4)>>2)]=HEAP32[(($64+4)>>2)];HEAP32[(($63+8)>>2)]=HEAP32[(($64+8)>>2)];HEAP32[(($63+12)>>2)]=HEAP32[(($64+12)>>2)];
      var $65=$5;
      var $66=$xf2;
      var $67=$65;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[(($66+4)>>2)]=HEAP32[(($67+4)>>2)];HEAP32[(($66+8)>>2)]=HEAP32[(($67+8)>>2)];HEAP32[(($66+12)>>2)]=HEAP32[(($67+12)>>2)];
      var $68=HEAP32[(($edgeA)>>2)];
      $edge1=$68;
      var $69=$1;
      var $70=(($69+56)|0);
      HEAP32[(($70)>>2)]=1;
      $flip=0;
      __label__ = 8; break;
    case 8: 
      var $72=(($incidentEdge)|0);
      var $73=(($72+24)|0);
      var $75 = $72;__label__ = 9; break;
    case 9: 
      var $75;
      __ZN12b2ClipVertexC1Ev($75);
      var $76=(($75+12)|0);
      var $77=(($76)|0)==(($73)|0);
      if ($77) { __label__ = 10; break; } else { var $75 = $76;__label__ = 9; break; }
    case 10: 
      var $79=(($incidentEdge)|0);
      var $80=$poly1;
      var $81=$edge1;
      var $82=$poly2;
      __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($79, $80, $xf1, $81, $82, $xf2);
      var $83=$poly1;
      var $84=(($83+148)|0);
      var $85=HEAP32[(($84)>>2)];
      $count1=$85;
      var $86=$poly1;
      var $87=(($86+20)|0);
      var $88=(($87)|0);
      $vertices1=$88;
      var $89=$edge1;
      $iv1=$89;
      var $90=$edge1;
      var $91=(($90+1)|0);
      var $92=$count1;
      var $93=(($91)|0) < (($92)|0);
      if ($93) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $95=$edge1;
      var $96=(($95+1)|0);
      var $99 = $96;__label__ = 13; break;
    case 12: 
      var $99 = 0;__label__ = 13; break;
    case 13: 
      var $99;
      $iv2=$99;
      var $100=$iv1;
      var $101=$vertices1;
      var $102=(($101+($100<<3))|0);
      var $103=$v11;
      var $104=$102;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[(($103+4)>>2)]=HEAP32[(($104+4)>>2)];
      var $105=$iv2;
      var $106=$vertices1;
      var $107=(($106+($105<<3))|0);
      var $108=$v12;
      var $109=$107;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[(($108+4)>>2)]=HEAP32[(($109+4)>>2)];
      __ZmiRK6b2Vec2S1_($localTangent, $v12, $v11);
      var $110=__ZN6b2Vec29NormalizeEv($localTangent);
      __Z7b2CrossRK6b2Vec2f($localNormal, $localTangent, 1);
      __ZplRK6b2Vec2S1_($6, $v11, $v12);
      __ZmlfRK6b2Vec2($planePoint, 0.5, $6);
      var $111=(($xf1+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($tangent, $111, $localTangent);
      __Z7b2CrossRK6b2Vec2f($normal, $tangent, 1);
      __Z5b2MulRK11b2TransformRK6b2Vec2($7, $xf1, $v11);
      var $112=$v11;
      var $113=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[(($112+4)>>2)]=HEAP32[(($113+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $xf1, $v12);
      var $114=$v12;
      var $115=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[(($114+4)>>2)]=HEAP32[(($115+4)>>2)];
      var $116=__Z5b2DotRK6b2Vec2S1_($normal, $v11);
      $frontOffset=$116;
      var $117=__Z5b2DotRK6b2Vec2S1_($tangent, $v11);
      var $118=(-$117);
      var $119=$totalRadius;
      var $120=$118+$119;
      $sideOffset1=$120;
      var $121=__Z5b2DotRK6b2Vec2S1_($tangent, $v12);
      var $122=$totalRadius;
      var $123=$121+$122;
      $sideOffset2=$123;
      var $124=(($clipPoints1)|0);
      var $125=(($124+24)|0);
      var $127 = $124;__label__ = 14; break;
    case 14: 
      var $127;
      __ZN12b2ClipVertexC1Ev($127);
      var $128=(($127+12)|0);
      var $129=(($128)|0)==(($125)|0);
      if ($129) { __label__ = 15; break; } else { var $127 = $128;__label__ = 14; break; }
    case 15: 
      var $131=(($clipPoints2)|0);
      var $132=(($131+24)|0);
      var $134 = $131;__label__ = 16; break;
    case 16: 
      var $134;
      __ZN12b2ClipVertexC1Ev($134);
      var $135=(($134+12)|0);
      var $136=(($135)|0)==(($132)|0);
      if ($136) { __label__ = 17; break; } else { var $134 = $135;__label__ = 16; break; }
    case 17: 
      var $138=(($clipPoints1)|0);
      var $139=(($incidentEdge)|0);
      __ZNK6b2Vec2ngEv($9, $tangent);
      var $140=$sideOffset1;
      var $141=$iv1;
      var $142=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($138, $139, $9, $140, $141);
      $np=$142;
      var $143=$np;
      var $144=(($143)|0) < 2;
      if ($144) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 30; break;
    case 19: 
      var $147=(($clipPoints2)|0);
      var $148=(($clipPoints1)|0);
      var $149=$sideOffset2;
      var $150=$iv2;
      var $151=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($147, $148, $tangent, $149, $150);
      $np=$151;
      var $152=$np;
      var $153=(($152)|0) < 2;
      if ($153) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 30; break;
    case 21: 
      var $156=$1;
      var $157=(($156+40)|0);
      var $158=$157;
      var $159=$localNormal;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[(($158+4)>>2)]=HEAP32[(($159+4)>>2)];
      var $160=$1;
      var $161=(($160+48)|0);
      var $162=$161;
      var $163=$planePoint;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($162)>>2)]=HEAP32[(($163)>>2)];HEAP32[(($162+4)>>2)]=HEAP32[(($163+4)>>2)];
      $pointCount=0;
      $i=0;
      __label__ = 22; break;
    case 22: 
      var $165=$i;
      var $166=(($165)|0) < 2;
      if ($166) { __label__ = 23; break; } else { __label__ = 29; break; }
    case 23: 
      var $168=$i;
      var $169=(($clipPoints2+$168*12)|0);
      var $170=(($169)|0);
      var $171=__Z5b2DotRK6b2Vec2S1_($normal, $170);
      var $172=$frontOffset;
      var $173=$171-$172;
      $separation=$173;
      var $174=$separation;
      var $175=$totalRadius;
      var $176=$174 <= $175;
      if ($176) { __label__ = 24; break; } else { __label__ = 27; break; }
    case 24: 
      var $178=$1;
      var $179=(($178)|0);
      var $180=(($179)|0);
      var $181=$pointCount;
      var $182=(($180+$181*20)|0);
      $cp=$182;
      var $183=$cp;
      var $184=(($183)|0);
      var $185=$i;
      var $186=(($clipPoints2+$185*12)|0);
      var $187=(($186)|0);
      __Z6b2MulTRK11b2TransformRK6b2Vec2($10, $xf2, $187);
      var $188=$184;
      var $189=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($188)>>2)]=HEAP32[(($189)>>2)];HEAP32[(($188+4)>>2)]=HEAP32[(($189+4)>>2)];
      var $190=$cp;
      var $191=(($190+16)|0);
      var $192=$i;
      var $193=(($clipPoints2+$192*12)|0);
      var $194=(($193+8)|0);
      var $195=$191;
      var $196=$194;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($195)>>2)]=HEAP32[(($196)>>2)];
      var $197=$flip;
      var $198=(($197 << 24) >> 24)!=0;
      if ($198) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $200=$cp;
      var $201=(($200+16)|0);
      var $202=$201;
      var $203=$cf;
      var $204=$202;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($203)]=HEAP8[($204)];HEAP8[($203+1)]=HEAP8[($204+1)];HEAP8[($203+2)]=HEAP8[($204+2)];HEAP8[($203+3)]=HEAP8[($204+3)];
      var $205=(($cf+1)|0);
      var $206=HEAP8[($205)];
      var $207=$cp;
      var $208=(($207+16)|0);
      var $209=$208;
      var $210=(($209)|0);
      HEAP8[($210)]=$206;
      var $211=(($cf)|0);
      var $212=HEAP8[($211)];
      var $213=$cp;
      var $214=(($213+16)|0);
      var $215=$214;
      var $216=(($215+1)|0);
      HEAP8[($216)]=$212;
      var $217=(($cf+3)|0);
      var $218=HEAP8[($217)];
      var $219=$cp;
      var $220=(($219+16)|0);
      var $221=$220;
      var $222=(($221+2)|0);
      HEAP8[($222)]=$218;
      var $223=(($cf+2)|0);
      var $224=HEAP8[($223)];
      var $225=$cp;
      var $226=(($225+16)|0);
      var $227=$226;
      var $228=(($227+3)|0);
      HEAP8[($228)]=$224;
      __label__ = 26; break;
    case 26: 
      var $230=$pointCount;
      var $231=(($230+1)|0);
      $pointCount=$231;
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $234=$i;
      var $235=(($234+1)|0);
      $i=$235;
      __label__ = 22; break;
    case 29: 
      var $237=$pointCount;
      var $238=$1;
      var $239=(($238+60)|0);
      HEAP32[(($239)>>2)]=$237;
      __label__ = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex, $poly1, $xf1, $poly2, $xf2) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $count1;
      var $normals1;
      var $d=__stackBase__;
      var $7=__stackBase__+8;
      var $8=__stackBase__+16;
      var $dLocal1=__stackBase__+24;
      var $edge;
      var $maxDot;
      var $i;
      var $dot;
      var $s;
      var $prevEdge;
      var $sPrev;
      var $nextEdge;
      var $sNext;
      var $bestEdge;
      var $bestSeparation;
      var $increment;
      $2=$edgeIndex;
      $3=$poly1;
      $4=$xf1;
      $5=$poly2;
      $6=$xf2;
      var $9=$3;
      var $10=(($9+148)|0);
      var $11=HEAP32[(($10)>>2)];
      $count1=$11;
      var $12=$3;
      var $13=(($12+84)|0);
      var $14=(($13)|0);
      $normals1=$14;
      var $15=$6;
      var $16=$5;
      var $17=(($16+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($7, $15, $17);
      var $18=$4;
      var $19=$3;
      var $20=(($19+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $18, $20);
      __ZmiRK6b2Vec2S1_($d, $7, $8);
      var $21=$4;
      var $22=(($21+8)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($dLocal1, $22, $d);
      $edge=0;
      $maxDot=-3.4028234663852886e+38;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $24=$i;
      var $25=$count1;
      var $26=(($24)|0) < (($25)|0);
      if ($26) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $28=$i;
      var $29=$normals1;
      var $30=(($29+($28<<3))|0);
      var $31=__Z5b2DotRK6b2Vec2S1_($30, $dLocal1);
      $dot=$31;
      var $32=$dot;
      var $33=$maxDot;
      var $34=$32 > $33;
      if ($34) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $36=$dot;
      $maxDot=$36;
      var $37=$i;
      $edge=$37;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $40=$i;
      var $41=(($40+1)|0);
      $i=$41;
      __label__ = 2; break;
    case 7: 
      var $43=$3;
      var $44=$4;
      var $45=$edge;
      var $46=$5;
      var $47=$6;
      var $48=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($43, $44, $45, $46, $47);
      $s=$48;
      var $49=$edge;
      var $50=(($49-1)|0);
      var $51=(($50)|0) >= 0;
      if ($51) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $53=$edge;
      var $54=(($53-1)|0);
      var $59 = $54;__label__ = 10; break;
    case 9: 
      var $56=$count1;
      var $57=(($56-1)|0);
      var $59 = $57;__label__ = 10; break;
    case 10: 
      var $59;
      $prevEdge=$59;
      var $60=$3;
      var $61=$4;
      var $62=$prevEdge;
      var $63=$5;
      var $64=$6;
      var $65=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($60, $61, $62, $63, $64);
      $sPrev=$65;
      var $66=$edge;
      var $67=(($66+1)|0);
      var $68=$count1;
      var $69=(($67)|0) < (($68)|0);
      if ($69) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $71=$edge;
      var $72=(($71+1)|0);
      var $75 = $72;__label__ = 13; break;
    case 12: 
      var $75 = 0;__label__ = 13; break;
    case 13: 
      var $75;
      $nextEdge=$75;
      var $76=$3;
      var $77=$4;
      var $78=$nextEdge;
      var $79=$5;
      var $80=$6;
      var $81=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($76, $77, $78, $79, $80);
      $sNext=$81;
      var $82=$sPrev;
      var $83=$s;
      var $84=$82 > $83;
      if ($84) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $86=$sPrev;
      var $87=$sNext;
      var $88=$86 > $87;
      if ($88) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $increment=-1;
      var $90=$prevEdge;
      $bestEdge=$90;
      var $91=$sPrev;
      $bestSeparation=$91;
      __label__ = 20; break;
    case 16: 
      var $93=$sNext;
      var $94=$s;
      var $95=$93 > $94;
      if ($95) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      $increment=1;
      var $97=$nextEdge;
      $bestEdge=$97;
      var $98=$sNext;
      $bestSeparation=$98;
      __label__ = 19; break;
    case 18: 
      var $100=$edge;
      var $101=$2;
      HEAP32[(($101)>>2)]=$100;
      var $102=$s;
      $1=$102;
      __label__ = 35; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $106=$increment;
      var $107=(($106)|0)==-1;
      if ($107) { __label__ = 22; break; } else { __label__ = 26; break; }
    case 22: 
      var $109=$bestEdge;
      var $110=(($109-1)|0);
      var $111=(($110)|0) >= 0;
      if ($111) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $113=$bestEdge;
      var $114=(($113-1)|0);
      var $119 = $114;__label__ = 25; break;
    case 24: 
      var $116=$count1;
      var $117=(($116-1)|0);
      var $119 = $117;__label__ = 25; break;
    case 25: 
      var $119;
      $edge=$119;
      __label__ = 30; break;
    case 26: 
      var $121=$bestEdge;
      var $122=(($121+1)|0);
      var $123=$count1;
      var $124=(($122)|0) < (($123)|0);
      if ($124) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $126=$bestEdge;
      var $127=(($126+1)|0);
      var $130 = $127;__label__ = 29; break;
    case 28: 
      var $130 = 0;__label__ = 29; break;
    case 29: 
      var $130;
      $edge=$130;
      __label__ = 30; break;
    case 30: 
      var $132=$3;
      var $133=$4;
      var $134=$edge;
      var $135=$5;
      var $136=$6;
      var $137=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($132, $133, $134, $135, $136);
      $s=$137;
      var $138=$s;
      var $139=$bestSeparation;
      var $140=$138 > $139;
      if ($140) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $142=$edge;
      $bestEdge=$142;
      var $143=$s;
      $bestSeparation=$143;
      __label__ = 33; break;
    case 32: 
      __label__ = 34; break;
    case 33: 
      __label__ = 21; break;
    case 34: 
      var $147=$bestEdge;
      var $148=$2;
      HEAP32[(($148)>>2)]=$147;
      var $149=$bestSeparation;
      $1=$149;
      __label__ = 35; break;
    case 35: 
      var $151=$1;
      STACKTOP = __stackBase__;
      return $151;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($c, $poly1, $xf1, $edge1, $poly2, $xf2) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $normals1;
      var $count2;
      var $vertices2;
      var $normals2;
      var $normal1=__stackBase__;
      var $7=__stackBase__+8;
      var $index;
      var $minDot;
      var $i;
      var $dot;
      var $i1;
      var $i2;
      var $8=__stackBase__+16;
      var $9=__stackBase__+24;
      $1=$c;
      $2=$poly1;
      $3=$xf1;
      $4=$edge1;
      $5=$poly2;
      $6=$xf2;
      var $10=$2;
      var $11=(($10+84)|0);
      var $12=(($11)|0);
      $normals1=$12;
      var $13=$5;
      var $14=(($13+148)|0);
      var $15=HEAP32[(($14)>>2)];
      $count2=$15;
      var $16=$5;
      var $17=(($16+20)|0);
      var $18=(($17)|0);
      $vertices2=$18;
      var $19=$5;
      var $20=(($19+84)|0);
      var $21=(($20)|0);
      $normals2=$21;
      var $22=$4;
      var $23=0 <= (($22)|0);
      if ($23) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $25=$4;
      var $26=$2;
      var $27=(($26+148)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($25)|0) < (($28)|0);
      if ($29) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str2)|0), 151, ((STRING_TABLE.___PRETTY_FUNCTION____ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_)|0), ((STRING_TABLE.__str13)|0));
      __label__ = 5; break;
    case 5: 
      var $33=$6;
      var $34=(($33+8)|0);
      var $35=$3;
      var $36=(($35+8)|0);
      var $37=$4;
      var $38=$normals1;
      var $39=(($38+($37<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $36, $39);
      __Z6b2MulTRK5b2RotRK6b2Vec2($normal1, $34, $7);
      $index=0;
      $minDot=3.4028234663852886e+38;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $41=$i;
      var $42=$count2;
      var $43=(($41)|0) < (($42)|0);
      if ($43) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $45=$i;
      var $46=$normals2;
      var $47=(($46+($45<<3))|0);
      var $48=__Z5b2DotRK6b2Vec2S1_($normal1, $47);
      $dot=$48;
      var $49=$dot;
      var $50=$minDot;
      var $51=$49 < $50;
      if ($51) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $53=$dot;
      $minDot=$53;
      var $54=$i;
      $index=$54;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $57=$i;
      var $58=(($57+1)|0);
      $i=$58;
      __label__ = 6; break;
    case 11: 
      var $60=$index;
      $i1=$60;
      var $61=$i1;
      var $62=(($61+1)|0);
      var $63=$count2;
      var $64=(($62)|0) < (($63)|0);
      if ($64) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $66=$i1;
      var $67=(($66+1)|0);
      var $70 = $67;__label__ = 14; break;
    case 13: 
      var $70 = 0;__label__ = 14; break;
    case 14: 
      var $70;
      $i2=$70;
      var $71=$1;
      var $72=(($71)|0);
      var $73=(($72)|0);
      var $74=$6;
      var $75=$i1;
      var $76=$vertices2;
      var $77=(($76+($75<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $74, $77);
      var $78=$73;
      var $79=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)];
      var $80=$4;
      var $81=(($80) & 255);
      var $82=$1;
      var $83=(($82)|0);
      var $84=(($83+8)|0);
      var $85=$84;
      var $86=(($85)|0);
      HEAP8[($86)]=$81;
      var $87=$i1;
      var $88=(($87) & 255);
      var $89=$1;
      var $90=(($89)|0);
      var $91=(($90+8)|0);
      var $92=$91;
      var $93=(($92+1)|0);
      HEAP8[($93)]=$88;
      var $94=$1;
      var $95=(($94)|0);
      var $96=(($95+8)|0);
      var $97=$96;
      var $98=(($97+2)|0);
      HEAP8[($98)]=1;
      var $99=$1;
      var $100=(($99)|0);
      var $101=(($100+8)|0);
      var $102=$101;
      var $103=(($102+3)|0);
      HEAP8[($103)]=0;
      var $104=$1;
      var $105=(($104+12)|0);
      var $106=(($105)|0);
      var $107=$6;
      var $108=$i2;
      var $109=$vertices2;
      var $110=(($109+($108<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($9, $107, $110);
      var $111=$106;
      var $112=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[(($111+4)>>2)]=HEAP32[(($112+4)>>2)];
      var $113=$4;
      var $114=(($113) & 255);
      var $115=$1;
      var $116=(($115+12)|0);
      var $117=(($116+8)|0);
      var $118=$117;
      var $119=(($118)|0);
      HEAP8[($119)]=$114;
      var $120=$i2;
      var $121=(($120) & 255);
      var $122=$1;
      var $123=(($122+12)|0);
      var $124=(($123+8)|0);
      var $125=$124;
      var $126=(($125+1)|0);
      HEAP8[($126)]=$121;
      var $127=$1;
      var $128=(($127+12)|0);
      var $129=(($128+8)|0);
      var $130=$129;
      var $131=(($130+2)|0);
      HEAP8[($131)]=1;
      var $132=$1;
      var $133=(($132+12)|0);
      var $134=(($133+8)|0);
      var $135=$134;
      var $136=(($135+3)|0);
      HEAP8[($136)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7b2CrossRK6b2Vec2f($agg_result, $a, $s) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$s;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$3*$6;
  var $8=$2;
  var $9=(-$8);
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$9*$12;
  __ZN6b2Vec2C1Eff($agg_result, $7, $13);
  ;
  return;
}


function __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $edge1, $poly2, $xf2) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $vertices1;
      var $normals1;
      var $count2;
      var $vertices2;
      var $normal1World=__stackBase__;
      var $normal1=__stackBase__+8;
      var $index;
      var $minDot;
      var $i;
      var $dot;
      var $v1=__stackBase__+16;
      var $v2=__stackBase__+24;
      var $separation;
      var $6=__stackBase__+32;
      $1=$poly1;
      $2=$xf1;
      $3=$edge1;
      $4=$poly2;
      $5=$xf2;
      var $7=$1;
      var $8=(($7+20)|0);
      var $9=(($8)|0);
      $vertices1=$9;
      var $10=$1;
      var $11=(($10+84)|0);
      var $12=(($11)|0);
      $normals1=$12;
      var $13=$4;
      var $14=(($13+148)|0);
      var $15=HEAP32[(($14)>>2)];
      $count2=$15;
      var $16=$4;
      var $17=(($16+20)|0);
      var $18=(($17)|0);
      $vertices2=$18;
      var $19=$3;
      var $20=0 <= (($19)|0);
      if ($20) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $22=$3;
      var $23=$1;
      var $24=(($23+148)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22)|0) < (($25)|0);
      if ($26) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str2)|0), 32, ((STRING_TABLE.___PRETTY_FUNCTION____ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_)|0), ((STRING_TABLE.__str13)|0));
      __label__ = 5; break;
    case 5: 
      var $30=$2;
      var $31=(($30+8)|0);
      var $32=$3;
      var $33=$normals1;
      var $34=(($33+($32<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal1World, $31, $34);
      var $35=$5;
      var $36=(($35+8)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($normal1, $36, $normal1World);
      $index=0;
      $minDot=3.4028234663852886e+38;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $38=$i;
      var $39=$count2;
      var $40=(($38)|0) < (($39)|0);
      if ($40) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $42=$i;
      var $43=$vertices2;
      var $44=(($43+($42<<3))|0);
      var $45=__Z5b2DotRK6b2Vec2S1_($44, $normal1);
      $dot=$45;
      var $46=$dot;
      var $47=$minDot;
      var $48=$46 < $47;
      if ($48) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $50=$dot;
      $minDot=$50;
      var $51=$i;
      $index=$51;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $54=$i;
      var $55=(($54+1)|0);
      $i=$55;
      __label__ = 6; break;
    case 11: 
      var $57=$2;
      var $58=$3;
      var $59=$vertices1;
      var $60=(($59+($58<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $57, $60);
      var $61=$5;
      var $62=$index;
      var $63=$vertices2;
      var $64=(($63+($62<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $61, $64);
      __ZmiRK6b2Vec2S1_($6, $v2, $v1);
      var $65=__Z5b2DotRK6b2Vec2S1_($6, $normal1World);
      $separation=$65;
      var $66=$separation;
      STACKTOP = __stackBase__;
      return $66;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($this, $manifold, $xfA, $radiusA, $xfB, $radiusB) {
  var __stackBase__  = STACKTOP; STACKTOP += 240; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $pointA=__stackBase__;
      var $pointB=__stackBase__+8;
      var $7=__stackBase__+16;
      var $cA=__stackBase__+24;
      var $8=__stackBase__+32;
      var $cB=__stackBase__+40;
      var $9=__stackBase__+48;
      var $10=__stackBase__+56;
      var $11=__stackBase__+64;
      var $12=__stackBase__+72;
      var $planePoint=__stackBase__+80;
      var $i;
      var $clipPoint=__stackBase__+88;
      var $cA1=__stackBase__+96;
      var $13=__stackBase__+104;
      var $14=__stackBase__+112;
      var $cB2=__stackBase__+120;
      var $15=__stackBase__+128;
      var $16=__stackBase__+136;
      var $17=__stackBase__+144;
      var $18=__stackBase__+152;
      var $planePoint3=__stackBase__+160;
      var $i4;
      var $clipPoint5=__stackBase__+168;
      var $cB6=__stackBase__+176;
      var $19=__stackBase__+184;
      var $20=__stackBase__+192;
      var $cA7=__stackBase__+200;
      var $21=__stackBase__+208;
      var $22=__stackBase__+216;
      var $23=__stackBase__+224;
      var $24=__stackBase__+232;
      $1=$this;
      $2=$manifold;
      $3=$xfA;
      $4=$radiusA;
      $5=$xfB;
      $6=$radiusB;
      var $25=$1;
      var $26=$2;
      var $27=(($26+60)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==0;
      if ($29) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 17; break;
    case 3: 
      var $32=$2;
      var $33=(($32+56)|0);
      var $34=HEAP32[(($33)>>2)];
      if ((($34)|0) == 0) {
        __label__ = 4; break;
      }
      else if ((($34)|0) == 1) {
        __label__ = 7; break;
      }
      else if ((($34)|0) == 2) {
        __label__ = 12; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 4: 
      var $36=(($25)|0);
      __ZN6b2Vec23SetEff($36, 1, 0);
      var $37=$3;
      var $38=$2;
      var $39=(($38+48)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $37, $39);
      var $40=$5;
      var $41=$2;
      var $42=(($41)|0);
      var $43=(($42)|0);
      var $44=(($43)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $40, $44);
      var $45=__Z17b2DistanceSquaredRK6b2Vec2S1_($pointA, $pointB);
      var $46=$45 > 1.4210854715202004e-14;
      if ($46) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $48=(($25)|0);
      __ZmiRK6b2Vec2S1_($7, $pointB, $pointA);
      var $49=$48;
      var $50=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[(($49+4)>>2)]=HEAP32[(($50+4)>>2)];
      var $51=(($25)|0);
      var $52=__ZN6b2Vec29NormalizeEv($51);
      __label__ = 6; break;
    case 6: 
      var $54=$4;
      var $55=(($25)|0);
      __ZmlfRK6b2Vec2($8, $54, $55);
      __ZplRK6b2Vec2S1_($cA, $pointA, $8);
      var $56=$6;
      var $57=(($25)|0);
      __ZmlfRK6b2Vec2($9, $56, $57);
      __ZmiRK6b2Vec2S1_($cB, $pointB, $9);
      var $58=(($25+8)|0);
      var $59=(($58)|0);
      __ZplRK6b2Vec2S1_($11, $cA, $cB);
      __ZmlfRK6b2Vec2($10, 0.5, $11);
      var $60=$59;
      var $61=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[(($60+4)>>2)]=HEAP32[(($61+4)>>2)];
      __label__ = 17; break;
    case 7: 
      var $63=(($25)|0);
      var $64=$3;
      var $65=(($64+8)|0);
      var $66=$2;
      var $67=(($66+40)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($12, $65, $67);
      var $68=$63;
      var $69=$12;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($68)>>2)]=HEAP32[(($69)>>2)];HEAP32[(($68+4)>>2)]=HEAP32[(($69+4)>>2)];
      var $70=$3;
      var $71=$2;
      var $72=(($71+48)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint, $70, $72);
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $74=$i;
      var $75=$2;
      var $76=(($75+60)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)|0) < (($77)|0);
      if ($78) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $80=$5;
      var $81=$i;
      var $82=$2;
      var $83=(($82)|0);
      var $84=(($83+$81*20)|0);
      var $85=(($84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint, $80, $85);
      var $86=$4;
      __ZmiRK6b2Vec2S1_($14, $clipPoint, $planePoint);
      var $87=(($25)|0);
      var $88=__Z5b2DotRK6b2Vec2S1_($14, $87);
      var $89=$86-$88;
      var $90=(($25)|0);
      __ZmlfRK6b2Vec2($13, $89, $90);
      __ZplRK6b2Vec2S1_($cA1, $clipPoint, $13);
      var $91=$6;
      var $92=(($25)|0);
      __ZmlfRK6b2Vec2($15, $91, $92);
      __ZmiRK6b2Vec2S1_($cB2, $clipPoint, $15);
      var $93=$i;
      var $94=(($25+8)|0);
      var $95=(($94+($93<<3))|0);
      __ZplRK6b2Vec2S1_($17, $cA1, $cB2);
      __ZmlfRK6b2Vec2($16, 0.5, $17);
      var $96=$95;
      var $97=$16;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[(($96+4)>>2)]=HEAP32[(($97+4)>>2)];
      __label__ = 10; break;
    case 10: 
      var $99=$i;
      var $100=(($99+1)|0);
      $i=$100;
      __label__ = 8; break;
    case 11: 
      __label__ = 17; break;
    case 12: 
      var $103=(($25)|0);
      var $104=$5;
      var $105=(($104+8)|0);
      var $106=$2;
      var $107=(($106+40)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($18, $105, $107);
      var $108=$103;
      var $109=$18;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[(($108+4)>>2)]=HEAP32[(($109+4)>>2)];
      var $110=$5;
      var $111=$2;
      var $112=(($111+48)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint3, $110, $112);
      $i4=0;
      __label__ = 13; break;
    case 13: 
      var $114=$i4;
      var $115=$2;
      var $116=(($115+60)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($114)|0) < (($117)|0);
      if ($118) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $120=$3;
      var $121=$i4;
      var $122=$2;
      var $123=(($122)|0);
      var $124=(($123+$121*20)|0);
      var $125=(($124)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint5, $120, $125);
      var $126=$6;
      __ZmiRK6b2Vec2S1_($20, $clipPoint5, $planePoint3);
      var $127=(($25)|0);
      var $128=__Z5b2DotRK6b2Vec2S1_($20, $127);
      var $129=$126-$128;
      var $130=(($25)|0);
      __ZmlfRK6b2Vec2($19, $129, $130);
      __ZplRK6b2Vec2S1_($cB6, $clipPoint5, $19);
      var $131=$4;
      var $132=(($25)|0);
      __ZmlfRK6b2Vec2($21, $131, $132);
      __ZmiRK6b2Vec2S1_($cA7, $clipPoint5, $21);
      var $133=$i4;
      var $134=(($25+8)|0);
      var $135=(($134+($133<<3))|0);
      __ZplRK6b2Vec2S1_($23, $cA7, $cB6);
      __ZmlfRK6b2Vec2($22, 0.5, $23);
      var $136=$135;
      var $137=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[(($136+4)>>2)]=HEAP32[(($137+4)>>2)];
      __label__ = 15; break;
    case 15: 
      var $139=$i4;
      var $140=(($139+1)|0);
      $i4=$140;
      __label__ = 13; break;
    case 16: 
      var $142=(($25)|0);
      var $143=(($25)|0);
      __ZNK6b2Vec2ngEv($24, $143);
      var $144=$142;
      var $145=$24;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[(($144+4)>>2)]=HEAP32[(($145+4)>>2)];
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z6b2SwapIfEvRT_S1_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  var $tmp;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=HEAPF32[(($3)>>2)];
  $tmp=$4;
  var $5=$2;
  var $6=HEAPF32[(($5)>>2)];
  var $7=$1;
  HEAPF32[(($7)>>2)]=$6;
  var $8=$tmp;
  var $9=$2;
  HEAPF32[(($9)>>2)]=$8;
  ;
  return;
}


function __Z5b2AbsIfET_S0_($a) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$a;
      var $2=$1;
      var $3=$2 > 0;
      if ($3) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $5=$1;
      var $10 = $5;__label__ = 4; break;
    case 3: 
      var $7=$1;
      var $8=(-$7);
      var $10 = $8;__label__ = 4; break;
    case 4: 
      var $10;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Vec2clEi($this, $i) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$i;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=(($5+($4<<2))|0);
  ;
  return $6;
}


function __ZNK6b2Vec2clEi($this, $i) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$i;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=(($5+($4<<2))|0);
  var $7=HEAPF32[(($6)>>2)];
  ;
  return $7;
}


function __ZNK7b2Shape7GetTypeEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __Z16b2GetPointStatesP12b2PointStateS0_PK10b2ManifoldS3_($state1, $state2, $manifold1, $manifold2) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $i1;
      var $id=__stackBase__;
      var $j;
      var $i2;
      var $id3=__stackBase__+4;
      var $j4;
      $1=$state1;
      $2=$state2;
      $3=$manifold1;
      $4=$manifold2;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $6=$i;
      var $7=(($6)|0) < 2;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$i;
      var $10=$1;
      var $11=(($10+($9<<2))|0);
      HEAP32[(($11)>>2)]=0;
      var $12=$i;
      var $13=$2;
      var $14=(($13+($12<<2))|0);
      HEAP32[(($14)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      var $16=$i;
      var $17=(($16+1)|0);
      $i=$17;
      __label__ = 2; break;
    case 5: 
      $i1=0;
      __label__ = 6; break;
    case 6: 
      var $20=$i1;
      var $21=$3;
      var $22=(($21+60)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($20)|0) < (($23)|0);
      if ($24) { __label__ = 7; break; } else { __label__ = 15; break; }
    case 7: 
      var $26=$i1;
      var $27=$3;
      var $28=(($27)|0);
      var $29=(($28+$26*20)|0);
      var $30=(($29+16)|0);
      var $31=$id;
      var $32=$30;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];
      var $33=$i1;
      var $34=$1;
      var $35=(($34+($33<<2))|0);
      HEAP32[(($35)>>2)]=3;
      $j=0;
      __label__ = 8; break;
    case 8: 
      var $37=$j;
      var $38=$4;
      var $39=(($38+60)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($37)|0) < (($40)|0);
      if ($41) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $43=$j;
      var $44=$4;
      var $45=(($44)|0);
      var $46=(($45+$43*20)|0);
      var $47=(($46+16)|0);
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=$id;
      var $51=HEAP32[(($50)>>2)];
      var $52=(($49)|0)==(($51)|0);
      if ($52) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $54=$i1;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=2;
      __label__ = 13; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $59=$j;
      var $60=(($59+1)|0);
      $j=$60;
      __label__ = 8; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $63=$i1;
      var $64=(($63+1)|0);
      $i1=$64;
      __label__ = 6; break;
    case 15: 
      $i2=0;
      __label__ = 16; break;
    case 16: 
      var $67=$i2;
      var $68=$4;
      var $69=(($68+60)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($67)|0) < (($70)|0);
      if ($71) { __label__ = 17; break; } else { __label__ = 25; break; }
    case 17: 
      var $73=$i2;
      var $74=$4;
      var $75=(($74)|0);
      var $76=(($75+$73*20)|0);
      var $77=(($76+16)|0);
      var $78=$id3;
      var $79=$77;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];
      var $80=$i2;
      var $81=$2;
      var $82=(($81+($80<<2))|0);
      HEAP32[(($82)>>2)]=1;
      $j4=0;
      __label__ = 18; break;
    case 18: 
      var $84=$j4;
      var $85=$3;
      var $86=(($85+60)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($84)|0) < (($87)|0);
      if ($88) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      var $90=$j4;
      var $91=$3;
      var $92=(($91)|0);
      var $93=(($92+$90*20)|0);
      var $94=(($93+16)|0);
      var $95=$94;
      var $96=HEAP32[(($95)>>2)];
      var $97=$id3;
      var $98=HEAP32[(($97)>>2)];
      var $99=(($96)|0)==(($98)|0);
      if ($99) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $101=$i2;
      var $102=$2;
      var $103=(($102+($101<<2))|0);
      HEAP32[(($103)>>2)]=2;
      __label__ = 23; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $106=$j4;
      var $107=(($106+1)|0);
      $j4=$107;
      __label__ = 18; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $110=$i2;
      var $111=(($110+1)|0);
      $i2=$111;
      __label__ = 16; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2AABB7RayCastEP15b2RayCastOutputRK14b2RayCastInput($this, $output, $input) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tmin;
      var $tmax;
      var $p=__stackBase__;
      var $d=__stackBase__+8;
      var $absD=__stackBase__+16;
      var $normal=__stackBase__+24;
      var $i;
      var $inv_d;
      var $t1=__stackBase__+32;
      var $t2=__stackBase__+36;
      var $s;
      $2=$this;
      $3=$output;
      $4=$input;
      var $5=$2;
      $tmin=-3.4028234663852886e+38;
      $tmax=3.4028234663852886e+38;
      var $6=$4;
      var $7=(($6)|0);
      var $8=$p;
      var $9=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[(($8+4)>>2)]=HEAP32[(($9+4)>>2)];
      var $10=$4;
      var $11=(($10+8)|0);
      var $12=$4;
      var $13=(($12)|0);
      __ZmiRK6b2Vec2S1_($d, $11, $13);
      __Z5b2AbsRK6b2Vec2($absD, $d);
      __ZN6b2Vec2C1Ev($normal);
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $15=$i;
      var $16=(($15)|0) < 2;
      if ($16) { __label__ = 3; break; } else { __label__ = 17; break; }
    case 3: 
      var $18=$i;
      var $19=__ZN6b2Vec2clEi($absD, $18);
      var $20=HEAPF32[(($19)>>2)];
      var $21=$20 < 1.1920928955078125e-7;
      if ($21) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $23=$i;
      var $24=__ZN6b2Vec2clEi($p, $23);
      var $25=HEAPF32[(($24)>>2)];
      var $26=(($5)|0);
      var $27=$i;
      var $28=__ZNK6b2Vec2clEi($26, $27);
      var $29=$25 < $28;
      if ($29) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $31=(($5+8)|0);
      var $32=$i;
      var $33=__ZNK6b2Vec2clEi($31, $32);
      var $34=$i;
      var $35=__ZN6b2Vec2clEi($p, $34);
      var $36=HEAPF32[(($35)>>2)];
      var $37=$33 < $36;
      if ($37) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 21; break;
    case 7: 
      __label__ = 15; break;
    case 8: 
      var $41=$i;
      var $42=__ZN6b2Vec2clEi($d, $41);
      var $43=HEAPF32[(($42)>>2)];
      var $44=1/$43;
      $inv_d=$44;
      var $45=(($5)|0);
      var $46=$i;
      var $47=__ZNK6b2Vec2clEi($45, $46);
      var $48=$i;
      var $49=__ZN6b2Vec2clEi($p, $48);
      var $50=HEAPF32[(($49)>>2)];
      var $51=$47-$50;
      var $52=$inv_d;
      var $53=$51*$52;
      HEAPF32[(($t1)>>2)]=$53;
      var $54=(($5+8)|0);
      var $55=$i;
      var $56=__ZNK6b2Vec2clEi($54, $55);
      var $57=$i;
      var $58=__ZN6b2Vec2clEi($p, $57);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$56-$59;
      var $61=$inv_d;
      var $62=$60*$61;
      HEAPF32[(($t2)>>2)]=$62;
      $s=-1;
      var $63=HEAPF32[(($t1)>>2)];
      var $64=HEAPF32[(($t2)>>2)];
      var $65=$63 > $64;
      if ($65) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __Z6b2SwapIfEvRT_S1_($t1, $t2);
      $s=1;
      __label__ = 10; break;
    case 10: 
      var $68=HEAPF32[(($t1)>>2)];
      var $69=$tmin;
      var $70=$68 > $69;
      if ($70) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __ZN6b2Vec27SetZeroEv($normal);
      var $72=$s;
      var $73=$i;
      var $74=__ZN6b2Vec2clEi($normal, $73);
      HEAPF32[(($74)>>2)]=$72;
      var $75=HEAPF32[(($t1)>>2)];
      $tmin=$75;
      __label__ = 12; break;
    case 12: 
      var $77=$tmax;
      var $78=HEAPF32[(($t2)>>2)];
      var $79=__Z5b2MinIfET_S0_S0_($77, $78);
      $tmax=$79;
      var $80=$tmin;
      var $81=$tmax;
      var $82=$80 > $81;
      if ($82) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=0;
      __label__ = 21; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $87=$i;
      var $88=(($87+1)|0);
      $i=$88;
      __label__ = 2; break;
    case 17: 
      var $90=$tmin;
      var $91=$90 < 0;
      if ($91) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $93=$4;
      var $94=(($93+16)|0);
      var $95=HEAPF32[(($94)>>2)];
      var $96=$tmin;
      var $97=$95 < $96;
      if ($97) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      $1=0;
      __label__ = 21; break;
    case 20: 
      var $100=$tmin;
      var $101=$3;
      var $102=(($101+8)|0);
      HEAPF32[(($102)>>2)]=$100;
      var $103=$3;
      var $104=(($103)|0);
      var $105=$104;
      var $106=$normal;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($105)>>2)]=HEAP32[(($106)>>2)];HEAP32[(($105+4)>>2)]=HEAP32[(($106+4)>>2)];
      $1=1;
      __label__ = 21; break;
    case 21: 
      var $108=$1;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5b2AbsRK6b2Vec2($agg_result, $a) {
  ;
  var __label__;

  var $1;
  $1=$a;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=__Z5b2AbsIfET_S0_($4);
  var $6=$1;
  var $7=(($6+4)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=__Z5b2AbsIfET_S0_($8);
  __ZN6b2Vec2C1Eff($agg_result, $5, $9);
  ;
  return;
}


function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut, $vIn, $normal, $offset, $vertexIndexA) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $numOut;
      var $distance0;
      var $distance1;
      var $interp;
      var $6=__stackBase__;
      var $7=__stackBase__+8;
      var $8=__stackBase__+16;
      $1=$vOut;
      $2=$vIn;
      $3=$normal;
      $4=$offset;
      $5=$vertexIndexA;
      $numOut=0;
      var $9=$3;
      var $10=$2;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=__Z5b2DotRK6b2Vec2S1_($9, $12);
      var $14=$4;
      var $15=$13-$14;
      $distance0=$15;
      var $16=$3;
      var $17=$2;
      var $18=(($17+12)|0);
      var $19=(($18)|0);
      var $20=__Z5b2DotRK6b2Vec2S1_($16, $19);
      var $21=$4;
      var $22=$20-$21;
      $distance1=$22;
      var $23=$distance0;
      var $24=$23 <= 0;
      if ($24) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $26=$numOut;
      var $27=(($26+1)|0);
      $numOut=$27;
      var $28=$1;
      var $29=(($28+$26*12)|0);
      var $30=$2;
      var $31=(($30)|0);
      var $32=$29;
      var $33=$31;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];HEAP32[(($32+8)>>2)]=HEAP32[(($33+8)>>2)];
      __label__ = 3; break;
    case 3: 
      var $35=$distance1;
      var $36=$35 <= 0;
      if ($36) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $38=$numOut;
      var $39=(($38+1)|0);
      $numOut=$39;
      var $40=$1;
      var $41=(($40+$38*12)|0);
      var $42=$2;
      var $43=(($42+12)|0);
      var $44=$41;
      var $45=$43;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[(($44+4)>>2)]=HEAP32[(($45+4)>>2)];HEAP32[(($44+8)>>2)]=HEAP32[(($45+8)>>2)];
      __label__ = 5; break;
    case 5: 
      var $47=$distance0;
      var $48=$distance1;
      var $49=$47*$48;
      var $50=$49 < 0;
      if ($50) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $52=$distance0;
      var $53=$distance0;
      var $54=$distance1;
      var $55=$53-$54;
      var $56=$52/$55;
      $interp=$56;
      var $57=$numOut;
      var $58=$1;
      var $59=(($58+$57*12)|0);
      var $60=(($59)|0);
      var $61=$2;
      var $62=(($61)|0);
      var $63=(($62)|0);
      var $64=$interp;
      var $65=$2;
      var $66=(($65+12)|0);
      var $67=(($66)|0);
      var $68=$2;
      var $69=(($68)|0);
      var $70=(($69)|0);
      __ZmiRK6b2Vec2S1_($8, $67, $70);
      __ZmlfRK6b2Vec2($7, $64, $8);
      __ZplRK6b2Vec2S1_($6, $63, $7);
      var $71=$60;
      var $72=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[(($71+4)>>2)]=HEAP32[(($72+4)>>2)];
      var $73=$5;
      var $74=(($73) & 255);
      var $75=$numOut;
      var $76=$1;
      var $77=(($76+$75*12)|0);
      var $78=(($77+8)|0);
      var $79=$78;
      var $80=(($79)|0);
      HEAP8[($80)]=$74;
      var $81=$2;
      var $82=(($81)|0);
      var $83=(($82+8)|0);
      var $84=$83;
      var $85=(($84+1)|0);
      var $86=HEAP8[($85)];
      var $87=$numOut;
      var $88=$1;
      var $89=(($88+$87*12)|0);
      var $90=(($89+8)|0);
      var $91=$90;
      var $92=(($91+1)|0);
      HEAP8[($92)]=$86;
      var $93=$numOut;
      var $94=$1;
      var $95=(($94+$93*12)|0);
      var $96=(($95+8)|0);
      var $97=$96;
      var $98=(($97+2)|0);
      HEAP8[($98)]=0;
      var $99=$numOut;
      var $100=$1;
      var $101=(($100+$99*12)|0);
      var $102=(($101+8)|0);
      var $103=$102;
      var $104=(($103+3)|0);
      HEAP8[($104)]=1;
      var $105=$numOut;
      var $106=(($105+1)|0);
      $numOut=$106;
      __label__ = 7; break;
    case 7: 
      var $108=$numOut;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($shapeA, $indexA, $shapeB, $indexB, $xfA, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $input=__stackBase__;
  var $cache=__stackBase__+92;
  var $output=__stackBase__+104;
  $1=$shapeA;
  $2=$indexA;
  $3=$shapeB;
  $4=$indexB;
  $5=$xfA;
  $6=$xfB;
  __ZN15b2DistanceInputC1Ev($input);
  var $7=(($input)|0);
  var $8=$1;
  var $9=$2;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($7, $8, $9);
  var $10=(($input+28)|0);
  var $11=$3;
  var $12=$4;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($10, $11, $12);
  var $13=(($input+56)|0);
  var $14=$5;
  var $15=$13;
  var $16=$14;
  assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[(($15+4)>>2)]=HEAP32[(($16+4)>>2)];HEAP32[(($15+8)>>2)]=HEAP32[(($16+8)>>2)];HEAP32[(($15+12)>>2)]=HEAP32[(($16+12)>>2)];
  var $17=(($input+72)|0);
  var $18=$6;
  var $19=$17;
  var $20=$18;
  assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[(($19+4)>>2)]=HEAP32[(($20+4)>>2)];HEAP32[(($19+8)>>2)]=HEAP32[(($20+8)>>2)];HEAP32[(($19+12)>>2)]=HEAP32[(($20+12)>>2)];
  var $21=(($input+88)|0);
  HEAP8[($21)]=1;
  var $22=(($cache+4)|0);
  HEAP16[(($22)>>1)]=0;
  __ZN16b2DistanceOutputC1Ev($output);
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input);
  var $23=(($output+16)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=$24 < 0.0000011920928955078125;
  STACKTOP = __stackBase__;
  return $25;
}


function __ZN15b2DistanceInputC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2DistanceInputC2Ev($2);
  ;
  return;
}


function __ZN16b2DistanceOutputC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2DistanceOutputC2Ev($2);
  ;
  return;
}


function __ZN16b2DistanceOutputC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  ;
  return;
}


function __ZN15b2DistanceInputC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN15b2DistanceProxyC1Ev($3);
  var $4=(($2+28)|0);
  __ZN15b2DistanceProxyC1Ev($4);
  var $5=(($2+56)|0);
  __ZN11b2TransformC1Ev($5);
  var $6=(($2+72)|0);
  __ZN11b2TransformC1Ev($6);
  ;
  return;
}


function __ZN15b2DistanceProxyC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2DistanceProxyC2Ev($2);
  ;
  return;
}


function __ZN15b2DistanceProxyC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=(($4+16)|0);
      var $7 = $4;__label__ = 2; break;
    case 2: 
      var $7;
      __ZN6b2Vec2C1Ev($7);
      var $8=(($7+8)|0);
      var $9=(($8)|0)==(($5)|0);
      if ($9) { __label__ = 3; break; } else { var $7 = $8;__label__ = 2; break; }
    case 3: 
      var $11=(($2+16)|0);
      HEAP32[(($11)>>2)]=0;
      var $12=(($2+20)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=(($2+24)|0);
      HEAPF32[(($13)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this, $shape, $index) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $circle;
      var $polygon;
      var $chain;
      var $edge;
      $1=$this;
      $2=$shape;
      $3=$index;
      var $4=$1;
      var $5=$2;
      var $6=__ZNK7b2Shape7GetTypeEv($5);
      if ((($6)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($6)|0) == 2) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 3) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 1) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 2: 
      var $8=$2;
      var $9=$8;
      $circle=$9;
      var $10=$circle;
      var $11=(($10+12)|0);
      var $12=(($4+16)|0);
      HEAP32[(($12)>>2)]=$11;
      var $13=(($4+20)|0);
      HEAP32[(($13)>>2)]=1;
      var $14=$circle;
      var $15=$14;
      var $16=(($15+8)|0);
      var $17=HEAPF32[(($16)>>2)];
      var $18=(($4+24)|0);
      HEAPF32[(($18)>>2)]=$17;
      __label__ = 14; break;
    case 3: 
      var $20=$2;
      var $21=$20;
      $polygon=$21;
      var $22=$polygon;
      var $23=(($22+20)|0);
      var $24=(($23)|0);
      var $25=(($4+16)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=$polygon;
      var $27=(($26+148)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($4+20)|0);
      HEAP32[(($29)>>2)]=$28;
      var $30=$polygon;
      var $31=$30;
      var $32=(($31+8)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=(($4+24)|0);
      HEAPF32[(($34)>>2)]=$33;
      __label__ = 14; break;
    case 4: 
      var $36=$2;
      var $37=$36;
      $chain=$37;
      var $38=$3;
      var $39=0 <= (($38)|0);
      if ($39) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $41=$3;
      var $42=$chain;
      var $43=(($42+16)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($41)|0) < (($44)|0);
      if ($45) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      ___assert_func(((STRING_TABLE.__str6)|0), 53, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2DistanceProxy3SetEPK7b2Shapei)|0), ((STRING_TABLE.__str17)|0));
      __label__ = 8; break;
    case 8: 
      var $49=(($4)|0);
      var $50=(($49)|0);
      var $51=$3;
      var $52=$chain;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($51<<3))|0);
      var $56=$50;
      var $57=$55;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[(($56+4)>>2)]=HEAP32[(($57+4)>>2)];
      var $58=$3;
      var $59=(($58+1)|0);
      var $60=$chain;
      var $61=(($60+16)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($59)|0) < (($62)|0);
      if ($63) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $65=(($4)|0);
      var $66=(($65+8)|0);
      var $67=$3;
      var $68=(($67+1)|0);
      var $69=$chain;
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+($68<<3))|0);
      var $73=$66;
      var $74=$72;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[(($73+4)>>2)]=HEAP32[(($74+4)>>2)];
      __label__ = 11; break;
    case 10: 
      var $76=(($4)|0);
      var $77=(($76+8)|0);
      var $78=$chain;
      var $79=(($78+12)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|0);
      var $82=$77;
      var $83=$81;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[(($82+4)>>2)]=HEAP32[(($83+4)>>2)];
      __label__ = 11; break;
    case 11: 
      var $85=(($4)|0);
      var $86=(($85)|0);
      var $87=(($4+16)|0);
      HEAP32[(($87)>>2)]=$86;
      var $88=(($4+20)|0);
      HEAP32[(($88)>>2)]=2;
      var $89=$chain;
      var $90=$89;
      var $91=(($90+8)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=(($4+24)|0);
      HEAPF32[(($93)>>2)]=$92;
      __label__ = 14; break;
    case 12: 
      var $95=$2;
      var $96=$95;
      $edge=$96;
      var $97=$edge;
      var $98=(($97+12)|0);
      var $99=(($4+16)|0);
      HEAP32[(($99)>>2)]=$98;
      var $100=(($4+20)|0);
      HEAP32[(($100)>>2)]=2;
      var $101=$edge;
      var $102=$101;
      var $103=(($102+8)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=(($4+24)|0);
      HEAPF32[(($105)>>2)]=$104;
      __label__ = 14; break;
    case 13: 
      ___assert_func(((STRING_TABLE.__str6)|0), 81, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2DistanceProxy3SetEPK7b2Shapei)|0), ((STRING_TABLE.__str28)|0));
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Simplex6Solve2Ev($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $w1=__stackBase__;
      var $w2=__stackBase__+8;
      var $e12=__stackBase__+16;
      var $d12_2;
      var $d12_1;
      var $inv_d12;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3+16)|0);
      var $5=$w1;
      var $6=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[(($5+4)>>2)]=HEAP32[(($6+4)>>2)];
      var $7=(($2+36)|0);
      var $8=(($7+16)|0);
      var $9=$w2;
      var $10=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[(($9+4)>>2)]=HEAP32[(($10+4)>>2)];
      __ZmiRK6b2Vec2S1_($e12, $w2, $w1);
      var $11=__Z5b2DotRK6b2Vec2S1_($w1, $e12);
      var $12=(-$11);
      $d12_2=$12;
      var $13=$d12_2;
      var $14=$13 <= 0;
      if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $16=(($2)|0);
      var $17=(($16+24)|0);
      HEAPF32[(($17)>>2)]=1;
      var $18=(($2+108)|0);
      HEAP32[(($18)>>2)]=1;
      __label__ = 6; break;
    case 3: 
      var $20=__Z5b2DotRK6b2Vec2S1_($w2, $e12);
      $d12_1=$20;
      var $21=$d12_1;
      var $22=$21 <= 0;
      if ($22) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $24=(($2+36)|0);
      var $25=(($24+24)|0);
      HEAPF32[(($25)>>2)]=1;
      var $26=(($2+108)|0);
      HEAP32[(($26)>>2)]=1;
      var $27=(($2)|0);
      var $28=(($2+36)|0);
      var $29=$27;
      var $30=$28;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $30>>2, $$dest = $29>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      __label__ = 6; break;
    case 5: 
      var $32=$d12_1;
      var $33=$d12_2;
      var $34=$32+$33;
      var $35=1/$34;
      $inv_d12=$35;
      var $36=$d12_1;
      var $37=$inv_d12;
      var $38=$36*$37;
      var $39=(($2)|0);
      var $40=(($39+24)|0);
      HEAPF32[(($40)>>2)]=$38;
      var $41=$d12_2;
      var $42=$inv_d12;
      var $43=$41*$42;
      var $44=(($2+36)|0);
      var $45=(($44+24)|0);
      HEAPF32[(($45)>>2)]=$43;
      var $46=(($2+108)|0);
      HEAP32[(($46)>>2)]=2;
      __label__ = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Simplex6Solve3Ev($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $w1=__stackBase__;
      var $w2=__stackBase__+8;
      var $w3=__stackBase__+16;
      var $e12=__stackBase__+24;
      var $w1e12;
      var $w2e12;
      var $d12_1;
      var $d12_2;
      var $e13=__stackBase__+32;
      var $w1e13;
      var $w3e13;
      var $d13_1;
      var $d13_2;
      var $e23=__stackBase__+40;
      var $w2e23;
      var $w3e23;
      var $d23_1;
      var $d23_2;
      var $n123;
      var $d123_1;
      var $d123_2;
      var $d123_3;
      var $inv_d12;
      var $inv_d13;
      var $inv_d23;
      var $inv_d123;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3+16)|0);
      var $5=$w1;
      var $6=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[(($5+4)>>2)]=HEAP32[(($6+4)>>2)];
      var $7=(($2+36)|0);
      var $8=(($7+16)|0);
      var $9=$w2;
      var $10=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[(($9+4)>>2)]=HEAP32[(($10+4)>>2)];
      var $11=(($2+72)|0);
      var $12=(($11+16)|0);
      var $13=$w3;
      var $14=$12;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[(($13+4)>>2)]=HEAP32[(($14+4)>>2)];
      __ZmiRK6b2Vec2S1_($e12, $w2, $w1);
      var $15=__Z5b2DotRK6b2Vec2S1_($w1, $e12);
      $w1e12=$15;
      var $16=__Z5b2DotRK6b2Vec2S1_($w2, $e12);
      $w2e12=$16;
      var $17=$w2e12;
      $d12_1=$17;
      var $18=$w1e12;
      var $19=(-$18);
      $d12_2=$19;
      __ZmiRK6b2Vec2S1_($e13, $w3, $w1);
      var $20=__Z5b2DotRK6b2Vec2S1_($w1, $e13);
      $w1e13=$20;
      var $21=__Z5b2DotRK6b2Vec2S1_($w3, $e13);
      $w3e13=$21;
      var $22=$w3e13;
      $d13_1=$22;
      var $23=$w1e13;
      var $24=(-$23);
      $d13_2=$24;
      __ZmiRK6b2Vec2S1_($e23, $w3, $w2);
      var $25=__Z5b2DotRK6b2Vec2S1_($w2, $e23);
      $w2e23=$25;
      var $26=__Z5b2DotRK6b2Vec2S1_($w3, $e23);
      $w3e23=$26;
      var $27=$w3e23;
      $d23_1=$27;
      var $28=$w2e23;
      var $29=(-$28);
      $d23_2=$29;
      var $30=__Z7b2CrossRK6b2Vec2S1_($e12, $e13);
      $n123=$30;
      var $31=$n123;
      var $32=__Z7b2CrossRK6b2Vec2S1_($w2, $w3);
      var $33=$31*$32;
      $d123_1=$33;
      var $34=$n123;
      var $35=__Z7b2CrossRK6b2Vec2S1_($w3, $w1);
      var $36=$34*$35;
      $d123_2=$36;
      var $37=$n123;
      var $38=__Z7b2CrossRK6b2Vec2S1_($w1, $w2);
      var $39=$37*$38;
      $d123_3=$39;
      var $40=$d12_2;
      var $41=$40 <= 0;
      if ($41) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $43=$d13_2;
      var $44=$43 <= 0;
      if ($44) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $46=(($2)|0);
      var $47=(($46+24)|0);
      HEAPF32[(($47)>>2)]=1;
      var $48=(($2+108)|0);
      HEAP32[(($48)>>2)]=1;
      __label__ = 23; break;
    case 4: 
      var $50=$d12_1;
      var $51=$50 > 0;
      if ($51) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $53=$d12_2;
      var $54=$53 > 0;
      if ($54) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $56=$d123_3;
      var $57=$56 <= 0;
      if ($57) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $59=$d12_1;
      var $60=$d12_2;
      var $61=$59+$60;
      var $62=1/$61;
      $inv_d12=$62;
      var $63=$d12_1;
      var $64=$inv_d12;
      var $65=$63*$64;
      var $66=(($2)|0);
      var $67=(($66+24)|0);
      HEAPF32[(($67)>>2)]=$65;
      var $68=$d12_2;
      var $69=$inv_d12;
      var $70=$68*$69;
      var $71=(($2+36)|0);
      var $72=(($71+24)|0);
      HEAPF32[(($72)>>2)]=$70;
      var $73=(($2+108)|0);
      HEAP32[(($73)>>2)]=2;
      __label__ = 23; break;
    case 8: 
      var $75=$d13_1;
      var $76=$75 > 0;
      if ($76) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $78=$d13_2;
      var $79=$78 > 0;
      if ($79) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $81=$d123_2;
      var $82=$81 <= 0;
      if ($82) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $84=$d13_1;
      var $85=$d13_2;
      var $86=$84+$85;
      var $87=1/$86;
      $inv_d13=$87;
      var $88=$d13_1;
      var $89=$inv_d13;
      var $90=$88*$89;
      var $91=(($2)|0);
      var $92=(($91+24)|0);
      HEAPF32[(($92)>>2)]=$90;
      var $93=$d13_2;
      var $94=$inv_d13;
      var $95=$93*$94;
      var $96=(($2+72)|0);
      var $97=(($96+24)|0);
      HEAPF32[(($97)>>2)]=$95;
      var $98=(($2+108)|0);
      HEAP32[(($98)>>2)]=2;
      var $99=(($2+36)|0);
      var $100=(($2+72)|0);
      var $101=$99;
      var $102=$100;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $102>>2, $$dest = $101>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      __label__ = 23; break;
    case 12: 
      var $104=$d12_1;
      var $105=$104 <= 0;
      if ($105) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $107=$d23_2;
      var $108=$107 <= 0;
      if ($108) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $110=(($2+36)|0);
      var $111=(($110+24)|0);
      HEAPF32[(($111)>>2)]=1;
      var $112=(($2+108)|0);
      HEAP32[(($112)>>2)]=1;
      var $113=(($2)|0);
      var $114=(($2+36)|0);
      var $115=$113;
      var $116=$114;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $116>>2, $$dest = $115>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      __label__ = 23; break;
    case 15: 
      var $118=$d13_1;
      var $119=$118 <= 0;
      if ($119) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $121=$d23_1;
      var $122=$121 <= 0;
      if ($122) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $124=(($2+72)|0);
      var $125=(($124+24)|0);
      HEAPF32[(($125)>>2)]=1;
      var $126=(($2+108)|0);
      HEAP32[(($126)>>2)]=1;
      var $127=(($2)|0);
      var $128=(($2+72)|0);
      var $129=$127;
      var $130=$128;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $130>>2, $$dest = $129>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      __label__ = 23; break;
    case 18: 
      var $132=$d23_1;
      var $133=$132 > 0;
      if ($133) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $135=$d23_2;
      var $136=$135 > 0;
      if ($136) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $138=$d123_1;
      var $139=$138 <= 0;
      if ($139) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $141=$d23_1;
      var $142=$d23_2;
      var $143=$141+$142;
      var $144=1/$143;
      $inv_d23=$144;
      var $145=$d23_1;
      var $146=$inv_d23;
      var $147=$145*$146;
      var $148=(($2+36)|0);
      var $149=(($148+24)|0);
      HEAPF32[(($149)>>2)]=$147;
      var $150=$d23_2;
      var $151=$inv_d23;
      var $152=$150*$151;
      var $153=(($2+72)|0);
      var $154=(($153+24)|0);
      HEAPF32[(($154)>>2)]=$152;
      var $155=(($2+108)|0);
      HEAP32[(($155)>>2)]=2;
      var $156=(($2)|0);
      var $157=(($2+72)|0);
      var $158=$156;
      var $159=$157;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $159>>2, $$dest = $158>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      __label__ = 23; break;
    case 22: 
      var $161=$d123_1;
      var $162=$d123_2;
      var $163=$161+$162;
      var $164=$d123_3;
      var $165=$163+$164;
      var $166=1/$165;
      $inv_d123=$166;
      var $167=$d123_1;
      var $168=$inv_d123;
      var $169=$167*$168;
      var $170=(($2)|0);
      var $171=(($170+24)|0);
      HEAPF32[(($171)>>2)]=$169;
      var $172=$d123_2;
      var $173=$inv_d123;
      var $174=$172*$173;
      var $175=(($2+36)|0);
      var $176=(($175+24)|0);
      HEAPF32[(($176)>>2)]=$174;
      var $177=$d123_3;
      var $178=$inv_d123;
      var $179=$177*$178;
      var $180=(($2+72)|0);
      var $181=(($180+24)|0);
      HEAPF32[(($181)>>2)]=$179;
      var $182=(($2+108)|0);
      HEAP32[(($182)>>2)]=3;
      __label__ = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input) {
  var __stackBase__  = STACKTOP; STACKTOP += 288; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $proxyA;
      var $proxyB;
      var $transformA=__stackBase__;
      var $transformB=__stackBase__+16;
      var $simplex=__stackBase__+32;
      var $vertices;
      var $k_maxIters;
      var $saveA=__stackBase__+144;
      var $saveB=__stackBase__+156;
      var $saveCount;
      var $closestPoint=__stackBase__+168;
      var $distanceSqr1;
      var $distanceSqr2;
      var $iter;
      var $i;
      var $p=__stackBase__+176;
      var $d=__stackBase__+184;
      var $vertex;
      var $4=__stackBase__+192;
      var $5=__stackBase__+200;
      var $6=__stackBase__+208;
      var $wBLocal=__stackBase__+216;
      var $7=__stackBase__+224;
      var $8=__stackBase__+232;
      var $9=__stackBase__+240;
      var $duplicate;
      var $i1;
      var $rA;
      var $rB;
      var $normal=__stackBase__+248;
      var $10=__stackBase__+256;
      var $11=__stackBase__+264;
      var $p2=__stackBase__+272;
      var $12=__stackBase__+280;
      $1=$output;
      $2=$cache;
      $3=$input;
      var $13=HEAP32[((_b2_gjkCalls)>>2)];
      var $14=(($13+1)|0);
      HEAP32[((_b2_gjkCalls)>>2)]=$14;
      var $15=$3;
      var $16=(($15)|0);
      $proxyA=$16;
      var $17=$3;
      var $18=(($17+28)|0);
      $proxyB=$18;
      var $19=$3;
      var $20=(($19+56)|0);
      var $21=$transformA;
      var $22=$20;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[(($21+4)>>2)]=HEAP32[(($22+4)>>2)];HEAP32[(($21+8)>>2)]=HEAP32[(($22+8)>>2)];HEAP32[(($21+12)>>2)]=HEAP32[(($22+12)>>2)];
      var $23=$3;
      var $24=(($23+72)|0);
      var $25=$transformB;
      var $26=$24;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[(($25+4)>>2)]=HEAP32[(($26+4)>>2)];HEAP32[(($25+8)>>2)]=HEAP32[(($26+8)>>2)];HEAP32[(($25+12)>>2)]=HEAP32[(($26+12)>>2)];
      __ZN9b2SimplexC1Ev($simplex);
      var $27=$2;
      var $28=$proxyA;
      var $29=$proxyB;
      __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($simplex, $27, $28, $transformA, $29, $transformB);
      var $30=(($simplex)|0);
      $vertices=$30;
      $k_maxIters=20;
      $saveCount=0;
      __ZNK9b2Simplex15GetClosestPointEv($closestPoint, $simplex);
      var $31=__ZNK6b2Vec213LengthSquaredEv($closestPoint);
      $distanceSqr1=$31;
      var $32=$distanceSqr1;
      $distanceSqr2=$32;
      $iter=0;
      __label__ = 2; break;
    case 2: 
      var $34=$iter;
      var $35=(($34)|0) < 20;
      if ($35) { __label__ = 3; break; } else { __label__ = 27; break; }
    case 3: 
      var $37=(($simplex+108)|0);
      var $38=HEAP32[(($37)>>2)];
      $saveCount=$38;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $40=$i;
      var $41=$saveCount;
      var $42=(($40)|0) < (($41)|0);
      if ($42) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $44=$i;
      var $45=$vertices;
      var $46=(($45+$44*36)|0);
      var $47=(($46+28)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$i;
      var $50=(($saveA+($49<<2))|0);
      HEAP32[(($50)>>2)]=$48;
      var $51=$i;
      var $52=$vertices;
      var $53=(($52+$51*36)|0);
      var $54=(($53+32)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$i;
      var $57=(($saveB+($56<<2))|0);
      HEAP32[(($57)>>2)]=$55;
      __label__ = 6; break;
    case 6: 
      var $59=$i;
      var $60=(($59+1)|0);
      $i=$60;
      __label__ = 4; break;
    case 7: 
      var $62=(($simplex+108)|0);
      var $63=HEAP32[(($62)>>2)];
      if ((($63)|0) == 2) {
        __label__ = 8; break;
      }
      else if ((($63)|0) == 3) {
        __label__ = 9; break;
      }
      else if ((($63)|0) == 1) {
        __label__ = 11; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 8: 
      __ZN9b2Simplex6Solve2Ev($simplex);
      __label__ = 11; break;
    case 9: 
      __ZN9b2Simplex6Solve3Ev($simplex);
      __label__ = 11; break;
    case 10: 
      ___assert_func(((STRING_TABLE.__str6)|0), 498, ((STRING_TABLE.___PRETTY_FUNCTION____Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput)|0), ((STRING_TABLE.__str28)|0));
      __label__ = 11; break;
    case 11: 
      var $68=(($simplex+108)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|0)==3;
      if ($70) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 27; break;
    case 13: 
      __ZNK9b2Simplex15GetClosestPointEv($p, $simplex);
      var $73=__ZNK6b2Vec213LengthSquaredEv($p);
      $distanceSqr2=$73;
      var $74=$distanceSqr2;
      var $75=$distanceSqr1;
      var $76=$74 >= $75;
      if ($76) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $79=$distanceSqr2;
      $distanceSqr1=$79;
      __ZNK9b2Simplex18GetSearchDirectionEv($d, $simplex);
      var $80=__ZNK6b2Vec213LengthSquaredEv($d);
      var $81=$80 < 1.4210854715202004e-14;
      if ($81) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 27; break;
    case 17: 
      var $84=$vertices;
      var $85=(($simplex+108)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($84+$86*36)|0);
      $vertex=$87;
      var $88=$proxyA;
      var $89=(($transformA+8)|0);
      __ZNK6b2Vec2ngEv($5, $d);
      __Z6b2MulTRK5b2RotRK6b2Vec2($4, $89, $5);
      var $90=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($88, $4);
      var $91=$vertex;
      var $92=(($91+28)|0);
      HEAP32[(($92)>>2)]=$90;
      var $93=$vertex;
      var $94=(($93)|0);
      var $95=$proxyA;
      var $96=$vertex;
      var $97=(($96+28)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=__ZNK15b2DistanceProxy9GetVertexEi($95, $98);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $transformA, $99);
      var $100=$94;
      var $101=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[(($100+4)>>2)]=HEAP32[(($101+4)>>2)];
      __ZN6b2Vec2C1Ev($wBLocal);
      var $102=$proxyB;
      var $103=(($transformB+8)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($7, $103, $d);
      var $104=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($102, $7);
      var $105=$vertex;
      var $106=(($105+32)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$vertex;
      var $108=(($107+8)|0);
      var $109=$proxyB;
      var $110=$vertex;
      var $111=(($110+32)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=__ZNK15b2DistanceProxy9GetVertexEi($109, $112);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $transformB, $113);
      var $114=$108;
      var $115=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[(($114+4)>>2)]=HEAP32[(($115+4)>>2)];
      var $116=$vertex;
      var $117=(($116+16)|0);
      var $118=$vertex;
      var $119=(($118+8)|0);
      var $120=$vertex;
      var $121=(($120)|0);
      __ZmiRK6b2Vec2S1_($9, $119, $121);
      var $122=$117;
      var $123=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[(($122+4)>>2)]=HEAP32[(($123+4)>>2)];
      var $124=$iter;
      var $125=(($124+1)|0);
      $iter=$125;
      var $126=HEAP32[((_b2_gjkIters)>>2)];
      var $127=(($126+1)|0);
      HEAP32[((_b2_gjkIters)>>2)]=$127;
      $duplicate=0;
      $i1=0;
      __label__ = 18; break;
    case 18: 
      var $129=$i1;
      var $130=$saveCount;
      var $131=(($129)|0) < (($130)|0);
      if ($131) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: 
      var $133=$vertex;
      var $134=(($133+28)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$i1;
      var $137=(($saveA+($136<<2))|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($135)|0)==(($138)|0);
      if ($139) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $141=$vertex;
      var $142=(($141+32)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$i1;
      var $145=(($saveB+($144<<2))|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($143)|0)==(($146)|0);
      if ($147) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      $duplicate=1;
      __label__ = 24; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $151=$i1;
      var $152=(($151+1)|0);
      $i1=$152;
      __label__ = 18; break;
    case 24: 
      var $154=$duplicate;
      var $155=(($154) & 1);
      if ($155) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      __label__ = 27; break;
    case 26: 
      var $158=(($simplex+108)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=(($159+1)|0);
      HEAP32[(($158)>>2)]=$160;
      __label__ = 2; break;
    case 27: 
      var $162=HEAP32[((_b2_gjkMaxIters)>>2)];
      var $163=$iter;
      var $164=__Z5b2MaxIiET_S0_S0_($162, $163);
      HEAP32[((_b2_gjkMaxIters)>>2)]=$164;
      var $165=$1;
      var $166=(($165)|0);
      var $167=$1;
      var $168=(($167+8)|0);
      __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($simplex, $166, $168);
      var $169=$1;
      var $170=(($169)|0);
      var $171=$1;
      var $172=(($171+8)|0);
      var $173=__Z10b2DistanceRK6b2Vec2S1_($170, $172);
      var $174=$1;
      var $175=(($174+16)|0);
      HEAPF32[(($175)>>2)]=$173;
      var $176=$iter;
      var $177=$1;
      var $178=(($177+20)|0);
      HEAP32[(($178)>>2)]=$176;
      var $179=$2;
      __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($simplex, $179);
      var $180=$3;
      var $181=(($180+88)|0);
      var $182=HEAP8[($181)];
      var $183=(($182) & 1);
      if ($183) { __label__ = 28; break; } else { __label__ = 33; break; }
    case 28: 
      var $185=$proxyA;
      var $186=(($185+24)|0);
      var $187=HEAPF32[(($186)>>2)];
      $rA=$187;
      var $188=$proxyB;
      var $189=(($188+24)|0);
      var $190=HEAPF32[(($189)>>2)];
      $rB=$190;
      var $191=$1;
      var $192=(($191+16)|0);
      var $193=HEAPF32[(($192)>>2)];
      var $194=$rA;
      var $195=$rB;
      var $196=$194+$195;
      var $197=$193 > $196;
      if ($197) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $199=$1;
      var $200=(($199+16)|0);
      var $201=HEAPF32[(($200)>>2)];
      var $202=$201 > 1.1920928955078125e-7;
      if ($202) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $204=$rA;
      var $205=$rB;
      var $206=$204+$205;
      var $207=$1;
      var $208=(($207+16)|0);
      var $209=HEAPF32[(($208)>>2)];
      var $210=$209-$206;
      HEAPF32[(($208)>>2)]=$210;
      var $211=$1;
      var $212=(($211+8)|0);
      var $213=$1;
      var $214=(($213)|0);
      __ZmiRK6b2Vec2S1_($normal, $212, $214);
      var $215=__ZN6b2Vec29NormalizeEv($normal);
      var $216=$1;
      var $217=(($216)|0);
      var $218=$rA;
      __ZmlfRK6b2Vec2($10, $218, $normal);
      __ZN6b2Vec2pLERKS_($217, $10);
      var $219=$1;
      var $220=(($219+8)|0);
      var $221=$rB;
      __ZmlfRK6b2Vec2($11, $221, $normal);
      __ZN6b2Vec2mIERKS_($220, $11);
      __label__ = 32; break;
    case 31: 
      var $223=$1;
      var $224=(($223)|0);
      var $225=$1;
      var $226=(($225+8)|0);
      __ZplRK6b2Vec2S1_($12, $224, $226);
      __ZmlfRK6b2Vec2($p2, 0.5, $12);
      var $227=$1;
      var $228=(($227)|0);
      var $229=$228;
      var $230=$p2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($229)>>2)]=HEAP32[(($230)>>2)];HEAP32[(($229+4)>>2)]=HEAP32[(($230+4)>>2)];
      var $231=$1;
      var $232=(($231+8)|0);
      var $233=$232;
      var $234=$p2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($233)>>2)]=HEAP32[(($234)>>2)];HEAP32[(($233+4)>>2)]=HEAP32[(($234+4)>>2)];
      var $235=$1;
      var $236=(($235+16)|0);
      HEAPF32[(($236)>>2)]=0;
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2SimplexC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN9b2SimplexC2Ev($2);
  ;
  return;
}


function __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($this, $cache, $proxyA, $transformA, $proxyB, $transformB) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $vertices;
      var $i;
      var $v;
      var $wALocal=__stackBase__;
      var $wBLocal=__stackBase__+8;
      var $7=__stackBase__+16;
      var $8=__stackBase__+24;
      var $9=__stackBase__+32;
      var $metric1;
      var $metric2;
      var $v1;
      var $wALocal2=__stackBase__+40;
      var $wBLocal3=__stackBase__+48;
      var $10=__stackBase__+56;
      var $11=__stackBase__+64;
      var $12=__stackBase__+72;
      $1=$this;
      $2=$cache;
      $3=$proxyA;
      $4=$transformA;
      $5=$proxyB;
      $6=$transformB;
      var $13=$1;
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAPU16[(($15)>>1)];
      var $17=(($16)&65535);
      var $18=(($17)|0) <= 3;
      if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str6)|0), 102, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_)|0), ((STRING_TABLE.__str5)|0));
      __label__ = 4; break;
    case 4: 
      var $22=$2;
      var $23=(($22+4)|0);
      var $24=HEAPU16[(($23)>>1)];
      var $25=(($24)&65535);
      var $26=(($13+108)|0);
      HEAP32[(($26)>>2)]=$25;
      var $27=(($13)|0);
      $vertices=$27;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $29=$i;
      var $30=(($13+108)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($29)|0) < (($31)|0);
      if ($32) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $34=$vertices;
      var $35=$i;
      var $36=(($34+$35*36)|0);
      $v=$36;
      var $37=$i;
      var $38=$2;
      var $39=(($38+6)|0);
      var $40=(($39+$37)|0);
      var $41=HEAPU8[($40)];
      var $42=(($41)&255);
      var $43=$v;
      var $44=(($43+28)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$i;
      var $46=$2;
      var $47=(($46+9)|0);
      var $48=(($47+$45)|0);
      var $49=HEAPU8[($48)];
      var $50=(($49)&255);
      var $51=$v;
      var $52=(($51+32)|0);
      HEAP32[(($52)>>2)]=$50;
      var $53=$3;
      var $54=$v;
      var $55=(($54+28)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=__ZNK15b2DistanceProxy9GetVertexEi($53, $56);
      var $58=$wALocal;
      var $59=$57;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[(($58+4)>>2)]=HEAP32[(($59+4)>>2)];
      var $60=$5;
      var $61=$v;
      var $62=(($61+32)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=__ZNK15b2DistanceProxy9GetVertexEi($60, $63);
      var $65=$wBLocal;
      var $66=$64;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[(($65+4)>>2)]=HEAP32[(($66+4)>>2)];
      var $67=$v;
      var $68=(($67)|0);
      var $69=$4;
      __Z5b2MulRK11b2TransformRK6b2Vec2($7, $69, $wALocal);
      var $70=$68;
      var $71=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[(($70+4)>>2)]=HEAP32[(($71+4)>>2)];
      var $72=$v;
      var $73=(($72+8)|0);
      var $74=$6;
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $74, $wBLocal);
      var $75=$73;
      var $76=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[(($75+4)>>2)]=HEAP32[(($76+4)>>2)];
      var $77=$v;
      var $78=(($77+16)|0);
      var $79=$v;
      var $80=(($79+8)|0);
      var $81=$v;
      var $82=(($81)|0);
      __ZmiRK6b2Vec2S1_($9, $80, $82);
      var $83=$78;
      var $84=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[(($83+4)>>2)]=HEAP32[(($84+4)>>2)];
      var $85=$v;
      var $86=(($85+24)|0);
      HEAPF32[(($86)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      var $88=$i;
      var $89=(($88+1)|0);
      $i=$89;
      __label__ = 5; break;
    case 8: 
      var $91=(($13+108)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0) > 1;
      if ($93) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      var $95=$2;
      var $96=(($95)|0);
      var $97=HEAPF32[(($96)>>2)];
      $metric1=$97;
      var $98=__ZNK9b2Simplex9GetMetricEv($13);
      $metric2=$98;
      var $99=$metric2;
      var $100=$metric1;
      var $101=$100*0.5;
      var $102=$99 < $101;
      if ($102) { __label__ = 12; break; } else { __label__ = 10; break; }
    case 10: 
      var $104=$metric1;
      var $105=$104*2;
      var $106=$metric2;
      var $107=$105 < $106;
      if ($107) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $109=$metric2;
      var $110=$109 < 1.1920928955078125e-7;
      if ($110) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $112=(($13+108)|0);
      HEAP32[(($112)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $115=(($13+108)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116)|0)==0;
      if ($117) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $119=$vertices;
      var $120=(($119)|0);
      $v1=$120;
      var $121=$v1;
      var $122=(($121+28)|0);
      HEAP32[(($122)>>2)]=0;
      var $123=$v1;
      var $124=(($123+32)|0);
      HEAP32[(($124)>>2)]=0;
      var $125=$3;
      var $126=__ZNK15b2DistanceProxy9GetVertexEi($125, 0);
      var $127=$wALocal2;
      var $128=$126;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($127)>>2)]=HEAP32[(($128)>>2)];HEAP32[(($127+4)>>2)]=HEAP32[(($128+4)>>2)];
      var $129=$5;
      var $130=__ZNK15b2DistanceProxy9GetVertexEi($129, 0);
      var $131=$wBLocal3;
      var $132=$130;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[(($131+4)>>2)]=HEAP32[(($132+4)>>2)];
      var $133=$v1;
      var $134=(($133)|0);
      var $135=$4;
      __Z5b2MulRK11b2TransformRK6b2Vec2($10, $135, $wALocal2);
      var $136=$134;
      var $137=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[(($136+4)>>2)]=HEAP32[(($137+4)>>2)];
      var $138=$v1;
      var $139=(($138+8)|0);
      var $140=$6;
      __Z5b2MulRK11b2TransformRK6b2Vec2($11, $140, $wBLocal3);
      var $141=$139;
      var $142=$11;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($141)>>2)]=HEAP32[(($142)>>2)];HEAP32[(($141+4)>>2)]=HEAP32[(($142+4)>>2)];
      var $143=$v1;
      var $144=(($143+16)|0);
      var $145=$v1;
      var $146=(($145+8)|0);
      var $147=$v1;
      var $148=(($147)|0);
      __ZmiRK6b2Vec2S1_($12, $146, $148);
      var $149=$144;
      var $150=$12;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($149)>>2)]=HEAP32[(($150)>>2)];HEAP32[(($149+4)>>2)]=HEAP32[(($150+4)>>2)];
      var $151=(($13+108)|0);
      HEAP32[(($151)>>2)]=1;
      __label__ = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Vec213LengthSquaredEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(($2)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  var $8=(($2+4)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=(($2+4)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=$9*$11;
  var $13=$7+$12;
  ;
  return $13;
}


function __ZN6b2Vec2pLERKS_($this, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$v;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$8+$6;
  HEAPF32[(($7)>>2)]=$9;
  var $10=$2;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($3+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$14+$12;
  HEAPF32[(($13)>>2)]=$15;
  ;
  return;
}


function __ZN6b2Vec2mIERKS_($this, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$v;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$8-$6;
  HEAPF32[(($7)>>2)]=$9;
  var $10=$2;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($3+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$14-$12;
  HEAPF32[(($13)>>2)]=$15;
  ;
  return;
}


function __ZNK9b2Simplex15GetClosestPointEv($agg_result, $this) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      var $3=__stackBase__+8;
      $1=$this;
      var $4=$1;
      var $5=(($4+108)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($6)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 3) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 2: 
      ___assert_func(((STRING_TABLE.__str6)|0), 194, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv)|0), ((STRING_TABLE.__str28)|0));
      var $8=$agg_result;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($8)>>2)]=HEAP32[((_b2Vec2_zero)>>2)];HEAP32[(($8+4)>>2)]=HEAP32[((_b2Vec2_zero+4)>>2)];
      __label__ = 7; break;
    case 3: 
      var $10=(($4)|0);
      var $11=(($10+16)|0);
      var $12=$agg_result;
      var $13=$11;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[(($12+4)>>2)]=HEAP32[(($13+4)>>2)];
      __label__ = 7; break;
    case 4: 
      var $15=(($4)|0);
      var $16=(($15+24)|0);
      var $17=HEAPF32[(($16)>>2)];
      var $18=(($4)|0);
      var $19=(($18+16)|0);
      __ZmlfRK6b2Vec2($2, $17, $19);
      var $20=(($4+36)|0);
      var $21=(($20+24)|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=(($4+36)|0);
      var $24=(($23+16)|0);
      __ZmlfRK6b2Vec2($3, $22, $24);
      __ZplRK6b2Vec2S1_($agg_result, $2, $3);
      __label__ = 7; break;
    case 5: 
      var $26=$agg_result;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[((_b2Vec2_zero)>>2)];HEAP32[(($26+4)>>2)]=HEAP32[((_b2Vec2_zero+4)>>2)];
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str6)|0), 207, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv)|0), ((STRING_TABLE.__str28)|0));
      var $28=$agg_result;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($28)>>2)]=HEAP32[((_b2Vec2_zero)>>2)];HEAP32[(($28+4)>>2)]=HEAP32[((_b2Vec2_zero+4)>>2)];
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK9b2Simplex18GetSearchDirectionEv($agg_result, $this) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $e12=__stackBase__;
      var $sgn;
      var $2=__stackBase__+8;
      $1=$this;
      var $3=$1;
      var $4=(($3+108)|0);
      var $5=HEAP32[(($4)>>2)];
      if ((($5)|0) == 1) {
        __label__ = 2; break;
      }
      else if ((($5)|0) == 2) {
        __label__ = 3; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 2: 
      var $7=(($3)|0);
      var $8=(($7+16)|0);
      __ZNK6b2Vec2ngEv($agg_result, $8);
      __label__ = 7; break;
    case 3: 
      var $10=(($3+36)|0);
      var $11=(($10+16)|0);
      var $12=(($3)|0);
      var $13=(($12+16)|0);
      __ZmiRK6b2Vec2S1_($e12, $11, $13);
      var $14=(($3)|0);
      var $15=(($14+16)|0);
      __ZNK6b2Vec2ngEv($2, $15);
      var $16=__Z7b2CrossRK6b2Vec2S1_($e12, $2);
      $sgn=$16;
      var $17=$sgn;
      var $18=$17 > 0;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __Z7b2CrossfRK6b2Vec2($agg_result, 1, $e12);
      __label__ = 7; break;
    case 5: 
      __Z7b2CrossRK6b2Vec2f($agg_result, $e12, 1);
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str6)|0), 184, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex18GetSearchDirectionEv)|0), ((STRING_TABLE.__str28)|0));
      var $22=$agg_result;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[((_b2Vec2_zero)>>2)];HEAP32[(($22+4)>>2)]=HEAP32[((_b2Vec2_zero+4)>>2)];
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($this, $d) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $bestIndex;
      var $bestValue;
      var $i;
      var $value;
      $1=$this;
      $2=$d;
      var $3=$1;
      $bestIndex=0;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=$2;
      var $8=__Z5b2DotRK6b2Vec2S1_($6, $7);
      $bestValue=$8;
      $i=1;
      __label__ = 2; break;
    case 2: 
      var $10=$i;
      var $11=(($3+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|0) < (($12)|0);
      if ($13) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $15=$i;
      var $16=(($3+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<3))|0);
      var $19=$2;
      var $20=__Z5b2DotRK6b2Vec2S1_($18, $19);
      $value=$20;
      var $21=$value;
      var $22=$bestValue;
      var $23=$21 > $22;
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $25=$i;
      $bestIndex=$25;
      var $26=$value;
      $bestValue=$26;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $29=$i;
      var $30=(($29+1)|0);
      $i=$30;
      __label__ = 2; break;
    case 7: 
      var $32=$bestIndex;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK15b2DistanceProxy9GetVertexEi($this, $index) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$index;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+20)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|0) < (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str3)|0), 103, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi)|0), ((STRING_TABLE.__str4)|0));
      __label__ = 5; break;
    case 5: 
      var $14=$2;
      var $15=(($3+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+($14<<3))|0);
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($this, $pA, $pB) {
  var __stackBase__  = STACKTOP; STACKTOP += 88; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $5=__stackBase__+8;
      var $6=__stackBase__+16;
      var $7=__stackBase__+24;
      var $8=__stackBase__+32;
      var $9=__stackBase__+40;
      var $10=__stackBase__+48;
      var $11=__stackBase__+56;
      var $12=__stackBase__+64;
      var $13=__stackBase__+72;
      var $14=__stackBase__+80;
      $1=$this;
      $2=$pA;
      $3=$pB;
      var $15=$1;
      var $16=(($15+108)|0);
      var $17=HEAP32[(($16)>>2)];
      if ((($17)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($17)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($17)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($17)|0) == 3) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 2: 
      ___assert_func(((STRING_TABLE.__str6)|0), 217, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_)|0), ((STRING_TABLE.__str28)|0));
      __label__ = 7; break;
    case 3: 
      var $20=$2;
      var $21=(($15)|0);
      var $22=(($21)|0);
      var $23=$20;
      var $24=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[(($23+4)>>2)]=HEAP32[(($24+4)>>2)];
      var $25=$3;
      var $26=(($15)|0);
      var $27=(($26+8)|0);
      var $28=$25;
      var $29=$27;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[(($28+4)>>2)]=HEAP32[(($29+4)>>2)];
      __label__ = 7; break;
    case 4: 
      var $31=$2;
      var $32=(($15)|0);
      var $33=(($32+24)|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=(($15)|0);
      var $36=(($35)|0);
      __ZmlfRK6b2Vec2($5, $34, $36);
      var $37=(($15+36)|0);
      var $38=(($37+24)|0);
      var $39=HEAPF32[(($38)>>2)];
      var $40=(($15+36)|0);
      var $41=(($40)|0);
      __ZmlfRK6b2Vec2($6, $39, $41);
      __ZplRK6b2Vec2S1_($4, $5, $6);
      var $42=$31;
      var $43=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
      var $44=$3;
      var $45=(($15)|0);
      var $46=(($45+24)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=(($15)|0);
      var $49=(($48+8)|0);
      __ZmlfRK6b2Vec2($8, $47, $49);
      var $50=(($15+36)|0);
      var $51=(($50+24)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($15+36)|0);
      var $54=(($53+8)|0);
      __ZmlfRK6b2Vec2($9, $52, $54);
      __ZplRK6b2Vec2S1_($7, $8, $9);
      var $55=$44;
      var $56=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[(($55+4)>>2)]=HEAP32[(($56+4)>>2)];
      __label__ = 7; break;
    case 5: 
      var $58=$2;
      var $59=(($15)|0);
      var $60=(($59+24)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($15)|0);
      var $63=(($62)|0);
      __ZmlfRK6b2Vec2($12, $61, $63);
      var $64=(($15+36)|0);
      var $65=(($64+24)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=(($15+36)|0);
      var $68=(($67)|0);
      __ZmlfRK6b2Vec2($13, $66, $68);
      __ZplRK6b2Vec2S1_($11, $12, $13);
      var $69=(($15+72)|0);
      var $70=(($69+24)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=(($15+72)|0);
      var $73=(($72)|0);
      __ZmlfRK6b2Vec2($14, $71, $73);
      __ZplRK6b2Vec2S1_($10, $11, $14);
      var $74=$58;
      var $75=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[(($74+4)>>2)]=HEAP32[(($75+4)>>2)];
      var $76=$3;
      var $77=$2;
      var $78=$76;
      var $79=$77;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)];
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str6)|0), 236, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_)|0), ((STRING_TABLE.__str28)|0));
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10b2DistanceRK6b2Vec2S1_($a, $b) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $c=__stackBase__;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  __ZmiRK6b2Vec2S1_($c, $3, $4);
  var $5=__ZNK6b2Vec26LengthEv($c);
  STACKTOP = __stackBase__;
  return $5;
}


function __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($this, $cache) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $vertices;
      var $i;
      $1=$this;
      $2=$cache;
      var $3=$1;
      var $4=__ZNK9b2Simplex9GetMetricEv($3);
      var $5=$2;
      var $6=(($5)|0);
      HEAPF32[(($6)>>2)]=$4;
      var $7=(($3+108)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8) & 65535);
      var $10=$2;
      var $11=(($10+4)|0);
      HEAP16[(($11)>>1)]=$9;
      var $12=(($3)|0);
      $vertices=$12;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $14=$i;
      var $15=(($3+108)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($14)|0) < (($16)|0);
      if ($17) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $19=$i;
      var $20=$vertices;
      var $21=(($20+$19*36)|0);
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23) & 255);
      var $25=$i;
      var $26=$2;
      var $27=(($26+6)|0);
      var $28=(($27+$25)|0);
      HEAP8[($28)]=$24;
      var $29=$i;
      var $30=$vertices;
      var $31=(($30+$29*36)|0);
      var $32=(($31+32)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33) & 255);
      var $35=$i;
      var $36=$2;
      var $37=(($36+9)|0);
      var $38=(($37+$35)|0);
      HEAP8[($38)]=$34;
      __label__ = 4; break;
    case 4: 
      var $40=$i;
      var $41=(($40+1)|0);
      $i=$41;
      __label__ = 2; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK9b2Simplex9GetMetricEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $4=__stackBase__+8;
      $2=$this;
      var $5=$2;
      var $6=(($5+108)|0);
      var $7=HEAP32[(($6)>>2)];
      if ((($7)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($7)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 3) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 2: 
      ___assert_func(((STRING_TABLE.__str6)|0), 246, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv)|0), ((STRING_TABLE.__str28)|0));
      $1=0;
      __label__ = 7; break;
    case 3: 
      $1=0;
      __label__ = 7; break;
    case 4: 
      var $11=(($5)|0);
      var $12=(($11+16)|0);
      var $13=(($5+36)|0);
      var $14=(($13+16)|0);
      var $15=__Z10b2DistanceRK6b2Vec2S1_($12, $14);
      $1=$15;
      __label__ = 7; break;
    case 5: 
      var $17=(($5+36)|0);
      var $18=(($17+16)|0);
      var $19=(($5)|0);
      var $20=(($19+16)|0);
      __ZmiRK6b2Vec2S1_($3, $18, $20);
      var $21=(($5+72)|0);
      var $22=(($21+16)|0);
      var $23=(($5)|0);
      var $24=(($23+16)|0);
      __ZmiRK6b2Vec2S1_($4, $22, $24);
      var $25=__Z7b2CrossRK6b2Vec2S1_($3, $4);
      $1=$25;
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str6)|0), 259, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv)|0), ((STRING_TABLE.__str28)|0));
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $28=$1;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7b2CrossfRK6b2Vec2($agg_result, $s, $a) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$s;
  $2=$a;
  var $3=$1;
  var $4=(-$3);
  var $5=$2;
  var $6=(($5+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=$4*$7;
  var $9=$1;
  var $10=$2;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$9*$12;
  __ZN6b2Vec2C1Eff($agg_result, $8, $13);
  ;
  return;
}


function __ZN9b2SimplexC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN15b2SimplexVertexC1Ev($3);
  var $4=(($2+36)|0);
  __ZN15b2SimplexVertexC1Ev($4);
  var $5=(($2+72)|0);
  __ZN15b2SimplexVertexC1Ev($5);
  ;
  return;
}


function __ZN15b2SimplexVertexC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2SimplexVertexC2Ev($2);
  ;
  return;
}


function __ZN15b2SimplexVertexC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+16)|0);
  __ZN6b2Vec2C1Ev($5);
  ;
  return;
}


function __ZN13b2DynamicTreeC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      HEAP32[(($3)>>2)]=-1;
      var $4=(($2+12)|0);
      HEAP32[(($4)>>2)]=16;
      var $5=(($2+8)|0);
      HEAP32[(($5)>>2)]=0;
      var $6=(($2+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7*36)|0);
      var $9=__Z7b2Alloci($8);
      var $10=$9;
      var $11=(($2+4)|0);
      HEAP32[(($11)>>2)]=$10;
      var $12=(($2+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($2+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16*36)|0);
      _memset($14, 0, $17, 1);
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $19=$i;
      var $20=(($2+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21-1)|0);
      var $23=(($19)|0) < (($22)|0);
      if ($23) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $25=$i;
      var $26=(($25+1)|0);
      var $27=$i;
      var $28=(($2+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+$27*36)|0);
      var $31=(($30+20)|0);
      var $32=$31;
      HEAP32[(($32)>>2)]=$26;
      var $33=$i;
      var $34=(($2+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+$33*36)|0);
      var $37=(($36+32)|0);
      HEAP32[(($37)>>2)]=-1;
      __label__ = 4; break;
    case 4: 
      var $39=$i;
      var $40=(($39+1)|0);
      $i=$40;
      __label__ = 2; break;
    case 5: 
      var $42=(($2+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43-1)|0);
      var $45=(($2+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+$44*36)|0);
      var $48=(($47+20)|0);
      var $49=$48;
      HEAP32[(($49)>>2)]=-1;
      var $50=(($2+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51-1)|0);
      var $53=(($2+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+$52*36)|0);
      var $56=(($55+32)|0);
      HEAP32[(($56)>>2)]=-1;
      var $57=(($2+16)|0);
      HEAP32[(($57)>>2)]=0;
      var $58=(($2+20)|0);
      HEAP32[(($58)>>2)]=0;
      var $59=(($2+24)|0);
      HEAP32[(($59)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2DynamicTreeD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  __Z6b2FreePv($5);
  ;
  return;
}


function __ZN13b2DynamicTree12AllocateNodeEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $oldNodes;
      var $i;
      var $nodeId;
      $1=$this;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)==-1;
      if ($5) { __label__ = 2; break; } else { __label__ = 10; break; }
    case 2: 
      var $7=(($2+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($2+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|0)==(($10)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str14)|0), 61, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12AllocateNodeEv)|0), ((STRING_TABLE.__str115)|0));
      __label__ = 5; break;
    case 5: 
      var $15=(($2+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $oldNodes=$16;
      var $17=(($2+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($18<<1))|0);
      HEAP32[(($17)>>2)]=$19;
      var $20=(($2+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21*36)|0);
      var $23=__Z7b2Alloci($22);
      var $24=$23;
      var $25=(($2+4)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=(($2+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=$oldNodes;
      var $30=$29;
      var $31=(($2+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32*36)|0);
      assert($33 % 1 === 0, 'memcpy given ' + $33 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($28, $30, $33, 1);
      var $34=$oldNodes;
      var $35=$34;
      __Z6b2FreePv($35);
      var $36=(($2+8)|0);
      var $37=HEAP32[(($36)>>2)];
      $i=$37;
      __label__ = 6; break;
    case 6: 
      var $39=$i;
      var $40=(($2+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41-1)|0);
      var $43=(($39)|0) < (($42)|0);
      if ($43) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $45=$i;
      var $46=(($45+1)|0);
      var $47=$i;
      var $48=(($2+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+$47*36)|0);
      var $51=(($50+20)|0);
      var $52=$51;
      HEAP32[(($52)>>2)]=$46;
      var $53=$i;
      var $54=(($2+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+$53*36)|0);
      var $57=(($56+32)|0);
      HEAP32[(($57)>>2)]=-1;
      __label__ = 8; break;
    case 8: 
      var $59=$i;
      var $60=(($59+1)|0);
      $i=$60;
      __label__ = 6; break;
    case 9: 
      var $62=(($2+12)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63-1)|0);
      var $65=(($2+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+$64*36)|0);
      var $68=(($67+20)|0);
      var $69=$68;
      HEAP32[(($69)>>2)]=-1;
      var $70=(($2+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71-1)|0);
      var $73=(($2+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+$72*36)|0);
      var $76=(($75+32)|0);
      HEAP32[(($76)>>2)]=-1;
      var $77=(($2+8)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($2+16)|0);
      HEAP32[(($79)>>2)]=$78;
      __label__ = 10; break;
    case 10: 
      var $81=(($2+16)|0);
      var $82=HEAP32[(($81)>>2)];
      $nodeId=$82;
      var $83=$nodeId;
      var $84=(($2+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+$83*36)|0);
      var $87=(($86+20)|0);
      var $88=$87;
      var $89=HEAP32[(($88)>>2)];
      var $90=(($2+16)|0);
      HEAP32[(($90)>>2)]=$89;
      var $91=$nodeId;
      var $92=(($2+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+$91*36)|0);
      var $95=(($94+20)|0);
      var $96=$95;
      HEAP32[(($96)>>2)]=-1;
      var $97=$nodeId;
      var $98=(($2+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+$97*36)|0);
      var $101=(($100+24)|0);
      HEAP32[(($101)>>2)]=-1;
      var $102=$nodeId;
      var $103=(($2+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+$102*36)|0);
      var $106=(($105+28)|0);
      HEAP32[(($106)>>2)]=-1;
      var $107=$nodeId;
      var $108=(($2+4)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+$107*36)|0);
      var $111=(($110+32)|0);
      HEAP32[(($111)>>2)]=0;
      var $112=$nodeId;
      var $113=(($2+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+$112*36)|0);
      var $116=(($115+16)|0);
      HEAP32[(($116)>>2)]=0;
      var $117=(($2+8)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+1)|0);
      HEAP32[(($117)>>2)]=$119;
      var $120=$nodeId;
      ;
      return $120;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2DynamicTree8FreeNodeEi($this, $nodeId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$nodeId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|0) < (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str14)|0), 97, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi)|0), ((STRING_TABLE.__str216)|0));
      __label__ = 5; break;
    case 5: 
      var $14=(($3+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=0 < (($15)|0);
      if ($16) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      ___assert_func(((STRING_TABLE.__str14)|0), 98, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi)|0), ((STRING_TABLE.__str317)|0));
      __label__ = 8; break;
    case 8: 
      var $20=(($3+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($3+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+$22*36)|0);
      var $26=(($25+20)|0);
      var $27=$26;
      HEAP32[(($27)>>2)]=$21;
      var $28=$2;
      var $29=(($3+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+$28*36)|0);
      var $32=(($31+32)|0);
      HEAP32[(($32)>>2)]=-1;
      var $33=$2;
      var $34=(($3+16)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=(($3+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36-1)|0);
      HEAP32[(($35)>>2)]=$37;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $proxyId;
  var $r=__stackBase__;
  var $4=__stackBase__+8;
  var $5=__stackBase__+16;
  $1=$this;
  $2=$aabb;
  $3=$userData;
  var $6=$1;
  var $7=__ZN13b2DynamicTree12AllocateNodeEv($6);
  $proxyId=$7;
  __ZN6b2Vec2C1Eff($r, 0.10000000149011612, 0.10000000149011612);
  var $8=$proxyId;
  var $9=(($6+4)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+$8*36)|0);
  var $12=(($11)|0);
  var $13=(($12)|0);
  var $14=$2;
  var $15=(($14)|0);
  __ZmiRK6b2Vec2S1_($4, $15, $r);
  var $16=$13;
  var $17=$4;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[(($16+4)>>2)]=HEAP32[(($17+4)>>2)];
  var $18=$proxyId;
  var $19=(($6+4)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=(($20+$18*36)|0);
  var $22=(($21)|0);
  var $23=(($22+8)|0);
  var $24=$2;
  var $25=(($24+8)|0);
  __ZplRK6b2Vec2S1_($5, $25, $r);
  var $26=$23;
  var $27=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[(($26+4)>>2)]=HEAP32[(($27+4)>>2)];
  var $28=$3;
  var $29=$proxyId;
  var $30=(($6+4)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+$29*36)|0);
  var $33=(($32+16)|0);
  HEAP32[(($33)>>2)]=$28;
  var $34=$proxyId;
  var $35=(($6+4)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=(($36+$34*36)|0);
  var $38=(($37+32)|0);
  HEAP32[(($38)>>2)]=0;
  var $39=$proxyId;
  __ZN13b2DynamicTree10InsertLeafEi($6, $39);
  var $40=$proxyId;
  STACKTOP = __stackBase__;
  return $40;
}


function __ZNK10b2TreeNode6IsLeafEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4)|0)==-1;
  ;
  return $5;
}


function __ZN13b2DynamicTree10InsertLeafEi($this, $leaf) {
  var __stackBase__  = STACKTOP; STACKTOP += 96; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $leafAABB=__stackBase__;
      var $index;
      var $child1;
      var $child2;
      var $area;
      var $combinedAABB=__stackBase__+16;
      var $combinedArea;
      var $cost;
      var $inheritanceCost;
      var $cost1;
      var $aabb=__stackBase__+32;
      var $aabb1=__stackBase__+48;
      var $oldArea;
      var $newArea;
      var $cost2;
      var $aabb2=__stackBase__+64;
      var $aabb3=__stackBase__+80;
      var $oldArea4;
      var $newArea5;
      var $sibling;
      var $oldParent;
      var $newParent;
      var $child16;
      var $child27;
      $1=$this;
      $2=$leaf;
      var $3=$1;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+1)|0);
      HEAP32[(($4)>>2)]=$6;
      var $7=(($3)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==-1;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$2;
      var $12=(($3)|0);
      HEAP32[(($12)>>2)]=$11;
      var $13=(($3)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($3+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$14*36)|0);
      var $18=(($17+20)|0);
      var $19=$18;
      HEAP32[(($19)>>2)]=-1;
      __label__ = 33; break;
    case 3: 
      var $21=$2;
      var $22=(($3+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+$21*36)|0);
      var $25=(($24)|0);
      var $26=$leafAABB;
      var $27=$25;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[(($26+4)>>2)]=HEAP32[(($27+4)>>2)];HEAP32[(($26+8)>>2)]=HEAP32[(($27+8)>>2)];HEAP32[(($26+12)>>2)]=HEAP32[(($27+12)>>2)];
      var $28=(($3)|0);
      var $29=HEAP32[(($28)>>2)];
      $index=$29;
      __label__ = 4; break;
    case 4: 
      var $31=$index;
      var $32=(($3+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+$31*36)|0);
      var $35=__ZNK10b2TreeNode6IsLeafEv($34);
      var $36=(($35)&1);
      var $37=(($36)|0)==0;
      if ($37) { __label__ = 5; break; } else { __label__ = 18; break; }
    case 5: 
      var $39=$index;
      var $40=(($3+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+$39*36)|0);
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      $child1=$44;
      var $45=$index;
      var $46=(($3+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+$45*36)|0);
      var $49=(($48+28)|0);
      var $50=HEAP32[(($49)>>2)];
      $child2=$50;
      var $51=$index;
      var $52=(($3+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+$51*36)|0);
      var $55=(($54)|0);
      var $56=__ZNK6b2AABB12GetPerimeterEv($55);
      $area=$56;
      __ZN6b2AABBC1Ev($combinedAABB);
      var $57=$index;
      var $58=(($3+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+$57*36)|0);
      var $61=(($60)|0);
      __ZN6b2AABB7CombineERKS_S1_($combinedAABB, $61, $leafAABB);
      var $62=__ZNK6b2AABB12GetPerimeterEv($combinedAABB);
      $combinedArea=$62;
      var $63=$combinedArea;
      var $64=$63*2;
      $cost=$64;
      var $65=$combinedArea;
      var $66=$area;
      var $67=$65-$66;
      var $68=$67*2;
      $inheritanceCost=$68;
      var $69=$child1;
      var $70=(($3+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+$69*36)|0);
      var $73=__ZNK10b2TreeNode6IsLeafEv($72);
      if ($73) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __ZN6b2AABBC1Ev($aabb);
      var $75=$child1;
      var $76=(($3+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+$75*36)|0);
      var $79=(($78)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb, $leafAABB, $79);
      var $80=__ZNK6b2AABB12GetPerimeterEv($aabb);
      var $81=$inheritanceCost;
      var $82=$80+$81;
      $cost1=$82;
      __label__ = 8; break;
    case 7: 
      __ZN6b2AABBC1Ev($aabb1);
      var $84=$child1;
      var $85=(($3+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+$84*36)|0);
      var $88=(($87)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb1, $leafAABB, $88);
      var $89=$child1;
      var $90=(($3+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+$89*36)|0);
      var $93=(($92)|0);
      var $94=__ZNK6b2AABB12GetPerimeterEv($93);
      $oldArea=$94;
      var $95=__ZNK6b2AABB12GetPerimeterEv($aabb1);
      $newArea=$95;
      var $96=$newArea;
      var $97=$oldArea;
      var $98=$96-$97;
      var $99=$inheritanceCost;
      var $100=$98+$99;
      $cost1=$100;
      __label__ = 8; break;
    case 8: 
      var $102=$child2;
      var $103=(($3+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+$102*36)|0);
      var $106=__ZNK10b2TreeNode6IsLeafEv($105);
      if ($106) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __ZN6b2AABBC1Ev($aabb2);
      var $108=$child2;
      var $109=(($3+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+$108*36)|0);
      var $112=(($111)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb2, $leafAABB, $112);
      var $113=__ZNK6b2AABB12GetPerimeterEv($aabb2);
      var $114=$inheritanceCost;
      var $115=$113+$114;
      $cost2=$115;
      __label__ = 11; break;
    case 10: 
      __ZN6b2AABBC1Ev($aabb3);
      var $117=$child2;
      var $118=(($3+4)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+$117*36)|0);
      var $121=(($120)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb3, $leafAABB, $121);
      var $122=$child2;
      var $123=(($3+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+$122*36)|0);
      var $126=(($125)|0);
      var $127=__ZNK6b2AABB12GetPerimeterEv($126);
      $oldArea4=$127;
      var $128=__ZNK6b2AABB12GetPerimeterEv($aabb3);
      $newArea5=$128;
      var $129=$newArea5;
      var $130=$oldArea4;
      var $131=$129-$130;
      var $132=$inheritanceCost;
      var $133=$131+$132;
      $cost2=$133;
      __label__ = 11; break;
    case 11: 
      var $135=$cost;
      var $136=$cost1;
      var $137=$135 < $136;
      if ($137) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $139=$cost;
      var $140=$cost2;
      var $141=$139 < $140;
      if ($141) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 18; break;
    case 14: 
      var $144=$cost1;
      var $145=$cost2;
      var $146=$144 < $145;
      if ($146) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $148=$child1;
      $index=$148;
      __label__ = 17; break;
    case 16: 
      var $150=$child2;
      $index=$150;
      __label__ = 17; break;
    case 17: 
      __label__ = 4; break;
    case 18: 
      var $153=$index;
      $sibling=$153;
      var $154=$sibling;
      var $155=(($3+4)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+$154*36)|0);
      var $158=(($157+20)|0);
      var $159=$158;
      var $160=HEAP32[(($159)>>2)];
      $oldParent=$160;
      var $161=__ZN13b2DynamicTree12AllocateNodeEv($3);
      $newParent=$161;
      var $162=$oldParent;
      var $163=$newParent;
      var $164=(($3+4)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165+$163*36)|0);
      var $167=(($166+20)|0);
      var $168=$167;
      HEAP32[(($168)>>2)]=$162;
      var $169=$newParent;
      var $170=(($3+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+$169*36)|0);
      var $173=(($172+16)|0);
      HEAP32[(($173)>>2)]=0;
      var $174=$newParent;
      var $175=(($3+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+$174*36)|0);
      var $178=(($177)|0);
      var $179=$sibling;
      var $180=(($3+4)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+$179*36)|0);
      var $183=(($182)|0);
      __ZN6b2AABB7CombineERKS_S1_($178, $leafAABB, $183);
      var $184=$sibling;
      var $185=(($3+4)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+$184*36)|0);
      var $188=(($187+32)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=(($189+1)|0);
      var $191=$newParent;
      var $192=(($3+4)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+$191*36)|0);
      var $195=(($194+32)|0);
      HEAP32[(($195)>>2)]=$190;
      var $196=$oldParent;
      var $197=(($196)|0)!=-1;
      if ($197) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      var $199=$oldParent;
      var $200=(($3+4)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+$199*36)|0);
      var $203=(($202+24)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$sibling;
      var $206=(($204)|0)==(($205)|0);
      if ($206) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $208=$newParent;
      var $209=$oldParent;
      var $210=(($3+4)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=(($211+$209*36)|0);
      var $213=(($212+24)|0);
      HEAP32[(($213)>>2)]=$208;
      __label__ = 22; break;
    case 21: 
      var $215=$newParent;
      var $216=$oldParent;
      var $217=(($3+4)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+$216*36)|0);
      var $220=(($219+28)|0);
      HEAP32[(($220)>>2)]=$215;
      __label__ = 22; break;
    case 22: 
      var $222=$sibling;
      var $223=$newParent;
      var $224=(($3+4)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225+$223*36)|0);
      var $227=(($226+24)|0);
      HEAP32[(($227)>>2)]=$222;
      var $228=$2;
      var $229=$newParent;
      var $230=(($3+4)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231+$229*36)|0);
      var $233=(($232+28)|0);
      HEAP32[(($233)>>2)]=$228;
      var $234=$newParent;
      var $235=$sibling;
      var $236=(($3+4)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+$235*36)|0);
      var $239=(($238+20)|0);
      var $240=$239;
      HEAP32[(($240)>>2)]=$234;
      var $241=$newParent;
      var $242=$2;
      var $243=(($3+4)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244+$242*36)|0);
      var $246=(($245+20)|0);
      var $247=$246;
      HEAP32[(($247)>>2)]=$241;
      __label__ = 24; break;
    case 23: 
      var $249=$sibling;
      var $250=$newParent;
      var $251=(($3+4)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=(($252+$250*36)|0);
      var $254=(($253+24)|0);
      HEAP32[(($254)>>2)]=$249;
      var $255=$2;
      var $256=$newParent;
      var $257=(($3+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258+$256*36)|0);
      var $260=(($259+28)|0);
      HEAP32[(($260)>>2)]=$255;
      var $261=$newParent;
      var $262=$sibling;
      var $263=(($3+4)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264+$262*36)|0);
      var $266=(($265+20)|0);
      var $267=$266;
      HEAP32[(($267)>>2)]=$261;
      var $268=$newParent;
      var $269=$2;
      var $270=(($3+4)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=(($271+$269*36)|0);
      var $273=(($272+20)|0);
      var $274=$273;
      HEAP32[(($274)>>2)]=$268;
      var $275=$newParent;
      var $276=(($3)|0);
      HEAP32[(($276)>>2)]=$275;
      __label__ = 24; break;
    case 24: 
      var $278=$2;
      var $279=(($3+4)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+$278*36)|0);
      var $282=(($281+20)|0);
      var $283=$282;
      var $284=HEAP32[(($283)>>2)];
      $index=$284;
      __label__ = 25; break;
    case 25: 
      var $286=$index;
      var $287=(($286)|0)!=-1;
      if ($287) { __label__ = 26; break; } else { __label__ = 33; break; }
    case 26: 
      var $289=$index;
      var $290=__ZN13b2DynamicTree7BalanceEi($3, $289);
      $index=$290;
      var $291=$index;
      var $292=(($3+4)|0);
      var $293=HEAP32[(($292)>>2)];
      var $294=(($293+$291*36)|0);
      var $295=(($294+24)|0);
      var $296=HEAP32[(($295)>>2)];
      $child16=$296;
      var $297=$index;
      var $298=(($3+4)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=(($299+$297*36)|0);
      var $301=(($300+28)|0);
      var $302=HEAP32[(($301)>>2)];
      $child27=$302;
      var $303=$child16;
      var $304=(($303)|0)!=-1;
      if ($304) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      __label__ = 29; break;
    case 28: 
      ___assert_func(((STRING_TABLE.__str14)|0), 307, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree10InsertLeafEi)|0), ((STRING_TABLE.__str620)|0));
      __label__ = 29; break;
    case 29: 
      var $308=$child27;
      var $309=(($308)|0)!=-1;
      if ($309) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      __label__ = 32; break;
    case 31: 
      ___assert_func(((STRING_TABLE.__str14)|0), 308, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree10InsertLeafEi)|0), ((STRING_TABLE.__str7)|0));
      __label__ = 32; break;
    case 32: 
      var $313=$child16;
      var $314=(($3+4)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=(($315+$313*36)|0);
      var $317=(($316+32)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=$child27;
      var $320=(($3+4)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($321+$319*36)|0);
      var $323=(($322+32)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=__Z5b2MaxIiET_S0_S0_($318, $324);
      var $326=(($325+1)|0);
      var $327=$index;
      var $328=(($3+4)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=(($329+$327*36)|0);
      var $331=(($330+32)|0);
      HEAP32[(($331)>>2)]=$326;
      var $332=$index;
      var $333=(($3+4)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=(($334+$332*36)|0);
      var $336=(($335)|0);
      var $337=$child16;
      var $338=(($3+4)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=(($339+$337*36)|0);
      var $341=(($340)|0);
      var $342=$child27;
      var $343=(($3+4)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=(($344+$342*36)|0);
      var $346=(($345)|0);
      __ZN6b2AABB7CombineERKS_S1_($336, $341, $346);
      var $347=$index;
      var $348=(($3+4)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($349+$347*36)|0);
      var $351=(($350+20)|0);
      var $352=$351;
      var $353=HEAP32[(($352)>>2)];
      $index=$353;
      __label__ = 25; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2DynamicTree12DestroyProxyEi($this, $proxyId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|0) < (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str14)|0), 126, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12DestroyProxyEi)|0), ((STRING_TABLE.__str418)|0));
      __label__ = 5; break;
    case 5: 
      var $14=$2;
      var $15=(($3+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$14*36)|0);
      var $18=__ZNK10b2TreeNode6IsLeafEv($17);
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      ___assert_func(((STRING_TABLE.__str14)|0), 127, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12DestroyProxyEi)|0), ((STRING_TABLE.__str519)|0));
      __label__ = 8; break;
    case 8: 
      var $22=$2;
      __ZN13b2DynamicTree10RemoveLeafEi($3, $22);
      var $23=$2;
      __ZN13b2DynamicTree8FreeNodeEi($3, $23);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2DynamicTree10RemoveLeafEi($this, $leaf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $parent;
      var $grandParent;
      var $sibling;
      var $index;
      var $child1;
      var $child2;
      $1=$this;
      $2=$leaf;
      var $3=$1;
      var $4=$2;
      var $5=(($3)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|0)==(($6)|0);
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=(($3)|0);
      HEAP32[(($9)>>2)]=-1;
      __label__ = 15; break;
    case 3: 
      var $11=$2;
      var $12=(($3+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+$11*36)|0);
      var $15=(($14+20)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      $parent=$17;
      var $18=$parent;
      var $19=(($3+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+$18*36)|0);
      var $22=(($21+20)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      $grandParent=$24;
      var $25=$parent;
      var $26=(($3+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+$25*36)|0);
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=(($30)|0)==(($31)|0);
      if ($32) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $34=$parent;
      var $35=(($3+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+$34*36)|0);
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      $sibling=$39;
      __label__ = 6; break;
    case 5: 
      var $41=$parent;
      var $42=(($3+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+$41*36)|0);
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      $sibling=$46;
      __label__ = 6; break;
    case 6: 
      var $48=$grandParent;
      var $49=(($48)|0)!=-1;
      if ($49) { __label__ = 7; break; } else { __label__ = 14; break; }
    case 7: 
      var $51=$grandParent;
      var $52=(($3+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+$51*36)|0);
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$parent;
      var $58=(($56)|0)==(($57)|0);
      if ($58) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $60=$sibling;
      var $61=$grandParent;
      var $62=(($3+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+$61*36)|0);
      var $65=(($64+24)|0);
      HEAP32[(($65)>>2)]=$60;
      __label__ = 10; break;
    case 9: 
      var $67=$sibling;
      var $68=$grandParent;
      var $69=(($3+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+$68*36)|0);
      var $72=(($71+28)|0);
      HEAP32[(($72)>>2)]=$67;
      __label__ = 10; break;
    case 10: 
      var $74=$grandParent;
      var $75=$sibling;
      var $76=(($3+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+$75*36)|0);
      var $79=(($78+20)|0);
      var $80=$79;
      HEAP32[(($80)>>2)]=$74;
      var $81=$parent;
      __ZN13b2DynamicTree8FreeNodeEi($3, $81);
      var $82=$grandParent;
      $index=$82;
      __label__ = 11; break;
    case 11: 
      var $84=$index;
      var $85=(($84)|0)!=-1;
      if ($85) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $87=$index;
      var $88=__ZN13b2DynamicTree7BalanceEi($3, $87);
      $index=$88;
      var $89=$index;
      var $90=(($3+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+$89*36)|0);
      var $93=(($92+24)|0);
      var $94=HEAP32[(($93)>>2)];
      $child1=$94;
      var $95=$index;
      var $96=(($3+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+$95*36)|0);
      var $99=(($98+28)|0);
      var $100=HEAP32[(($99)>>2)];
      $child2=$100;
      var $101=$index;
      var $102=(($3+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+$101*36)|0);
      var $105=(($104)|0);
      var $106=$child1;
      var $107=(($3+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+$106*36)|0);
      var $110=(($109)|0);
      var $111=$child2;
      var $112=(($3+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+$111*36)|0);
      var $115=(($114)|0);
      __ZN6b2AABB7CombineERKS_S1_($105, $110, $115);
      var $116=$child1;
      var $117=(($3+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+$116*36)|0);
      var $120=(($119+32)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$child2;
      var $123=(($3+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+$122*36)|0);
      var $126=(($125+32)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=__Z5b2MaxIiET_S0_S0_($121, $127);
      var $129=(($128+1)|0);
      var $130=$index;
      var $131=(($3+4)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+$130*36)|0);
      var $134=(($133+32)|0);
      HEAP32[(($134)>>2)]=$129;
      var $135=$index;
      var $136=(($3+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137+$135*36)|0);
      var $139=(($138+20)|0);
      var $140=$139;
      var $141=HEAP32[(($140)>>2)];
      $index=$141;
      __label__ = 11; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $144=$sibling;
      var $145=(($3)|0);
      HEAP32[(($145)>>2)]=$144;
      var $146=$sibling;
      var $147=(($3+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+$146*36)|0);
      var $150=(($149+20)|0);
      var $151=$150;
      HEAP32[(($151)>>2)]=-1;
      var $152=$parent;
      __ZN13b2DynamicTree8FreeNodeEi($3, $152);
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $b=__stackBase__;
      var $r=__stackBase__+16;
      var $6=__stackBase__+24;
      var $7=__stackBase__+32;
      var $d=__stackBase__+40;
      $2=$this;
      $3=$proxyId;
      $4=$aabb;
      $5=$displacement;
      var $8=$2;
      var $9=$3;
      var $10=0 <= (($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $12=$3;
      var $13=(($8+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|0) < (($14)|0);
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str14)|0), 135, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2)|0), ((STRING_TABLE.__str418)|0));
      __label__ = 5; break;
    case 5: 
      var $19=$3;
      var $20=(($8+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+$19*36)|0);
      var $23=__ZNK10b2TreeNode6IsLeafEv($22);
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      ___assert_func(((STRING_TABLE.__str14)|0), 137, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2)|0), ((STRING_TABLE.__str519)|0));
      __label__ = 8; break;
    case 8: 
      var $27=$3;
      var $28=(($8+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+$27*36)|0);
      var $31=(($30)|0);
      var $32=$4;
      var $33=__ZNK6b2AABB8ContainsERKS_($31, $32);
      if ($33) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=0;
      __label__ = 17; break;
    case 10: 
      var $36=$3;
      __ZN13b2DynamicTree10RemoveLeafEi($8, $36);
      var $37=$4;
      var $38=$b;
      var $39=$37;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[(($38+4)>>2)]=HEAP32[(($39+4)>>2)];HEAP32[(($38+8)>>2)]=HEAP32[(($39+8)>>2)];HEAP32[(($38+12)>>2)]=HEAP32[(($39+12)>>2)];
      __ZN6b2Vec2C1Eff($r, 0.10000000149011612, 0.10000000149011612);
      var $40=(($b)|0);
      var $41=(($b)|0);
      __ZmiRK6b2Vec2S1_($6, $41, $r);
      var $42=$40;
      var $43=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
      var $44=(($b+8)|0);
      var $45=(($b+8)|0);
      __ZplRK6b2Vec2S1_($7, $45, $r);
      var $46=$44;
      var $47=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[(($46+4)>>2)]=HEAP32[(($47+4)>>2)];
      var $48=$5;
      __ZmlfRK6b2Vec2($d, 2, $48);
      var $49=(($d)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=$50 < 0;
      if ($51) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $53=(($d)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($b)|0);
      var $56=(($55)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=$57+$54;
      HEAPF32[(($56)>>2)]=$58;
      __label__ = 13; break;
    case 12: 
      var $60=(($d)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($b+8)|0);
      var $63=(($62)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=$64+$61;
      HEAPF32[(($63)>>2)]=$65;
      __label__ = 13; break;
    case 13: 
      var $67=(($d+4)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=$68 < 0;
      if ($69) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $71=(($d+4)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=(($b)|0);
      var $74=(($73+4)|0);
      var $75=HEAPF32[(($74)>>2)];
      var $76=$75+$72;
      HEAPF32[(($74)>>2)]=$76;
      __label__ = 16; break;
    case 15: 
      var $78=(($d+4)|0);
      var $79=HEAPF32[(($78)>>2)];
      var $80=(($b+8)|0);
      var $81=(($80+4)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$82+$79;
      HEAPF32[(($81)>>2)]=$83;
      __label__ = 16; break;
    case 16: 
      var $85=$3;
      var $86=(($8+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+$85*36)|0);
      var $89=(($88)|0);
      var $90=$89;
      var $91=$b;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[(($90+4)>>2)]=HEAP32[(($91+4)>>2)];HEAP32[(($90+8)>>2)]=HEAP32[(($91+8)>>2)];HEAP32[(($90+12)>>2)]=HEAP32[(($91+12)>>2)];
      var $92=$3;
      __ZN13b2DynamicTree10InsertLeafEi($8, $92);
      $1=1;
      __label__ = 17; break;
    case 17: 
      var $94=$1;
      STACKTOP = __stackBase__;
      return $94;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2AABB8ContainsERKS_($this, $aabb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$this;
      $2=$aabb;
      var $3=$1;
      $result=1;
      var $4=$result;
      var $5=(($4) & 1);
      if ($5) { __label__ = 2; break; } else { var $16 = 0;__label__ = 3; break; }
    case 2: 
      var $7=(($3)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      var $10=$2;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=$9 <= $13;
      var $16 = $14;__label__ = 3; break;
    case 3: 
      var $16;
      var $17=(($16)&1);
      $result=$17;
      var $18=$result;
      var $19=(($18) & 1);
      if ($19) { __label__ = 4; break; } else { var $30 = 0;__label__ = 5; break; }
    case 4: 
      var $21=(($3)|0);
      var $22=(($21+4)|0);
      var $23=HEAPF32[(($22)>>2)];
      var $24=$2;
      var $25=(($24)|0);
      var $26=(($25+4)|0);
      var $27=HEAPF32[(($26)>>2)];
      var $28=$23 <= $27;
      var $30 = $28;__label__ = 5; break;
    case 5: 
      var $30;
      var $31=(($30)&1);
      $result=$31;
      var $32=$result;
      var $33=(($32) & 1);
      if ($33) { __label__ = 6; break; } else { var $44 = 0;__label__ = 7; break; }
    case 6: 
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=(($36)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=(($3+8)|0);
      var $40=(($39)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42=$38 <= $41;
      var $44 = $42;__label__ = 7; break;
    case 7: 
      var $44;
      var $45=(($44)&1);
      $result=$45;
      var $46=$result;
      var $47=(($46) & 1);
      if ($47) { __label__ = 8; break; } else { var $58 = 0;__label__ = 9; break; }
    case 8: 
      var $49=$2;
      var $50=(($49+8)|0);
      var $51=(($50+4)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($3+8)|0);
      var $54=(($53+4)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=$52 <= $55;
      var $58 = $56;__label__ = 9; break;
    case 9: 
      var $58;
      var $59=(($58)&1);
      $result=$59;
      var $60=$result;
      var $61=(($60) & 1);
      ;
      return $61;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2AABB12GetPerimeterEv($this) {
  ;
  var __label__;

  var $1;
  var $wx;
  var $wy;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($2)|0);
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5-$8;
  $wx=$9;
  var $10=(($2+8)|0);
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($2)|0);
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12-$15;
  $wy=$16;
  var $17=$wx;
  var $18=$wy;
  var $19=$17+$18;
  var $20=$19*2;
  ;
  return $20;
}


function __ZNK13b2DynamicTree9GetHeightEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $2=$this;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==-1;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $9=(($3)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($3+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+$10*36)|0);
      var $14=(($13+32)|0);
      var $15=HEAP32[(($14)>>2)];
      $1=$15;
      __label__ = 4; break;
    case 4: 
      var $17=$1;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2AABBC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2AABBC2Ev($2);
  ;
  return;
}


function __ZN6b2AABB7CombineERKS_S1_($this, $aabb1, $aabb2) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  var $5=__stackBase__+8;
  $1=$this;
  $2=$aabb1;
  $3=$aabb2;
  var $6=$1;
  var $7=(($6)|0);
  var $8=$2;
  var $9=(($8)|0);
  var $10=$3;
  var $11=(($10)|0);
  __Z5b2MinRK6b2Vec2S1_($4, $9, $11);
  var $12=$7;
  var $13=$4;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[(($12+4)>>2)]=HEAP32[(($13+4)>>2)];
  var $14=(($6+8)|0);
  var $15=$2;
  var $16=(($15+8)|0);
  var $17=$3;
  var $18=(($17+8)|0);
  __Z5b2MaxRK6b2Vec2S1_($5, $16, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[(($19+4)>>2)]=HEAP32[(($20+4)>>2)];
  STACKTOP = __stackBase__;
  return;
}


function __ZN13b2DynamicTree7BalanceEi($this, $iA) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $A;
      var $iB;
      var $iC;
      var $B;
      var $C;
      var $balance;
      var $iF;
      var $iG;
      var $F;
      var $G;
      var $iD;
      var $iE;
      var $D;
      var $E;
      $2=$this;
      $3=$iA;
      var $4=$2;
      var $5=$3;
      var $6=(($5)|0)!=-1;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str14)|0), 382, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str8)|0));
      __label__ = 4; break;
    case 4: 
      var $10=(($4+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$3;
      var $13=(($11+$12*36)|0);
      $A=$13;
      var $14=$A;
      var $15=__ZNK10b2TreeNode6IsLeafEv($14);
      if ($15) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=$A;
      var $18=(($17+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0) < 2;
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $22=$3;
      $1=$22;
      __label__ = 60; break;
    case 7: 
      var $24=$A;
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      $iB=$26;
      var $27=$A;
      var $28=(($27+28)|0);
      var $29=HEAP32[(($28)>>2)];
      $iC=$29;
      var $30=$iB;
      var $31=0 <= (($30)|0);
      if ($31) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $33=$iB;
      var $34=(($4+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($33)|0) < (($35)|0);
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 11; break;
    case 10: 
      ___assert_func(((STRING_TABLE.__str14)|0), 392, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str9)|0));
      __label__ = 11; break;
    case 11: 
      var $40=$iC;
      var $41=0 <= (($40)|0);
      if ($41) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $43=$iC;
      var $44=(($4+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($43)|0) < (($45)|0);
      if ($46) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 15; break;
    case 14: 
      ___assert_func(((STRING_TABLE.__str14)|0), 393, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str10)|0));
      __label__ = 15; break;
    case 15: 
      var $50=(($4+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$iB;
      var $53=(($51+$52*36)|0);
      $B=$53;
      var $54=(($4+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$iC;
      var $57=(($55+$56*36)|0);
      $C=$57;
      var $58=$C;
      var $59=(($58+32)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$B;
      var $62=(($61+32)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($60-$63)|0);
      $balance=$64;
      var $65=$balance;
      var $66=(($65)|0) > 1;
      if ($66) { __label__ = 16; break; } else { __label__ = 37; break; }
    case 16: 
      var $68=$C;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      $iF=$70;
      var $71=$C;
      var $72=(($71+28)|0);
      var $73=HEAP32[(($72)>>2)];
      $iG=$73;
      var $74=(($4+4)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$iF;
      var $77=(($75+$76*36)|0);
      $F=$77;
      var $78=(($4+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$iG;
      var $81=(($79+$80*36)|0);
      $G=$81;
      var $82=$iF;
      var $83=0 <= (($82)|0);
      if ($83) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $85=$iF;
      var $86=(($4+12)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($85)|0) < (($87)|0);
      if ($88) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      ___assert_func(((STRING_TABLE.__str14)|0), 407, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str11)|0));
      __label__ = 20; break;
    case 20: 
      var $92=$iG;
      var $93=0 <= (($92)|0);
      if ($93) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $95=$iG;
      var $96=(($4+12)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($95)|0) < (($97)|0);
      if ($98) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 24; break;
    case 23: 
      ___assert_func(((STRING_TABLE.__str14)|0), 408, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str12)|0));
      __label__ = 24; break;
    case 24: 
      var $102=$3;
      var $103=$C;
      var $104=(($103+24)|0);
      HEAP32[(($104)>>2)]=$102;
      var $105=$A;
      var $106=(($105+20)|0);
      var $107=$106;
      var $108=HEAP32[(($107)>>2)];
      var $109=$C;
      var $110=(($109+20)|0);
      var $111=$110;
      HEAP32[(($111)>>2)]=$108;
      var $112=$iC;
      var $113=$A;
      var $114=(($113+20)|0);
      var $115=$114;
      HEAP32[(($115)>>2)]=$112;
      var $116=$C;
      var $117=(($116+20)|0);
      var $118=$117;
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119)|0)!=-1;
      if ($120) { __label__ = 25; break; } else { __label__ = 32; break; }
    case 25: 
      var $122=$C;
      var $123=(($122+20)|0);
      var $124=$123;
      var $125=HEAP32[(($124)>>2)];
      var $126=(($4+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+$125*36)|0);
      var $129=(($128+24)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$3;
      var $132=(($130)|0)==(($131)|0);
      if ($132) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $134=$iC;
      var $135=$C;
      var $136=(($135+20)|0);
      var $137=$136;
      var $138=HEAP32[(($137)>>2)];
      var $139=(($4+4)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+$138*36)|0);
      var $142=(($141+24)|0);
      HEAP32[(($142)>>2)]=$134;
      __label__ = 31; break;
    case 27: 
      var $144=$C;
      var $145=(($144+20)|0);
      var $146=$145;
      var $147=HEAP32[(($146)>>2)];
      var $148=(($4+4)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149+$147*36)|0);
      var $151=(($150+28)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$3;
      var $154=(($152)|0)==(($153)|0);
      if ($154) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 30; break;
    case 29: 
      ___assert_func(((STRING_TABLE.__str14)|0), 424, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str1321)|0));
      __label__ = 30; break;
    case 30: 
      var $158=$iC;
      var $159=$C;
      var $160=(($159+20)|0);
      var $161=$160;
      var $162=HEAP32[(($161)>>2)];
      var $163=(($4+4)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+$162*36)|0);
      var $166=(($165+28)|0);
      HEAP32[(($166)>>2)]=$158;
      __label__ = 31; break;
    case 31: 
      __label__ = 33; break;
    case 32: 
      var $169=$iC;
      var $170=(($4)|0);
      HEAP32[(($170)>>2)]=$169;
      __label__ = 33; break;
    case 33: 
      var $172=$F;
      var $173=(($172+32)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$G;
      var $176=(($175+32)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=(($174)|0) > (($177)|0);
      if ($178) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $180=$iF;
      var $181=$C;
      var $182=(($181+28)|0);
      HEAP32[(($182)>>2)]=$180;
      var $183=$iG;
      var $184=$A;
      var $185=(($184+28)|0);
      HEAP32[(($185)>>2)]=$183;
      var $186=$3;
      var $187=$G;
      var $188=(($187+20)|0);
      var $189=$188;
      HEAP32[(($189)>>2)]=$186;
      var $190=$A;
      var $191=(($190)|0);
      var $192=$B;
      var $193=(($192)|0);
      var $194=$G;
      var $195=(($194)|0);
      __ZN6b2AABB7CombineERKS_S1_($191, $193, $195);
      var $196=$C;
      var $197=(($196)|0);
      var $198=$A;
      var $199=(($198)|0);
      var $200=$F;
      var $201=(($200)|0);
      __ZN6b2AABB7CombineERKS_S1_($197, $199, $201);
      var $202=$B;
      var $203=(($202+32)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$G;
      var $206=(($205+32)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=__Z5b2MaxIiET_S0_S0_($204, $207);
      var $209=(($208+1)|0);
      var $210=$A;
      var $211=(($210+32)|0);
      HEAP32[(($211)>>2)]=$209;
      var $212=$A;
      var $213=(($212+32)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$F;
      var $216=(($215+32)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=__Z5b2MaxIiET_S0_S0_($214, $217);
      var $219=(($218+1)|0);
      var $220=$C;
      var $221=(($220+32)|0);
      HEAP32[(($221)>>2)]=$219;
      __label__ = 36; break;
    case 35: 
      var $223=$iG;
      var $224=$C;
      var $225=(($224+28)|0);
      HEAP32[(($225)>>2)]=$223;
      var $226=$iF;
      var $227=$A;
      var $228=(($227+28)|0);
      HEAP32[(($228)>>2)]=$226;
      var $229=$3;
      var $230=$F;
      var $231=(($230+20)|0);
      var $232=$231;
      HEAP32[(($232)>>2)]=$229;
      var $233=$A;
      var $234=(($233)|0);
      var $235=$B;
      var $236=(($235)|0);
      var $237=$F;
      var $238=(($237)|0);
      __ZN6b2AABB7CombineERKS_S1_($234, $236, $238);
      var $239=$C;
      var $240=(($239)|0);
      var $241=$A;
      var $242=(($241)|0);
      var $243=$G;
      var $244=(($243)|0);
      __ZN6b2AABB7CombineERKS_S1_($240, $242, $244);
      var $245=$B;
      var $246=(($245+32)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=$F;
      var $249=(($248+32)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=__Z5b2MaxIiET_S0_S0_($247, $250);
      var $252=(($251+1)|0);
      var $253=$A;
      var $254=(($253+32)|0);
      HEAP32[(($254)>>2)]=$252;
      var $255=$A;
      var $256=(($255+32)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=$G;
      var $259=(($258+32)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=__Z5b2MaxIiET_S0_S0_($257, $260);
      var $262=(($261+1)|0);
      var $263=$C;
      var $264=(($263+32)|0);
      HEAP32[(($264)>>2)]=$262;
      __label__ = 36; break;
    case 36: 
      var $266=$iC;
      $1=$266;
      __label__ = 60; break;
    case 37: 
      var $268=$balance;
      var $269=(($268)|0) < -1;
      if ($269) { __label__ = 38; break; } else { __label__ = 59; break; }
    case 38: 
      var $271=$B;
      var $272=(($271+24)|0);
      var $273=HEAP32[(($272)>>2)];
      $iD=$273;
      var $274=$B;
      var $275=(($274+28)|0);
      var $276=HEAP32[(($275)>>2)];
      $iE=$276;
      var $277=(($4+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=$iD;
      var $280=(($278+$279*36)|0);
      $D=$280;
      var $281=(($4+4)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$iE;
      var $284=(($282+$283*36)|0);
      $E=$284;
      var $285=$iD;
      var $286=0 <= (($285)|0);
      if ($286) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: 
      var $288=$iD;
      var $289=(($4+12)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=(($288)|0) < (($290)|0);
      if ($291) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      __label__ = 42; break;
    case 41: 
      ___assert_func(((STRING_TABLE.__str14)|0), 467, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str1422)|0));
      __label__ = 42; break;
    case 42: 
      var $295=$iE;
      var $296=0 <= (($295)|0);
      if ($296) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      var $298=$iE;
      var $299=(($4+12)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=(($298)|0) < (($300)|0);
      if ($301) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      __label__ = 46; break;
    case 45: 
      ___assert_func(((STRING_TABLE.__str14)|0), 468, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str15)|0));
      __label__ = 46; break;
    case 46: 
      var $305=$3;
      var $306=$B;
      var $307=(($306+24)|0);
      HEAP32[(($307)>>2)]=$305;
      var $308=$A;
      var $309=(($308+20)|0);
      var $310=$309;
      var $311=HEAP32[(($310)>>2)];
      var $312=$B;
      var $313=(($312+20)|0);
      var $314=$313;
      HEAP32[(($314)>>2)]=$311;
      var $315=$iB;
      var $316=$A;
      var $317=(($316+20)|0);
      var $318=$317;
      HEAP32[(($318)>>2)]=$315;
      var $319=$B;
      var $320=(($319+20)|0);
      var $321=$320;
      var $322=HEAP32[(($321)>>2)];
      var $323=(($322)|0)!=-1;
      if ($323) { __label__ = 47; break; } else { __label__ = 54; break; }
    case 47: 
      var $325=$B;
      var $326=(($325+20)|0);
      var $327=$326;
      var $328=HEAP32[(($327)>>2)];
      var $329=(($4+4)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=(($330+$328*36)|0);
      var $332=(($331+24)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=$3;
      var $335=(($333)|0)==(($334)|0);
      if ($335) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $337=$iB;
      var $338=$B;
      var $339=(($338+20)|0);
      var $340=$339;
      var $341=HEAP32[(($340)>>2)];
      var $342=(($4+4)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=(($343+$341*36)|0);
      var $345=(($344+24)|0);
      HEAP32[(($345)>>2)]=$337;
      __label__ = 53; break;
    case 49: 
      var $347=$B;
      var $348=(($347+20)|0);
      var $349=$348;
      var $350=HEAP32[(($349)>>2)];
      var $351=(($4+4)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=(($352+$350*36)|0);
      var $354=(($353+28)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=$3;
      var $357=(($355)|0)==(($356)|0);
      if ($357) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      __label__ = 52; break;
    case 51: 
      ___assert_func(((STRING_TABLE.__str14)|0), 484, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi)|0), ((STRING_TABLE.__str16)|0));
      __label__ = 52; break;
    case 52: 
      var $361=$iB;
      var $362=$B;
      var $363=(($362+20)|0);
      var $364=$363;
      var $365=HEAP32[(($364)>>2)];
      var $366=(($4+4)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=(($367+$365*36)|0);
      var $369=(($368+28)|0);
      HEAP32[(($369)>>2)]=$361;
      __label__ = 53; break;
    case 53: 
      __label__ = 55; break;
    case 54: 
      var $372=$iB;
      var $373=(($4)|0);
      HEAP32[(($373)>>2)]=$372;
      __label__ = 55; break;
    case 55: 
      var $375=$D;
      var $376=(($375+32)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=$E;
      var $379=(($378+32)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=(($377)|0) > (($380)|0);
      if ($381) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $383=$iD;
      var $384=$B;
      var $385=(($384+28)|0);
      HEAP32[(($385)>>2)]=$383;
      var $386=$iE;
      var $387=$A;
      var $388=(($387+24)|0);
      HEAP32[(($388)>>2)]=$386;
      var $389=$3;
      var $390=$E;
      var $391=(($390+20)|0);
      var $392=$391;
      HEAP32[(($392)>>2)]=$389;
      var $393=$A;
      var $394=(($393)|0);
      var $395=$C;
      var $396=(($395)|0);
      var $397=$E;
      var $398=(($397)|0);
      __ZN6b2AABB7CombineERKS_S1_($394, $396, $398);
      var $399=$B;
      var $400=(($399)|0);
      var $401=$A;
      var $402=(($401)|0);
      var $403=$D;
      var $404=(($403)|0);
      __ZN6b2AABB7CombineERKS_S1_($400, $402, $404);
      var $405=$C;
      var $406=(($405+32)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=$E;
      var $409=(($408+32)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=__Z5b2MaxIiET_S0_S0_($407, $410);
      var $412=(($411+1)|0);
      var $413=$A;
      var $414=(($413+32)|0);
      HEAP32[(($414)>>2)]=$412;
      var $415=$A;
      var $416=(($415+32)|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$D;
      var $419=(($418+32)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=__Z5b2MaxIiET_S0_S0_($417, $420);
      var $422=(($421+1)|0);
      var $423=$B;
      var $424=(($423+32)|0);
      HEAP32[(($424)>>2)]=$422;
      __label__ = 58; break;
    case 57: 
      var $426=$iE;
      var $427=$B;
      var $428=(($427+28)|0);
      HEAP32[(($428)>>2)]=$426;
      var $429=$iD;
      var $430=$A;
      var $431=(($430+24)|0);
      HEAP32[(($431)>>2)]=$429;
      var $432=$3;
      var $433=$D;
      var $434=(($433+20)|0);
      var $435=$434;
      HEAP32[(($435)>>2)]=$432;
      var $436=$A;
      var $437=(($436)|0);
      var $438=$C;
      var $439=(($438)|0);
      var $440=$D;
      var $441=(($440)|0);
      __ZN6b2AABB7CombineERKS_S1_($437, $439, $441);
      var $442=$B;
      var $443=(($442)|0);
      var $444=$A;
      var $445=(($444)|0);
      var $446=$E;
      var $447=(($446)|0);
      __ZN6b2AABB7CombineERKS_S1_($443, $445, $447);
      var $448=$C;
      var $449=(($448+32)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$D;
      var $452=(($451+32)|0);
      var $453=HEAP32[(($452)>>2)];
      var $454=__Z5b2MaxIiET_S0_S0_($450, $453);
      var $455=(($454+1)|0);
      var $456=$A;
      var $457=(($456+32)|0);
      HEAP32[(($457)>>2)]=$455;
      var $458=$A;
      var $459=(($458+32)|0);
      var $460=HEAP32[(($459)>>2)];
      var $461=$E;
      var $462=(($461+32)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=__Z5b2MaxIiET_S0_S0_($460, $463);
      var $465=(($464+1)|0);
      var $466=$B;
      var $467=(($466+32)|0);
      HEAP32[(($467)>>2)]=$465;
      __label__ = 58; break;
    case 58: 
      var $469=$iB;
      $1=$469;
      __label__ = 60; break;
    case 59: 
      var $471=$3;
      $1=$471;
      __label__ = 60; break;
    case 60: 
      var $473=$1;
      ;
      return $473;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree12GetAreaRatioEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $root;
      var $rootArea;
      var $totalArea;
      var $i;
      var $node;
      $2=$this;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==-1;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 10; break;
    case 3: 
      var $9=(($3+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($3)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10+$12*36)|0);
      $root=$13;
      var $14=$root;
      var $15=(($14)|0);
      var $16=__ZNK6b2AABB12GetPerimeterEv($15);
      $rootArea=$16;
      $totalArea=0;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $18=$i;
      var $19=(($3+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($18)|0) < (($20)|0);
      if ($21) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $23=(($3+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$i;
      var $26=(($24+$25*36)|0);
      $node=$26;
      var $27=$node;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0) < 0;
      if ($30) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      var $33=$node;
      var $34=(($33)|0);
      var $35=__ZNK6b2AABB12GetPerimeterEv($34);
      var $36=$totalArea;
      var $37=$36+$35;
      $totalArea=$37;
      __label__ = 8; break;
    case 8: 
      var $39=$i;
      var $40=(($39+1)|0);
      $i=$40;
      __label__ = 4; break;
    case 9: 
      var $42=$totalArea;
      var $43=$rootArea;
      var $44=$42/$43;
      $1=$44;
      __label__ = 10; break;
    case 10: 
      var $46=$1;
      ;
      return $46;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5b2AbsIiET_S0_($a) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$a;
      var $2=$1;
      var $3=(($2)|0) > 0;
      if ($3) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $5=$1;
      var $10 = $5;__label__ = 4; break;
    case 3: 
      var $7=$1;
      var $8=(((-$7))|0);
      var $10 = $8;__label__ = 4; break;
    case 4: 
      var $10;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZeqRK6b2Vec2S1_($a, $b) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$a;
      $2=$b;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAPF32[(($4)>>2)];
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=$5 == $8;
      if ($9) { __label__ = 2; break; } else { var $19 = 0;__label__ = 3; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=$13 == $16;
      var $19 = $17;__label__ = 3; break;
    case 3: 
      var $19;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree13ComputeHeightEi($this, $nodeId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $node;
      var $height1;
      var $height2;
      $2=$this;
      $3=$nodeId;
      var $4=$2;
      var $5=$3;
      var $6=0 <= (($5)|0);
      if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($4+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|0) < (($10)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str14)|0), 563, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13ComputeHeightEi)|0), ((STRING_TABLE.__str216)|0));
      __label__ = 5; break;
    case 5: 
      var $15=(($4+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$3;
      var $18=(($16+$17*36)|0);
      $node=$18;
      var $19=$node;
      var $20=__ZNK10b2TreeNode6IsLeafEv($19);
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 8; break;
    case 7: 
      var $23=$node;
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=__ZNK13b2DynamicTree13ComputeHeightEi($4, $25);
      $height1=$26;
      var $27=$node;
      var $28=(($27+28)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=__ZNK13b2DynamicTree13ComputeHeightEi($4, $29);
      $height2=$30;
      var $31=$height1;
      var $32=$height2;
      var $33=__Z5b2MaxIiET_S0_S0_($31, $32);
      var $34=(($33+1)|0);
      $1=$34;
      __label__ = 8; break;
    case 8: 
      var $36=$1;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree13ComputeHeightEv($this) {
  ;
  var __label__;

  var $1;
  var $height;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=__ZNK13b2DynamicTree13ComputeHeightEi($2, $4);
  $height=$5;
  var $6=$height;
  ;
  return $6;
}


function __ZNK13b2DynamicTree17ValidateStructureEi($this, $index) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $node;
      var $child1;
      var $child2;
      $1=$this;
      $2=$index;
      var $3=$1;
      var $4=$2;
      var $5=(($4)|0)==-1;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 34; break;
    case 3: 
      var $8=$2;
      var $9=(($3)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|0)==(($10)|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $13=$2;
      var $14=(($3+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+$13*36)|0);
      var $17=(($16+20)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)==-1;
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str14)|0), 591, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str1723)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $25=(($3+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($26+$27*36)|0);
      $node=$28;
      var $29=$node;
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      $child1=$31;
      var $32=$node;
      var $33=(($32+28)|0);
      var $34=HEAP32[(($33)>>2)];
      $child2=$34;
      var $35=$node;
      var $36=__ZNK10b2TreeNode6IsLeafEv($35);
      if ($36) { __label__ = 9; break; } else { __label__ = 19; break; }
    case 9: 
      var $38=$child1;
      var $39=(($38)|0)==-1;
      if ($39) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      ___assert_func(((STRING_TABLE.__str14)|0), 601, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str18)|0));
      __label__ = 12; break;
    case 12: 
      var $43=$child2;
      var $44=(($43)|0)==-1;
      if ($44) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 15; break;
    case 14: 
      ___assert_func(((STRING_TABLE.__str14)|0), 602, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str19)|0));
      __label__ = 15; break;
    case 15: 
      var $48=$node;
      var $49=(($48+32)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0)==0;
      if ($51) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 18; break;
    case 17: 
      ___assert_func(((STRING_TABLE.__str14)|0), 603, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str20)|0));
      __label__ = 18; break;
    case 18: 
      __label__ = 34; break;
    case 19: 
      var $56=$child1;
      var $57=0 <= (($56)|0);
      if ($57) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $59=$child1;
      var $60=(($3+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($59)|0) < (($61)|0);
      if ($62) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      __label__ = 23; break;
    case 22: 
      ___assert_func(((STRING_TABLE.__str14)|0), 607, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str21)|0));
      __label__ = 23; break;
    case 23: 
      var $66=$child2;
      var $67=0 <= (($66)|0);
      if ($67) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $69=$child2;
      var $70=(($3+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($69)|0) < (($71)|0);
      if ($72) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      __label__ = 27; break;
    case 26: 
      ___assert_func(((STRING_TABLE.__str14)|0), 608, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str22)|0));
      __label__ = 27; break;
    case 27: 
      var $76=$child1;
      var $77=(($3+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+$76*36)|0);
      var $80=(($79+20)|0);
      var $81=$80;
      var $82=HEAP32[(($81)>>2)];
      var $83=$2;
      var $84=(($82)|0)==(($83)|0);
      if ($84) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 30; break;
    case 29: 
      ___assert_func(((STRING_TABLE.__str14)|0), 610, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str23)|0));
      __label__ = 30; break;
    case 30: 
      var $88=$child2;
      var $89=(($3+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+$88*36)|0);
      var $92=(($91+20)|0);
      var $93=$92;
      var $94=HEAP32[(($93)>>2)];
      var $95=$2;
      var $96=(($94)|0)==(($95)|0);
      if ($96) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      ___assert_func(((STRING_TABLE.__str14)|0), 611, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi)|0), ((STRING_TABLE.__str24)|0));
      __label__ = 33; break;
    case 33: 
      var $100=$child1;
      __ZNK13b2DynamicTree17ValidateStructureEi($3, $100);
      var $101=$child2;
      __ZNK13b2DynamicTree17ValidateStructureEi($3, $101);
      __label__ = 34; break;
    case 34: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree15ValidateMetricsEi($this, $index) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $node;
      var $child1;
      var $child2;
      var $height1;
      var $height2;
      var $height;
      var $aabb=__stackBase__;
      $1=$this;
      $2=$index;
      var $3=$1;
      var $4=$2;
      var $5=(($4)|0)==-1;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 32; break;
    case 3: 
      var $8=(($3+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$2;
      var $11=(($9+$10*36)|0);
      $node=$11;
      var $12=$node;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      $child1=$14;
      var $15=$node;
      var $16=(($15+28)|0);
      var $17=HEAP32[(($16)>>2)];
      $child2=$17;
      var $18=$node;
      var $19=__ZNK10b2TreeNode6IsLeafEv($18);
      if ($19) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $21=$child1;
      var $22=(($21)|0)==-1;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str14)|0), 631, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str18)|0));
      __label__ = 7; break;
    case 7: 
      var $26=$child2;
      var $27=(($26)|0)==-1;
      if ($27) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 10; break;
    case 9: 
      ___assert_func(((STRING_TABLE.__str14)|0), 632, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str19)|0));
      __label__ = 10; break;
    case 10: 
      var $31=$node;
      var $32=(($31+32)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)==0;
      if ($34) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 13; break;
    case 12: 
      ___assert_func(((STRING_TABLE.__str14)|0), 633, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str20)|0));
      __label__ = 13; break;
    case 13: 
      __label__ = 32; break;
    case 14: 
      var $39=$child1;
      var $40=0 <= (($39)|0);
      if ($40) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $42=$child1;
      var $43=(($3+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($42)|0) < (($44)|0);
      if ($45) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 18; break;
    case 17: 
      ___assert_func(((STRING_TABLE.__str14)|0), 637, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str21)|0));
      __label__ = 18; break;
    case 18: 
      var $49=$child2;
      var $50=0 <= (($49)|0);
      if ($50) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $52=$child2;
      var $53=(($3+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($52)|0) < (($54)|0);
      if ($55) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 22; break;
    case 21: 
      ___assert_func(((STRING_TABLE.__str14)|0), 638, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str22)|0));
      __label__ = 22; break;
    case 22: 
      var $59=$child1;
      var $60=(($3+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+$59*36)|0);
      var $63=(($62+32)|0);
      var $64=HEAP32[(($63)>>2)];
      $height1=$64;
      var $65=$child2;
      var $66=(($3+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+$65*36)|0);
      var $69=(($68+32)|0);
      var $70=HEAP32[(($69)>>2)];
      $height2=$70;
      var $71=$height1;
      var $72=$height2;
      var $73=__Z5b2MaxIiET_S0_S0_($71, $72);
      var $74=(($73+1)|0);
      $height=$74;
      var $75=$node;
      var $76=(($75+32)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$height;
      var $79=(($77)|0)==(($78)|0);
      if ($79) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 25; break;
    case 24: 
      ___assert_func(((STRING_TABLE.__str14)|0), 644, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str25)|0));
      __label__ = 25; break;
    case 25: 
      __ZN6b2AABBC1Ev($aabb);
      var $83=$child1;
      var $84=(($3+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+$83*36)|0);
      var $87=(($86)|0);
      var $88=$child2;
      var $89=(($3+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+$88*36)|0);
      var $92=(($91)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb, $87, $92);
      var $93=(($aabb)|0);
      var $94=$node;
      var $95=(($94)|0);
      var $96=(($95)|0);
      var $97=__ZeqRK6b2Vec2S1_($93, $96);
      if ($97) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 28; break;
    case 27: 
      ___assert_func(((STRING_TABLE.__str14)|0), 649, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str26)|0));
      __label__ = 28; break;
    case 28: 
      var $101=(($aabb+8)|0);
      var $102=$node;
      var $103=(($102)|0);
      var $104=(($103+8)|0);
      var $105=__ZeqRK6b2Vec2S1_($101, $104);
      if ($105) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      __label__ = 31; break;
    case 30: 
      ___assert_func(((STRING_TABLE.__str14)|0), 650, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi)|0), ((STRING_TABLE.__str27)|0));
      __label__ = 31; break;
    case 31: 
      var $109=$child1;
      __ZNK13b2DynamicTree15ValidateMetricsEi($3, $109);
      var $110=$child2;
      __ZNK13b2DynamicTree15ValidateMetricsEi($3, $110);
      __label__ = 32; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree8ValidateEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $freeCount;
      var $freeIndex;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      __ZNK13b2DynamicTree17ValidateStructureEi($2, $4);
      var $5=(($2)|0);
      var $6=HEAP32[(($5)>>2)];
      __ZNK13b2DynamicTree15ValidateMetricsEi($2, $6);
      $freeCount=0;
      var $7=(($2+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $freeIndex=$8;
      __label__ = 2; break;
    case 2: 
      var $10=$freeIndex;
      var $11=(($10)|0)!=-1;
      if ($11) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $13=$freeIndex;
      var $14=0 <= (($13)|0);
      if ($14) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $16=$freeIndex;
      var $17=(($2+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|0) < (($18)|0);
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str14)|0), 665, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv)|0), ((STRING_TABLE.__str2824)|0));
      __label__ = 7; break;
    case 7: 
      var $23=$freeIndex;
      var $24=(($2+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+$23*36)|0);
      var $27=(($26+20)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      $freeIndex=$29;
      var $30=$freeCount;
      var $31=(($30+1)|0);
      $freeCount=$31;
      __label__ = 2; break;
    case 8: 
      var $33=__ZNK13b2DynamicTree9GetHeightEv($2);
      var $34=__ZNK13b2DynamicTree13ComputeHeightEv($2);
      var $35=(($33)|0)==(($34)|0);
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 11; break;
    case 10: 
      ___assert_func(((STRING_TABLE.__str14)|0), 670, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv)|0), ((STRING_TABLE.__str29)|0));
      __label__ = 11; break;
    case 11: 
      var $39=(($2+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$freeCount;
      var $42=(($40+$41)|0);
      var $43=(($2+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($42)|0)==(($44)|0);
      if ($45) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 14; break;
    case 13: 
      ___assert_func(((STRING_TABLE.__str14)|0), 672, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv)|0), ((STRING_TABLE.__str30)|0));
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree13GetMaxBalanceEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $maxBalance;
      var $i;
      var $node;
      var $child1;
      var $child2;
      var $balance;
      $1=$this;
      var $2=$1;
      $maxBalance=0;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|0) < (($6)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $9=(($2+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$i;
      var $12=(($10+$11*36)|0);
      $node=$12;
      var $13=$node;
      var $14=(($13+32)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0) <= 1;
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 9; break;
    case 5: 
      var $19=$node;
      var $20=__ZNK10b2TreeNode6IsLeafEv($19);
      var $21=(($20)&1);
      var $22=(($21)|0)==0;
      if ($22) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      ___assert_func(((STRING_TABLE.__str14)|0), 686, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv)|0), ((STRING_TABLE.__str31)|0));
      __label__ = 8; break;
    case 8: 
      var $26=$node;
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      $child1=$28;
      var $29=$node;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      $child2=$31;
      var $32=$child2;
      var $33=(($2+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+$32*36)|0);
      var $36=(($35+32)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$child1;
      var $39=(($2+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$38*36)|0);
      var $42=(($41+32)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($37-$43)|0);
      var $45=__Z5b2AbsIiET_S0_($44);
      $balance=$45;
      var $46=$maxBalance;
      var $47=$balance;
      var $48=__Z5b2MaxIiET_S0_S0_($46, $47);
      $maxBalance=$48;
      __label__ = 9; break;
    case 9: 
      var $50=$i;
      var $51=(($50+1)|0);
      $i=$51;
      __label__ = 2; break;
    case 10: 
      var $53=$maxBalance;
      ;
      return $53;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2DynamicTree15RebuildBottomUpEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $nodes;
      var $count;
      var $i;
      var $minCost;
      var $iMin;
      var $jMin;
      var $i1;
      var $aabbi=__stackBase__;
      var $j;
      var $aabbj=__stackBase__+16;
      var $b=__stackBase__+32;
      var $cost;
      var $index1;
      var $index2;
      var $child1;
      var $child2;
      var $parentIndex;
      var $parent;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=((($4<<2))|0);
      var $6=__Z7b2Alloci($5);
      var $7=$6;
      $nodes=$7;
      $count=0;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $9=$i;
      var $10=(($2+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($9)|0) < (($11)|0);
      if ($12) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $14=$i;
      var $15=(($2+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$14*36)|0);
      var $18=(($17+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0) < 0;
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 9; break;
    case 5: 
      var $23=$i;
      var $24=(($2+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+$23*36)|0);
      var $27=__ZNK10b2TreeNode6IsLeafEv($26);
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $29=$i;
      var $30=(($2+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+$29*36)|0);
      var $33=(($32+20)|0);
      var $34=$33;
      HEAP32[(($34)>>2)]=-1;
      var $35=$i;
      var $36=$count;
      var $37=$nodes;
      var $38=(($37+($36<<2))|0);
      HEAP32[(($38)>>2)]=$35;
      var $39=$count;
      var $40=(($39+1)|0);
      $count=$40;
      __label__ = 8; break;
    case 7: 
      var $42=$i;
      __ZN13b2DynamicTree8FreeNodeEi($2, $42);
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $45=$i;
      var $46=(($45+1)|0);
      $i=$46;
      __label__ = 2; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $49=$count;
      var $50=(($49)|0) > 1;
      if ($50) { __label__ = 12; break; } else { __label__ = 23; break; }
    case 12: 
      $minCost=3.4028234663852886e+38;
      $iMin=-1;
      $jMin=-1;
      $i1=0;
      __label__ = 13; break;
    case 13: 
      var $53=$i1;
      var $54=$count;
      var $55=(($53)|0) < (($54)|0);
      if ($55) { __label__ = 14; break; } else { __label__ = 22; break; }
    case 14: 
      var $57=$i1;
      var $58=$nodes;
      var $59=(($58+($57<<2))|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($2+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+$60*36)|0);
      var $64=(($63)|0);
      var $65=$aabbi;
      var $66=$64;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[(($65+4)>>2)]=HEAP32[(($66+4)>>2)];HEAP32[(($65+8)>>2)]=HEAP32[(($66+8)>>2)];HEAP32[(($65+12)>>2)]=HEAP32[(($66+12)>>2)];
      var $67=$i1;
      var $68=(($67+1)|0);
      $j=$68;
      __label__ = 15; break;
    case 15: 
      var $70=$j;
      var $71=$count;
      var $72=(($70)|0) < (($71)|0);
      if ($72) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $74=$j;
      var $75=$nodes;
      var $76=(($75+($74<<2))|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($2+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+$77*36)|0);
      var $81=(($80)|0);
      var $82=$aabbj;
      var $83=$81;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[(($82+4)>>2)]=HEAP32[(($83+4)>>2)];HEAP32[(($82+8)>>2)]=HEAP32[(($83+8)>>2)];HEAP32[(($82+12)>>2)]=HEAP32[(($83+12)>>2)];
      __ZN6b2AABBC1Ev($b);
      __ZN6b2AABB7CombineERKS_S1_($b, $aabbi, $aabbj);
      var $84=__ZNK6b2AABB12GetPerimeterEv($b);
      $cost=$84;
      var $85=$cost;
      var $86=$minCost;
      var $87=$85 < $86;
      if ($87) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $89=$i1;
      $iMin=$89;
      var $90=$j;
      $jMin=$90;
      var $91=$cost;
      $minCost=$91;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $94=$j;
      var $95=(($94+1)|0);
      $j=$95;
      __label__ = 15; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $98=$i1;
      var $99=(($98+1)|0);
      $i1=$99;
      __label__ = 13; break;
    case 22: 
      var $101=$iMin;
      var $102=$nodes;
      var $103=(($102+($101<<2))|0);
      var $104=HEAP32[(($103)>>2)];
      $index1=$104;
      var $105=$jMin;
      var $106=$nodes;
      var $107=(($106+($105<<2))|0);
      var $108=HEAP32[(($107)>>2)];
      $index2=$108;
      var $109=(($2+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$index1;
      var $112=(($110+$111*36)|0);
      $child1=$112;
      var $113=(($2+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$index2;
      var $116=(($114+$115*36)|0);
      $child2=$116;
      var $117=__ZN13b2DynamicTree12AllocateNodeEv($2);
      $parentIndex=$117;
      var $118=(($2+4)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$parentIndex;
      var $121=(($119+$120*36)|0);
      $parent=$121;
      var $122=$index1;
      var $123=$parent;
      var $124=(($123+24)|0);
      HEAP32[(($124)>>2)]=$122;
      var $125=$index2;
      var $126=$parent;
      var $127=(($126+28)|0);
      HEAP32[(($127)>>2)]=$125;
      var $128=$child1;
      var $129=(($128+32)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$child2;
      var $132=(($131+32)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=__Z5b2MaxIiET_S0_S0_($130, $133);
      var $135=(($134+1)|0);
      var $136=$parent;
      var $137=(($136+32)|0);
      HEAP32[(($137)>>2)]=$135;
      var $138=$parent;
      var $139=(($138)|0);
      var $140=$child1;
      var $141=(($140)|0);
      var $142=$child2;
      var $143=(($142)|0);
      __ZN6b2AABB7CombineERKS_S1_($139, $141, $143);
      var $144=$parent;
      var $145=(($144+20)|0);
      var $146=$145;
      HEAP32[(($146)>>2)]=-1;
      var $147=$parentIndex;
      var $148=$child1;
      var $149=(($148+20)|0);
      var $150=$149;
      HEAP32[(($150)>>2)]=$147;
      var $151=$parentIndex;
      var $152=$child2;
      var $153=(($152+20)|0);
      var $154=$153;
      HEAP32[(($154)>>2)]=$151;
      var $155=$count;
      var $156=(($155-1)|0);
      var $157=$nodes;
      var $158=(($157+($156<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$jMin;
      var $161=$nodes;
      var $162=(($161+($160<<2))|0);
      HEAP32[(($162)>>2)]=$159;
      var $163=$parentIndex;
      var $164=$iMin;
      var $165=$nodes;
      var $166=(($165+($164<<2))|0);
      HEAP32[(($166)>>2)]=$163;
      var $167=$count;
      var $168=(($167-1)|0);
      $count=$168;
      __label__ = 11; break;
    case 23: 
      var $170=$nodes;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($2)|0);
      HEAP32[(($173)>>2)]=$172;
      var $174=$nodes;
      var $175=$174;
      __Z6b2FreePv($175);
      __ZNK13b2DynamicTree8ValidateEv($2);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5b2MinRK6b2Vec2S1_($agg_result, $a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=__Z5b2MinIfET_S0_S0_($5, $8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=__Z5b2MinIfET_S0_S0_($12, $15);
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  ;
  return;
}


function __Z5b2MaxIfET_S0_S0_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3 > $4;
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  ;
  return $8;
}


function __Z5b2MaxRK6b2Vec2S1_($agg_result, $a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=__Z5b2MaxIfET_S0_S0_($5, $8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=__Z5b2MaxIfET_S0_S0_($12, $15);
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  ;
  return;
}


function __ZN6b2AABBC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  ;
  return;
}


function __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input) {
  var __stackBase__  = STACKTOP; STACKTOP += 340; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $proxyA;
      var $proxyB;
      var $sweepA=__stackBase__;
      var $sweepB=__stackBase__+36;
      var $tMax;
      var $totalRadius;
      var $target;
      var $tolerance;
      var $t1;
      var $k_maxIterations;
      var $iter;
      var $cache=__stackBase__+72;
      var $distanceInput=__stackBase__+84;
      var $xfA=__stackBase__+176;
      var $xfB=__stackBase__+192;
      var $distanceOutput=__stackBase__+208;
      var $fcn=__stackBase__+232;
      var $done;
      var $t2;
      var $pushBackIter;
      var $indexA=__stackBase__+332;
      var $indexB=__stackBase__+336;
      var $s2;
      var $s1;
      var $rootIterCount;
      var $a1;
      var $a2;
      var $t;
      var $s;
      $1=$output;
      $2=$input;
      var $3=HEAP32[((_b2_toiCalls)>>2)];
      var $4=(($3+1)|0);
      HEAP32[((_b2_toiCalls)>>2)]=$4;
      var $5=$1;
      var $6=(($5)|0);
      HEAP32[(($6)>>2)]=0;
      var $7=$2;
      var $8=(($7+128)|0);
      var $9=HEAPF32[(($8)>>2)];
      var $10=$1;
      var $11=(($10+4)|0);
      HEAPF32[(($11)>>2)]=$9;
      var $12=$2;
      var $13=(($12)|0);
      $proxyA=$13;
      var $14=$2;
      var $15=(($14+28)|0);
      $proxyB=$15;
      var $16=$2;
      var $17=(($16+56)|0);
      var $18=$sweepA;
      var $19=$17;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $19>>2, $$dest = $18>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $20=$2;
      var $21=(($20+92)|0);
      var $22=$sweepB;
      var $23=$21;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $23>>2, $$dest = $22>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      __ZN7b2Sweep9NormalizeEv($sweepA);
      __ZN7b2Sweep9NormalizeEv($sweepB);
      var $24=$2;
      var $25=(($24+128)|0);
      var $26=HEAPF32[(($25)>>2)];
      $tMax=$26;
      var $27=$proxyA;
      var $28=(($27+24)|0);
      var $29=HEAPF32[(($28)>>2)];
      var $30=$proxyB;
      var $31=(($30+24)|0);
      var $32=HEAPF32[(($31)>>2)];
      var $33=$29+$32;
      $totalRadius=$33;
      var $34=$totalRadius;
      var $35=$34-0.014999999664723873;
      var $36=__Z5b2MaxIfET_S0_S0_(0.004999999888241291, $35);
      $target=$36;
      $tolerance=0.0012499999720603228;
      var $37=$target;
      var $38=$tolerance;
      var $39=$37 > $38;
      if ($39) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str35)|0), 280, ((STRING_TABLE.___PRETTY_FUNCTION____Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput)|0), ((STRING_TABLE.__str136)|0));
      __label__ = 4; break;
    case 4: 
      $t1=0;
      $k_maxIterations=20;
      $iter=0;
      var $43=(($cache+4)|0);
      HEAP16[(($43)>>1)]=0;
      __ZN15b2DistanceInputC1Ev($distanceInput);
      var $44=(($distanceInput)|0);
      var $45=$2;
      var $46=(($45)|0);
      var $47=$44;
      var $48=$46;
      assert(28 % 1 === 0, 'memcpy given ' + 28 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[(($47+4)>>2)]=HEAP32[(($48+4)>>2)];HEAP32[(($47+8)>>2)]=HEAP32[(($48+8)>>2)];HEAP32[(($47+12)>>2)]=HEAP32[(($48+12)>>2)];HEAP32[(($47+16)>>2)]=HEAP32[(($48+16)>>2)];HEAP32[(($47+20)>>2)]=HEAP32[(($48+20)>>2)];HEAP32[(($47+24)>>2)]=HEAP32[(($48+24)>>2)];
      var $49=(($distanceInput+28)|0);
      var $50=$2;
      var $51=(($50+28)|0);
      var $52=$49;
      var $53=$51;
      assert(28 % 1 === 0, 'memcpy given ' + 28 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[(($52+4)>>2)]=HEAP32[(($53+4)>>2)];HEAP32[(($52+8)>>2)]=HEAP32[(($53+8)>>2)];HEAP32[(($52+12)>>2)]=HEAP32[(($53+12)>>2)];HEAP32[(($52+16)>>2)]=HEAP32[(($53+16)>>2)];HEAP32[(($52+20)>>2)]=HEAP32[(($53+20)>>2)];HEAP32[(($52+24)>>2)]=HEAP32[(($53+24)>>2)];
      var $54=(($distanceInput+88)|0);
      HEAP8[($54)]=0;
      __label__ = 5; break;
    case 5: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $56=$t1;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepA, $xfA, $56);
      var $57=$t1;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepB, $xfB, $57);
      var $58=(($distanceInput+56)|0);
      var $59=$58;
      var $60=$xfA;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[(($59+4)>>2)]=HEAP32[(($60+4)>>2)];HEAP32[(($59+8)>>2)]=HEAP32[(($60+8)>>2)];HEAP32[(($59+12)>>2)]=HEAP32[(($60+12)>>2)];
      var $61=(($distanceInput+72)|0);
      var $62=$61;
      var $63=$xfB;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[(($62+4)>>2)]=HEAP32[(($63+4)>>2)];HEAP32[(($62+8)>>2)]=HEAP32[(($63+8)>>2)];HEAP32[(($62+12)>>2)]=HEAP32[(($63+12)>>2)];
      __ZN16b2DistanceOutputC1Ev($distanceOutput);
      __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($distanceOutput, $cache, $distanceInput);
      var $64=(($distanceOutput+16)|0);
      var $65=HEAPF32[(($64)>>2)];
      var $66=$65 <= 0;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$1;
      var $69=(($68)|0);
      HEAP32[(($69)>>2)]=2;
      var $70=$1;
      var $71=(($70+4)|0);
      HEAPF32[(($71)>>2)]=0;
      __label__ = 38; break;
    case 7: 
      var $73=(($distanceOutput+16)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$target;
      var $76=$tolerance;
      var $77=$75+$76;
      var $78=$74 < $77;
      if ($78) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $80=$1;
      var $81=(($80)|0);
      HEAP32[(($81)>>2)]=3;
      var $82=$t1;
      var $83=$1;
      var $84=(($83+4)|0);
      HEAPF32[(($84)>>2)]=$82;
      __label__ = 38; break;
    case 9: 
      __ZN20b2SeparationFunctionC1Ev($fcn);
      var $86=$proxyA;
      var $87=$proxyB;
      var $88=$t1;
      var $89=__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($fcn, $cache, $86, $sweepA, $87, $sweepB, $88);
      $done=0;
      var $90=$tMax;
      $t2=$90;
      $pushBackIter=0;
      __label__ = 10; break;
    case 10: 
      var $92=$t2;
      var $93=__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($fcn, $indexA, $indexB, $92);
      $s2=$93;
      var $94=$s2;
      var $95=$target;
      var $96=$tolerance;
      var $97=$95+$96;
      var $98=$94 > $97;
      if ($98) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $100=$1;
      var $101=(($100)|0);
      HEAP32[(($101)>>2)]=4;
      var $102=$tMax;
      var $103=$1;
      var $104=(($103+4)|0);
      HEAPF32[(($104)>>2)]=$102;
      $done=1;
      __label__ = 33; break;
    case 12: 
      var $106=$s2;
      var $107=$target;
      var $108=$tolerance;
      var $109=$107-$108;
      var $110=$106 > $109;
      if ($110) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $112=$t2;
      $t1=$112;
      __label__ = 33; break;
    case 14: 
      var $114=HEAP32[(($indexA)>>2)];
      var $115=HEAP32[(($indexB)>>2)];
      var $116=$t1;
      var $117=__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $114, $115, $116);
      $s1=$117;
      var $118=$s1;
      var $119=$target;
      var $120=$tolerance;
      var $121=$119-$120;
      var $122=$118 < $121;
      if ($122) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $124=$1;
      var $125=(($124)|0);
      HEAP32[(($125)>>2)]=1;
      var $126=$t1;
      var $127=$1;
      var $128=(($127+4)|0);
      HEAPF32[(($128)>>2)]=$126;
      $done=1;
      __label__ = 33; break;
    case 16: 
      var $130=$s1;
      var $131=$target;
      var $132=$tolerance;
      var $133=$131+$132;
      var $134=$130 <= $133;
      if ($134) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $136=$1;
      var $137=(($136)|0);
      HEAP32[(($137)>>2)]=3;
      var $138=$t1;
      var $139=$1;
      var $140=(($139+4)|0);
      HEAPF32[(($140)>>2)]=$138;
      $done=1;
      __label__ = 33; break;
    case 18: 
      $rootIterCount=0;
      var $142=$t1;
      $a1=$142;
      var $143=$t2;
      $a2=$143;
      __label__ = 19; break;
    case 19: 
      var $145=$rootIterCount;
      var $146=$145 & 1;
      var $147=(($146)|0)!=0;
      if ($147) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $149=$a1;
      var $150=$target;
      var $151=$s1;
      var $152=$150-$151;
      var $153=$a2;
      var $154=$a1;
      var $155=$153-$154;
      var $156=$152*$155;
      var $157=$s2;
      var $158=$s1;
      var $159=$157-$158;
      var $160=$156/$159;
      var $161=$149+$160;
      $t=$161;
      __label__ = 22; break;
    case 21: 
      var $163=$a1;
      var $164=$a2;
      var $165=$163+$164;
      var $166=$165*0.5;
      $t=$166;
      __label__ = 22; break;
    case 22: 
      var $168=HEAP32[(($indexA)>>2)];
      var $169=HEAP32[(($indexB)>>2)];
      var $170=$t;
      var $171=__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $168, $169, $170);
      $s=$171;
      var $172=$s;
      var $173=$target;
      var $174=$172-$173;
      var $175=__Z5b2AbsIfET_S0_($174);
      var $176=$tolerance;
      var $177=$175 < $176;
      if ($177) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $179=$t;
      $t2=$179;
      __label__ = 30; break;
    case 24: 
      var $181=$s;
      var $182=$target;
      var $183=$181 > $182;
      if ($183) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $185=$t;
      $a1=$185;
      var $186=$s;
      $s1=$186;
      __label__ = 27; break;
    case 26: 
      var $188=$t;
      $a2=$188;
      var $189=$s;
      $s2=$189;
      __label__ = 27; break;
    case 27: 
      var $191=$rootIterCount;
      var $192=(($191+1)|0);
      $rootIterCount=$192;
      var $193=HEAP32[((_b2_toiRootIters)>>2)];
      var $194=(($193+1)|0);
      HEAP32[((_b2_toiRootIters)>>2)]=$194;
      var $195=$rootIterCount;
      var $196=(($195)|0)==50;
      if ($196) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 30; break;
    case 29: 
      __label__ = 19; break;
    case 30: 
      var $200=HEAP32[((_b2_toiMaxRootIters)>>2)];
      var $201=$rootIterCount;
      var $202=__Z5b2MaxIiET_S0_S0_($200, $201);
      HEAP32[((_b2_toiMaxRootIters)>>2)]=$202;
      var $203=$pushBackIter;
      var $204=(($203+1)|0);
      $pushBackIter=$204;
      var $205=$pushBackIter;
      var $206=(($205)|0)==8;
      if ($206) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      __label__ = 10; break;
    case 33: 
      var $210=$iter;
      var $211=(($210+1)|0);
      $iter=$211;
      var $212=HEAP32[((_b2_toiIters)>>2)];
      var $213=(($212+1)|0);
      HEAP32[((_b2_toiIters)>>2)]=$213;
      var $214=$done;
      var $215=(($214) & 1);
      if ($215) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      __label__ = 38; break;
    case 35: 
      var $218=$iter;
      var $219=(($218)|0)==20;
      if ($219) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $221=$1;
      var $222=(($221)|0);
      HEAP32[(($222)>>2)]=1;
      var $223=$t1;
      var $224=$1;
      var $225=(($224+4)|0);
      HEAPF32[(($225)>>2)]=$223;
      __label__ = 38; break;
    case 37: 
      __label__ = 5; break;
    case 38: 
      var $228=HEAP32[((_b2_toiMaxIters)>>2)];
      var $229=$iter;
      var $230=__Z5b2MaxIiET_S0_S0_($228, $229);
      HEAP32[((_b2_toiMaxIters)>>2)]=$230;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2Sweep9NormalizeEv($this) {
  ;
  var __label__;

  var $1;
  var $twoPi;
  var $d;
  $1=$this;
  var $2=$1;
  $twoPi=6.2831854820251465;
  var $3=$twoPi;
  var $4=(($2+24)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$twoPi;
  var $7=$5/$6;
  var $8=_floorf($7);
  var $9=$3*$8;
  $d=$9;
  var $10=$d;
  var $11=(($2+24)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$12-$10;
  HEAPF32[(($11)>>2)]=$13;
  var $14=$d;
  var $15=(($2+28)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=$16-$14;
  HEAPF32[(($15)>>2)]=$17;
  ;
  return;
}


function __ZNK7b2Sweep12GetTransformEP11b2Transformf($this, $xf, $beta) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  var $5=__stackBase__+8;
  var $6=__stackBase__+16;
  var $angle;
  var $7=__stackBase__+24;
  $1=$this;
  $2=$xf;
  $3=$beta;
  var $8=$1;
  var $9=$2;
  var $10=(($9)|0);
  var $11=$3;
  var $12=1-$11;
  var $13=(($8+8)|0);
  __ZmlfRK6b2Vec2($5, $12, $13);
  var $14=$3;
  var $15=(($8+16)|0);
  __ZmlfRK6b2Vec2($6, $14, $15);
  __ZplRK6b2Vec2S1_($4, $5, $6);
  var $16=$10;
  var $17=$4;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[(($16+4)>>2)]=HEAP32[(($17+4)>>2)];
  var $18=$3;
  var $19=1-$18;
  var $20=(($8+24)|0);
  var $21=HEAPF32[(($20)>>2)];
  var $22=$19*$21;
  var $23=$3;
  var $24=(($8+28)|0);
  var $25=HEAPF32[(($24)>>2)];
  var $26=$23*$25;
  var $27=$22+$26;
  $angle=$27;
  var $28=$2;
  var $29=(($28+8)|0);
  var $30=$angle;
  __ZN5b2Rot3SetEf($29, $30);
  var $31=$2;
  var $32=(($31)|0);
  var $33=$2;
  var $34=(($33+8)|0);
  var $35=(($8)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($7, $34, $35);
  __ZN6b2Vec2mIERKS_($32, $7);
  STACKTOP = __stackBase__;
  return;
}


function __ZN20b2SeparationFunctionC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN20b2SeparationFunctionC2Ev($2);
  ;
  return;
}


function __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($this, $cache, $proxyA, $sweepA, $proxyB, $sweepB, $t1) {
  var __stackBase__  = STACKTOP; STACKTOP += 264; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $count;
      var $xfA=__stackBase__;
      var $xfB=__stackBase__+16;
      var $localPointA=__stackBase__+32;
      var $localPointB=__stackBase__+40;
      var $pointA=__stackBase__+48;
      var $pointB=__stackBase__+56;
      var $9=__stackBase__+64;
      var $s;
      var $localPointB1=__stackBase__+72;
      var $localPointB2=__stackBase__+80;
      var $10=__stackBase__+88;
      var $11=__stackBase__+96;
      var $normal=__stackBase__+104;
      var $12=__stackBase__+112;
      var $13=__stackBase__+120;
      var $pointB1=__stackBase__+128;
      var $localPointA2=__stackBase__+136;
      var $pointA3=__stackBase__+144;
      var $s4;
      var $14=__stackBase__+152;
      var $15=__stackBase__+160;
      var $localPointA1=__stackBase__+168;
      var $localPointA25=__stackBase__+176;
      var $16=__stackBase__+184;
      var $17=__stackBase__+192;
      var $normal6=__stackBase__+200;
      var $18=__stackBase__+208;
      var $19=__stackBase__+216;
      var $pointA7=__stackBase__+224;
      var $localPointB8=__stackBase__+232;
      var $pointB9=__stackBase__+240;
      var $s10;
      var $20=__stackBase__+248;
      var $21=__stackBase__+256;
      $2=$this;
      $3=$cache;
      $4=$proxyA;
      $5=$sweepA;
      $6=$proxyB;
      $7=$sweepB;
      $8=$t1;
      var $22=$2;
      var $23=$4;
      var $24=(($22)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=$6;
      var $26=(($22+4)|0);
      HEAP32[(($26)>>2)]=$25;
      var $27=$3;
      var $28=(($27+4)|0);
      var $29=HEAPU16[(($28)>>1)];
      var $30=(($29)&65535);
      $count=$30;
      var $31=$count;
      var $32=0 < (($31)|0);
      if ($32) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $34=$count;
      var $35=(($34)|0) < 3;
      if ($35) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str35)|0), 50, ((STRING_TABLE.___PRETTY_FUNCTION____ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f)|0), ((STRING_TABLE.__str541)|0));
      __label__ = 5; break;
    case 5: 
      var $39=(($22+8)|0);
      var $40=$5;
      var $41=$39;
      var $42=$40;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $42>>2, $$dest = $41>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $43=(($22+44)|0);
      var $44=$7;
      var $45=$43;
      var $46=$44;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $46>>2, $$dest = $45>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $47=(($22+8)|0);
      var $48=$8;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($47, $xfA, $48);
      var $49=(($22+44)|0);
      var $50=$8;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($49, $xfB, $50);
      var $51=$count;
      var $52=(($51)|0)==1;
      if ($52) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $54=(($22+80)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=(($22)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$3;
      var $58=(($57+6)|0);
      var $59=(($58)|0);
      var $60=HEAPU8[($59)];
      var $61=(($60)&255);
      var $62=__ZNK15b2DistanceProxy9GetVertexEi($56, $61);
      var $63=$localPointA;
      var $64=$62;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[(($63+4)>>2)]=HEAP32[(($64+4)>>2)];
      var $65=(($22+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$3;
      var $68=(($67+9)|0);
      var $69=(($68)|0);
      var $70=HEAPU8[($69)];
      var $71=(($70)&255);
      var $72=__ZNK15b2DistanceProxy9GetVertexEi($66, $71);
      var $73=$localPointB;
      var $74=$72;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[(($73+4)>>2)]=HEAP32[(($74+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
      var $75=(($22+92)|0);
      __ZmiRK6b2Vec2S1_($9, $pointB, $pointA);
      var $76=$75;
      var $77=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[(($76+4)>>2)]=HEAP32[(($77+4)>>2)];
      var $78=(($22+92)|0);
      var $79=__ZN6b2Vec29NormalizeEv($78);
      $s=$79;
      var $80=$s;
      $1=$80;
      __label__ = 14; break;
    case 7: 
      var $82=$3;
      var $83=(($82+6)|0);
      var $84=(($83)|0);
      var $85=HEAPU8[($84)];
      var $86=(($85)&255);
      var $87=$3;
      var $88=(($87+6)|0);
      var $89=(($88+1)|0);
      var $90=HEAPU8[($89)];
      var $91=(($90)&255);
      var $92=(($86)|0)==(($91)|0);
      if ($92) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $94=(($22+80)|0);
      HEAP32[(($94)>>2)]=2;
      var $95=$6;
      var $96=$3;
      var $97=(($96+9)|0);
      var $98=(($97)|0);
      var $99=HEAPU8[($98)];
      var $100=(($99)&255);
      var $101=__ZNK15b2DistanceProxy9GetVertexEi($95, $100);
      var $102=$localPointB1;
      var $103=$101;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[(($102+4)>>2)]=HEAP32[(($103+4)>>2)];
      var $104=$6;
      var $105=$3;
      var $106=(($105+9)|0);
      var $107=(($106+1)|0);
      var $108=HEAPU8[($107)];
      var $109=(($108)&255);
      var $110=__ZNK15b2DistanceProxy9GetVertexEi($104, $109);
      var $111=$localPointB2;
      var $112=$110;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[(($111+4)>>2)]=HEAP32[(($112+4)>>2)];
      var $113=(($22+92)|0);
      __ZmiRK6b2Vec2S1_($11, $localPointB2, $localPointB1);
      __Z7b2CrossRK6b2Vec2f($10, $11, 1);
      var $114=$113;
      var $115=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[(($114+4)>>2)]=HEAP32[(($115+4)>>2)];
      var $116=(($22+92)|0);
      var $117=__ZN6b2Vec29NormalizeEv($116);
      var $118=(($xfB+8)|0);
      var $119=(($22+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal, $118, $119);
      var $120=(($22+84)|0);
      __ZplRK6b2Vec2S1_($13, $localPointB1, $localPointB2);
      __ZmlfRK6b2Vec2($12, 0.5, $13);
      var $121=$120;
      var $122=$12;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[(($121+4)>>2)]=HEAP32[(($122+4)>>2)];
      var $123=(($22+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB1, $xfB, $123);
      var $124=$4;
      var $125=$3;
      var $126=(($125+6)|0);
      var $127=(($126)|0);
      var $128=HEAPU8[($127)];
      var $129=(($128)&255);
      var $130=__ZNK15b2DistanceProxy9GetVertexEi($124, $129);
      var $131=$localPointA2;
      var $132=$130;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[(($131+4)>>2)]=HEAP32[(($132+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA3, $xfA, $localPointA2);
      __ZmiRK6b2Vec2S1_($14, $pointA3, $pointB1);
      var $133=__Z5b2DotRK6b2Vec2S1_($14, $normal);
      $s4=$133;
      var $134=$s4;
      var $135=$134 < 0;
      if ($135) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $137=(($22+92)|0);
      var $138=(($22+92)|0);
      __ZNK6b2Vec2ngEv($15, $138);
      var $139=$137;
      var $140=$15;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];HEAP32[(($139+4)>>2)]=HEAP32[(($140+4)>>2)];
      var $141=$s4;
      var $142=(-$141);
      $s4=$142;
      __label__ = 10; break;
    case 10: 
      var $144=$s4;
      $1=$144;
      __label__ = 14; break;
    case 11: 
      var $146=(($22+80)|0);
      HEAP32[(($146)>>2)]=1;
      var $147=(($22)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$3;
      var $150=(($149+6)|0);
      var $151=(($150)|0);
      var $152=HEAPU8[($151)];
      var $153=(($152)&255);
      var $154=__ZNK15b2DistanceProxy9GetVertexEi($148, $153);
      var $155=$localPointA1;
      var $156=$154;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($155)>>2)]=HEAP32[(($156)>>2)];HEAP32[(($155+4)>>2)]=HEAP32[(($156+4)>>2)];
      var $157=(($22)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$3;
      var $160=(($159+6)|0);
      var $161=(($160+1)|0);
      var $162=HEAPU8[($161)];
      var $163=(($162)&255);
      var $164=__ZNK15b2DistanceProxy9GetVertexEi($158, $163);
      var $165=$localPointA25;
      var $166=$164;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[(($165+4)>>2)]=HEAP32[(($166+4)>>2)];
      var $167=(($22+92)|0);
      __ZmiRK6b2Vec2S1_($17, $localPointA25, $localPointA1);
      __Z7b2CrossRK6b2Vec2f($16, $17, 1);
      var $168=$167;
      var $169=$16;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($168)>>2)]=HEAP32[(($169)>>2)];HEAP32[(($168+4)>>2)]=HEAP32[(($169+4)>>2)];
      var $170=(($22+92)|0);
      var $171=__ZN6b2Vec29NormalizeEv($170);
      var $172=(($xfA+8)|0);
      var $173=(($22+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $172, $173);
      var $174=(($22+84)|0);
      __ZplRK6b2Vec2S1_($19, $localPointA1, $localPointA25);
      __ZmlfRK6b2Vec2($18, 0.5, $19);
      var $175=$174;
      var $176=$18;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($175)>>2)]=HEAP32[(($176)>>2)];HEAP32[(($175+4)>>2)]=HEAP32[(($176+4)>>2)];
      var $177=(($22+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA7, $xfA, $177);
      var $178=(($22+4)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=$3;
      var $181=(($180+9)|0);
      var $182=(($181)|0);
      var $183=HEAPU8[($182)];
      var $184=(($183)&255);
      var $185=__ZNK15b2DistanceProxy9GetVertexEi($179, $184);
      var $186=$localPointB8;
      var $187=$185;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($186)>>2)]=HEAP32[(($187)>>2)];HEAP32[(($186+4)>>2)]=HEAP32[(($187+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB9, $xfB, $localPointB8);
      __ZmiRK6b2Vec2S1_($20, $pointB9, $pointA7);
      var $188=__Z5b2DotRK6b2Vec2S1_($20, $normal6);
      $s10=$188;
      var $189=$s10;
      var $190=$189 < 0;
      if ($190) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $192=(($22+92)|0);
      var $193=(($22+92)|0);
      __ZNK6b2Vec2ngEv($21, $193);
      var $194=$192;
      var $195=$21;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($194)>>2)]=HEAP32[(($195)>>2)];HEAP32[(($194+4)>>2)]=HEAP32[(($195+4)>>2)];
      var $196=$s10;
      var $197=(-$196);
      $s10=$197;
      __label__ = 13; break;
    case 13: 
      var $199=$s10;
      $1=$199;
      __label__ = 14; break;
    case 14: 
      var $201=$1;
      STACKTOP = __stackBase__;
      return $201;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2ShapeD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$xf;
  $3=$p;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  ;
  return 0;
}


function __ZNK12b2ChainShape13GetChildCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4-1)|0);
  ;
  return $5;
}


function __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($this, $indexA, $indexB, $t) {
  var __stackBase__  = STACKTOP; STACKTOP += 208; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xfA=__stackBase__;
      var $xfB=__stackBase__+16;
      var $axisA=__stackBase__+32;
      var $axisB=__stackBase__+40;
      var $6=__stackBase__+48;
      var $localPointA=__stackBase__+56;
      var $localPointB=__stackBase__+64;
      var $pointA=__stackBase__+72;
      var $pointB=__stackBase__+80;
      var $separation;
      var $7=__stackBase__+88;
      var $normal=__stackBase__+96;
      var $pointA1=__stackBase__+104;
      var $axisB2=__stackBase__+112;
      var $8=__stackBase__+120;
      var $localPointB3=__stackBase__+128;
      var $pointB4=__stackBase__+136;
      var $separation5;
      var $9=__stackBase__+144;
      var $normal6=__stackBase__+152;
      var $pointB7=__stackBase__+160;
      var $axisA8=__stackBase__+168;
      var $10=__stackBase__+176;
      var $localPointA9=__stackBase__+184;
      var $pointA10=__stackBase__+192;
      var $separation11;
      var $11=__stackBase__+200;
      $2=$this;
      $3=$indexA;
      $4=$indexB;
      $5=$t;
      var $12=$2;
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $13=(($12+8)|0);
      var $14=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($13, $xfA, $14);
      var $15=(($12+44)|0);
      var $16=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($15, $xfB, $16);
      var $17=(($12+80)|0);
      var $18=HEAP32[(($17)>>2)];
      if ((($18)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($18)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($18)|0) == 2) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 2: 
      var $20=(($xfA+8)|0);
      var $21=(($12+92)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA, $20, $21);
      var $22=(($xfB+8)|0);
      var $23=(($12+92)|0);
      __ZNK6b2Vec2ngEv($6, $23);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB, $22, $6);
      var $24=(($12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($25, $axisA);
      var $27=$3;
      HEAP32[(($27)>>2)]=$26;
      var $28=(($12+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($29, $axisB);
      var $31=$4;
      HEAP32[(($31)>>2)]=$30;
      var $32=(($12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$3;
      var $35=HEAP32[(($34)>>2)];
      var $36=__ZNK15b2DistanceProxy9GetVertexEi($33, $35);
      var $37=$localPointA;
      var $38=$36;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[(($37+4)>>2)]=HEAP32[(($38+4)>>2)];
      var $39=(($12+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$4;
      var $42=HEAP32[(($41)>>2)];
      var $43=__ZNK15b2DistanceProxy9GetVertexEi($40, $42);
      var $44=$localPointB;
      var $45=$43;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[(($44+4)>>2)]=HEAP32[(($45+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
      __ZmiRK6b2Vec2S1_($7, $pointB, $pointA);
      var $46=(($12+92)|0);
      var $47=__Z5b2DotRK6b2Vec2S1_($7, $46);
      $separation=$47;
      var $48=$separation;
      $1=$48;
      __label__ = 6; break;
    case 3: 
      var $50=(($xfA+8)|0);
      var $51=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal, $50, $51);
      var $52=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1, $xfA, $52);
      var $53=(($xfB+8)|0);
      __ZNK6b2Vec2ngEv($8, $normal);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2, $53, $8);
      var $54=$3;
      HEAP32[(($54)>>2)]=-1;
      var $55=(($12+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($56, $axisB2);
      var $58=$4;
      HEAP32[(($58)>>2)]=$57;
      var $59=(($12+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$4;
      var $62=HEAP32[(($61)>>2)];
      var $63=__ZNK15b2DistanceProxy9GetVertexEi($60, $62);
      var $64=$localPointB3;
      var $65=$63;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[(($64+4)>>2)]=HEAP32[(($65+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4, $xfB, $localPointB3);
      __ZmiRK6b2Vec2S1_($9, $pointB4, $pointA1);
      var $66=__Z5b2DotRK6b2Vec2S1_($9, $normal);
      $separation5=$66;
      var $67=$separation5;
      $1=$67;
      __label__ = 6; break;
    case 4: 
      var $69=(($xfB+8)|0);
      var $70=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $69, $70);
      var $71=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7, $xfB, $71);
      var $72=(($xfA+8)|0);
      __ZNK6b2Vec2ngEv($10, $normal6);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8, $72, $10);
      var $73=$4;
      HEAP32[(($73)>>2)]=-1;
      var $74=(($12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($75, $axisA8);
      var $77=$3;
      HEAP32[(($77)>>2)]=$76;
      var $78=(($12)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$3;
      var $81=HEAP32[(($80)>>2)];
      var $82=__ZNK15b2DistanceProxy9GetVertexEi($79, $81);
      var $83=$localPointA9;
      var $84=$82;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[(($83+4)>>2)]=HEAP32[(($84+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10, $xfA, $localPointA9);
      __ZmiRK6b2Vec2S1_($11, $pointA10, $pointB7);
      var $85=__Z5b2DotRK6b2Vec2S1_($11, $normal6);
      $separation11=$85;
      var $86=$separation11;
      $1=$86;
      __label__ = 6; break;
    case 5: 
      ___assert_func(((STRING_TABLE.__str35)|0), 183, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f)|0), ((STRING_TABLE.__str237)|0));
      var $88=$3;
      HEAP32[(($88)>>2)]=-1;
      var $89=$4;
      HEAP32[(($89)>>2)]=-1;
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $91=$1;
      STACKTOP = __stackBase__;
      return $91;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK20b2SeparationFunction8EvaluateEiif($this, $indexA, $indexB, $t) {
  var __stackBase__  = STACKTOP; STACKTOP += 208; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xfA=__stackBase__;
      var $xfB=__stackBase__+16;
      var $axisA=__stackBase__+32;
      var $axisB=__stackBase__+40;
      var $6=__stackBase__+48;
      var $localPointA=__stackBase__+56;
      var $localPointB=__stackBase__+64;
      var $pointA=__stackBase__+72;
      var $pointB=__stackBase__+80;
      var $separation;
      var $7=__stackBase__+88;
      var $normal=__stackBase__+96;
      var $pointA1=__stackBase__+104;
      var $axisB2=__stackBase__+112;
      var $8=__stackBase__+120;
      var $localPointB3=__stackBase__+128;
      var $pointB4=__stackBase__+136;
      var $separation5;
      var $9=__stackBase__+144;
      var $normal6=__stackBase__+152;
      var $pointB7=__stackBase__+160;
      var $axisA8=__stackBase__+168;
      var $10=__stackBase__+176;
      var $localPointA9=__stackBase__+184;
      var $pointA10=__stackBase__+192;
      var $separation11;
      var $11=__stackBase__+200;
      $2=$this;
      $3=$indexA;
      $4=$indexB;
      $5=$t;
      var $12=$2;
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $13=(($12+8)|0);
      var $14=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($13, $xfA, $14);
      var $15=(($12+44)|0);
      var $16=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($15, $xfB, $16);
      var $17=(($12+80)|0);
      var $18=HEAP32[(($17)>>2)];
      if ((($18)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($18)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($18)|0) == 2) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 2: 
      var $20=(($xfA+8)|0);
      var $21=(($12+92)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA, $20, $21);
      var $22=(($xfB+8)|0);
      var $23=(($12+92)|0);
      __ZNK6b2Vec2ngEv($6, $23);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB, $22, $6);
      var $24=(($12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$3;
      var $27=__ZNK15b2DistanceProxy9GetVertexEi($25, $26);
      var $28=$localPointA;
      var $29=$27;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[(($28+4)>>2)]=HEAP32[(($29+4)>>2)];
      var $30=(($12+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$4;
      var $33=__ZNK15b2DistanceProxy9GetVertexEi($31, $32);
      var $34=$localPointB;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
      __ZmiRK6b2Vec2S1_($7, $pointB, $pointA);
      var $36=(($12+92)|0);
      var $37=__Z5b2DotRK6b2Vec2S1_($7, $36);
      $separation=$37;
      var $38=$separation;
      $1=$38;
      __label__ = 6; break;
    case 3: 
      var $40=(($xfA+8)|0);
      var $41=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal, $40, $41);
      var $42=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1, $xfA, $42);
      var $43=(($xfB+8)|0);
      __ZNK6b2Vec2ngEv($8, $normal);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2, $43, $8);
      var $44=(($12+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$4;
      var $47=__ZNK15b2DistanceProxy9GetVertexEi($45, $46);
      var $48=$localPointB3;
      var $49=$47;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[(($48+4)>>2)]=HEAP32[(($49+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4, $xfB, $localPointB3);
      __ZmiRK6b2Vec2S1_($9, $pointB4, $pointA1);
      var $50=__Z5b2DotRK6b2Vec2S1_($9, $normal);
      $separation5=$50;
      var $51=$separation5;
      $1=$51;
      __label__ = 6; break;
    case 4: 
      var $53=(($xfB+8)|0);
      var $54=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $53, $54);
      var $55=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7, $xfB, $55);
      var $56=(($xfA+8)|0);
      __ZNK6b2Vec2ngEv($10, $normal6);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8, $56, $10);
      var $57=(($12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$3;
      var $60=__ZNK15b2DistanceProxy9GetVertexEi($58, $59);
      var $61=$localPointA9;
      var $62=$60;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[(($61+4)>>2)]=HEAP32[(($62+4)>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10, $xfA, $localPointA9);
      __ZmiRK6b2Vec2S1_($11, $pointA10, $pointB7);
      var $63=__Z5b2DotRK6b2Vec2S1_($11, $normal6);
      $separation11=$63;
      var $64=$separation11;
      $1=$64;
      __label__ = 6; break;
    case 5: 
      ___assert_func(((STRING_TABLE.__str35)|0), 242, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction8EvaluateEiif)|0), ((STRING_TABLE.__str237)|0));
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $67=$1;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN20b2SeparationFunctionC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  __ZN7b2SweepC1Ev($3);
  var $4=(($2+44)|0);
  __ZN7b2SweepC1Ev($4);
  var $5=(($2+84)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+92)|0);
  __ZN6b2Vec2C1Ev($6);
  ;
  return;
}


function __ZN7b2SweepC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2SweepC2Ev($2);
  ;
  return;
}


function __ZN7b2SweepC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+16)|0);
  __ZN6b2Vec2C1Ev($5);
  ;
  return;
}


function __ZN5b2Rot3SetEf($this, $angle) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$angle;
  var $3=$1;
  var $4=$2;
  var $5=_sinf($4);
  var $6=(($3)|0);
  HEAPF32[(($6)>>2)]=$5;
  var $7=$2;
  var $8=_cosf($7);
  var $9=(($3+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  ;
  return;
}


function __ZN12b2ChainShapeD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN12b2ChainShapeD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2ChainShape10CreateLoopEPK6b2Vec2i($this, $vertices, $count) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$vertices;
      $3=$count;
      var $4=$1;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=(($4+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str42)|0), 34, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i)|0), ((STRING_TABLE.__str143)|0));
      __label__ = 5; break;
    case 5: 
      var $15=$3;
      var $16=(($15)|0) >= 3;
      if ($16) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      ___assert_func(((STRING_TABLE.__str42)|0), 35, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i)|0), ((STRING_TABLE.__str244)|0));
      __label__ = 8; break;
    case 8: 
      var $20=$3;
      var $21=(($20+1)|0);
      var $22=(($4+16)|0);
      HEAP32[(($22)>>2)]=$21;
      var $23=(($4+16)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24<<3))|0);
      var $26=__Z7b2Alloci($25);
      var $27=$26;
      var $28=(($4+12)|0);
      HEAP32[(($28)>>2)]=$27;
      var $29=(($4+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=$2;
      var $33=$32;
      var $34=$3;
      var $35=((($34<<3))|0);
      assert($35 % 1 === 0, 'memcpy given ' + $35 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($31, $33, $35, 1);
      var $36=$3;
      var $37=(($4+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+($36<<3))|0);
      var $40=(($4+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0);
      var $43=$39;
      var $44=$42;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[(($43+4)>>2)]=HEAP32[(($44+4)>>2)];
      var $45=(($4+20)|0);
      var $46=(($4+16)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47-2)|0);
      var $49=(($4+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+($48<<3))|0);
      var $52=$45;
      var $53=$51;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[(($52+4)>>2)]=HEAP32[(($53+4)>>2)];
      var $54=(($4+28)|0);
      var $55=(($4+12)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+8)|0);
      var $58=$54;
      var $59=$57;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[(($58+4)>>2)]=HEAP32[(($59+4)>>2)];
      var $60=(($4+36)|0);
      HEAP8[($60)]=1;
      var $61=(($4+37)|0);
      HEAP8[($61)]=1;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($this, $vertices, $count) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$vertices;
      $3=$count;
      var $4=$1;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=(($4+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str42)|0), 48, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i)|0), ((STRING_TABLE.__str143)|0));
      __label__ = 5; break;
    case 5: 
      var $15=$3;
      var $16=(($15)|0) >= 2;
      if ($16) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      ___assert_func(((STRING_TABLE.__str42)|0), 49, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i)|0), ((STRING_TABLE.__str345)|0));
      __label__ = 8; break;
    case 8: 
      var $20=$3;
      var $21=(($4+16)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=$3;
      var $23=((($22<<3))|0);
      var $24=__Z7b2Alloci($23);
      var $25=$24;
      var $26=(($4+12)|0);
      HEAP32[(($26)>>2)]=$25;
      var $27=(($4+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=$2;
      var $31=$30;
      var $32=(($4+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33<<3))|0);
      assert($34 % 1 === 0, 'memcpy given ' + $34 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($29, $31, $34, 1);
      var $35=(($4+36)|0);
      HEAP8[($35)]=0;
      var $36=(($4+37)|0);
      HEAP8[($36)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2ChainShape13SetPrevVertexERK6b2Vec2($this, $prevVertex) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$prevVertex;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  var $8=(($3+36)|0);
  HEAP8[($8)]=1;
  ;
  return;
}


function __ZN12b2ChainShape13SetNextVertexERK6b2Vec2($this, $nextVertex) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$nextVertex;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  var $8=(($3+37)|0);
  HEAP8[($8)]=1;
  ;
  return;
}


function __ZNK12b2ChainShape5CloneEP16b2BlockAllocator($this, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 40);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|0)==0;
      if ($7) { var $11 = 0;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$6;
      __ZN12b2ChainShapeC1Ev($9);
      var $11 = $9;__label__ = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=(($3+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($3+16)|0);
      var $16=HEAP32[(($15)>>2)];
      __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($12, $14, $16);
      var $17=$clone;
      var $18=(($17+20)|0);
      var $19=(($3+20)|0);
      var $20=$18;
      var $21=$19;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[(($20+4)>>2)]=HEAP32[(($21+4)>>2)];
      var $22=$clone;
      var $23=(($22+28)|0);
      var $24=(($3+28)|0);
      var $25=$23;
      var $26=$24;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[(($25+4)>>2)]=HEAP32[(($26+4)>>2)];
      var $27=(($3+36)|0);
      var $28=HEAP8[($27)];
      var $29=(($28) & 1);
      var $30=$clone;
      var $31=(($30+36)|0);
      var $32=(($29)&1);
      HEAP8[($31)]=$32;
      var $33=(($3+37)|0);
      var $34=HEAP8[($33)];
      var $35=(($34) & 1);
      var $36=$clone;
      var $37=(($36+37)|0);
      var $38=(($35)&1);
      HEAP8[($37)]=$38;
      var $39=$clone;
      var $40=$39;
      ;
      return $40;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2ChainShapeC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2ChainShapeC2Ev($2);
  ;
  return;
}


function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this, $edge, $index) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$edge;
      $3=$index;
      var $4=$1;
      var $5=$3;
      var $6=0 <= (($5)|0);
      if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($4+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10-1)|0);
      var $12=(($8)|0) < (($11)|0);
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str42)|0), 89, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei)|0), ((STRING_TABLE.__str446)|0));
      __label__ = 5; break;
    case 5: 
      var $16=$2;
      var $17=$16;
      var $18=(($17+4)|0);
      HEAP32[(($18)>>2)]=1;
      var $19=$4;
      var $20=(($19+8)|0);
      var $21=HEAPF32[(($20)>>2)];
      var $22=$2;
      var $23=$22;
      var $24=(($23+8)|0);
      HEAPF32[(($24)>>2)]=$21;
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=$3;
      var $28=(($27)|0);
      var $29=(($4+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+($28<<3))|0);
      var $32=$26;
      var $33=$31;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
      var $34=$2;
      var $35=(($34+20)|0);
      var $36=$3;
      var $37=(($36+1)|0);
      var $38=(($4+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($37<<3))|0);
      var $41=$35;
      var $42=$40;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[(($41+4)>>2)]=HEAP32[(($42+4)>>2)];
      var $43=$3;
      var $44=(($43)|0) > 0;
      if ($44) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $46=$2;
      var $47=(($46+28)|0);
      var $48=$3;
      var $49=(($48-1)|0);
      var $50=(($4+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+($49<<3))|0);
      var $53=$47;
      var $54=$52;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[(($53+4)>>2)]=HEAP32[(($54+4)>>2)];
      var $55=$2;
      var $56=(($55+44)|0);
      HEAP8[($56)]=1;
      __label__ = 8; break;
    case 7: 
      var $58=$2;
      var $59=(($58+28)|0);
      var $60=(($4+20)|0);
      var $61=$59;
      var $62=$60;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[(($61+4)>>2)]=HEAP32[(($62+4)>>2)];
      var $63=(($4+36)|0);
      var $64=HEAP8[($63)];
      var $65=(($64) & 1);
      var $66=$2;
      var $67=(($66+44)|0);
      var $68=(($65)&1);
      HEAP8[($67)]=$68;
      __label__ = 8; break;
    case 8: 
      var $70=$3;
      var $71=(($4+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72-2)|0);
      var $74=(($70)|0) < (($73)|0);
      if ($74) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $76=$2;
      var $77=(($76+36)|0);
      var $78=$3;
      var $79=(($78+2)|0);
      var $80=(($4+12)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+($79<<3))|0);
      var $83=$77;
      var $84=$82;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[(($83+4)>>2)]=HEAP32[(($84+4)>>2)];
      var $85=$2;
      var $86=(($85+45)|0);
      HEAP8[($86)]=1;
      __label__ = 11; break;
    case 10: 
      var $88=$2;
      var $89=(($88+36)|0);
      var $90=(($4+28)|0);
      var $91=$89;
      var $92=$90;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[(($91+4)>>2)]=HEAP32[(($92+4)>>2)];
      var $93=(($4+37)|0);
      var $94=HEAP8[($93)];
      var $95=(($94) & 1);
      var $96=$2;
      var $97=(($96+45)|0);
      var $98=(($95)&1);
      HEAP8[($97)]=$98;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2EdgeShapeC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2EdgeShapeC2Ev($2);
  ;
  return;
}


function __ZN11b2EdgeShapeD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2EdgeShapeD2Ev($2);
  ;
  return;
}


function __ZN12b2ChainShapeD2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      HEAP32[(($5)>>2)]=((__ZTV12b2ChainShape+8)|0);
      var $6=(($4+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      (function() { try { __THREW__ = false; return __Z6b2FreePv($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $10=(($4+12)|0);
      HEAP32[(($10)>>2)]=0;
      var $11=(($4+16)|0);
      HEAP32[(($11)>>2)]=0;
      var $12=$4;
      __ZN7b2ShapeD2Ev($12);
      ;
      return;
    case 3: 
      var $14=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $15=$14.f0;
      $2=$15;
      var $16=$14.f1;
      $3=$16;
      var $17=$4;
      (function() { try { __THREW__ = false; return __ZN7b2ShapeD2Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 6: 
      var $26=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $edgeShape=__stackBase__;
      var $i1;
      var $i2;
      var $7;
      var $8;
      var $9;
      $2=$this;
      $3=$output;
      $4=$input;
      $5=$xf;
      $6=$childIndex;
      var $10=$2;
      var $11=$6;
      var $12=(($10+16)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($11)|0) < (($13)|0);
      if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str42)|0), 129, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi)|0), ((STRING_TABLE.__str547)|0));
      __label__ = 4; break;
    case 4: 
      __ZN11b2EdgeShapeC1Ev($edgeShape);
      var $18=$6;
      $i1=$18;
      var $19=$6;
      var $20=(($19+1)|0);
      $i2=$20;
      var $21=$i2;
      var $22=(($10+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($21)|0)==(($23)|0);
      if ($24) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $i2=0;
      __label__ = 6; break;
    case 6: 
      var $27=(($edgeShape+12)|0);
      var $28=$i1;
      var $29=(($10+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+($28<<3))|0);
      var $32=$27;
      var $33=$31;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
      var $34=(($edgeShape+20)|0);
      var $35=$i2;
      var $36=(($10+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($35<<3))|0);
      var $39=$34;
      var $40=$38;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[(($39+4)>>2)]=HEAP32[(($40+4)>>2)];
      var $41=$3;
      var $42=$4;
      var $43=$5;
      var $44 = (function() { try { __THREW__ = false; return __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($edgeShape, $41, $42, $43, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=$44;
      $9=1;
      __ZN11b2EdgeShapeD1Ev($edgeShape);
      var $46=$1;
      STACKTOP = __stackBase__;
      return $46;
    case 8: 
      var $48=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $49=$48.f0;
      $7=$49;
      var $50=$48.f1;
      $8=$50;
      (function() { try { __THREW__ = false; return __ZN11b2EdgeShapeD1Ev($edgeShape) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $53=$7;
      var $54=$7;
      var $55=$8;
      var $56=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $54, tempValue);
      var $57=($56.f1 = $55, $56);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 11: 
      var $59=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2CircleShape13GetChildCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return 1;
}


function __ZNK11b2EdgeShape13GetChildCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return 1;
}


function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$xf;
  $3=$p;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  ;
  return 0;
}


function __ZN7b2ShapeC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((__ZTV7b2Shape+8)|0);
  ;
  return;
}


function __ZN7b2ShapeaSERKS_($this, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$3;
  var $6=(($5+4)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($4+4)|0);
  HEAP32[(($8)>>2)]=$7;
  var $9=$3;
  var $10=(($9+8)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=(($4+8)|0);
  HEAPF32[(($12)>>2)]=$11;
  ;
  return $4;
}


function __ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i1;
      var $i2;
      var $v1=__stackBase__;
      var $v2=__stackBase__+8;
      var $5=__stackBase__+16;
      var $6=__stackBase__+24;
      $1=$this;
      $2=$aabb;
      $3=$xf;
      $4=$childIndex;
      var $7=$1;
      var $8=$4;
      var $9=(($7+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|0) < (($10)|0);
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str42)|0), 148, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi)|0), ((STRING_TABLE.__str547)|0));
      __label__ = 4; break;
    case 4: 
      var $15=$4;
      $i1=$15;
      var $16=$4;
      var $17=(($16+1)|0);
      $i2=$17;
      var $18=$i2;
      var $19=(($7+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($18)|0)==(($20)|0);
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $i2=0;
      __label__ = 6; break;
    case 6: 
      var $24=$3;
      var $25=$i1;
      var $26=(($7+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+($25<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $24, $28);
      var $29=$3;
      var $30=$i2;
      var $31=(($7+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+($30<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $29, $33);
      var $34=$2;
      var $35=(($34)|0);
      __Z5b2MinRK6b2Vec2S1_($5, $v1, $v2);
      var $36=$35;
      var $37=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[(($36+4)>>2)]=HEAP32[(($37+4)>>2)];
      var $38=$2;
      var $39=(($38+8)|0);
      __Z5b2MaxRK6b2Vec2S1_($6, $v1, $v2);
      var $40=$39;
      var $41=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2ChainShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$massData;
  $3=$density;
  var $4=$1;
  var $5=$2;
  var $6=(($5)|0);
  HEAPF32[(($6)>>2)]=0;
  var $7=$2;
  var $8=(($7+4)|0);
  __ZN6b2Vec27SetZeroEv($8);
  var $9=$2;
  var $10=(($9+12)|0);
  HEAPF32[(($10)>>2)]=0;
  ;
  return;
}


function __ZN11b2EdgeShapeD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2ShapeD2Ev($3);
  ;
  return;
}


function __ZN7b2ShapeD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2ShapeD2Ev($2);
  ;
  return;
}


function __ZN7b2ShapeD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN7b2ShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2CircleShape5CloneEP16b2BlockAllocator($this, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 20);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|0)==0;
      if ($7) { var $11 = 0;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$6;
      __ZN13b2CircleShapeC1Ev($9);
      var $11 = $9;__label__ = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=__ZN13b2CircleShapeaSERKS_($12, $3);
      var $14=$clone;
      var $15=$14;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2CircleShapeC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2CircleShapeC2Ev($2);
  ;
  return;
}


function __ZN13b2CircleShapeaSERKS_($this, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$4;
  var $6=$3;
  var $7=$6;
  var $8=__ZN7b2ShapeaSERKS_($5, $7);
  var $9=(($4+12)|0);
  var $10=$3;
  var $11=(($10+12)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[(($12+4)>>2)]=HEAP32[(($13+4)>>2)];
  ;
  return $4;
}


function __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2($this, $transform, $p) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $center=__stackBase__;
  var $4=__stackBase__+8;
  var $d=__stackBase__+16;
  $1=$this;
  $2=$transform;
  $3=$p;
  var $5=$1;
  var $6=$2;
  var $7=(($6)|0);
  var $8=$2;
  var $9=(($8+8)|0);
  var $10=(($5+12)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($4, $9, $10);
  __ZplRK6b2Vec2S1_($center, $7, $4);
  var $11=$3;
  __ZmiRK6b2Vec2S1_($d, $11, $center);
  var $12=__Z5b2DotRK6b2Vec2S1_($d, $d);
  var $13=$5;
  var $14=(($13+8)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$5;
  var $17=(($16+8)|0);
  var $18=HEAPF32[(($17)>>2)];
  var $19=$15*$18;
  var $20=$12 <= $19;
  STACKTOP = __stackBase__;
  return $20;
}


function __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $transform, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $position=__stackBase__+4;
      var $8=__stackBase__+12;
      var $s=__stackBase__+20;
      var $b;
      var $r=__stackBase__+28;
      var $c;
      var $rr;
      var $sigma;
      var $a;
      var $9=__stackBase__+36;
      var $10=__stackBase__+44;
      $3=$this;
      $4=$output;
      $5=$input;
      $6=$transform;
      $7=$childIndex;
      var $11=$3;
      var $12=$6;
      var $13=(($12)|0);
      var $14=$6;
      var $15=(($14+8)|0);
      var $16=(($11+12)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($8, $15, $16);
      __ZplRK6b2Vec2S1_($position, $13, $8);
      var $17=$5;
      var $18=(($17)|0);
      __ZmiRK6b2Vec2S1_($s, $18, $position);
      var $19=__Z5b2DotRK6b2Vec2S1_($s, $s);
      var $20=$11;
      var $21=(($20+8)|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=$11;
      var $24=(($23+8)|0);
      var $25=HEAPF32[(($24)>>2)];
      var $26=$22*$25;
      var $27=$19-$26;
      $b=$27;
      var $28=$5;
      var $29=(($28+8)|0);
      var $30=$5;
      var $31=(($30)|0);
      __ZmiRK6b2Vec2S1_($r, $29, $31);
      var $32=__Z5b2DotRK6b2Vec2S1_($s, $r);
      $c=$32;
      var $33=__Z5b2DotRK6b2Vec2S1_($r, $r);
      $rr=$33;
      var $34=$c;
      var $35=$c;
      var $36=$34*$35;
      var $37=$rr;
      var $38=$b;
      var $39=$37*$38;
      var $40=$36-$39;
      $sigma=$40;
      var $41=$sigma;
      var $42=$41 < 0;
      if ($42) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $44=$rr;
      var $45=$44 < 1.1920928955078125e-7;
      if ($45) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $2=0;
      __label__ = 8; break;
    case 4: 
      var $48=$c;
      var $49=$sigma;
      var $50=$1;
      HEAPF32[(($1)>>2)]=$49;
      var $51=HEAPF32[(($1)>>2)];
      var $52=_sqrtf($51);
      var $53=$1;
      var $54=$48+$52;
      var $55=(-$54);
      $a=$55;
      var $56=$a;
      var $57=0 <= $56;
      if ($57) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $59=$a;
      var $60=$5;
      var $61=(($60+16)|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=$rr;
      var $64=$62*$63;
      var $65=$59 <= $64;
      if ($65) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $67=$rr;
      var $68=$a;
      var $69=$68/$67;
      $a=$69;
      var $70=$a;
      var $71=$4;
      var $72=(($71+8)|0);
      HEAPF32[(($72)>>2)]=$70;
      var $73=$4;
      var $74=(($73)|0);
      var $75=$a;
      __ZmlfRK6b2Vec2($10, $75, $r);
      __ZplRK6b2Vec2S1_($9, $s, $10);
      var $76=$74;
      var $77=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[(($76+4)>>2)]=HEAP32[(($77+4)>>2)];
      var $78=$4;
      var $79=(($78)|0);
      var $80=__ZN6b2Vec29NormalizeEv($79);
      $2=1;
      __label__ = 8; break;
    case 7: 
      $2=0;
      __label__ = 8; break;
    case 8: 
      var $83=$2;
      STACKTOP = __stackBase__;
      return $83;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $transform, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $p=__stackBase__;
  var $5=__stackBase__+8;
  $1=$this;
  $2=$aabb;
  $3=$transform;
  $4=$childIndex;
  var $6=$1;
  var $7=$3;
  var $8=(($7)|0);
  var $9=$3;
  var $10=(($9+8)|0);
  var $11=(($6+12)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($5, $10, $11);
  __ZplRK6b2Vec2S1_($p, $8, $5);
  var $12=$2;
  var $13=(($12)|0);
  var $14=(($p)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$6;
  var $17=(($16+8)|0);
  var $18=HEAPF32[(($17)>>2)];
  var $19=$15-$18;
  var $20=(($p+4)|0);
  var $21=HEAPF32[(($20)>>2)];
  var $22=$6;
  var $23=(($22+8)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=$21-$24;
  __ZN6b2Vec23SetEff($13, $19, $25);
  var $26=$2;
  var $27=(($26+8)|0);
  var $28=(($p)|0);
  var $29=HEAPF32[(($28)>>2)];
  var $30=$6;
  var $31=(($30+8)|0);
  var $32=HEAPF32[(($31)>>2)];
  var $33=$29+$32;
  var $34=(($p+4)|0);
  var $35=HEAPF32[(($34)>>2)];
  var $36=$6;
  var $37=(($36+8)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$35+$38;
  __ZN6b2Vec23SetEff($27, $33, $39);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK13b2CircleShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$massData;
  $3=$density;
  var $4=$1;
  var $5=$3;
  var $6=$5*3.1415927410125732;
  var $7=$4;
  var $8=(($7+8)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=$6*$9;
  var $11=$4;
  var $12=(($11+8)|0);
  var $13=HEAPF32[(($12)>>2)];
  var $14=$10*$13;
  var $15=$2;
  var $16=(($15)|0);
  HEAPF32[(($16)>>2)]=$14;
  var $17=$2;
  var $18=(($17+4)|0);
  var $19=(($4+12)|0);
  var $20=$18;
  var $21=$19;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[(($20+4)>>2)]=HEAP32[(($21+4)>>2)];
  var $22=$2;
  var $23=(($22)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=$4;
  var $26=(($25+8)|0);
  var $27=HEAPF32[(($26)>>2)];
  var $28=$27*0.5;
  var $29=$4;
  var $30=(($29+8)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$28*$31;
  var $33=(($4+12)|0);
  var $34=(($4+12)|0);
  var $35=__Z5b2DotRK6b2Vec2S1_($33, $34);
  var $36=$32+$35;
  var $37=$24*$36;
  var $38=$2;
  var $39=(($38+12)|0);
  HEAPF32[(($39)>>2)]=$37;
  ;
  return;
}


function __ZN13b2CircleShapeD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2CircleShapeD2Ev($2);
  ;
  return;
}


function __ZN13b2CircleShapeD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN13b2CircleShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2CircleShapeD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2ShapeD2Ev($3);
  ;
  return;
}


function __ZN11b2EdgeShape3SetERK6b2Vec2S2_($this, $v1, $v2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$v1;
  $3=$v2;
  var $4=$1;
  var $5=(($4+12)|0);
  var $6=$2;
  var $7=$5;
  var $8=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[(($7+4)>>2)]=HEAP32[(($8+4)>>2)];
  var $9=(($4+20)|0);
  var $10=$3;
  var $11=$9;
  var $12=$10;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[(($11+4)>>2)]=HEAP32[(($12+4)>>2)];
  var $13=(($4+44)|0);
  HEAP8[($13)]=0;
  var $14=(($4+45)|0);
  HEAP8[($14)]=0;
  ;
  return;
}


function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 48);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|0)==0;
      if ($7) { var $11 = 0;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$6;
      __ZN11b2EdgeShapeC1Ev($9);
      var $11 = $9;__label__ = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=__ZN11b2EdgeShapeaSERKS_($12, $3);
      var $14=$clone;
      var $15=$14;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2EdgeShapeaSERKS_($this, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$4;
  var $6=$3;
  var $7=$6;
  var $8=__ZN7b2ShapeaSERKS_($5, $7);
  var $9=(($4+12)|0);
  var $10=$3;
  var $11=(($10+12)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[(($12+4)>>2)]=HEAP32[(($13+4)>>2)];
  var $14=(($4+20)|0);
  var $15=$3;
  var $16=(($15+20)|0);
  var $17=$14;
  var $18=$16;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[(($17+4)>>2)]=HEAP32[(($18+4)>>2)];
  var $19=(($4+28)|0);
  var $20=$3;
  var $21=(($20+28)|0);
  var $22=$19;
  var $23=$21;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[(($22+4)>>2)]=HEAP32[(($23+4)>>2)];
  var $24=(($4+36)|0);
  var $25=$3;
  var $26=(($25+36)|0);
  var $27=$24;
  var $28=$26;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
  var $29=$3;
  var $30=(($29+44)|0);
  var $31=HEAP8[($30)];
  var $32=(($31) & 1);
  var $33=(($4+44)|0);
  var $34=(($32)&1);
  HEAP8[($33)]=$34;
  var $35=$3;
  var $36=(($35+45)|0);
  var $37=HEAP8[($36)];
  var $38=(($37) & 1);
  var $39=(($4+45)|0);
  var $40=(($38)&1);
  HEAP8[($39)]=$40;
  ;
  return $4;
}


function __ZN11b2EdgeShapeC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((__ZTV11b2EdgeShape+8)|0);
      var $7=(($4+12)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $9=(($4+20)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $11=(($4+28)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $13=(($4+36)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$4;
      var $16=(($15+4)|0);
      HEAP32[(($16)>>2)]=1;
      var $17=$4;
      var $18=(($17+8)|0);
      HEAPF32[(($18)>>2)]=0.009999999776482582;
      var $19=(($4+28)|0);
      var $20=(($19)|0);
      HEAPF32[(($20)>>2)]=0;
      var $21=(($4+28)|0);
      var $22=(($21+4)|0);
      HEAPF32[(($22)>>2)]=0;
      var $23=(($4+36)|0);
      var $24=(($23)|0);
      HEAPF32[(($24)>>2)]=0;
      var $25=(($4+36)|0);
      var $26=(($25+4)|0);
      HEAPF32[(($26)>>2)]=0;
      var $27=(($4+44)|0);
      HEAP8[($27)]=0;
      var $28=(($4+45)|0);
      HEAP8[($28)]=0;
      ;
      return;
    case 6: 
      var $30=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $31=$30.f0;
      $2=$31;
      var $32=$30.f1;
      $3=$32;
      var $33=$4;
      (function() { try { __THREW__ = false; return __ZN7b2ShapeD2Ev($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $36=$2;
      var $37=$2;
      var $38=$3;
      var $39=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $37, tempValue);
      var $40=($39.f1 = $38, $39);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 9: 
      var $42=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2ChainShapeC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((__ZTV12b2ChainShape+8)|0);
      var $7=(($4+20)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=(($4+28)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$4;
      var $12=(($11+4)|0);
      HEAP32[(($12)>>2)]=3;
      var $13=$4;
      var $14=(($13+8)|0);
      HEAPF32[(($14)>>2)]=0.009999999776482582;
      var $15=(($4+12)|0);
      HEAP32[(($15)>>2)]=0;
      var $16=(($4+16)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=(($4+36)|0);
      HEAP8[($17)]=0;
      var $18=(($4+37)|0);
      HEAP8[($18)]=0;
      ;
      return;
    case 4: 
      var $20=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $21=$20.f0;
      $2=$21;
      var $22=$20.f1;
      $3=$22;
      var $23=$4;
      (function() { try { __THREW__ = false; return __ZN7b2ShapeD2Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $26=$2;
      var $27=$2;
      var $28=$3;
      var $29=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $27, tempValue);
      var $30=($29.f1 = $28, $29);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 7: 
      var $32=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2CircleShapeC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((__ZTV13b2CircleShape+8)|0);
      var $7=(($4+12)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$4;
      var $10=(($9+4)|0);
      HEAP32[(($10)>>2)]=0;
      var $11=$4;
      var $12=(($11+8)|0);
      HEAPF32[(($12)>>2)]=0;
      var $13=(($4+12)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      ;
      return;
    case 4: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      var $19=$4;
      (function() { try { __THREW__ = false; return __ZN7b2ShapeD2Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $22=$2;
      var $23=$2;
      var $24=$3;
      var $25=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $23, tempValue);
      var $26=($25.f1 = $24, $25);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 7: 
      var $28=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK14b2PolygonShape13GetChildCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return 1;
}


function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $p1=__stackBase__;
      var $7=__stackBase__+8;
      var $p2=__stackBase__+16;
      var $8=__stackBase__+24;
      var $d=__stackBase__+32;
      var $v1=__stackBase__+40;
      var $v2=__stackBase__+48;
      var $e=__stackBase__+56;
      var $normal=__stackBase__+64;
      var $numerator;
      var $9=__stackBase__+72;
      var $denominator;
      var $t;
      var $q=__stackBase__+80;
      var $10=__stackBase__+88;
      var $r=__stackBase__+96;
      var $rr;
      var $s;
      var $11=__stackBase__+104;
      var $12=__stackBase__+112;
      $2=$this;
      $3=$output;
      $4=$input;
      $5=$xf;
      $6=$childIndex;
      var $13=$2;
      var $14=$5;
      var $15=(($14+8)|0);
      var $16=$4;
      var $17=(($16)|0);
      var $18=$5;
      var $19=(($18)|0);
      __ZmiRK6b2Vec2S1_($7, $17, $19);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p1, $15, $7);
      var $20=$5;
      var $21=(($20+8)|0);
      var $22=$4;
      var $23=(($22+8)|0);
      var $24=$5;
      var $25=(($24)|0);
      __ZmiRK6b2Vec2S1_($8, $23, $25);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p2, $21, $8);
      __ZmiRK6b2Vec2S1_($d, $p2, $p1);
      var $26=(($13+12)|0);
      var $27=$v1;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      var $29=(($13+20)|0);
      var $30=$v2;
      var $31=$29;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[(($30+4)>>2)]=HEAP32[(($31+4)>>2)];
      __ZmiRK6b2Vec2S1_($e, $v2, $v1);
      var $32=(($e+4)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=(($e)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=(-$35);
      __ZN6b2Vec2C1Eff($normal, $33, $36);
      var $37=__ZN6b2Vec29NormalizeEv($normal);
      __ZmiRK6b2Vec2S1_($9, $v1, $p1);
      var $38=__Z5b2DotRK6b2Vec2S1_($normal, $9);
      $numerator=$38;
      var $39=__Z5b2DotRK6b2Vec2S1_($normal, $d);
      $denominator=$39;
      var $40=$denominator;
      var $41=$40 == 0;
      if ($41) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 15; break;
    case 3: 
      var $44=$numerator;
      var $45=$denominator;
      var $46=$44/$45;
      $t=$46;
      var $47=$t;
      var $48=$47 < 0;
      if ($48) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $50=$4;
      var $51=(($50+16)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=$t;
      var $54=$52 < $53;
      if ($54) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 15; break;
    case 6: 
      var $57=$t;
      __ZmlfRK6b2Vec2($10, $57, $d);
      __ZplRK6b2Vec2S1_($q, $p1, $10);
      __ZmiRK6b2Vec2S1_($r, $v2, $v1);
      var $58=__Z5b2DotRK6b2Vec2S1_($r, $r);
      $rr=$58;
      var $59=$rr;
      var $60=$59 == 0;
      if ($60) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 15; break;
    case 8: 
      __ZmiRK6b2Vec2S1_($11, $q, $v1);
      var $63=__Z5b2DotRK6b2Vec2S1_($11, $r);
      var $64=$rr;
      var $65=$63/$64;
      $s=$65;
      var $66=$s;
      var $67=$66 < 0;
      if ($67) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $69=$s;
      var $70=1 < $69;
      if ($70) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $1=0;
      __label__ = 15; break;
    case 11: 
      var $73=$t;
      var $74=$3;
      var $75=(($74+8)|0);
      HEAPF32[(($75)>>2)]=$73;
      var $76=$numerator;
      var $77=$76 > 0;
      if ($77) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $79=$3;
      var $80=(($79)|0);
      __ZNK6b2Vec2ngEv($12, $normal);
      var $81=$80;
      var $82=$12;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[(($81+4)>>2)]=HEAP32[(($82+4)>>2)];
      __label__ = 14; break;
    case 13: 
      var $84=$3;
      var $85=(($84)|0);
      var $86=$85;
      var $87=$normal;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[(($86+4)>>2)]=HEAP32[(($87+4)>>2)];
      __label__ = 14; break;
    case 14: 
      $1=1;
      __label__ = 15; break;
    case 15: 
      var $90=$1;
      STACKTOP = __stackBase__;
      return $90;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $v1=__stackBase__;
  var $v2=__stackBase__+8;
  var $lower=__stackBase__+16;
  var $upper=__stackBase__+24;
  var $r=__stackBase__+32;
  var $5=__stackBase__+40;
  var $6=__stackBase__+48;
  $1=$this;
  $2=$aabb;
  $3=$xf;
  $4=$childIndex;
  var $7=$1;
  var $8=$3;
  var $9=(($7+12)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $8, $9);
  var $10=$3;
  var $11=(($7+20)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $10, $11);
  __Z5b2MinRK6b2Vec2S1_($lower, $v1, $v2);
  __Z5b2MaxRK6b2Vec2S1_($upper, $v1, $v2);
  var $12=$7;
  var $13=(($12+8)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAPF32[(($16)>>2)];
  __ZN6b2Vec2C1Eff($r, $14, $17);
  var $18=$2;
  var $19=(($18)|0);
  __ZmiRK6b2Vec2S1_($5, $lower, $r);
  var $20=$19;
  var $21=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[(($20+4)>>2)]=HEAP32[(($21+4)>>2)];
  var $22=$2;
  var $23=(($22+8)|0);
  __ZplRK6b2Vec2S1_($6, $upper, $r);
  var $24=$23;
  var $25=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[(($24+4)>>2)]=HEAP32[(($25+4)>>2)];
  STACKTOP = __stackBase__;
  return;
}


function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  var $5=__stackBase__+8;
  $1=$this;
  $2=$massData;
  $3=$density;
  var $6=$1;
  var $7=$2;
  var $8=(($7)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=$2;
  var $10=(($9+4)|0);
  var $11=(($6+12)|0);
  var $12=(($6+20)|0);
  __ZplRK6b2Vec2S1_($5, $11, $12);
  __ZmlfRK6b2Vec2($4, 0.5, $5);
  var $13=$10;
  var $14=$4;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[(($13+4)>>2)]=HEAP32[(($14+4)>>2)];
  var $15=$2;
  var $16=(($15+12)|0);
  HEAPF32[(($16)>>2)]=0;
  STACKTOP = __stackBase__;
  return;
}


function __ZN11b2EdgeShapeD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN11b2EdgeShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 152);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|0)==0;
      if ($7) { var $11 = 0;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$6;
      __ZN14b2PolygonShapeC1Ev($9);
      var $11 = $9;__label__ = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=__ZN14b2PolygonShapeaSERKS_($12, $3);
      var $14=$clone;
      var $15=$14;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2PolygonShapeC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2PolygonShapeC2Ev($2);
  ;
  return;
}


function __ZN14b2PolygonShapeaSERKS_($this, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$4;
  var $6=$3;
  var $7=$6;
  var $8=__ZN7b2ShapeaSERKS_($5, $7);
  var $9=(($4+12)|0);
  var $10=$3;
  var $11=(($10+12)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[(($12+4)>>2)]=HEAP32[(($13+4)>>2)];
  var $14=(($4+20)|0);
  var $15=$14;
  var $16=$3;
  var $17=(($16+20)|0);
  var $18=$17;
  assert(64 % 1 === 0, 'memcpy given ' + 64 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($15, $18, 64, 1);
  var $19=(($4+84)|0);
  var $20=$19;
  var $21=$3;
  var $22=(($21+84)|0);
  var $23=$22;
  assert(64 % 1 === 0, 'memcpy given ' + 64 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($20, $23, 64, 1);
  var $24=$3;
  var $25=(($24+148)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=(($4+148)|0);
  HEAP32[(($27)>>2)]=$26;
  ;
  return $4;
}


function __ZN14b2PolygonShape8SetAsBoxEff($this, $hx, $hy) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$hx;
  $3=$hy;
  var $4=$1;
  var $5=(($4+148)|0);
  HEAP32[(($5)>>2)]=4;
  var $6=(($4+20)|0);
  var $7=(($6)|0);
  var $8=$2;
  var $9=(-$8);
  var $10=$3;
  var $11=(-$10);
  __ZN6b2Vec23SetEff($7, $9, $11);
  var $12=(($4+20)|0);
  var $13=(($12+8)|0);
  var $14=$2;
  var $15=$3;
  var $16=(-$15);
  __ZN6b2Vec23SetEff($13, $14, $16);
  var $17=(($4+20)|0);
  var $18=(($17+16)|0);
  var $19=$2;
  var $20=$3;
  __ZN6b2Vec23SetEff($18, $19, $20);
  var $21=(($4+20)|0);
  var $22=(($21+24)|0);
  var $23=$2;
  var $24=(-$23);
  var $25=$3;
  __ZN6b2Vec23SetEff($22, $24, $25);
  var $26=(($4+84)|0);
  var $27=(($26)|0);
  __ZN6b2Vec23SetEff($27, 0, -1);
  var $28=(($4+84)|0);
  var $29=(($28+8)|0);
  __ZN6b2Vec23SetEff($29, 1, 0);
  var $30=(($4+84)|0);
  var $31=(($30+16)|0);
  __ZN6b2Vec23SetEff($31, 0, 1);
  var $32=(($4+84)|0);
  var $33=(($32+24)|0);
  __ZN6b2Vec23SetEff($33, -1, 0);
  var $34=(($4+12)|0);
  __ZN6b2Vec27SetZeroEv($34);
  ;
  return;
}


function __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($this, $hx, $hy, $center, $angle) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xf=__stackBase__;
      var $i;
      var $6=__stackBase__+16;
      var $7=__stackBase__+24;
      $1=$this;
      $2=$hx;
      $3=$hy;
      $4=$center;
      $5=$angle;
      var $8=$1;
      var $9=(($8+148)|0);
      HEAP32[(($9)>>2)]=4;
      var $10=(($8+20)|0);
      var $11=(($10)|0);
      var $12=$2;
      var $13=(-$12);
      var $14=$3;
      var $15=(-$14);
      __ZN6b2Vec23SetEff($11, $13, $15);
      var $16=(($8+20)|0);
      var $17=(($16+8)|0);
      var $18=$2;
      var $19=$3;
      var $20=(-$19);
      __ZN6b2Vec23SetEff($17, $18, $20);
      var $21=(($8+20)|0);
      var $22=(($21+16)|0);
      var $23=$2;
      var $24=$3;
      __ZN6b2Vec23SetEff($22, $23, $24);
      var $25=(($8+20)|0);
      var $26=(($25+24)|0);
      var $27=$2;
      var $28=(-$27);
      var $29=$3;
      __ZN6b2Vec23SetEff($26, $28, $29);
      var $30=(($8+84)|0);
      var $31=(($30)|0);
      __ZN6b2Vec23SetEff($31, 0, -1);
      var $32=(($8+84)|0);
      var $33=(($32+8)|0);
      __ZN6b2Vec23SetEff($33, 1, 0);
      var $34=(($8+84)|0);
      var $35=(($34+16)|0);
      __ZN6b2Vec23SetEff($35, 0, 1);
      var $36=(($8+84)|0);
      var $37=(($36+24)|0);
      __ZN6b2Vec23SetEff($37, -1, 0);
      var $38=(($8+12)|0);
      var $39=$4;
      var $40=$38;
      var $41=$39;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      __ZN11b2TransformC1Ev($xf);
      var $42=(($xf)|0);
      var $43=$4;
      var $44=$42;
      var $45=$43;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[(($44+4)>>2)]=HEAP32[(($45+4)>>2)];
      var $46=(($xf+8)|0);
      var $47=$5;
      __ZN5b2Rot3SetEf($46, $47);
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $49=$i;
      var $50=(($8+148)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($49)|0) < (($51)|0);
      if ($52) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $54=$i;
      var $55=(($8+20)|0);
      var $56=(($55+($54<<3))|0);
      var $57=$i;
      var $58=(($8+20)|0);
      var $59=(($58+($57<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $xf, $59);
      var $60=$56;
      var $61=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[(($60+4)>>2)]=HEAP32[(($61+4)>>2)];
      var $62=$i;
      var $63=(($8+84)|0);
      var $64=(($63+($62<<3))|0);
      var $65=(($xf+8)|0);
      var $66=$i;
      var $67=(($8+84)|0);
      var $68=(($67+($66<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $65, $68);
      var $69=$64;
      var $70=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[(($69+4)>>2)]=HEAP32[(($70+4)>>2)];
      __label__ = 4; break;
    case 4: 
      var $72=$i;
      var $73=(($72+1)|0);
      $i=$73;
      __label__ = 2; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2PolygonShape3SetEPK6b2Vec2i($this, $vertices, $count) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $i1;
      var $i12;
      var $i2;
      var $edge=__stackBase__;
      var $4=__stackBase__+8;
      var $5=__stackBase__+16;
      $1=$this;
      $2=$vertices;
      $3=$count;
      var $6=$1;
      var $7=$3;
      var $8=3 <= (($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $10=$3;
      var $11=(($10)|0) <= 8;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str52)|0), 122, ((STRING_TABLE.___PRETTY_FUNCTION____ZN14b2PolygonShape3SetEPK6b2Vec2i)|0), ((STRING_TABLE.__str153)|0));
      __label__ = 5; break;
    case 5: 
      var $15=$3;
      var $16=(($6+148)|0);
      HEAP32[(($16)>>2)]=$15;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $18=$i;
      var $19=(($6+148)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($18)|0) < (($20)|0);
      if ($21) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $23=$i;
      var $24=(($6+20)|0);
      var $25=(($24+($23<<3))|0);
      var $26=$i;
      var $27=$2;
      var $28=(($27+($26<<3))|0);
      var $29=$25;
      var $30=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[(($29+4)>>2)]=HEAP32[(($30+4)>>2)];
      __label__ = 8; break;
    case 8: 
      var $32=$i;
      var $33=(($32+1)|0);
      $i=$33;
      __label__ = 6; break;
    case 9: 
      $i1=0;
      __label__ = 10; break;
    case 10: 
      var $36=$i1;
      var $37=(($6+148)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($36)|0) < (($38)|0);
      if ($39) { __label__ = 11; break; } else { __label__ = 19; break; }
    case 11: 
      var $41=$i1;
      $i12=$41;
      var $42=$i1;
      var $43=(($42+1)|0);
      var $44=(($6+148)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($43)|0) < (($45)|0);
      if ($46) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $48=$i1;
      var $49=(($48+1)|0);
      var $52 = $49;__label__ = 14; break;
    case 13: 
      var $52 = 0;__label__ = 14; break;
    case 14: 
      var $52;
      $i2=$52;
      var $53=$i2;
      var $54=(($6+20)|0);
      var $55=(($54+($53<<3))|0);
      var $56=$i12;
      var $57=(($6+20)|0);
      var $58=(($57+($56<<3))|0);
      __ZmiRK6b2Vec2S1_($edge, $55, $58);
      var $59=__ZNK6b2Vec213LengthSquaredEv($edge);
      var $60=$59 > 1.4210854715202004e-14;
      if ($60) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 17; break;
    case 16: 
      ___assert_func(((STRING_TABLE.__str52)|0), 137, ((STRING_TABLE.___PRETTY_FUNCTION____ZN14b2PolygonShape3SetEPK6b2Vec2i)|0), ((STRING_TABLE.__str254)|0));
      __label__ = 17; break;
    case 17: 
      var $64=$i1;
      var $65=(($6+84)|0);
      var $66=(($65+($64<<3))|0);
      __Z7b2CrossRK6b2Vec2f($4, $edge, 1);
      var $67=$66;
      var $68=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($67)>>2)]=HEAP32[(($68)>>2)];HEAP32[(($67+4)>>2)]=HEAP32[(($68+4)>>2)];
      var $69=$i1;
      var $70=(($6+84)|0);
      var $71=(($70+($69<<3))|0);
      var $72=__ZN6b2Vec29NormalizeEv($71);
      __label__ = 18; break;
    case 18: 
      var $74=$i1;
      var $75=(($74+1)|0);
      $i1=$75;
      __label__ = 10; break;
    case 19: 
      var $77=(($6+12)|0);
      var $78=(($6+20)|0);
      var $79=(($78)|0);
      var $80=(($6+148)|0);
      var $81=HEAP32[(($80)>>2)];
      __ZL15ComputeCentroidPK6b2Vec2i($5, $79, $81);
      var $82=$77;
      var $83=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[(($82+4)>>2)]=HEAP32[(($83+4)>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZL15ComputeCentroidPK6b2Vec2i($agg_result, $vs, $count) {
  var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $area;
      var $pRef=__stackBase__;
      var $inv3;
      var $i;
      var $p1=__stackBase__+8;
      var $p2=__stackBase__+16;
      var $p3=__stackBase__+24;
      var $e1=__stackBase__+32;
      var $e2=__stackBase__+40;
      var $D;
      var $triangleArea;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      $1=$vs;
      $2=$count;
      var $6=$2;
      var $7=(($6)|0) >= 3;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str52)|0), 76, ((STRING_TABLE.___PRETTY_FUNCTION____ZL15ComputeCentroidPK6b2Vec2i)|0), ((STRING_TABLE.__str658)|0));
      __label__ = 4; break;
    case 4: 
      __ZN6b2Vec2C1Ev($agg_result);
      __ZN6b2Vec23SetEff($agg_result, 0, 0);
      $area=0;
      __ZN6b2Vec2C1Eff($pRef, 0, 0);
      $inv3=0.3333333432674408;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $12=$i;
      var $13=$2;
      var $14=(($12)|0) < (($13)|0);
      if ($14) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $16=$p1;
      var $17=$pRef;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[(($16+4)>>2)]=HEAP32[(($17+4)>>2)];
      var $18=$i;
      var $19=$1;
      var $20=(($19+($18<<3))|0);
      var $21=$p2;
      var $22=$20;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[(($21+4)>>2)]=HEAP32[(($22+4)>>2)];
      var $23=$i;
      var $24=(($23+1)|0);
      var $25=$2;
      var $26=(($24)|0) < (($25)|0);
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $28=$i;
      var $29=(($28+1)|0);
      var $30=$1;
      var $31=(($30+($29<<3))|0);
      var $36 = $31;__label__ = 9; break;
    case 8: 
      var $33=$1;
      var $34=(($33)|0);
      var $36 = $34;__label__ = 9; break;
    case 9: 
      var $36;
      var $37=$p3;
      var $38=$36;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[(($37+4)>>2)]=HEAP32[(($38+4)>>2)];
      __ZmiRK6b2Vec2S1_($e1, $p2, $p1);
      __ZmiRK6b2Vec2S1_($e2, $p3, $p1);
      var $39=__Z7b2CrossRK6b2Vec2S1_($e1, $e2);
      $D=$39;
      var $40=$D;
      var $41=$40*0.5;
      $triangleArea=$41;
      var $42=$triangleArea;
      var $43=$area;
      var $44=$43+$42;
      $area=$44;
      var $45=$triangleArea;
      var $46=$45*0.3333333432674408;
      __ZplRK6b2Vec2S1_($5, $p1, $p2);
      __ZplRK6b2Vec2S1_($4, $5, $p3);
      __ZmlfRK6b2Vec2($3, $46, $4);
      __ZN6b2Vec2pLERKS_($agg_result, $3);
      __label__ = 10; break;
    case 10: 
      var $48=$i;
      var $49=(($48+1)|0);
      $i=$49;
      __label__ = 5; break;
    case 11: 
      var $51=$area;
      var $52=$51 > 1.1920928955078125e-7;
      if ($52) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 14; break;
    case 13: 
      ___assert_func(((STRING_TABLE.__str52)|0), 115, ((STRING_TABLE.___PRETTY_FUNCTION____ZL15ComputeCentroidPK6b2Vec2i)|0), ((STRING_TABLE.__str557)|0));
      __label__ = 14; break;
    case 14: 
      var $56=$area;
      var $57=1/$56;
      __ZN6b2Vec2mLEf($agg_result, $57);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pLocal=__stackBase__;
      var $5=__stackBase__+8;
      var $i;
      var $dot;
      var $6=__stackBase__+16;
      $2=$this;
      $3=$xf;
      $4=$p;
      var $7=$2;
      var $8=$3;
      var $9=(($8+8)|0);
      var $10=$4;
      var $11=$3;
      var $12=(($11)|0);
      __ZmiRK6b2Vec2S1_($5, $10, $12);
      __Z6b2MulTRK5b2RotRK6b2Vec2($pLocal, $9, $5);
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $14=$i;
      var $15=(($7+148)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($14)|0) < (($16)|0);
      if ($17) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $19=$i;
      var $20=(($7+84)|0);
      var $21=(($20+($19<<3))|0);
      var $22=$i;
      var $23=(($7+20)|0);
      var $24=(($23+($22<<3))|0);
      __ZmiRK6b2Vec2S1_($6, $pLocal, $24);
      var $25=__Z5b2DotRK6b2Vec2S1_($21, $6);
      $dot=$25;
      var $26=$dot;
      var $27=$26 > 0;
      if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=0;
      __label__ = 8; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $31=$i;
      var $32=(($31+1)|0);
      $i=$32;
      __label__ = 2; break;
    case 7: 
      $1=1;
      __label__ = 8; break;
    case 8: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Vec2mLEf($this, $a) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$6*$4;
  HEAPF32[(($5)>>2)]=$7;
  var $8=$2;
  var $9=(($3+4)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=$10*$8;
  HEAPF32[(($9)>>2)]=$11;
  ;
  return;
}


function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $p1=__stackBase__;
      var $7=__stackBase__+8;
      var $p2=__stackBase__+16;
      var $8=__stackBase__+24;
      var $d=__stackBase__+32;
      var $lower;
      var $upper;
      var $index;
      var $i;
      var $numerator;
      var $9=__stackBase__+40;
      var $denominator;
      var $10=__stackBase__+48;
      $2=$this;
      $3=$output;
      $4=$input;
      $5=$xf;
      $6=$childIndex;
      var $11=$2;
      var $12=$5;
      var $13=(($12+8)|0);
      var $14=$4;
      var $15=(($14)|0);
      var $16=$5;
      var $17=(($16)|0);
      __ZmiRK6b2Vec2S1_($7, $15, $17);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p1, $13, $7);
      var $18=$5;
      var $19=(($18+8)|0);
      var $20=$4;
      var $21=(($20+8)|0);
      var $22=$5;
      var $23=(($22)|0);
      __ZmiRK6b2Vec2S1_($8, $21, $23);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p2, $19, $8);
      __ZmiRK6b2Vec2S1_($d, $p2, $p1);
      $lower=0;
      var $24=$4;
      var $25=(($24+16)|0);
      var $26=HEAPF32[(($25)>>2)];
      $upper=$26;
      $index=-1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $28=$i;
      var $29=(($11+148)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($28)|0) < (($30)|0);
      if ($31) { __label__ = 3; break; } else { __label__ = 19; break; }
    case 3: 
      var $33=$i;
      var $34=(($11+84)|0);
      var $35=(($34+($33<<3))|0);
      var $36=$i;
      var $37=(($11+20)|0);
      var $38=(($37+($36<<3))|0);
      __ZmiRK6b2Vec2S1_($9, $38, $p1);
      var $39=__Z5b2DotRK6b2Vec2S1_($35, $9);
      $numerator=$39;
      var $40=$i;
      var $41=(($11+84)|0);
      var $42=(($41+($40<<3))|0);
      var $43=__Z5b2DotRK6b2Vec2S1_($42, $d);
      $denominator=$43;
      var $44=$denominator;
      var $45=$44 == 0;
      if ($45) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $47=$numerator;
      var $48=$47 < 0;
      if ($48) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 26; break;
    case 6: 
      __label__ = 15; break;
    case 7: 
      var $52=$denominator;
      var $53=$52 < 0;
      if ($53) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $55=$numerator;
      var $56=$lower;
      var $57=$denominator;
      var $58=$56*$57;
      var $59=$55 < $58;
      if ($59) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $61=$numerator;
      var $62=$denominator;
      var $63=$61/$62;
      $lower=$63;
      var $64=$i;
      $index=$64;
      __label__ = 14; break;
    case 10: 
      var $66=$denominator;
      var $67=$66 > 0;
      if ($67) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $69=$numerator;
      var $70=$upper;
      var $71=$denominator;
      var $72=$70*$71;
      var $73=$69 < $72;
      if ($73) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $75=$numerator;
      var $76=$denominator;
      var $77=$75/$76;
      $upper=$77;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $81=$upper;
      var $82=$lower;
      var $83=$81 < $82;
      if ($83) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $1=0;
      __label__ = 26; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $87=$i;
      var $88=(($87+1)|0);
      $i=$88;
      __label__ = 2; break;
    case 19: 
      var $90=$lower;
      var $91=0 <= $90;
      if ($91) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $93=$lower;
      var $94=$4;
      var $95=(($94+16)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=$93 <= $96;
      if ($97) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      __label__ = 23; break;
    case 22: 
      ___assert_func(((STRING_TABLE.__str52)|0), 249, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi)|0), ((STRING_TABLE.__str355)|0));
      __label__ = 23; break;
    case 23: 
      var $101=$index;
      var $102=(($101)|0) >= 0;
      if ($102) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $104=$lower;
      var $105=$3;
      var $106=(($105+8)|0);
      HEAPF32[(($106)>>2)]=$104;
      var $107=$3;
      var $108=(($107)|0);
      var $109=$5;
      var $110=(($109+8)|0);
      var $111=$index;
      var $112=(($11+84)|0);
      var $113=(($112+($111<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($10, $110, $113);
      var $114=$108;
      var $115=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[(($114+4)>>2)]=HEAP32[(($115+4)>>2)];
      $1=1;
      __label__ = 26; break;
    case 25: 
      $1=0;
      __label__ = 26; break;
    case 26: 
      var $118=$1;
      STACKTOP = __stackBase__;
      return $118;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lower=__stackBase__;
      var $upper=__stackBase__+8;
      var $i;
      var $v=__stackBase__+16;
      var $5=__stackBase__+24;
      var $6=__stackBase__+32;
      var $r=__stackBase__+40;
      var $7=__stackBase__+48;
      var $8=__stackBase__+56;
      $1=$this;
      $2=$aabb;
      $3=$xf;
      $4=$childIndex;
      var $9=$1;
      var $10=$3;
      var $11=(($9+20)|0);
      var $12=(($11)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($lower, $10, $12);
      var $13=$upper;
      var $14=$lower;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[(($13+4)>>2)]=HEAP32[(($14+4)>>2)];
      $i=1;
      __label__ = 2; break;
    case 2: 
      var $16=$i;
      var $17=(($9+148)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|0) < (($18)|0);
      if ($19) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $21=$3;
      var $22=$i;
      var $23=(($9+20)|0);
      var $24=(($23+($22<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v, $21, $24);
      __Z5b2MinRK6b2Vec2S1_($5, $lower, $v);
      var $25=$lower;
      var $26=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[(($25+4)>>2)]=HEAP32[(($26+4)>>2)];
      __Z5b2MaxRK6b2Vec2S1_($6, $upper, $v);
      var $27=$upper;
      var $28=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      __label__ = 4; break;
    case 4: 
      var $30=$i;
      var $31=(($30+1)|0);
      $i=$31;
      __label__ = 2; break;
    case 5: 
      var $33=$9;
      var $34=(($33+8)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=$9;
      var $37=(($36+8)|0);
      var $38=HEAPF32[(($37)>>2)];
      __ZN6b2Vec2C1Eff($r, $35, $38);
      var $39=$2;
      var $40=(($39)|0);
      __ZmiRK6b2Vec2S1_($7, $lower, $r);
      var $41=$40;
      var $42=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[(($41+4)>>2)]=HEAP32[(($42+4)>>2)];
      var $43=$2;
      var $44=(($43+8)|0);
      __ZplRK6b2Vec2S1_($8, $upper, $r);
      var $45=$44;
      var $46=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[(($45+4)>>2)]=HEAP32[(($46+4)>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $center=__stackBase__;
      var $area;
      var $I;
      var $s=__stackBase__+8;
      var $i;
      var $k_inv3;
      var $i1;
      var $e1=__stackBase__+16;
      var $e2=__stackBase__+24;
      var $D;
      var $triangleArea;
      var $4=__stackBase__+32;
      var $5=__stackBase__+40;
      var $ex1;
      var $ey1;
      var $ex2;
      var $ey2;
      var $intx2;
      var $inty2;
      var $6=__stackBase__+48;
      $1=$this;
      $2=$massData;
      $3=$density;
      var $7=$1;
      var $8=(($7+148)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0) >= 3;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str52)|0), 306, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf)|0), ((STRING_TABLE.__str456)|0));
      __label__ = 4; break;
    case 4: 
      __ZN6b2Vec2C1Ev($center);
      __ZN6b2Vec23SetEff($center, 0, 0);
      $area=0;
      $I=0;
      __ZN6b2Vec2C1Eff($s, 0, 0);
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $15=$i;
      var $16=(($7+148)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($15)|0) < (($17)|0);
      if ($18) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $20=$i;
      var $21=(($7+20)|0);
      var $22=(($21+($20<<3))|0);
      __ZN6b2Vec2pLERKS_($s, $22);
      __label__ = 7; break;
    case 7: 
      var $24=$i;
      var $25=(($24+1)|0);
      $i=$25;
      __label__ = 5; break;
    case 8: 
      var $27=(($7+148)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0);
      var $30=1/$29;
      __ZN6b2Vec2mLEf($s, $30);
      $k_inv3=0.3333333432674408;
      $i1=0;
      __label__ = 9; break;
    case 9: 
      var $32=$i1;
      var $33=(($7+148)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($32)|0) < (($34)|0);
      if ($35) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 10: 
      var $37=$i1;
      var $38=(($7+20)|0);
      var $39=(($38+($37<<3))|0);
      __ZmiRK6b2Vec2S1_($e1, $39, $s);
      var $40=$i1;
      var $41=(($40+1)|0);
      var $42=(($7+148)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($41)|0) < (($43)|0);
      if ($44) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $46=$i1;
      var $47=(($46+1)|0);
      var $48=(($7+20)|0);
      var $49=(($48+($47<<3))|0);
      __ZmiRK6b2Vec2S1_($e2, $49, $s);
      __label__ = 13; break;
    case 12: 
      var $51=(($7+20)|0);
      var $52=(($51)|0);
      __ZmiRK6b2Vec2S1_($e2, $52, $s);
      __label__ = 13; break;
    case 13: 
      var $54=__Z7b2CrossRK6b2Vec2S1_($e1, $e2);
      $D=$54;
      var $55=$D;
      var $56=$55*0.5;
      $triangleArea=$56;
      var $57=$triangleArea;
      var $58=$area;
      var $59=$58+$57;
      $area=$59;
      var $60=$triangleArea;
      var $61=$60*0.3333333432674408;
      __ZplRK6b2Vec2S1_($5, $e1, $e2);
      __ZmlfRK6b2Vec2($4, $61, $5);
      __ZN6b2Vec2pLERKS_($center, $4);
      var $62=(($e1)|0);
      var $63=HEAPF32[(($62)>>2)];
      $ex1=$63;
      var $64=(($e1+4)|0);
      var $65=HEAPF32[(($64)>>2)];
      $ey1=$65;
      var $66=(($e2)|0);
      var $67=HEAPF32[(($66)>>2)];
      $ex2=$67;
      var $68=(($e2+4)|0);
      var $69=HEAPF32[(($68)>>2)];
      $ey2=$69;
      var $70=$ex1;
      var $71=$ex1;
      var $72=$70*$71;
      var $73=$ex2;
      var $74=$ex1;
      var $75=$73*$74;
      var $76=$72+$75;
      var $77=$ex2;
      var $78=$ex2;
      var $79=$77*$78;
      var $80=$76+$79;
      $intx2=$80;
      var $81=$ey1;
      var $82=$ey1;
      var $83=$81*$82;
      var $84=$ey2;
      var $85=$ey1;
      var $86=$84*$85;
      var $87=$83+$86;
      var $88=$ey2;
      var $89=$ey2;
      var $90=$88*$89;
      var $91=$87+$90;
      $inty2=$91;
      var $92=$D;
      var $93=$92*0.0833333358168602;
      var $94=$intx2;
      var $95=$inty2;
      var $96=$94+$95;
      var $97=$93*$96;
      var $98=$I;
      var $99=$98+$97;
      $I=$99;
      __label__ = 14; break;
    case 14: 
      var $101=$i1;
      var $102=(($101+1)|0);
      $i1=$102;
      __label__ = 9; break;
    case 15: 
      var $104=$3;
      var $105=$area;
      var $106=$104*$105;
      var $107=$2;
      var $108=(($107)|0);
      HEAPF32[(($108)>>2)]=$106;
      var $109=$area;
      var $110=$109 > 1.1920928955078125e-7;
      if ($110) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 18; break;
    case 17: 
      ___assert_func(((STRING_TABLE.__str52)|0), 352, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf)|0), ((STRING_TABLE.__str557)|0));
      __label__ = 18; break;
    case 18: 
      var $114=$area;
      var $115=1/$114;
      __ZN6b2Vec2mLEf($center, $115);
      var $116=$2;
      var $117=(($116+4)|0);
      __ZplRK6b2Vec2S1_($6, $center, $s);
      var $118=$117;
      var $119=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[(($118+4)>>2)]=HEAP32[(($119+4)>>2)];
      var $120=$3;
      var $121=$I;
      var $122=$120*$121;
      var $123=$2;
      var $124=(($123+12)|0);
      HEAPF32[(($124)>>2)]=$122;
      var $125=$2;
      var $126=(($125)|0);
      var $127=HEAPF32[(($126)>>2)];
      var $128=$2;
      var $129=(($128+4)|0);
      var $130=$2;
      var $131=(($130+4)|0);
      var $132=__Z5b2DotRK6b2Vec2S1_($129, $131);
      var $133=__Z5b2DotRK6b2Vec2S1_($center, $center);
      var $134=$132-$133;
      var $135=$127*$134;
      var $136=$2;
      var $137=(($136+12)|0);
      var $138=HEAPF32[(($137)>>2)];
      var $139=$138+$135;
      HEAPF32[(($137)>>2)]=$139;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2PolygonShapeD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2PolygonShapeD2Ev($2);
  ;
  return;
}


function __ZN14b2PolygonShapeD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN14b2PolygonShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2PolygonShapeD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2ShapeD2Ev($3);
  ;
  return;
}


function __ZN16b2BlockAllocatorC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $j;
      var $i;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      HEAP32[(($3)>>2)]=128;
      var $4=(($2+4)|0);
      HEAP32[(($4)>>2)]=0;
      var $5=(($2+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((($6<<3))|0);
      var $8=__Z7b2Alloci($7);
      var $9=$8;
      var $10=(($2)|0);
      HEAP32[(($10)>>2)]=$9;
      var $11=(($2)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($2+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15<<3))|0);
      _memset($13, 0, $16, 1);
      var $17=(($2+12)|0);
      var $18=(($17)|0);
      var $19=$18;
      _memset($19, 0, 56, 1);
      var $20=HEAP8[(__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE)];
      var $21=(($20) & 1);
      var $22=(($21)&1);
      var $23=(($22)|0)==0;
      if ($23) { __label__ = 2; break; } else { __label__ = 13; break; }
    case 2: 
      $j=0;
      $i=1;
      __label__ = 3; break;
    case 3: 
      var $26=$i;
      var $27=(($26)|0) <= 640;
      if ($27) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $29=$j;
      var $30=(($29)|0) < 14;
      if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str59)|0), 73, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocatorC2Ev)|0), ((STRING_TABLE.__str160)|0));
      __label__ = 7; break;
    case 7: 
      var $34=$i;
      var $35=$j;
      var $36=((__ZN16b2BlockAllocator12s_blockSizesE+($35<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34)|0) <= (($37)|0);
      if ($38) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $40=$j;
      var $41=(($40) & 255);
      var $42=$i;
      var $43=((__ZN16b2BlockAllocator17s_blockSizeLookupE+$42)|0);
      HEAP8[($43)]=$41;
      __label__ = 10; break;
    case 9: 
      var $45=$j;
      var $46=(($45+1)|0);
      $j=$46;
      var $47=$j;
      var $48=(($47) & 255);
      var $49=$i;
      var $50=((__ZN16b2BlockAllocator17s_blockSizeLookupE+$49)|0);
      HEAP8[($50)]=$48;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $53=$i;
      var $54=(($53+1)|0);
      $i=$54;
      __label__ = 3; break;
    case 12: 
      HEAP8[(__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE)]=1;
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2BlockAllocatorD2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      $1=$this;
      var $2=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|0) < (($6)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$i;
      var $10=(($2)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+($9<<3))|0);
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      __Z6b2FreePv($15);
      __label__ = 4; break;
    case 4: 
      var $17=$i;
      var $18=(($17+1)|0);
      $i=$18;
      __label__ = 2; break;
    case 5: 
      var $20=(($2)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      __Z6b2FreePv($22);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2PolygonShapeC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((__ZTV14b2PolygonShape+8)|0);
      var $7=(($4+12)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 10; break; }
    case 2: 
      var $9=(($4+20)|0);
      var $10=(($9)|0);
      var $11=(($10+64)|0);
      var $13 = $10;__label__ = 3; break;
    case 3: 
      var $13;
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $15=(($13+8)|0);
      var $16=(($15)|0)==(($11)|0);
      if ($16) { __label__ = 5; break; } else { var $13 = $15;__label__ = 3; break; }
    case 5: 
      var $18=(($4+84)|0);
      var $19=(($18)|0);
      var $20=(($19+64)|0);
      var $22 = $19;__label__ = 6; break;
    case 6: 
      var $22;
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $24=(($22+8)|0);
      var $25=(($24)|0)==(($20)|0);
      if ($25) { __label__ = 8; break; } else { var $22 = $24;__label__ = 6; break; }
    case 8: 
      var $27=$4;
      var $28=(($27+4)|0);
      HEAP32[(($28)>>2)]=2;
      var $29=$4;
      var $30=(($29+8)|0);
      HEAPF32[(($30)>>2)]=0.009999999776482582;
      var $31=(($4+148)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=(($4+12)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      ;
      return;
    case 10: 
      var $35=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $36=$35.f0;
      $2=$36;
      var $37=$35.f1;
      $3=$37;
      var $38=$4;
      (function() { try { __THREW__ = false; return __ZN7b2ShapeD2Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $41=$2;
      var $42=$2;
      var $43=$3;
      var $44=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $42, tempValue);
      var $45=($44.f1 = $43, $44);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 13: 
      var $47=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2DrawD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZN6b2Vec3C2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZN6b2DrawC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((__ZTV6b2Draw+8)|0);
  var $4=(($2+4)|0);
  HEAP32[(($4)>>2)]=0;
  ;
  return;
}


function __ZN6b2Draw8SetFlagsEj($this, $flags) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$flags;
  var $3=$1;
  var $4=$2;
  var $5=(($3+4)|0);
  HEAP32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK6b2Draw8GetFlagsEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN6b2Draw11AppendFlagsEj($this, $flags) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$flags;
  var $3=$1;
  var $4=$2;
  var $5=(($3+4)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6 | $4;
  HEAP32[(($5)>>2)]=$7;
  ;
  return;
}


function __ZN6b2Draw10ClearFlagsEj($this, $flags) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$flags;
  var $3=$1;
  var $4=$2;
  var $5=$4 ^ -1;
  var $6=(($3+4)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$7 & $5;
  HEAP32[(($6)>>2)]=$8;
  ;
  return;
}


function __Z5b2DotRK6b2Vec3S1_($a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5*$8;
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12*$15;
  var $17=$9+$16;
  var $18=$1;
  var $19=(($18+8)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=$2;
  var $22=(($21+8)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$20*$23;
  var $25=$17+$24;
  ;
  return $25;
}


function __ZNK7b2Mat3312GetInverse22EPS_($this, $M) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $a;
      var $b;
      var $c;
      var $d;
      var $det;
      $1=$this;
      $2=$M;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAPF32[(($5)>>2)];
      $a=$6;
      var $7=(($3+12)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      $b=$9;
      var $10=(($3)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      $c=$12;
      var $13=(($3+12)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      $d=$15;
      var $16=$a;
      var $17=$d;
      var $18=$16*$17;
      var $19=$b;
      var $20=$c;
      var $21=$19*$20;
      var $22=$18-$21;
      $det=$22;
      var $23=$det;
      var $24=$23 != 0;
      if ($24) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $26=$det;
      var $27=1/$26;
      $det=$27;
      __label__ = 3; break;
    case 3: 
      var $29=$det;
      var $30=$d;
      var $31=$29*$30;
      var $32=$2;
      var $33=(($32)|0);
      var $34=(($33)|0);
      HEAPF32[(($34)>>2)]=$31;
      var $35=$det;
      var $36=(-$35);
      var $37=$b;
      var $38=$36*$37;
      var $39=$2;
      var $40=(($39+12)|0);
      var $41=(($40)|0);
      HEAPF32[(($41)>>2)]=$38;
      var $42=$2;
      var $43=(($42)|0);
      var $44=(($43+8)|0);
      HEAPF32[(($44)>>2)]=0;
      var $45=$det;
      var $46=(-$45);
      var $47=$c;
      var $48=$46*$47;
      var $49=$2;
      var $50=(($49)|0);
      var $51=(($50+4)|0);
      HEAPF32[(($51)>>2)]=$48;
      var $52=$det;
      var $53=$a;
      var $54=$52*$53;
      var $55=$2;
      var $56=(($55+12)|0);
      var $57=(($56+4)|0);
      HEAPF32[(($57)>>2)]=$54;
      var $58=$2;
      var $59=(($58+12)|0);
      var $60=(($59+8)|0);
      HEAPF32[(($60)>>2)]=0;
      var $61=$2;
      var $62=(($61+24)|0);
      var $63=(($62)|0);
      HEAPF32[(($63)>>2)]=0;
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=(($65+4)|0);
      HEAPF32[(($66)>>2)]=0;
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=(($68+8)|0);
      HEAPF32[(($69)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2BlockAllocator8AllocateEi($this, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $index;
      var $block;
      var $oldChunks;
      var $chunk;
      var $blockSize;
      var $blockCount;
      var $i;
      var $block1;
      var $next;
      var $last;
      $2=$this;
      $3=$size;
      var $4=$2;
      var $5=$3;
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 24; break;
    case 3: 
      var $9=$3;
      var $10=0 < (($9)|0);
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      ___assert_func(((STRING_TABLE.__str59)|0), 104, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi)|0), ((STRING_TABLE.__str261)|0));
      __label__ = 6; break;
    case 6: 
      var $14=$3;
      var $15=(($14)|0) > 640;
      if ($15) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $17=$3;
      var $18=__Z7b2Alloci($17);
      $1=$18;
      __label__ = 24; break;
    case 8: 
      var $20=$3;
      var $21=((__ZN16b2BlockAllocator17s_blockSizeLookupE+$20)|0);
      var $22=HEAPU8[($21)];
      var $23=(($22)&255);
      $index=$23;
      var $24=$index;
      var $25=0 <= (($24)|0);
      if ($25) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $27=$index;
      var $28=(($27)|0) < 14;
      if ($28) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      ___assert_func(((STRING_TABLE.__str59)|0), 112, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi)|0), ((STRING_TABLE.__str362)|0));
      __label__ = 12; break;
    case 12: 
      var $32=$index;
      var $33=(($4+12)|0);
      var $34=(($33+($32<<2))|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $38=$index;
      var $39=(($4+12)|0);
      var $40=(($39+($38<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      $block=$41;
      var $42=$block;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$index;
      var $46=(($4+12)|0);
      var $47=(($46+($45<<2))|0);
      HEAP32[(($47)>>2)]=$44;
      var $48=$block;
      var $49=$48;
      $1=$49;
      __label__ = 24; break;
    case 14: 
      var $51=(($4+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($4+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($52)|0)==(($54)|0);
      if ($55) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $57=(($4)|0);
      var $58=HEAP32[(($57)>>2)];
      $oldChunks=$58;
      var $59=(($4+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+128)|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=(($4+8)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63<<3))|0);
      var $65=__Z7b2Alloci($64);
      var $66=$65;
      var $67=(($4)|0);
      HEAP32[(($67)>>2)]=$66;
      var $68=(($4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69;
      var $71=$oldChunks;
      var $72=$71;
      var $73=(($4+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74<<3))|0);
      assert($75 % 1 === 0, 'memcpy given ' + $75 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($70, $72, $75, 1);
      var $76=(($4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($4+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($77+($79<<3))|0);
      var $81=$80;
      _memset($81, 0, 1024, 1);
      var $82=$oldChunks;
      var $83=$82;
      __Z6b2FreePv($83);
      __label__ = 16; break;
    case 16: 
      var $85=(($4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($4+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($86+($88<<3))|0);
      $chunk=$89;
      var $90=__Z7b2Alloci(16384);
      var $91=$90;
      var $92=$chunk;
      var $93=(($92+4)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$index;
      var $95=((__ZN16b2BlockAllocator12s_blockSizesE+($94<<2))|0);
      var $96=HEAP32[(($95)>>2)];
      $blockSize=$96;
      var $97=$blockSize;
      var $98=$chunk;
      var $99=(($98)|0);
      HEAP32[(($99)>>2)]=$97;
      var $100=$blockSize;
      var $101=((16384/(($100)|0))|0);
      $blockCount=$101;
      var $102=$blockCount;
      var $103=$blockSize;
      var $104=(($102*$103)|0);
      var $105=(($104)|0) <= 16384;
      if ($105) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 19; break;
    case 18: 
      ___assert_func(((STRING_TABLE.__str59)|0), 140, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi)|0), ((STRING_TABLE.__str463)|0));
      __label__ = 19; break;
    case 19: 
      $i=0;
      __label__ = 20; break;
    case 20: 
      var $110=$i;
      var $111=$blockCount;
      var $112=(($111-1)|0);
      var $113=(($110)|0) < (($112)|0);
      if ($113) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $115=$chunk;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$117;
      var $119=$blockSize;
      var $120=$i;
      var $121=(($119*$120)|0);
      var $122=(($118+$121)|0);
      var $123=$122;
      $block1=$123;
      var $124=$chunk;
      var $125=(($124+4)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$126;
      var $128=$blockSize;
      var $129=$i;
      var $130=(($129+1)|0);
      var $131=(($128*$130)|0);
      var $132=(($127+$131)|0);
      var $133=$132;
      $next=$133;
      var $134=$next;
      var $135=$block1;
      var $136=(($135)|0);
      HEAP32[(($136)>>2)]=$134;
      __label__ = 22; break;
    case 22: 
      var $138=$i;
      var $139=(($138+1)|0);
      $i=$139;
      __label__ = 20; break;
    case 23: 
      var $141=$chunk;
      var $142=(($141+4)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$143;
      var $145=$blockSize;
      var $146=$blockCount;
      var $147=(($146-1)|0);
      var $148=(($145*$147)|0);
      var $149=(($144+$148)|0);
      var $150=$149;
      $last=$150;
      var $151=$last;
      var $152=(($151)|0);
      HEAP32[(($152)>>2)]=0;
      var $153=$chunk;
      var $154=(($153+4)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$index;
      var $159=(($4+12)|0);
      var $160=(($159+($158<<2))|0);
      HEAP32[(($160)>>2)]=$157;
      var $161=(($4+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+1)|0);
      HEAP32[(($161)>>2)]=$163;
      var $164=$chunk;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$166;
      $1=$167;
      __label__ = 24; break;
    case 24: 
      var $169=$1;
      ;
      return $169;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2BlockAllocator4FreeEPvi($this, $p, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $index;
      var $block;
      $1=$this;
      $2=$p;
      $3=$size;
      var $4=$1;
      var $5=$3;
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 13; break;
    case 3: 
      var $9=$3;
      var $10=0 < (($9)|0);
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      ___assert_func(((STRING_TABLE.__str59)|0), 164, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi)|0), ((STRING_TABLE.__str261)|0));
      __label__ = 6; break;
    case 6: 
      var $14=$3;
      var $15=(($14)|0) > 640;
      if ($15) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $17=$2;
      __Z6b2FreePv($17);
      __label__ = 13; break;
    case 8: 
      var $19=$3;
      var $20=((__ZN16b2BlockAllocator17s_blockSizeLookupE+$19)|0);
      var $21=HEAPU8[($20)];
      var $22=(($21)&255);
      $index=$22;
      var $23=$index;
      var $24=0 <= (($23)|0);
      if ($24) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $26=$index;
      var $27=(($26)|0) < 14;
      if ($27) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      ___assert_func(((STRING_TABLE.__str59)|0), 173, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi)|0), ((STRING_TABLE.__str362)|0));
      __label__ = 12; break;
    case 12: 
      var $31=$2;
      var $32=$31;
      $block=$32;
      var $33=$index;
      var $34=(($4+12)|0);
      var $35=(($34+($33<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$block;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$block;
      var $40=$index;
      var $41=(($4+12)|0);
      var $42=(($41+($40<<2))|0);
      HEAP32[(($42)>>2)]=$39;
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2BlockAllocator5ClearEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      $1=$this;
      var $2=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|0) < (($6)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$i;
      var $10=(($2)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+($9<<3))|0);
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      __Z6b2FreePv($15);
      __label__ = 4; break;
    case 4: 
      var $17=$i;
      var $18=(($17+1)|0);
      $i=$18;
      __label__ = 2; break;
    case 5: 
      var $20=(($2+4)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=(($2)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=(($2+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25<<3))|0);
      _memset($23, 0, $26, 1);
      var $27=(($2+12)|0);
      var $28=(($27)|0);
      var $29=$28;
      _memset($29, 0, 56, 1);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2DrawD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2DrawD2Ev($2);
  ;
  return;
}


function __ZN6b2DrawD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN6b2DrawD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function ___cxx_global_var_init() {
  ;
  var __label__;

  __ZN6b2Vec2C1Eff(_b2Vec2_zero, 0, 0);
  ;
  return;
}


function __ZNK7b2Mat337Solve33ERK6b2Vec3($agg_result, $this, $b) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $det;
      var $3=__stackBase__;
      var $4=__stackBase__+12;
      var $5=__stackBase__+24;
      var $6=__stackBase__+36;
      $1=$this;
      $2=$b;
      var $7=$1;
      var $8=(($7)|0);
      var $9=(($7+12)|0);
      var $10=(($7+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($3, $9, $10);
      var $11=__Z5b2DotRK6b2Vec3S1_($8, $3);
      $det=$11;
      var $12=$det;
      var $13=$12 != 0;
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $15=$det;
      var $16=1/$15;
      $det=$16;
      __label__ = 3; break;
    case 3: 
      __ZN6b2Vec3C1Ev($agg_result);
      var $18=$det;
      var $19=$2;
      var $20=(($7+12)|0);
      var $21=(($7+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($4, $20, $21);
      var $22=__Z5b2DotRK6b2Vec3S1_($19, $4);
      var $23=$18*$22;
      var $24=(($agg_result)|0);
      HEAPF32[(($24)>>2)]=$23;
      var $25=$det;
      var $26=(($7)|0);
      var $27=$2;
      var $28=(($7+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($5, $27, $28);
      var $29=__Z5b2DotRK6b2Vec3S1_($26, $5);
      var $30=$25*$29;
      var $31=(($agg_result+4)|0);
      HEAPF32[(($31)>>2)]=$30;
      var $32=$det;
      var $33=(($7)|0);
      var $34=(($7+12)|0);
      var $35=$2;
      __Z7b2CrossRK6b2Vec3S1_($6, $34, $35);
      var $36=__Z5b2DotRK6b2Vec3S1_($33, $6);
      var $37=$32*$36;
      var $38=(($agg_result+8)|0);
      HEAPF32[(($38)>>2)]=$37;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7b2CrossRK6b2Vec3S1_($agg_result, $a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6+8)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5*$8;
  var $10=$1;
  var $11=(($10+8)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12*$15;
  var $17=$9-$16;
  var $18=$1;
  var $19=(($18+8)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=$2;
  var $22=(($21)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$20*$23;
  var $25=$1;
  var $26=(($25)|0);
  var $27=HEAPF32[(($26)>>2)];
  var $28=$2;
  var $29=(($28+8)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$27*$30;
  var $32=$24-$31;
  var $33=$1;
  var $34=(($33)|0);
  var $35=HEAPF32[(($34)>>2)];
  var $36=$2;
  var $37=(($36+4)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$35*$38;
  var $40=$1;
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$2;
  var $44=(($43)|0);
  var $45=HEAPF32[(($44)>>2)];
  var $46=$42*$45;
  var $47=$39-$46;
  __ZN6b2Vec3C1Efff($agg_result, $17, $32, $47);
  ;
  return;
}


function __ZN6b2Vec3C1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec3C2Ev($2);
  ;
  return;
}


function __ZNK7b2Mat337Solve22ERK6b2Vec2($agg_result, $this, $b) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $a11;
      var $a12;
      var $a21;
      var $a22;
      var $det;
      $1=$this;
      $2=$b;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAPF32[(($5)>>2)];
      $a11=$6;
      var $7=(($3+12)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      $a12=$9;
      var $10=(($3)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      $a21=$12;
      var $13=(($3+12)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      $a22=$15;
      var $16=$a11;
      var $17=$a22;
      var $18=$16*$17;
      var $19=$a12;
      var $20=$a21;
      var $21=$19*$20;
      var $22=$18-$21;
      $det=$22;
      var $23=$det;
      var $24=$23 != 0;
      if ($24) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $26=$det;
      var $27=1/$26;
      $det=$27;
      __label__ = 3; break;
    case 3: 
      __ZN6b2Vec2C1Ev($agg_result);
      var $29=$det;
      var $30=$a22;
      var $31=$2;
      var $32=(($31)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=$30*$33;
      var $35=$a12;
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=$35*$38;
      var $40=$34-$39;
      var $41=$29*$40;
      var $42=(($agg_result)|0);
      HEAPF32[(($42)>>2)]=$41;
      var $43=$det;
      var $44=$a11;
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=$44*$47;
      var $49=$a21;
      var $50=$2;
      var $51=(($50)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=$49*$52;
      var $54=$48-$53;
      var $55=$43*$54;
      var $56=(($agg_result+4)|0);
      HEAPF32[(($56)>>2)]=$55;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK7b2Mat3315GetSymInverse33EPS_($this, $M) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $det;
      var $3=__stackBase__;
      var $a11;
      var $a12;
      var $a13;
      var $a22;
      var $a23;
      var $a33;
      $1=$this;
      $2=$M;
      var $4=$1;
      var $5=(($4)|0);
      var $6=(($4+12)|0);
      var $7=(($4+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($3, $6, $7);
      var $8=__Z5b2DotRK6b2Vec3S1_($5, $3);
      $det=$8;
      var $9=$det;
      var $10=$9 != 0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$det;
      var $13=1/$12;
      $det=$13;
      __label__ = 3; break;
    case 3: 
      var $15=(($4)|0);
      var $16=(($15)|0);
      var $17=HEAPF32[(($16)>>2)];
      $a11=$17;
      var $18=(($4+12)|0);
      var $19=(($18)|0);
      var $20=HEAPF32[(($19)>>2)];
      $a12=$20;
      var $21=(($4+24)|0);
      var $22=(($21)|0);
      var $23=HEAPF32[(($22)>>2)];
      $a13=$23;
      var $24=(($4+12)|0);
      var $25=(($24+4)|0);
      var $26=HEAPF32[(($25)>>2)];
      $a22=$26;
      var $27=(($4+24)|0);
      var $28=(($27+4)|0);
      var $29=HEAPF32[(($28)>>2)];
      $a23=$29;
      var $30=(($4+24)|0);
      var $31=(($30+8)|0);
      var $32=HEAPF32[(($31)>>2)];
      $a33=$32;
      var $33=$det;
      var $34=$a22;
      var $35=$a33;
      var $36=$34*$35;
      var $37=$a23;
      var $38=$a23;
      var $39=$37*$38;
      var $40=$36-$39;
      var $41=$33*$40;
      var $42=$2;
      var $43=(($42)|0);
      var $44=(($43)|0);
      HEAPF32[(($44)>>2)]=$41;
      var $45=$det;
      var $46=$a13;
      var $47=$a23;
      var $48=$46*$47;
      var $49=$a12;
      var $50=$a33;
      var $51=$49*$50;
      var $52=$48-$51;
      var $53=$45*$52;
      var $54=$2;
      var $55=(($54)|0);
      var $56=(($55+4)|0);
      HEAPF32[(($56)>>2)]=$53;
      var $57=$det;
      var $58=$a12;
      var $59=$a23;
      var $60=$58*$59;
      var $61=$a13;
      var $62=$a22;
      var $63=$61*$62;
      var $64=$60-$63;
      var $65=$57*$64;
      var $66=$2;
      var $67=(($66)|0);
      var $68=(($67+8)|0);
      HEAPF32[(($68)>>2)]=$65;
      var $69=$2;
      var $70=(($69)|0);
      var $71=(($70+4)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+12)|0);
      var $75=(($74)|0);
      HEAPF32[(($75)>>2)]=$72;
      var $76=$det;
      var $77=$a11;
      var $78=$a33;
      var $79=$77*$78;
      var $80=$a13;
      var $81=$a13;
      var $82=$80*$81;
      var $83=$79-$82;
      var $84=$76*$83;
      var $85=$2;
      var $86=(($85+12)|0);
      var $87=(($86+4)|0);
      HEAPF32[(($87)>>2)]=$84;
      var $88=$det;
      var $89=$a13;
      var $90=$a12;
      var $91=$89*$90;
      var $92=$a11;
      var $93=$a23;
      var $94=$92*$93;
      var $95=$91-$94;
      var $96=$88*$95;
      var $97=$2;
      var $98=(($97+12)|0);
      var $99=(($98+8)|0);
      HEAPF32[(($99)>>2)]=$96;
      var $100=$2;
      var $101=(($100)|0);
      var $102=(($101+8)|0);
      var $103=HEAPF32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+24)|0);
      var $106=(($105)|0);
      HEAPF32[(($106)>>2)]=$103;
      var $107=$2;
      var $108=(($107+12)|0);
      var $109=(($108+8)|0);
      var $110=HEAPF32[(($109)>>2)];
      var $111=$2;
      var $112=(($111+24)|0);
      var $113=(($112+4)|0);
      HEAPF32[(($113)>>2)]=$110;
      var $114=$det;
      var $115=$a11;
      var $116=$a22;
      var $117=$115*$116;
      var $118=$a12;
      var $119=$a12;
      var $120=$118*$119;
      var $121=$117-$120;
      var $122=$114*$121;
      var $123=$2;
      var $124=(($123+24)|0);
      var $125=(($124+8)|0);
      HEAPF32[(($125)>>2)]=$122;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2BodyD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __Z9b2IsValidf($x) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $infinity;
      $2=$x;
      var $3=$2;
      var $4=$2;
      var $5=$3 != $4;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 6; break;
    case 3: 
      $infinity=Infinity;
      var $8=$infinity;
      var $9=(-$8);
      var $10=$2;
      var $11=$9 < $10;
      if ($11) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; }
    case 4: 
      var $13=$2;
      var $14=$infinity;
      var $15=$13 < $14;
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      $1=$17;
      __label__ = 6; break;
    case 6: 
      var $19=$1;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Vec3C2Efff($this, $x, $y, $z) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$x;
  $3=$y;
  $4=$z;
  var $5=$1;
  var $6=(($5)|0);
  var $7=$2;
  HEAPF32[(($6)>>2)]=$7;
  var $8=(($5+4)|0);
  var $9=$3;
  HEAPF32[(($8)>>2)]=$9;
  var $10=(($5+8)|0);
  var $11=$4;
  HEAPF32[(($10)>>2)]=$11;
  ;
  return;
}


function __ZN16b2StackAllocatorC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102412)|0);
  var $4=(($2+102400)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+102404)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+102408)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+102796)|0);
  HEAP32[(($7)>>2)]=0;
  ;
  return;
}


function __ZNK16b2StackAllocator16GetMaxAllocationEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102408)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK7b2World8IsLockedEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102868)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 2;
  var $6=(($5)|0)==2;
  ;
  return $6;
}


function __ZN6b2Vec3C1Efff($this, $x, $y, $z) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$x;
  $3=$y;
  $4=$z;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN6b2Vec3C2Efff($5, $6, $7, $8);
  ;
  return;
}


function __GLOBAL__I_a() {
  ;
  var __label__;

  ___cxx_global_var_init();
  ;
  return;
}


function __Z7b2Alloci($size) {
  ;
  var __label__;

  var $1;
  $1=$size;
  var $2=$1;
  var $3=_malloc($2);
  ;
  return $3;
}


function __Z6b2FreePv($mem) {
  ;
  var __label__;

  var $1;
  $1=$mem;
  var $2=$1;
  _free($2);
  ;
  return;
}


function __Z5b2LogPKcz($string) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $args=__stackBase__;
  $1=$string;
  var $2=$args;
  HEAP32[(($2)>>2)]=arguments[__Z5b2LogPKcz.length];
  var $3=$1;
  var $4=HEAP32[(($args)>>2)];
  var $5=_vprintf($3, $4);
  var $6=$args;
  ;
  STACKTOP = __stackBase__;
  return;
}


function __ZN16b2StackAllocatorD2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2+102400)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str72)|0), 32, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev)|0), ((STRING_TABLE.__str173)|0));
      __label__ = 4; break;
    case 4: 
      var $9=(($2+102796)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str72)|0), 33, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev)|0), ((STRING_TABLE.__str274)|0));
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2StackAllocator8AllocateEi($this, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $entry;
      $1=$this;
      $2=$size;
      var $3=$1;
      var $4=(($3+102796)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0) < 32;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str72)|0), 38, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi)|0), ((STRING_TABLE.__str375)|0));
      __label__ = 4; break;
    case 4: 
      var $10=(($3+102412)|0);
      var $11=(($10)|0);
      var $12=(($3+102796)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($11+$13*12)|0);
      $entry=$14;
      var $15=$2;
      var $16=$entry;
      var $17=(($16+4)|0);
      HEAP32[(($17)>>2)]=$15;
      var $18=(($3+102400)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($19+$20)|0);
      var $22=(($21)|0) > 102400;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $24=$2;
      var $25=__Z7b2Alloci($24);
      var $26=$entry;
      var $27=(($26)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$entry;
      var $29=(($28+8)|0);
      HEAP8[($29)]=1;
      __label__ = 7; break;
    case 6: 
      var $31=(($3)|0);
      var $32=(($31)|0);
      var $33=(($3+102400)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($32+$34)|0);
      var $36=$entry;
      var $37=(($36)|0);
      HEAP32[(($37)>>2)]=$35;
      var $38=$entry;
      var $39=(($38+8)|0);
      HEAP8[($39)]=0;
      var $40=$2;
      var $41=(($3+102400)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+$40)|0);
      HEAP32[(($41)>>2)]=$43;
      __label__ = 7; break;
    case 7: 
      var $45=$2;
      var $46=(($3+102404)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+$45)|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($3+102408)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($3+102404)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=__Z5b2MaxIiET_S0_S0_($50, $52);
      var $54=(($3+102408)|0);
      HEAP32[(($54)>>2)]=$53;
      var $55=(($3+102796)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+1)|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=$entry;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      ;
      return $60;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2StackAllocator4FreeEPv($this, $p) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $entry;
      $1=$this;
      $2=$p;
      var $3=$1;
      var $4=(($3+102796)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0) > 0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str72)|0), 63, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator4FreeEPv)|0), ((STRING_TABLE.__str476)|0));
      __label__ = 4; break;
    case 4: 
      var $10=(($3+102412)|0);
      var $11=(($10)|0);
      var $12=(($3+102796)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($11+$13*12)|0);
      var $15=(($14-12)|0);
      $entry=$15;
      var $16=$2;
      var $17=$entry;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0)==(($19)|0);
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str72)|0), 65, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator4FreeEPv)|0), ((STRING_TABLE.__str577)|0));
      __label__ = 7; break;
    case 7: 
      var $24=$entry;
      var $25=(($24+8)|0);
      var $26=HEAP8[($25)];
      var $27=(($26) & 1);
      if ($27) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $29=$2;
      __Z6b2FreePv($29);
      __label__ = 10; break;
    case 9: 
      var $31=$entry;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($3+102400)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35-$33)|0);
      HEAP32[(($34)>>2)]=$36;
      __label__ = 10; break;
    case 10: 
      var $38=$entry;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($3+102404)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42-$40)|0);
      HEAP32[(($41)>>2)]=$43;
      var $44=(($3+102796)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45-1)|0);
      HEAP32[(($44)>>2)]=$46;
      $2=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2TimerC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2Timer5ResetEv($2);
  ;
  return;
}


function __ZN7b2Timer5ResetEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $t=__stackBase__;
  $1=$this;
  var $2=$1;
  var $3=_gettimeofday($t, 0);
  var $4=(($t)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2)|0);
  HEAP32[(($6)>>2)]=$5;
  var $7=(($t+4)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8)|0);
  var $10=$9*0.0010000000474974513;
  var $11=($10 >= 0 ? Math.floor($10) : Math.ceil($10));
  var $12=(($2+4)|0);
  HEAP32[(($12)>>2)]=$11;
  STACKTOP = __stackBase__;
  return;
}


function __ZNK7b2Timer15GetMillisecondsEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $t=__stackBase__;
  $1=$this;
  var $2=$1;
  var $3=_gettimeofday($t, 0);
  var $4=(($t)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($5-$7)|0);
  var $9=(($8*1000)|0);
  var $10=(($9)>>>0);
  var $11=(($t+4)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12)|0);
  var $14=$13*0.0010000000474974513;
  var $15=$10+$14;
  var $16=(($2+4)|0);
  var $17=HEAPU32[(($16)>>2)];
  var $18=(($17)>>>0);
  var $19=$15-$18;
  STACKTOP = __stackBase__;
  return $19;
}


function __ZN6b2BodyC2EPK9b2BodyDefP7b2World($this, $bd, $world) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$bd;
      $3=$world;
      var $4=$1;
      var $5=(($4+12)|0);
      __ZN11b2TransformC1Ev($5);
      var $6=(($4+28)|0);
      __ZN7b2SweepC1Ev($6);
      var $7=(($4+64)|0);
      __ZN6b2Vec2C1Ev($7);
      var $8=(($4+76)|0);
      __ZN6b2Vec2C1Ev($8);
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=__ZNK6b2Vec27IsValidEv($10);
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str78)|0), 27, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World)|0), ((STRING_TABLE.__str179)|0));
      __label__ = 4; break;
    case 4: 
      var $15=$2;
      var $16=(($15+16)|0);
      var $17=__ZNK6b2Vec27IsValidEv($16);
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str78)|0), 28, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World)|0), ((STRING_TABLE.__str280)|0));
      __label__ = 7; break;
    case 7: 
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=HEAPF32[(($22)>>2)];
      var $24=__Z9b2IsValidf($23);
      if ($24) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 10; break;
    case 9: 
      ___assert_func(((STRING_TABLE.__str78)|0), 29, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World)|0), ((STRING_TABLE.__str381)|0));
      __label__ = 10; break;
    case 10: 
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=HEAPF32[(($29)>>2)];
      var $31=__Z9b2IsValidf($30);
      if ($31) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 13; break;
    case 12: 
      ___assert_func(((STRING_TABLE.__str78)|0), 30, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World)|0), ((STRING_TABLE.__str482)|0));
      __label__ = 13; break;
    case 13: 
      var $35=$2;
      var $36=(($35+32)|0);
      var $37=HEAPF32[(($36)>>2)];
      var $38=__Z9b2IsValidf($37);
      if ($38) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $40=$2;
      var $41=(($40+32)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=$42 >= 0;
      if ($43) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 17; break;
    case 16: 
      ___assert_func(((STRING_TABLE.__str78)|0), 31, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World)|0), ((STRING_TABLE.__str583)|0));
      __label__ = 17; break;
    case 17: 
      var $47=$2;
      var $48=(($47+28)|0);
      var $49=HEAPF32[(($48)>>2)];
      var $50=__Z9b2IsValidf($49);
      if ($50) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=$54 >= 0;
      if ($55) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 21; break;
    case 20: 
      ___assert_func(((STRING_TABLE.__str78)|0), 32, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World)|0), ((STRING_TABLE.__str684)|0));
      __label__ = 21; break;
    case 21: 
      var $59=(($4+4)|0);
      HEAP16[(($59)>>1)]=0;
      var $60=$2;
      var $61=(($60+39)|0);
      var $62=HEAP8[($61)];
      var $63=(($62) & 1);
      if ($63) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $65=(($4+4)|0);
      var $66=HEAPU16[(($65)>>1)];
      var $67=(($66)&65535);
      var $68=$67 | 8;
      var $69=(($68) & 65535);
      HEAP16[(($65)>>1)]=$69;
      __label__ = 23; break;
    case 23: 
      var $71=$2;
      var $72=(($71+38)|0);
      var $73=HEAP8[($72)];
      var $74=(($73) & 1);
      if ($74) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $76=(($4+4)|0);
      var $77=HEAPU16[(($76)>>1)];
      var $78=(($77)&65535);
      var $79=$78 | 16;
      var $80=(($79) & 65535);
      HEAP16[(($76)>>1)]=$80;
      __label__ = 25; break;
    case 25: 
      var $82=$2;
      var $83=(($82+36)|0);
      var $84=HEAP8[($83)];
      var $85=(($84) & 1);
      if ($85) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $87=(($4+4)|0);
      var $88=HEAPU16[(($87)>>1)];
      var $89=(($88)&65535);
      var $90=$89 | 4;
      var $91=(($90) & 65535);
      HEAP16[(($87)>>1)]=$91;
      __label__ = 27; break;
    case 27: 
      var $93=$2;
      var $94=(($93+37)|0);
      var $95=HEAP8[($94)];
      var $96=(($95) & 1);
      if ($96) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $98=(($4+4)|0);
      var $99=HEAPU16[(($98)>>1)];
      var $100=(($99)&65535);
      var $101=$100 | 2;
      var $102=(($101) & 65535);
      HEAP16[(($98)>>1)]=$102;
      __label__ = 29; break;
    case 29: 
      var $104=$2;
      var $105=(($104+40)|0);
      var $106=HEAP8[($105)];
      var $107=(($106) & 1);
      if ($107) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $109=(($4+4)|0);
      var $110=HEAPU16[(($109)>>1)];
      var $111=(($110)&65535);
      var $112=$111 | 32;
      var $113=(($112) & 65535);
      HEAP16[(($109)>>1)]=$113;
      __label__ = 31; break;
    case 31: 
      var $115=$3;
      var $116=(($4+88)|0);
      HEAP32[(($116)>>2)]=$115;
      var $117=(($4+12)|0);
      var $118=(($117)|0);
      var $119=$2;
      var $120=(($119+4)|0);
      var $121=$118;
      var $122=$120;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[(($121+4)>>2)]=HEAP32[(($122+4)>>2)];
      var $123=(($4+12)|0);
      var $124=(($123+8)|0);
      var $125=$2;
      var $126=(($125+12)|0);
      var $127=HEAPF32[(($126)>>2)];
      __ZN5b2Rot3SetEf($124, $127);
      var $128=(($4+28)|0);
      var $129=(($128)|0);
      __ZN6b2Vec27SetZeroEv($129);
      var $130=(($4+28)|0);
      var $131=(($130+8)|0);
      var $132=(($4+12)|0);
      var $133=(($132)|0);
      var $134=$131;
      var $135=$133;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[(($134+4)>>2)]=HEAP32[(($135+4)>>2)];
      var $136=(($4+28)|0);
      var $137=(($136+16)|0);
      var $138=(($4+12)|0);
      var $139=(($138)|0);
      var $140=$137;
      var $141=$139;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[(($140+4)>>2)]=HEAP32[(($141+4)>>2)];
      var $142=$2;
      var $143=(($142+12)|0);
      var $144=HEAPF32[(($143)>>2)];
      var $145=(($4+28)|0);
      var $146=(($145+24)|0);
      HEAPF32[(($146)>>2)]=$144;
      var $147=$2;
      var $148=(($147+12)|0);
      var $149=HEAPF32[(($148)>>2)];
      var $150=(($4+28)|0);
      var $151=(($150+28)|0);
      HEAPF32[(($151)>>2)]=$149;
      var $152=(($4+28)|0);
      var $153=(($152+32)|0);
      HEAPF32[(($153)>>2)]=0;
      var $154=(($4+108)|0);
      HEAP32[(($154)>>2)]=0;
      var $155=(($4+112)|0);
      HEAP32[(($155)>>2)]=0;
      var $156=(($4+92)|0);
      HEAP32[(($156)>>2)]=0;
      var $157=(($4+96)|0);
      HEAP32[(($157)>>2)]=0;
      var $158=(($4+64)|0);
      var $159=$2;
      var $160=(($159+16)|0);
      var $161=$158;
      var $162=$160;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($161)>>2)]=HEAP32[(($162)>>2)];HEAP32[(($161+4)>>2)]=HEAP32[(($162+4)>>2)];
      var $163=$2;
      var $164=(($163+24)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=(($4+72)|0);
      HEAPF32[(($166)>>2)]=$165;
      var $167=$2;
      var $168=(($167+28)|0);
      var $169=HEAPF32[(($168)>>2)];
      var $170=(($4+132)|0);
      HEAPF32[(($170)>>2)]=$169;
      var $171=$2;
      var $172=(($171+32)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=(($4+136)|0);
      HEAPF32[(($174)>>2)]=$173;
      var $175=$2;
      var $176=(($175+48)|0);
      var $177=HEAPF32[(($176)>>2)];
      var $178=(($4+140)|0);
      HEAPF32[(($178)>>2)]=$177;
      var $179=(($4+76)|0);
      __ZN6b2Vec27SetZeroEv($179);
      var $180=(($4+84)|0);
      HEAPF32[(($180)>>2)]=0;
      var $181=(($4+144)|0);
      HEAPF32[(($181)>>2)]=0;
      var $182=$2;
      var $183=(($182)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($4)|0);
      HEAP32[(($185)>>2)]=$184;
      var $186=(($4)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187)|0)==2;
      if ($188) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $190=(($4+116)|0);
      HEAPF32[(($190)>>2)]=1;
      var $191=(($4+120)|0);
      HEAPF32[(($191)>>2)]=1;
      __label__ = 34; break;
    case 33: 
      var $193=(($4+116)|0);
      HEAPF32[(($193)>>2)]=0;
      var $194=(($4+120)|0);
      HEAPF32[(($194)>>2)]=0;
      __label__ = 34; break;
    case 34: 
      var $196=(($4+124)|0);
      HEAPF32[(($196)>>2)]=0;
      var $197=(($4+128)|0);
      HEAPF32[(($197)>>2)]=0;
      var $198=$2;
      var $199=(($198+44)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($4+148)|0);
      HEAP32[(($201)>>2)]=$200;
      var $202=(($4+100)|0);
      HEAP32[(($202)>>2)]=0;
      var $203=(($4+104)|0);
      HEAP32[(($203)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Vec27IsValidEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAPF32[(($3)>>2)];
      var $5=__Z9b2IsValidf($4);
      if ($5) { __label__ = 2; break; } else { var $11 = 0;__label__ = 3; break; }
    case 2: 
      var $7=(($2+4)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=__Z9b2IsValidf($8);
      var $11 = $9;__label__ = 3; break;
    case 3: 
      var $11;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body7SetTypeE10b2BodyType($this, $type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $f;
      $1=$this;
      $2=$type;
      var $3=$1;
      var $4=(($3+88)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=__ZNK7b2World8IsLockedEv($5);
      var $7=(($6)&1);
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str78)|0), 115, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body7SetTypeE10b2BodyType)|0), ((STRING_TABLE.__str785)|0));
      __label__ = 4; break;
    case 4: 
      var $12=(($3+88)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=__ZNK7b2World8IsLockedEv($13);
      var $15=(($14)&1);
      var $16=(($15)|0)==1;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 14; break;
    case 6: 
      var $19=(($3)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($20)|0)==(($21)|0);
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 14; break;
    case 8: 
      var $25=$2;
      var $26=(($3)|0);
      HEAP32[(($26)>>2)]=$25;
      __ZN6b2Body13ResetMassDataEv($3);
      var $27=(($3)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==0;
      if ($29) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $31=(($3+64)|0);
      __ZN6b2Vec27SetZeroEv($31);
      var $32=(($3+72)|0);
      HEAPF32[(($32)>>2)]=0;
      var $33=(($3+28)|0);
      var $34=(($33+28)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=(($3+28)|0);
      var $37=(($36+24)|0);
      HEAPF32[(($37)>>2)]=$35;
      var $38=(($3+28)|0);
      var $39=(($38+8)|0);
      var $40=(($3+28)|0);
      var $41=(($40+16)|0);
      var $42=$39;
      var $43=$41;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
      __ZN6b2Body19SynchronizeFixturesEv($3);
      __label__ = 10; break;
    case 10: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      var $45=(($3+76)|0);
      __ZN6b2Vec27SetZeroEv($45);
      var $46=(($3+84)|0);
      HEAPF32[(($46)>>2)]=0;
      var $47=(($3+100)|0);
      var $48=HEAP32[(($47)>>2)];
      $f=$48;
      __label__ = 11; break;
    case 11: 
      var $50=$f;
      var $51=(($50)|0)!=0;
      if ($51) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $53=$f;
      __ZN9b2Fixture8RefilterEv($53);
      __label__ = 13; break;
    case 13: 
      var $55=$f;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      $f=$57;
      __label__ = 11; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Contact11GetFixtureAEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Contact11GetFixtureBEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body13ShouldCollideEPKS_($this, $other) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $jn;
      $2=$this;
      $3=$other;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=2;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)!=2;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 13; break;
    case 4: 
      var $15=(($4+108)|0);
      var $16=HEAP32[(($15)>>2)];
      $jn=$16;
      __label__ = 5; break;
    case 5: 
      var $18=$jn;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $21=$jn;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$3;
      var $25=(($23)|0)==(($24)|0);
      if ($25) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $27=$jn;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+61)|0);
      var $31=HEAP8[($30)];
      var $32=(($31) & 1);
      var $33=(($32)&1);
      var $34=(($33)|0)==0;
      if ($34) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=0;
      __label__ = 13; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $39=$jn;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      $jn=$41;
      __label__ = 5; break;
    case 12: 
      $1=1;
      __label__ = 13; break;
    case 13: 
      var $44=$1;
      ;
      return $44;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body13ResetMassDataEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $localCenter=__stackBase__;
      var $f;
      var $massData=__stackBase__+8;
      var $2=__stackBase__+24;
      var $oldCenter=__stackBase__+32;
      var $3=__stackBase__+40;
      var $4=__stackBase__+48;
      var $5=__stackBase__+56;
      $1=$this;
      var $6=$1;
      var $7=(($6+116)|0);
      HEAPF32[(($7)>>2)]=0;
      var $8=(($6+120)|0);
      HEAPF32[(($8)>>2)]=0;
      var $9=(($6+124)|0);
      HEAPF32[(($9)>>2)]=0;
      var $10=(($6+128)|0);
      HEAPF32[(($10)>>2)]=0;
      var $11=(($6+28)|0);
      var $12=(($11)|0);
      __ZN6b2Vec27SetZeroEv($12);
      var $13=(($6)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)==0;
      if ($15) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $17=(($6)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)==1;
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $21=(($6+28)|0);
      var $22=(($21+8)|0);
      var $23=(($6+12)|0);
      var $24=(($23)|0);
      var $25=$22;
      var $26=$24;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[(($25+4)>>2)]=HEAP32[(($26+4)>>2)];
      var $27=(($6+28)|0);
      var $28=(($27+16)|0);
      var $29=(($6+12)|0);
      var $30=(($29)|0);
      var $31=$28;
      var $32=$30;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[(($31+4)>>2)]=HEAP32[(($32+4)>>2)];
      var $33=(($6+28)|0);
      var $34=(($33+28)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=(($6+28)|0);
      var $37=(($36+24)|0);
      HEAPF32[(($37)>>2)]=$35;
      __label__ = 24; break;
    case 4: 
      var $39=(($6)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)==2;
      if ($41) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str78)|0), 284, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13ResetMassDataEv)|0), ((STRING_TABLE.__str1189)|0));
      __label__ = 7; break;
    case 7: 
      var $45=$localCenter;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($45)>>2)]=HEAP32[((_b2Vec2_zero)>>2)];HEAP32[(($45+4)>>2)]=HEAP32[((_b2Vec2_zero+4)>>2)];
      var $46=(($6+100)|0);
      var $47=HEAP32[(($46)>>2)];
      $f=$47;
      __label__ = 8; break;
    case 8: 
      var $49=$f;
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $52=$f;
      var $53=(($52)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=$54 == 0;
      if ($55) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      __ZN10b2MassDataC1Ev($massData);
      var $58=$f;
      __ZNK9b2Fixture11GetMassDataEP10b2MassData($58, $massData);
      var $59=(($massData)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($6+116)|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=$62+$60;
      HEAPF32[(($61)>>2)]=$63;
      var $64=(($massData)|0);
      var $65=HEAPF32[(($64)>>2)];
      var $66=(($massData+4)|0);
      __ZmlfRK6b2Vec2($2, $65, $66);
      __ZN6b2Vec2pLERKS_($localCenter, $2);
      var $67=(($massData+12)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=(($6+124)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=$70+$68;
      HEAPF32[(($69)>>2)]=$71;
      __label__ = 12; break;
    case 12: 
      var $73=$f;
      var $74=(($73+4)|0);
      var $75=HEAP32[(($74)>>2)];
      $f=$75;
      __label__ = 8; break;
    case 13: 
      var $77=(($6+116)|0);
      var $78=HEAPF32[(($77)>>2)];
      var $79=$78 > 0;
      if ($79) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $81=(($6+116)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=1/$82;
      var $84=(($6+120)|0);
      HEAPF32[(($84)>>2)]=$83;
      var $85=(($6+120)|0);
      var $86=HEAPF32[(($85)>>2)];
      __ZN6b2Vec2mLEf($localCenter, $86);
      __label__ = 16; break;
    case 15: 
      var $88=(($6+116)|0);
      HEAPF32[(($88)>>2)]=1;
      var $89=(($6+120)|0);
      HEAPF32[(($89)>>2)]=1;
      __label__ = 16; break;
    case 16: 
      var $91=(($6+124)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=$92 > 0;
      if ($93) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: 
      var $95=(($6+4)|0);
      var $96=HEAPU16[(($95)>>1)];
      var $97=(($96)&65535);
      var $98=$97 & 16;
      var $99=(($98)|0)==0;
      if ($99) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $101=(($6+116)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=__Z5b2DotRK6b2Vec2S1_($localCenter, $localCenter);
      var $104=$102*$103;
      var $105=(($6+124)|0);
      var $106=HEAPF32[(($105)>>2)];
      var $107=$106-$104;
      HEAPF32[(($105)>>2)]=$107;
      var $108=(($6+124)|0);
      var $109=HEAPF32[(($108)>>2)];
      var $110=$109 > 0;
      if ($110) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 21; break;
    case 20: 
      ___assert_func(((STRING_TABLE.__str78)|0), 319, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13ResetMassDataEv)|0), ((STRING_TABLE.__str1290)|0));
      __label__ = 21; break;
    case 21: 
      var $114=(($6+124)|0);
      var $115=HEAPF32[(($114)>>2)];
      var $116=1/$115;
      var $117=(($6+128)|0);
      HEAPF32[(($117)>>2)]=$116;
      __label__ = 23; break;
    case 22: 
      var $119=(($6+124)|0);
      HEAPF32[(($119)>>2)]=0;
      var $120=(($6+128)|0);
      HEAPF32[(($120)>>2)]=0;
      __label__ = 23; break;
    case 23: 
      var $122=(($6+28)|0);
      var $123=(($122+16)|0);
      var $124=$oldCenter;
      var $125=$123;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[(($124+4)>>2)]=HEAP32[(($125+4)>>2)];
      var $126=(($6+28)|0);
      var $127=(($126)|0);
      var $128=$127;
      var $129=$localCenter;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];HEAP32[(($128+4)>>2)]=HEAP32[(($129+4)>>2)];
      var $130=(($6+28)|0);
      var $131=(($130+8)|0);
      var $132=(($6+28)|0);
      var $133=(($132+16)|0);
      var $134=(($6+12)|0);
      var $135=(($6+28)|0);
      var $136=(($135)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($3, $134, $136);
      var $137=$133;
      var $138=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[(($137+4)>>2)]=HEAP32[(($138+4)>>2)];
      var $139=$131;
      var $140=$133;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];HEAP32[(($139+4)>>2)]=HEAP32[(($140+4)>>2)];
      var $141=(($6+64)|0);
      var $142=(($6+72)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=(($6+28)|0);
      var $145=(($144+16)|0);
      __ZmiRK6b2Vec2S1_($5, $145, $oldCenter);
      __Z7b2CrossfRK6b2Vec2($4, $143, $5);
      __ZN6b2Vec2pLERKS_($141, $4);
      __label__ = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body19SynchronizeFixturesEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $xf1=__stackBase__;
      var $2=__stackBase__+16;
      var $3=__stackBase__+24;
      var $broadPhase;
      var $f;
      $1=$this;
      var $4=$1;
      __ZN11b2TransformC1Ev($xf1);
      var $5=(($xf1+8)|0);
      var $6=(($4+28)|0);
      var $7=(($6+24)|0);
      var $8=HEAPF32[(($7)>>2)];
      __ZN5b2Rot3SetEf($5, $8);
      var $9=(($xf1)|0);
      var $10=(($4+28)|0);
      var $11=(($10+8)|0);
      var $12=(($xf1+8)|0);
      var $13=(($4+28)|0);
      var $14=(($13)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $12, $14);
      __ZmiRK6b2Vec2S1_($2, $11, $3);
      var $15=$9;
      var $16=$2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[(($15+4)>>2)]=HEAP32[(($16+4)>>2)];
      var $17=(($4+88)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+102872)|0);
      var $20=(($19)|0);
      $broadPhase=$20;
      var $21=(($4+100)|0);
      var $22=HEAP32[(($21)>>2)];
      $f=$22;
      __label__ = 2; break;
    case 2: 
      var $24=$f;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $27=$f;
      var $28=$broadPhase;
      var $29=(($4+12)|0);
      __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($27, $28, $xf1, $29);
      __label__ = 4; break;
    case 4: 
      var $31=$f;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      $f=$33;
      __label__ = 2; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body8SetAwakeEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAPU16[(($8)>>1)];
      var $10=(($9)&65535);
      var $11=$10 & 2;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAPU16[(($14)>>1)];
      var $16=(($15)&65535);
      var $17=$16 | 2;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      var $19=(($4+144)|0);
      HEAPF32[(($19)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      __label__ = 6; break;
    case 5: 
      var $22=(($4+4)|0);
      var $23=HEAPU16[(($22)>>1)];
      var $24=(($23)&65535);
      var $25=$24 & -3;
      var $26=(($25) & 65535);
      HEAP16[(($22)>>1)]=$26;
      var $27=(($4+144)|0);
      HEAPF32[(($27)>>2)]=0;
      var $28=(($4+64)|0);
      __ZN6b2Vec27SetZeroEv($28);
      var $29=(($4+72)|0);
      HEAPF32[(($29)>>2)]=0;
      var $30=(($4+76)|0);
      __ZN6b2Vec27SetZeroEv($30);
      var $31=(($4+84)|0);
      HEAPF32[(($31)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $allocator;
      var $memory;
      var $fixture;
      var $broadPhase;
      $2=$this;
      $3=$def;
      var $4=$2;
      var $5=(($4+88)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=__ZNK7b2World8IsLockedEv($6);
      var $8=(($7)&1);
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str78)|0), 153, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13CreateFixtureEPK12b2FixtureDef)|0), ((STRING_TABLE.__str785)|0));
      __label__ = 4; break;
    case 4: 
      var $13=(($4+88)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=__ZNK7b2World8IsLockedEv($14);
      var $16=(($15)&1);
      var $17=(($16)|0)==1;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 13; break;
    case 6: 
      var $20=(($4+88)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0);
      $allocator=$22;
      var $23=$allocator;
      var $24=__ZN16b2BlockAllocator8AllocateEi($23, 44);
      $memory=$24;
      var $25=$memory;
      var $26=(($25)|0)==0;
      if ($26) { var $30 = 0;__label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $28=$25;
      FUNCTION_TABLE[__ZN9b2FixtureC1Ev]($28);
      var $30 = $28;__label__ = 8; break;
    case 8: 
      var $30;
      $fixture=$30;
      var $31=$fixture;
      var $32=$allocator;
      var $33=$3;
      __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($31, $32, $4, $33);
      var $34=(($4+4)|0);
      var $35=HEAPU16[(($34)>>1)];
      var $36=(($35)&65535);
      var $37=$36 & 32;
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $40=(($4+88)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+102872)|0);
      var $43=(($42)|0);
      $broadPhase=$43;
      var $44=$fixture;
      var $45=$broadPhase;
      var $46=(($4+12)|0);
      __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($44, $45, $46);
      __label__ = 10; break;
    case 10: 
      var $48=(($4+100)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$fixture;
      var $51=(($50+4)|0);
      HEAP32[(($51)>>2)]=$49;
      var $52=$fixture;
      var $53=(($4+100)|0);
      HEAP32[(($53)>>2)]=$52;
      var $54=(($4+104)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+1)|0);
      HEAP32[(($54)>>2)]=$56;
      var $57=$fixture;
      var $58=(($57+8)|0);
      HEAP32[(($58)>>2)]=$4;
      var $59=$fixture;
      var $60=(($59)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=$61 > 0;
      if ($62) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __ZN6b2Body13ResetMassDataEv($4);
      __label__ = 12; break;
    case 12: 
      var $65=(($4+88)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+102868)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$68 | 1;
      HEAP32[(($67)>>2)]=$69;
      var $70=$fixture;
      $1=$70;
      __label__ = 13; break;
    case 13: 
      var $72=$1;
      ;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body13CreateFixtureEPK7b2Shapef($this, $shape, $density) {
  var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $def=__stackBase__;
  $1=$this;
  $2=$shape;
  $3=$density;
  var $4=$1;
  __ZN12b2FixtureDefC1Ev($def);
  var $5=$2;
  var $6=(($def)|0);
  HEAP32[(($6)>>2)]=$5;
  var $7=$3;
  var $8=(($def+16)|0);
  HEAPF32[(($8)>>2)]=$7;
  var $9=__ZN6b2Body13CreateFixtureEPK12b2FixtureDef($4, $def);
  STACKTOP = __stackBase__;
  return $9;
}


function __ZN12b2FixtureDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2FixtureDefC2Ev($2);
  ;
  return;
}


function __ZN6b2Body14DestroyFixtureEP9b2Fixture($this, $fixture) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $node;
      var $found;
      var $edge;
      var $c;
      var $fixtureA;
      var $fixtureB;
      var $allocator;
      var $broadPhase;
      $1=$this;
      $2=$fixture;
      var $3=$1;
      var $4=(($3+88)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=__ZNK7b2World8IsLockedEv($5);
      var $7=(($6)&1);
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str78)|0), 201, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture)|0), ((STRING_TABLE.__str785)|0));
      __label__ = 4; break;
    case 4: 
      var $12=(($3+88)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=__ZNK7b2World8IsLockedEv($13);
      var $15=(($14)&1);
      var $16=(($15)|0)==1;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 29; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0)==(($3)|0);
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 9; break;
    case 8: 
      ___assert_func(((STRING_TABLE.__str78)|0), 207, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture)|0), ((STRING_TABLE.__str886)|0));
      __label__ = 9; break;
    case 9: 
      var $26=(($3+104)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0) > 0;
      if ($28) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      ___assert_func(((STRING_TABLE.__str78)|0), 210, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture)|0), ((STRING_TABLE.__str987)|0));
      __label__ = 12; break;
    case 12: 
      var $32=(($3+100)|0);
      $node=$32;
      $found=0;
      __label__ = 13; break;
    case 13: 
      var $34=$node;
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $38=$node;
      var $39=HEAP32[(($38)>>2)];
      var $40=$2;
      var $41=(($39)|0)==(($40)|0);
      if ($41) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $43=$2;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$node;
      HEAP32[(($46)>>2)]=$45;
      $found=1;
      __label__ = 17; break;
    case 16: 
      var $48=$node;
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+4)|0);
      $node=$50;
      __label__ = 13; break;
    case 17: 
      var $52=$found;
      var $53=(($52) & 1);
      if ($53) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      ___assert_func(((STRING_TABLE.__str78)|0), 226, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture)|0), ((STRING_TABLE.__str1088)|0));
      __label__ = 20; break;
    case 20: 
      var $57=(($3+112)|0);
      var $58=HEAP32[(($57)>>2)];
      $edge=$58;
      __label__ = 21; break;
    case 21: 
      var $60=$edge;
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 22; break; } else { __label__ = 26; break; }
    case 22: 
      var $63=$edge;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      $c=$65;
      var $66=$edge;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      $edge=$68;
      var $69=$c;
      var $70=__ZN9b2Contact11GetFixtureAEv($69);
      $fixtureA=$70;
      var $71=$c;
      var $72=__ZN9b2Contact11GetFixtureBEv($71);
      $fixtureB=$72;
      var $73=$2;
      var $74=$fixtureA;
      var $75=(($73)|0)==(($74)|0);
      if ($75) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      var $77=$2;
      var $78=$fixtureB;
      var $79=(($77)|0)==(($78)|0);
      if ($79) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $81=(($3+88)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+102872)|0);
      var $84=$c;
      __ZN16b2ContactManager7DestroyEP9b2Contact($83, $84);
      __label__ = 25; break;
    case 25: 
      __label__ = 21; break;
    case 26: 
      var $87=(($3+88)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|0);
      $allocator=$89;
      var $90=(($3+4)|0);
      var $91=HEAPU16[(($90)>>1)];
      var $92=(($91)&65535);
      var $93=$92 & 32;
      var $94=(($93)|0)!=0;
      if ($94) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $96=(($3+88)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+102872)|0);
      var $99=(($98)|0);
      $broadPhase=$99;
      var $100=$2;
      var $101=$broadPhase;
      __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($100, $101);
      __label__ = 28; break;
    case 28: 
      var $103=$2;
      var $104=$allocator;
      __ZN9b2Fixture7DestroyEP16b2BlockAllocator($103, $104);
      var $105=$2;
      var $106=(($105+8)|0);
      HEAP32[(($106)>>2)]=0;
      var $107=$2;
      var $108=(($107+4)|0);
      HEAP32[(($108)>>2)]=0;
      var $109=$2;
      var $110=$allocator;
      var $111=$2;
      var $112=$111;
      __ZN16b2BlockAllocator4FreeEPvi($110, $112, 44);
      var $113=(($3+104)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114-1)|0);
      HEAP32[(($113)>>2)]=$115;
      __ZN6b2Body13ResetMassDataEv($3);
      __label__ = 29; break;
    case 29: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10b2MassDataC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2MassDataC2Ev($2);
  ;
  return;
}


function __ZNK9b2Fixture11GetMassDataEP10b2MassData($this, $massData) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$massData;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+28)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=(($3)|0);
  var $12=HEAPF32[(($11)>>2)];
  FUNCTION_TABLE[$9]($5, $10, $12);
  ;
  return;
}


function __ZN6b2Body11SetMassDataEPK10b2MassData($this, $massData) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $oldCenter=__stackBase__;
      var $3=__stackBase__+8;
      var $4=__stackBase__+16;
      var $5=__stackBase__+24;
      $1=$this;
      $2=$massData;
      var $6=$1;
      var $7=(($6+88)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=__ZNK7b2World8IsLockedEv($8);
      var $10=(($9)&1);
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str78)|0), 340, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body11SetMassDataEPK10b2MassData)|0), ((STRING_TABLE.__str785)|0));
      __label__ = 4; break;
    case 4: 
      var $15=(($6+88)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=__ZNK7b2World8IsLockedEv($16);
      var $18=(($17)&1);
      var $19=(($18)|0)==1;
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 17; break;
    case 6: 
      var $22=(($6)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0)!=2;
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 17; break;
    case 8: 
      var $27=(($6+120)|0);
      HEAPF32[(($27)>>2)]=0;
      var $28=(($6+124)|0);
      HEAPF32[(($28)>>2)]=0;
      var $29=(($6+128)|0);
      HEAPF32[(($29)>>2)]=0;
      var $30=$2;
      var $31=(($30)|0);
      var $32=HEAPF32[(($31)>>2)];
      var $33=(($6+116)|0);
      HEAPF32[(($33)>>2)]=$32;
      var $34=(($6+116)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=$35 <= 0;
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $38=(($6+116)|0);
      HEAPF32[(($38)>>2)]=1;
      __label__ = 10; break;
    case 10: 
      var $40=(($6+116)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42=1/$41;
      var $43=(($6+120)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$2;
      var $45=(($44+12)|0);
      var $46=HEAPF32[(($45)>>2)];
      var $47=$46 > 0;
      if ($47) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      var $49=(($6+4)|0);
      var $50=HEAPU16[(($49)>>1)];
      var $51=(($50)&65535);
      var $52=$51 & 16;
      var $53=(($52)|0)==0;
      if ($53) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $55=$2;
      var $56=(($55+12)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=(($6+116)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=__Z5b2DotRK6b2Vec2S1_($61, $63);
      var $65=$59*$64;
      var $66=$57-$65;
      var $67=(($6+124)|0);
      HEAPF32[(($67)>>2)]=$66;
      var $68=(($6+124)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=$69 > 0;
      if ($70) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 15; break;
    case 14: 
      ___assert_func(((STRING_TABLE.__str78)|0), 366, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body11SetMassDataEPK10b2MassData)|0), ((STRING_TABLE.__str1290)|0));
      __label__ = 15; break;
    case 15: 
      var $74=(($6+124)|0);
      var $75=HEAPF32[(($74)>>2)];
      var $76=1/$75;
      var $77=(($6+128)|0);
      HEAPF32[(($77)>>2)]=$76;
      __label__ = 16; break;
    case 16: 
      var $79=(($6+28)|0);
      var $80=(($79+16)|0);
      var $81=$oldCenter;
      var $82=$80;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[(($81+4)>>2)]=HEAP32[(($82+4)>>2)];
      var $83=(($6+28)|0);
      var $84=(($83)|0);
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=$84;
      var $88=$86;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[(($87+4)>>2)]=HEAP32[(($88+4)>>2)];
      var $89=(($6+28)|0);
      var $90=(($89+8)|0);
      var $91=(($6+28)|0);
      var $92=(($91+16)|0);
      var $93=(($6+12)|0);
      var $94=(($6+28)|0);
      var $95=(($94)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($3, $93, $95);
      var $96=$92;
      var $97=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[(($96+4)>>2)]=HEAP32[(($97+4)>>2)];
      var $98=$90;
      var $99=$92;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[(($98+4)>>2)]=HEAP32[(($99+4)>>2)];
      var $100=(($6+64)|0);
      var $101=(($6+72)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=(($6+28)|0);
      var $104=(($103+16)|0);
      __ZmiRK6b2Vec2S1_($5, $104, $oldCenter);
      __Z7b2CrossfRK6b2Vec2($4, $102, $5);
      __ZN6b2Vec2pLERKS_($100, $4);
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Body8IsActiveEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPU16[(($3)>>1)];
  var $5=(($4)&65535);
  var $6=$5 & 32;
  var $7=(($6)|0)==32;
  ;
  return $7;
}


function __ZN8b2FilterC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAP16[(($3)>>1)]=1;
  var $4=(($2+2)|0);
  HEAP16[(($4)>>1)]=-1;
  var $5=(($2+4)|0);
  HEAP16[(($5)>>1)]=0;
  ;
  return;
}


function __ZN9b2Fixture7GetBodyEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK9b2Contact10IsTouchingEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 2;
  var $6=(($5)|0)==2;
  ;
  return $6;
}


function __ZNK9b2Contact14GetChildIndexAEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK9b2Contact14GetChildIndexBEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Contact7GetNextEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body7IsAwakeEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPU16[(($3)>>1)];
  var $5=(($4)&65535);
  var $6=$5 & 2;
  var $7=(($6)|0)==2;
  ;
  return $7;
}


function __ZN6b2Body12SetTransformERK6b2Vec2f($this, $position, $angle) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $broadPhase;
      var $f;
      $1=$this;
      $2=$position;
      $3=$angle;
      var $5=$1;
      var $6=(($5+88)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=__ZNK7b2World8IsLockedEv($7);
      var $9=(($8)&1);
      var $10=(($9)|0)==0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str78)|0), 404, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body12SetTransformERK6b2Vec2f)|0), ((STRING_TABLE.__str785)|0));
      __label__ = 4; break;
    case 4: 
      var $14=(($5+88)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=__ZNK7b2World8IsLockedEv($15);
      var $17=(($16)&1);
      var $18=(($17)|0)==1;
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 11; break;
    case 6: 
      var $21=(($5+12)|0);
      var $22=(($21+8)|0);
      var $23=$3;
      __ZN5b2Rot3SetEf($22, $23);
      var $24=(($5+12)|0);
      var $25=(($24)|0);
      var $26=$2;
      var $27=$25;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      var $29=(($5+28)|0);
      var $30=(($29+16)|0);
      var $31=(($5+12)|0);
      var $32=(($5+28)|0);
      var $33=(($32)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($4, $31, $33);
      var $34=$30;
      var $35=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=$3;
      var $37=(($5+28)|0);
      var $38=(($37+28)|0);
      HEAPF32[(($38)>>2)]=$36;
      var $39=(($5+28)|0);
      var $40=(($39+8)|0);
      var $41=(($5+28)|0);
      var $42=(($41+16)|0);
      var $43=$40;
      var $44=$42;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[(($43+4)>>2)]=HEAP32[(($44+4)>>2)];
      var $45=$3;
      var $46=(($5+28)|0);
      var $47=(($46+24)|0);
      HEAPF32[(($47)>>2)]=$45;
      var $48=(($5+88)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+102872)|0);
      var $51=(($50)|0);
      $broadPhase=$51;
      var $52=(($5+100)|0);
      var $53=HEAP32[(($52)>>2)];
      $f=$53;
      __label__ = 7; break;
    case 7: 
      var $55=$f;
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $58=$f;
      var $59=$broadPhase;
      var $60=(($5+12)|0);
      var $61=(($5+12)|0);
      __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($58, $59, $60, $61);
      __label__ = 9; break;
    case 9: 
      var $63=$f;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      $f=$65;
      __label__ = 7; break;
    case 10: 
      var $67=(($5+88)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+102872)|0);
      __ZN16b2ContactManager15FindNewContactsEv($69);
      __label__ = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body9SetActiveEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $broadPhase;
      var $f;
      var $broadPhase1;
      var $f2;
      var $ce;
      var $ce0;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=(($4+88)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=__ZNK7b2World8IsLockedEv($6);
      var $8=(($7)&1);
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str78)|0), 443, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body9SetActiveEb)|0), ((STRING_TABLE.__str785)|0));
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=(($13) & 1);
      var $15=(($14)&1);
      var $16=__ZNK6b2Body8IsActiveEv($4);
      var $17=(($16)&1);
      var $18=(($15)|0)==(($17)|0);
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 20; break;
    case 6: 
      var $21=$2;
      var $22=(($21) & 1);
      if ($22) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $24=(($4+4)|0);
      var $25=HEAPU16[(($24)>>1)];
      var $26=(($25)&65535);
      var $27=$26 | 32;
      var $28=(($27) & 65535);
      HEAP16[(($24)>>1)]=$28;
      var $29=(($4+88)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+102872)|0);
      var $32=(($31)|0);
      $broadPhase=$32;
      var $33=(($4+100)|0);
      var $34=HEAP32[(($33)>>2)];
      $f=$34;
      __label__ = 8; break;
    case 8: 
      var $36=$f;
      var $37=(($36)|0)!=0;
      if ($37) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $39=$f;
      var $40=$broadPhase;
      var $41=(($4+12)|0);
      __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($39, $40, $41);
      __label__ = 10; break;
    case 10: 
      var $43=$f;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      $f=$45;
      __label__ = 8; break;
    case 11: 
      __label__ = 20; break;
    case 12: 
      var $48=(($4+4)|0);
      var $49=HEAPU16[(($48)>>1)];
      var $50=(($49)&65535);
      var $51=$50 & -33;
      var $52=(($51) & 65535);
      HEAP16[(($48)>>1)]=$52;
      var $53=(($4+88)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+102872)|0);
      var $56=(($55)|0);
      $broadPhase1=$56;
      var $57=(($4+100)|0);
      var $58=HEAP32[(($57)>>2)];
      $f2=$58;
      __label__ = 13; break;
    case 13: 
      var $60=$f2;
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $63=$f2;
      var $64=$broadPhase1;
      __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($63, $64);
      __label__ = 15; break;
    case 15: 
      var $66=$f2;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      $f2=$68;
      __label__ = 13; break;
    case 16: 
      var $70=(($4+112)|0);
      var $71=HEAP32[(($70)>>2)];
      $ce=$71;
      __label__ = 17; break;
    case 17: 
      var $73=$ce;
      var $74=(($73)|0)!=0;
      if ($74) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $76=$ce;
      $ce0=$76;
      var $77=$ce;
      var $78=(($77+12)|0);
      var $79=HEAP32[(($78)>>2)];
      $ce=$79;
      var $80=(($4+88)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+102872)|0);
      var $83=$ce0;
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      __ZN16b2ContactManager7DestroyEP9b2Contact($82, $85);
      __label__ = 17; break;
    case 19: 
      var $87=(($4+112)|0);
      HEAP32[(($87)>>2)]=0;
      __label__ = 20; break;
    case 20: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $bodyIndex;
      var $f;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      $bodyIndex=$4;
      __Z5b2LogPKcz(((STRING_TABLE.__str1391)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str1492)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=(($2)|0);
      var $6=HEAP32[(($5)>>2)];
      __Z5b2LogPKcz(((STRING_TABLE.__str1593)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$6,tempInt));
      var $7=(($2+12)|0);
      var $8=(($7)|0);
      var $9=(($8)|0);
      var $10=HEAPF32[(($9)>>2)];
      var $11=$10;
      var $12=(($2+12)|0);
      var $13=(($12)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      var $16=$15;
      __Z5b2LogPKcz(((STRING_TABLE.__str1694)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$11,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$16,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $17=(($2+28)|0);
      var $18=(($17+28)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$19;
      __Z5b2LogPKcz(((STRING_TABLE.__str1795)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$20,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $21=(($2+64)|0);
      var $22=(($21)|0);
      var $23=HEAPF32[(($22)>>2)];
      var $24=$23;
      var $25=(($2+64)|0);
      var $26=(($25+4)|0);
      var $27=HEAPF32[(($26)>>2)];
      var $28=$27;
      __Z5b2LogPKcz(((STRING_TABLE.__str1896)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$24,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$28,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $29=(($2+72)|0);
      var $30=HEAPF32[(($29)>>2)];
      var $31=$30;
      __Z5b2LogPKcz(((STRING_TABLE.__str1997)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $32=(($2+132)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=$33;
      __Z5b2LogPKcz(((STRING_TABLE.__str2098)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$34,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $35=(($2+136)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=$36;
      __Z5b2LogPKcz(((STRING_TABLE.__str2199)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$37,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $38=(($2+4)|0);
      var $39=HEAPU16[(($38)>>1)];
      var $40=(($39)&65535);
      var $41=$40 & 4;
      __Z5b2LogPKcz(((STRING_TABLE.__str22100)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$41,tempInt));
      var $42=(($2+4)|0);
      var $43=HEAPU16[(($42)>>1)];
      var $44=(($43)&65535);
      var $45=$44 & 2;
      __Z5b2LogPKcz(((STRING_TABLE.__str23101)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$45,tempInt));
      var $46=(($2+4)|0);
      var $47=HEAPU16[(($46)>>1)];
      var $48=(($47)&65535);
      var $49=$48 & 16;
      __Z5b2LogPKcz(((STRING_TABLE.__str24102)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$49,tempInt));
      var $50=(($2+4)|0);
      var $51=HEAPU16[(($50)>>1)];
      var $52=(($51)&65535);
      var $53=$52 & 8;
      __Z5b2LogPKcz(((STRING_TABLE.__str25103)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$53,tempInt));
      var $54=(($2+4)|0);
      var $55=HEAPU16[(($54)>>1)];
      var $56=(($55)&65535);
      var $57=$56 & 32;
      __Z5b2LogPKcz(((STRING_TABLE.__str26104)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$57,tempInt));
      var $58=(($2+140)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$59;
      __Z5b2LogPKcz(((STRING_TABLE.__str27105)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$60,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $61=(($2+8)|0);
      var $62=HEAP32[(($61)>>2)];
      __Z5b2LogPKcz(((STRING_TABLE.__str28106)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$62,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str29107)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $63=(($2+100)|0);
      var $64=HEAP32[(($63)>>2)];
      $f=$64;
      __label__ = 2; break;
    case 2: 
      var $66=$f;
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      __Z5b2LogPKcz(((STRING_TABLE.__str30108)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $69=$f;
      var $70=$bodyIndex;
      __ZN9b2Fixture4DumpEi($69, $70);
      __Z5b2LogPKcz(((STRING_TABLE.__str31109)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: 
      var $72=$f;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      $f=$74;
      __label__ = 2; break;
    case 5: 
      __Z5b2LogPKcz(((STRING_TABLE.__str32)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10b2MassDataC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  __ZN6b2Vec2C1Ev($3);
  ;
  return;
}


function __ZN12b2FixtureDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+22)|0);
  __ZN8b2FilterC1Ev($3);
  var $4=(($2)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+4)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+8)|0);
  HEAPF32[(($6)>>2)]=0.20000000298023224;
  var $7=(($2+12)|0);
  HEAPF32[(($7)>>2)]=0;
  var $8=(($2+16)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=(($2+20)|0);
  HEAP8[($9)]=0;
  ;
  return;
}


function __ZN8b2FilterC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN8b2FilterC2Ev($2);
  ;
  return;
}


function ___cxx_global_var_init115() {
  ;
  var __label__;

  __ZN15b2ContactFilterC1Ev(_b2_defaultFilter);
  var $1=___cxa_atexit(2, _b2_defaultFilter, ___dso_handle);
  ;
  return;
}


function __ZN15b2ContactFilterC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ContactFilterC2Ev($2);
  ;
  return;
}


function __ZN15b2ContactFilterD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ContactFilterD2Ev($2);
  ;
  return;
}


function ___cxx_global_var_init1() {
  ;
  var __label__;

  __ZN17b2ContactListenerC1Ev(_b2_defaultListener);
  var $1=___cxa_atexit(4, _b2_defaultListener, ___dso_handle);
  ;
  return;
}


function __ZN17b2ContactListenerC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN17b2ContactListenerC2Ev($2);
  ;
  return;
}


function __ZN17b2ContactListenerD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN17b2ContactListenerD2Ev($2);
  ;
  return;
}


function __ZN16b2ContactManagerC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  FUNCTION_TABLE[__ZN12b2BroadPhaseC1Ev]($3);
  var $4=(($2+60)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+64)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+68)|0);
  HEAP32[(($6)>>2)]=_b2_defaultFilter;
  var $7=(($2+72)|0);
  HEAP32[(($7)>>2)]=_b2_defaultListener;
  var $8=(($2+76)|0);
  HEAP32[(($8)>>2)]=0;
  ;
  return;
}


function __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $fixtureA;
      var $fixtureB;
      var $bodyA;
      var $bodyB;
      $1=$this;
      $2=$c;
      var $3=$1;
      var $4=$2;
      var $5=__ZN9b2Contact11GetFixtureAEv($4);
      $fixtureA=$5;
      var $6=$2;
      var $7=__ZN9b2Contact11GetFixtureBEv($6);
      $fixtureB=$7;
      var $8=$fixtureA;
      var $9=__ZN9b2Fixture7GetBodyEv($8);
      $bodyA=$9;
      var $10=$fixtureB;
      var $11=__ZN9b2Fixture7GetBodyEv($10);
      $bodyB=$11;
      var $12=(($3+72)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $16=$2;
      var $17=__ZNK9b2Contact10IsTouchingEv($16);
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=(($3+72)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$2;
      FUNCTION_TABLE[$24]($20, $25);
      __label__ = 4; break;
    case 4: 
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $32=$2;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+12)|0);
      HEAP32[(($38)>>2)]=$34;
      __label__ = 6; break;
    case 6: 
      var $40=$2;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)!=0;
      if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $45=$2;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$2;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+8)|0);
      HEAP32[(($51)>>2)]=$47;
      __label__ = 8; break;
    case 8: 
      var $53=$2;
      var $54=(($3+60)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($53)|0)==(($55)|0);
      if ($56) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $58=$2;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($3+60)|0);
      HEAP32[(($61)>>2)]=$60;
      __label__ = 10; break;
    case 10: 
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $69=$2;
      var $70=(($69+16)|0);
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+16)|0);
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+12)|0);
      HEAP32[(($77)>>2)]=$72;
      __label__ = 12; break;
    case 12: 
      var $79=$2;
      var $80=(($79+16)|0);
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $85=$2;
      var $86=(($85+16)|0);
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$2;
      var $90=(($89+16)|0);
      var $91=(($90+12)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+8)|0);
      HEAP32[(($93)>>2)]=$88;
      __label__ = 14; break;
    case 14: 
      var $95=$2;
      var $96=(($95+16)|0);
      var $97=$bodyA;
      var $98=(($97+112)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($96)|0)==(($99)|0);
      if ($100) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $102=$2;
      var $103=(($102+16)|0);
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$bodyA;
      var $107=(($106+112)|0);
      HEAP32[(($107)>>2)]=$105;
      __label__ = 16; break;
    case 16: 
      var $109=$2;
      var $110=(($109+32)|0);
      var $111=(($110+8)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112)|0)!=0;
      if ($113) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $115=$2;
      var $116=(($115+32)|0);
      var $117=(($116+12)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$2;
      var $120=(($119+32)|0);
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+12)|0);
      HEAP32[(($123)>>2)]=$118;
      __label__ = 18; break;
    case 18: 
      var $125=$2;
      var $126=(($125+32)|0);
      var $127=(($126+12)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128)|0)!=0;
      if ($129) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $131=$2;
      var $132=(($131+32)|0);
      var $133=(($132+8)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$2;
      var $136=(($135+32)|0);
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+8)|0);
      HEAP32[(($139)>>2)]=$134;
      __label__ = 20; break;
    case 20: 
      var $141=$2;
      var $142=(($141+32)|0);
      var $143=$bodyB;
      var $144=(($143+112)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($142)|0)==(($145)|0);
      if ($146) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $148=$2;
      var $149=(($148+32)|0);
      var $150=(($149+12)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$bodyB;
      var $153=(($152+112)|0);
      HEAP32[(($153)>>2)]=$151;
      __label__ = 22; break;
    case 22: 
      var $155=$2;
      var $156=(($3+76)|0);
      var $157=HEAP32[(($156)>>2)];
      __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($155, $157);
      var $158=(($3+64)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=(($159-1)|0);
      HEAP32[(($158)>>2)]=$160;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2ContactManager7CollideEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $c;
      var $fixtureA;
      var $fixtureB;
      var $indexA;
      var $indexB;
      var $bodyA;
      var $bodyB;
      var $cNuke;
      var $cNuke1;
      var $activeA;
      var $activeB;
      var $proxyIdA;
      var $proxyIdB;
      var $overlap;
      var $cNuke2;
      $1=$this;
      var $2=$1;
      var $3=(($2+60)|0);
      var $4=HEAP32[(($3)>>2)];
      $c=$4;
      __label__ = 2; break;
    case 2: 
      var $6=$c;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 20; break; }
    case 3: 
      var $9=$c;
      var $10=__ZN9b2Contact11GetFixtureAEv($9);
      $fixtureA=$10;
      var $11=$c;
      var $12=__ZN9b2Contact11GetFixtureBEv($11);
      $fixtureB=$12;
      var $13=$c;
      var $14=__ZNK9b2Contact14GetChildIndexAEv($13);
      $indexA=$14;
      var $15=$c;
      var $16=__ZNK9b2Contact14GetChildIndexBEv($15);
      $indexB=$16;
      var $17=$fixtureA;
      var $18=__ZN9b2Fixture7GetBodyEv($17);
      $bodyA=$18;
      var $19=$fixtureB;
      var $20=__ZN9b2Fixture7GetBodyEv($19);
      $bodyB=$20;
      var $21=$c;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 8;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $27=$bodyB;
      var $28=$bodyA;
      var $29=__ZNK6b2Body13ShouldCollideEPKS_($27, $28);
      var $30=(($29)&1);
      var $31=(($30)|0)==0;
      if ($31) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $33=$c;
      $cNuke=$33;
      var $34=$cNuke;
      var $35=__ZN9b2Contact7GetNextEv($34);
      $c=$35;
      var $36=$cNuke;
      __ZN16b2ContactManager7DestroyEP9b2Contact($2, $36);
      __label__ = 2; break;
    case 6: 
      var $38=(($2+68)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $42=(($2+68)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$fixtureA;
      var $49=$fixtureB;
      var $50=FUNCTION_TABLE[$47]($43, $48, $49);
      var $51=(($50)&1);
      var $52=(($51)|0)==0;
      if ($52) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $54=$c;
      $cNuke1=$54;
      var $55=$cNuke1;
      var $56=__ZN9b2Contact7GetNextEv($55);
      $c=$56;
      var $57=$cNuke1;
      __ZN16b2ContactManager7DestroyEP9b2Contact($2, $57);
      __label__ = 2; break;
    case 9: 
      var $59=$c;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$61 & -9;
      HEAP32[(($60)>>2)]=$62;
      __label__ = 10; break;
    case 10: 
      var $64=$bodyA;
      var $65=__ZNK6b2Body7IsAwakeEv($64);
      if ($65) { __label__ = 11; break; } else { var $72 = 0;__label__ = 12; break; }
    case 11: 
      var $67=$bodyA;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|0)!=0;
      var $72 = $70;__label__ = 12; break;
    case 12: 
      var $72;
      var $73=(($72)&1);
      $activeA=$73;
      var $74=$bodyB;
      var $75=__ZNK6b2Body7IsAwakeEv($74);
      if ($75) { __label__ = 13; break; } else { var $82 = 0;__label__ = 14; break; }
    case 13: 
      var $77=$bodyB;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|0)!=0;
      var $82 = $80;__label__ = 14; break;
    case 14: 
      var $82;
      var $83=(($82)&1);
      $activeB=$83;
      var $84=$activeA;
      var $85=(($84) & 1);
      var $86=(($85)&1);
      var $87=(($86)|0)==0;
      if ($87) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $89=$activeB;
      var $90=(($89) & 1);
      var $91=(($90)&1);
      var $92=(($91)|0)==0;
      if ($92) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $94=$c;
      var $95=__ZN9b2Contact7GetNextEv($94);
      $c=$95;
      __label__ = 2; break;
    case 17: 
      var $97=$indexA;
      var $98=$fixtureA;
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+$97*28)|0);
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      $proxyIdA=$103;
      var $104=$indexB;
      var $105=$fixtureB;
      var $106=(($105+24)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+$104*28)|0);
      var $109=(($108+24)|0);
      var $110=HEAP32[(($109)>>2)];
      $proxyIdB=$110;
      var $111=(($2)|0);
      var $112=$proxyIdA;
      var $113=$proxyIdB;
      var $114=__ZNK12b2BroadPhase11TestOverlapEii($111, $112, $113);
      var $115=(($114)&1);
      $overlap=$115;
      var $116=$overlap;
      var $117=(($116) & 1);
      var $118=(($117)&1);
      var $119=(($118)|0)==0;
      if ($119) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $121=$c;
      $cNuke2=$121;
      var $122=$cNuke2;
      var $123=__ZN9b2Contact7GetNextEv($122);
      $c=$123;
      var $124=$cNuke2;
      __ZN16b2ContactManager7DestroyEP9b2Contact($2, $124);
      __label__ = 2; break;
    case 19: 
      var $126=$c;
      var $127=(($2+72)|0);
      var $128=HEAP32[(($127)>>2)];
      __ZN9b2Contact6UpdateEP17b2ContactListener($126, $128);
      var $129=$c;
      var $130=__ZN9b2Contact7GetNextEv($129);
      $c=$130;
      __label__ = 2; break;
    case 20: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Body14GetContactListEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+112)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __Z14b2PairLessThanRK6b2PairS1_($pair1, $pair2) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$pair1;
      $3=$pair2;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$3;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0) < (($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$3;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($15)|0)==(($18)|0);
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$3;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)|0) < (($26)|0);
      $1=$27;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $30=$1;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2BroadPhase11TestOverlapEii($this, $proxyIdA, $proxyIdB) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $aabbA;
  var $aabbB;
  $1=$this;
  $2=$proxyIdA;
  $3=$proxyIdB;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=__ZNK13b2DynamicTree10GetFatAABBEi($5, $6);
  $aabbA=$7;
  var $8=(($4)|0);
  var $9=$3;
  var $10=__ZNK13b2DynamicTree10GetFatAABBEi($8, $9);
  $aabbB=$10;
  var $11=$aabbA;
  var $12=$aabbB;
  var $13=__Z13b2TestOverlapRK6b2AABBS1_($11, $12);
  ;
  return $13;
}


function __ZN16b2ContactManager15FindNewContactsEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($3, $2);
  ;
  return;
}


function __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this, $callback) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3=__stackBase__+8;
      var $4;
      var $5;
      var $i;
      var $fatAABB;
      var $i1;
      var $primaryPair;
      var $userDataA;
      var $userDataB;
      var $pair;
      $4=$this;
      $5=$callback;
      var $6=$4;
      var $7=(($6+52)|0);
      HEAP32[(($7)>>2)]=0;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $9=$i;
      var $10=(($6+40)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($9)|0) < (($11)|0);
      if ($12) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $14=$i;
      var $15=(($6+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+($14<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($6+56)|0);
      HEAP32[(($19)>>2)]=$18;
      var $20=(($6+56)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0)==-1;
      if ($22) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      var $25=(($6)|0);
      var $26=(($6+56)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=__ZNK13b2DynamicTree10GetFatAABBEi($25, $27);
      $fatAABB=$28;
      var $29=(($6)|0);
      var $30=$fatAABB;
      __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($29, $6, $30);
      __label__ = 6; break;
    case 6: 
      var $32=$i;
      var $33=(($32+1)|0);
      $i=$33;
      __label__ = 2; break;
    case 7: 
      var $35=(($6+40)|0);
      HEAP32[(($35)>>2)]=0;
      var $36=(($6+44)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($6+44)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($6+52)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($39+$41*12)|0);
      var $43=$1;
      var $44=$2;
      var $45=$3;
      HEAP32[(($1)>>2)]=$37;
      HEAP32[(($2)>>2)]=$42;
      HEAP32[(($3)>>2)]=6;
      var $46=HEAP32[(($1)>>2)];
      var $47=HEAP32[(($2)>>2)];
      __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($46, $47, $3);
      var $48=$1;
      var $49=$2;
      var $50=$3;
      $i1=0;
      __label__ = 8; break;
    case 8: 
      var $52=$i1;
      var $53=(($6+52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($52)|0) < (($54)|0);
      if ($55) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: 
      var $57=(($6+44)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$i1;
      var $60=(($58+$59*12)|0);
      $primaryPair=$60;
      var $61=(($6)|0);
      var $62=$primaryPair;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=__ZNK13b2DynamicTree11GetUserDataEi($61, $64);
      $userDataA=$65;
      var $66=(($6)|0);
      var $67=$primaryPair;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=__ZNK13b2DynamicTree11GetUserDataEi($66, $69);
      $userDataB=$70;
      var $71=$5;
      var $72=$userDataA;
      var $73=$userDataB;
      __ZN16b2ContactManager7AddPairEPvS0_($71, $72, $73);
      var $74=$i1;
      var $75=(($74+1)|0);
      $i1=$75;
      __label__ = 10; break;
    case 10: 
      var $77=$i1;
      var $78=(($6+52)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($77)|0) < (($79)|0);
      if ($80) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $82=(($6+44)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$i1;
      var $85=(($83+$84*12)|0);
      $pair=$85;
      var $86=$pair;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$primaryPair;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($88)|0)!=(($91)|0);
      if ($92) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $94=$pair;
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$primaryPair;
      var $98=(($97+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($96)|0)!=(($99)|0);
      if ($100) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $103=$i1;
      var $104=(($103+1)|0);
      $i1=$104;
      __label__ = 10; break;
    case 15: 
      __label__ = 8; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2ContactManager7AddPairEPvS0_($this, $proxyUserDataA, $proxyUserDataB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $proxyA;
      var $proxyB;
      var $fixtureA;
      var $fixtureB;
      var $indexA;
      var $indexB;
      var $bodyA;
      var $bodyB;
      var $edge;
      var $fA;
      var $fB;
      var $iA;
      var $iB;
      var $c;
      $1=$this;
      $2=$proxyUserDataA;
      $3=$proxyUserDataB;
      var $4=$1;
      var $5=$2;
      var $6=$5;
      $proxyA=$6;
      var $7=$3;
      var $8=$7;
      $proxyB=$8;
      var $9=$proxyA;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $fixtureA=$11;
      var $12=$proxyB;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      $fixtureB=$14;
      var $15=$proxyA;
      var $16=(($15+20)|0);
      var $17=HEAP32[(($16)>>2)];
      $indexA=$17;
      var $18=$proxyB;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      $indexB=$20;
      var $21=$fixtureA;
      var $22=__ZN9b2Fixture7GetBodyEv($21);
      $bodyA=$22;
      var $23=$fixtureB;
      var $24=__ZN9b2Fixture7GetBodyEv($23);
      $bodyB=$24;
      var $25=$bodyA;
      var $26=$bodyB;
      var $27=(($25)|0)==(($26)|0);
      if ($27) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 32; break;
    case 3: 
      var $30=$bodyB;
      var $31=__ZN6b2Body14GetContactListEv($30);
      $edge=$31;
      __label__ = 4; break;
    case 4: 
      var $33=$edge;
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 5; break; } else { __label__ = 18; break; }
    case 5: 
      var $36=$edge;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$bodyA;
      var $40=(($38)|0)==(($39)|0);
      if ($40) { __label__ = 6; break; } else { __label__ = 17; break; }
    case 6: 
      var $42=$edge;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=__ZN9b2Contact11GetFixtureAEv($44);
      $fA=$45;
      var $46=$edge;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=__ZN9b2Contact11GetFixtureBEv($48);
      $fB=$49;
      var $50=$edge;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=__ZNK9b2Contact14GetChildIndexAEv($52);
      $iA=$53;
      var $54=$edge;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=__ZNK9b2Contact14GetChildIndexBEv($56);
      $iB=$57;
      var $58=$fA;
      var $59=$fixtureA;
      var $60=(($58)|0)==(($59)|0);
      if ($60) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $62=$fB;
      var $63=$fixtureB;
      var $64=(($62)|0)==(($63)|0);
      if ($64) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $66=$iA;
      var $67=$indexA;
      var $68=(($66)|0)==(($67)|0);
      if ($68) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $70=$iB;
      var $71=$indexB;
      var $72=(($70)|0)==(($71)|0);
      if ($72) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 32; break;
    case 11: 
      var $75=$fA;
      var $76=$fixtureB;
      var $77=(($75)|0)==(($76)|0);
      if ($77) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $79=$fB;
      var $80=$fixtureA;
      var $81=(($79)|0)==(($80)|0);
      if ($81) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $83=$iA;
      var $84=$indexB;
      var $85=(($83)|0)==(($84)|0);
      if ($85) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $87=$iB;
      var $88=$indexA;
      var $89=(($87)|0)==(($88)|0);
      if ($89) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 32; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $93=$edge;
      var $94=(($93+12)|0);
      var $95=HEAP32[(($94)>>2)];
      $edge=$95;
      __label__ = 4; break;
    case 18: 
      var $97=$bodyB;
      var $98=$bodyA;
      var $99=__ZNK6b2Body13ShouldCollideEPKS_($97, $98);
      var $100=(($99)&1);
      var $101=(($100)|0)==0;
      if ($101) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 32; break;
    case 20: 
      var $104=(($4+68)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0)!=0;
      if ($106) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $108=(($4+68)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109;
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+8)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$fixtureA;
      var $115=$fixtureB;
      var $116=FUNCTION_TABLE[$113]($109, $114, $115);
      var $117=(($116)&1);
      var $118=(($117)|0)==0;
      if ($118) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 32; break;
    case 23: 
      var $121=$fixtureA;
      var $122=$indexA;
      var $123=$fixtureB;
      var $124=$indexB;
      var $125=(($4+76)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($121, $122, $123, $124, $126);
      $c=$127;
      var $128=$c;
      var $129=(($128)|0)==0;
      if ($129) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      __label__ = 32; break;
    case 25: 
      var $132=$c;
      var $133=__ZN9b2Contact11GetFixtureAEv($132);
      $fixtureA=$133;
      var $134=$c;
      var $135=__ZN9b2Contact11GetFixtureBEv($134);
      $fixtureB=$135;
      var $136=$c;
      var $137=__ZNK9b2Contact14GetChildIndexAEv($136);
      $indexA=$137;
      var $138=$c;
      var $139=__ZNK9b2Contact14GetChildIndexBEv($138);
      $indexB=$139;
      var $140=$fixtureA;
      var $141=__ZN9b2Fixture7GetBodyEv($140);
      $bodyA=$141;
      var $142=$fixtureB;
      var $143=__ZN9b2Fixture7GetBodyEv($142);
      $bodyB=$143;
      var $144=$c;
      var $145=(($144+8)|0);
      HEAP32[(($145)>>2)]=0;
      var $146=(($4+60)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$c;
      var $149=(($148+12)|0);
      HEAP32[(($149)>>2)]=$147;
      var $150=(($4+60)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151)|0)!=0;
      if ($152) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $154=$c;
      var $155=(($4+60)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+8)|0);
      HEAP32[(($157)>>2)]=$154;
      __label__ = 27; break;
    case 27: 
      var $159=$c;
      var $160=(($4+60)|0);
      HEAP32[(($160)>>2)]=$159;
      var $161=$c;
      var $162=$c;
      var $163=(($162+16)|0);
      var $164=(($163+4)|0);
      HEAP32[(($164)>>2)]=$161;
      var $165=$bodyB;
      var $166=$c;
      var $167=(($166+16)|0);
      var $168=(($167)|0);
      HEAP32[(($168)>>2)]=$165;
      var $169=$c;
      var $170=(($169+16)|0);
      var $171=(($170+8)|0);
      HEAP32[(($171)>>2)]=0;
      var $172=$bodyA;
      var $173=(($172+112)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$c;
      var $176=(($175+16)|0);
      var $177=(($176+12)|0);
      HEAP32[(($177)>>2)]=$174;
      var $178=$bodyA;
      var $179=(($178+112)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180)|0)!=0;
      if ($181) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $183=$c;
      var $184=(($183+16)|0);
      var $185=$bodyA;
      var $186=(($185+112)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187+8)|0);
      HEAP32[(($188)>>2)]=$184;
      __label__ = 29; break;
    case 29: 
      var $190=$c;
      var $191=(($190+16)|0);
      var $192=$bodyA;
      var $193=(($192+112)|0);
      HEAP32[(($193)>>2)]=$191;
      var $194=$c;
      var $195=$c;
      var $196=(($195+32)|0);
      var $197=(($196+4)|0);
      HEAP32[(($197)>>2)]=$194;
      var $198=$bodyA;
      var $199=$c;
      var $200=(($199+32)|0);
      var $201=(($200)|0);
      HEAP32[(($201)>>2)]=$198;
      var $202=$c;
      var $203=(($202+32)|0);
      var $204=(($203+8)|0);
      HEAP32[(($204)>>2)]=0;
      var $205=$bodyB;
      var $206=(($205+112)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=$c;
      var $209=(($208+32)|0);
      var $210=(($209+12)|0);
      HEAP32[(($210)>>2)]=$207;
      var $211=$bodyB;
      var $212=(($211+112)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213)|0)!=0;
      if ($214) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $216=$c;
      var $217=(($216+32)|0);
      var $218=$bodyB;
      var $219=(($218+112)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220+8)|0);
      HEAP32[(($221)>>2)]=$217;
      __label__ = 31; break;
    case 31: 
      var $223=$c;
      var $224=(($223+32)|0);
      var $225=$bodyB;
      var $226=(($225+112)|0);
      HEAP32[(($226)>>2)]=$224;
      var $227=$bodyA;
      __ZN6b2Body8SetAwakeEb($227, 1);
      var $228=$bodyB;
      __ZN6b2Body8SetAwakeEb($228, 1);
      var $229=(($4+64)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($230+1)|0);
      HEAP32[(($229)>>2)]=$231;
      __label__ = 32; break;
    case 32: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree10GetFatAABBEi($this, $proxyId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|0) < (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str110)|0), 159, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi)|0), ((STRING_TABLE.__str2111)|0));
      __label__ = 5; break;
    case 5: 
      var $14=$2;
      var $15=(($3+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$14*36)|0);
      var $18=(($17)|0);
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree11GetUserDataEi($this, $proxyId) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|0) < (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str110)|0), 153, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi)|0), ((STRING_TABLE.__str2111)|0));
      __label__ = 5; break;
    case 5: 
      var $14=$2;
      var $15=(($3+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$14*36)|0);
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this, $callback, $aabb) {
  var __stackBase__  = STACKTOP; STACKTOP += 1036; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $stack=__stackBase__;
      var $4;
      var $5;
      var $nodeId;
      var $node;
      var $proceed;
      var $6;
      $1=$this;
      $2=$callback;
      $3=$aabb;
      var $7=$1;
      __ZN15b2GrowableStackIiLi256EEC1Ev($stack);
      var $8=(($7)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      __label__ = 3; break;
    case 3: 
      var $11 = (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE8GetCountEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $13=(($11)|0) > 0;
      if ($13) { __label__ = 5; break; } else { __label__ = 22; break; }
    case 5: 
      var $15 = (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE3PopEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      $nodeId=$15;
      var $17=$nodeId;
      var $18=(($17)|0)==-1;
      if ($18) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      __label__ = 3; break;
    case 8: 
      var $21=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $22=$21.f0;
      $4=$22;
      var $23=$21.f1;
      $5=$23;
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EED1Ev($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 9: 
      var $25=(($7+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$nodeId;
      var $28=(($26+$27*36)|0);
      $node=$28;
      var $29=$node;
      var $30=(($29)|0);
      var $31=$3;
      var $32 = (function() { try { __THREW__ = false; return __Z13b2TestOverlapRK6b2AABBS1_($30, $31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 8; break; }
    case 10: 
      if ($32) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: 
      var $35=$node;
      var $36 = (function() { try { __THREW__ = false; return __ZNK10b2TreeNode6IsLeafEv($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 12: 
      if ($36) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $39=$2;
      var $40=$nodeId;
      var $41 = (function() { try { __THREW__ = false; return __ZN12b2BroadPhase13QueryCallbackEi($39, $40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 8; break; }
    case 14: 
      var $43=(($41)&1);
      $proceed=$43;
      var $44=$proceed;
      var $45=(($44) & 1);
      var $46=(($45)&1);
      var $47=(($46)|0)==0;
      if ($47) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $6=1;
      __label__ = 23; break;
    case 16: 
      __label__ = 20; break;
    case 17: 
      var $51=$node;
      var $52=(($51+24)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 18; break; } else { __label__ = 8; break; }
    case 18: 
      var $54=$node;
      var $55=(($54+28)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 19; break; } else { __label__ = 8; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 3; break;
    case 22: 
      $6=0;
      __label__ = 23; break;
    case 23: 
      __ZN15b2GrowableStackIiLi256EED1Ev($stack);
      var $cleanup_dest=$6;
      if ((($cleanup_dest)|0) == 0 || (($cleanup_dest)|0) == 1) {
        __label__ = 24; break;
      }
      else {
      __label__ = 28; break;
      }
      
    case 24: 
      STACKTOP = __stackBase__;
      return;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $64=$4;
      var $65=$4;
      var $66=$5;
      var $67=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $65, tempValue);
      var $68=($67.f1 = $66, $67);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 27: 
      var $70=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    case 28: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
  var __stackBase__  = STACKTOP; STACKTOP += 192; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3=__stackBase__+8;
      var $4=__stackBase__+12;
      var $5=__stackBase__+16;
      var $__t_i5=__stackBase__+20;
      var $6=__stackBase__+32;
      var $7=__stackBase__+36;
      var $8=__stackBase__+40;
      var $9=__stackBase__+44;
      var $10=__stackBase__+48;
      var $__t_i4=__stackBase__+52;
      var $11=__stackBase__+64;
      var $12=__stackBase__+68;
      var $13=__stackBase__+72;
      var $14=__stackBase__+76;
      var $15=__stackBase__+80;
      var $__t_i3=__stackBase__+84;
      var $16=__stackBase__+96;
      var $17=__stackBase__+100;
      var $18=__stackBase__+104;
      var $19=__stackBase__+108;
      var $20=__stackBase__+112;
      var $__t_i2=__stackBase__+116;
      var $21=__stackBase__+128;
      var $22=__stackBase__+132;
      var $23=__stackBase__+136;
      var $24=__stackBase__+140;
      var $25=__stackBase__+144;
      var $__t_i1=__stackBase__+148;
      var $26=__stackBase__+160;
      var $27=__stackBase__+164;
      var $28=__stackBase__+168;
      var $29=__stackBase__+172;
      var $30=__stackBase__+176;
      var $__t_i=__stackBase__+180;
      var $31;
      var $32;
      var $33;
      var $__limit;
      var $__len;
      var $__m;
      var $__lm1;
      var $__n_swaps;
      var $__delta;
      var $__i;
      var $__j;
      var $__fs;
      $31=$__first;
      $32=$__last;
      $33=$__comp;
      $__limit=30;
      __label__ = 2; break;
    case 2: 
      __label__ = 3; break;
    case 3: 
      var $36=$32;
      var $37=$31;
      var $38=$36;
      var $39=$37;
      var $40=(($38-$39)|0);
      var $41=(((($40)|0)/12)|0);
      $__len=$41;
      var $42=$__len;
      if ((($42)|0) == 0 || (($42)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($42)|0) == 2) {
        __label__ = 5; break;
      }
      else if ((($42)|0) == 3) {
        __label__ = 8; break;
      }
      else if ((($42)|0) == 4) {
        __label__ = 9; break;
      }
      else if ((($42)|0) == 5) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 4: 
      __label__ = 74; break;
    case 5: 
      var $45=$33;
      var $46=HEAP32[(($45)>>2)];
      var $47=$32;
      var $48=(($47-12)|0);
      $32=$48;
      var $49=$31;
      var $50=FUNCTION_TABLE[$46]($48, $49);
      if ($50) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $52=$31;
      var $53=$32;
      var $54=$29;
      var $55=$30;
      var $56=$__t_i;
      HEAP32[(($29)>>2)]=$52;
      HEAP32[(($30)>>2)]=$53;
      var $57=HEAP32[(($29)>>2)];
      var $58=$28;
      HEAP32[(($28)>>2)]=$57;
      var $59=HEAP32[(($28)>>2)];
      var $60=$28;
      var $61=$__t_i;
      var $62=$59;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[(($61+4)>>2)]=HEAP32[(($62+4)>>2)];HEAP32[(($61+8)>>2)]=HEAP32[(($62+8)>>2)];
      var $63=HEAP32[(($29)>>2)];
      var $64=HEAP32[(($30)>>2)];
      var $65=$26;
      HEAP32[(($26)>>2)]=$64;
      var $66=HEAP32[(($26)>>2)];
      var $67=$26;
      var $68=$63;
      var $69=$66;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($68)>>2)]=HEAP32[(($69)>>2)];HEAP32[(($68+4)>>2)]=HEAP32[(($69+4)>>2)];HEAP32[(($68+8)>>2)]=HEAP32[(($69+8)>>2)];
      var $70=HEAP32[(($30)>>2)];
      var $71=$27;
      HEAP32[(($27)>>2)]=$__t_i;
      var $72=HEAP32[(($27)>>2)];
      var $73=$27;
      var $74=$70;
      var $75=$72;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[(($74+4)>>2)]=HEAP32[(($75+4)>>2)];HEAP32[(($74+8)>>2)]=HEAP32[(($75+8)>>2)];
      var $76=$29;
      var $77=$30;
      var $78=$__t_i;
      __label__ = 7; break;
    case 7: 
      __label__ = 74; break;
    case 8: 
      var $81=$31;
      var $82=$31;
      var $83=(($82+12)|0);
      var $84=$32;
      var $85=(($84-12)|0);
      $32=$85;
      var $86=$33;
      var $87=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($81, $83, $85, $86);
      __label__ = 74; break;
    case 9: 
      var $89=$31;
      var $90=$31;
      var $91=(($90+12)|0);
      var $92=$31;
      var $93=(($92+24)|0);
      var $94=$32;
      var $95=(($94-12)|0);
      $32=$95;
      var $96=$33;
      var $97=__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($89, $91, $93, $95, $96);
      __label__ = 74; break;
    case 10: 
      var $99=$31;
      var $100=$31;
      var $101=(($100+12)|0);
      var $102=$31;
      var $103=(($102+24)|0);
      var $104=$31;
      var $105=(($104+36)|0);
      var $106=$32;
      var $107=(($106-12)|0);
      $32=$107;
      var $108=$33;
      var $109=__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($99, $101, $103, $105, $107, $108);
      __label__ = 74; break;
    case 11: 
      var $111=$__len;
      var $112=(($111)|0) <= 30;
      if ($112) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $114=$31;
      var $115=$32;
      var $116=$33;
      __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($114, $115, $116);
      __label__ = 74; break;
    case 13: 
      var $118=$31;
      $__m=$118;
      var $119=$32;
      $__lm1=$119;
      var $120=$__lm1;
      var $121=(($120-12)|0);
      $__lm1=$121;
      var $122=$__len;
      var $123=(($122)|0) >= 1000;
      if ($123) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $125=$__len;
      var $126=(((($125)|0)/2)|0);
      $__delta=$126;
      var $127=$__delta;
      var $128=$__m;
      var $129=(($128+$127*12)|0);
      $__m=$129;
      var $130=$__delta;
      var $131=(((($130)|0)/2)|0);
      $__delta=$131;
      var $132=$31;
      var $133=$31;
      var $134=$__delta;
      var $135=(($133+$134*12)|0);
      var $136=$__m;
      var $137=$__m;
      var $138=$__delta;
      var $139=(($137+$138*12)|0);
      var $140=$__lm1;
      var $141=$33;
      var $142=__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($132, $135, $136, $139, $140, $141);
      $__n_swaps=$142;
      __label__ = 16; break;
    case 15: 
      var $144=$__len;
      var $145=(((($144)|0)/2)|0);
      $__delta=$145;
      var $146=$__delta;
      var $147=$__m;
      var $148=(($147+$146*12)|0);
      $__m=$148;
      var $149=$31;
      var $150=$__m;
      var $151=$__lm1;
      var $152=$33;
      var $153=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($149, $150, $151, $152);
      $__n_swaps=$153;
      __label__ = 16; break;
    case 16: 
      var $155=$31;
      $__i=$155;
      var $156=$__lm1;
      $__j=$156;
      var $157=$33;
      var $158=HEAP32[(($157)>>2)];
      var $159=$__i;
      var $160=$__m;
      var $161=FUNCTION_TABLE[$158]($159, $160);
      if ($161) { __label__ = 44; break; } else { __label__ = 17; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $164=$__i;
      var $165=$__j;
      var $166=(($165-12)|0);
      $__j=$166;
      var $167=(($164)|0)==(($166)|0);
      if ($167) { __label__ = 19; break; } else { __label__ = 40; break; }
    case 19: 
      var $169=$__i;
      var $170=(($169+12)|0);
      $__i=$170;
      var $171=$32;
      $__j=$171;
      var $172=$33;
      var $173=HEAP32[(($172)>>2)];
      var $174=$31;
      var $175=$__j;
      var $176=(($175-12)|0);
      $__j=$176;
      var $177=FUNCTION_TABLE[$173]($174, $176);
      if ($177) { __label__ = 27; break; } else { __label__ = 20; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $180=$__i;
      var $181=$__j;
      var $182=(($180)|0)==(($181)|0);
      if ($182) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 74; break;
    case 23: 
      var $185=$33;
      var $186=HEAP32[(($185)>>2)];
      var $187=$31;
      var $188=$__i;
      var $189=FUNCTION_TABLE[$186]($187, $188);
      if ($189) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $191=$__i;
      var $192=$__j;
      var $193=$24;
      var $194=$25;
      var $195=$__t_i1;
      HEAP32[(($24)>>2)]=$191;
      HEAP32[(($25)>>2)]=$192;
      var $196=HEAP32[(($24)>>2)];
      var $197=$23;
      HEAP32[(($23)>>2)]=$196;
      var $198=HEAP32[(($23)>>2)];
      var $199=$23;
      var $200=$__t_i1;
      var $201=$198;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($200)>>2)]=HEAP32[(($201)>>2)];HEAP32[(($200+4)>>2)]=HEAP32[(($201+4)>>2)];HEAP32[(($200+8)>>2)]=HEAP32[(($201+8)>>2)];
      var $202=HEAP32[(($24)>>2)];
      var $203=HEAP32[(($25)>>2)];
      var $204=$21;
      HEAP32[(($21)>>2)]=$203;
      var $205=HEAP32[(($21)>>2)];
      var $206=$21;
      var $207=$202;
      var $208=$205;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($207)>>2)]=HEAP32[(($208)>>2)];HEAP32[(($207+4)>>2)]=HEAP32[(($208+4)>>2)];HEAP32[(($207+8)>>2)]=HEAP32[(($208+8)>>2)];
      var $209=HEAP32[(($25)>>2)];
      var $210=$22;
      HEAP32[(($22)>>2)]=$__t_i1;
      var $211=HEAP32[(($22)>>2)];
      var $212=$22;
      var $213=$209;
      var $214=$211;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($213)>>2)]=HEAP32[(($214)>>2)];HEAP32[(($213+4)>>2)]=HEAP32[(($214+4)>>2)];HEAP32[(($213+8)>>2)]=HEAP32[(($214+8)>>2)];
      var $215=$24;
      var $216=$25;
      var $217=$__t_i1;
      var $218=$__n_swaps;
      var $219=(($218+1)|0);
      $__n_swaps=$219;
      var $220=$__i;
      var $221=(($220+12)|0);
      $__i=$221;
      __label__ = 26; break;
    case 25: 
      var $223=$__i;
      var $224=(($223+12)|0);
      $__i=$224;
      __label__ = 21; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $227=$__i;
      var $228=$__j;
      var $229=(($227)|0)==(($228)|0);
      if ($229) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 74; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $234=$33;
      var $235=HEAP32[(($234)>>2)];
      var $236=$31;
      var $237=$__i;
      var $238=FUNCTION_TABLE[$235]($236, $237);
      var $239=$238 ^ 1;
      if ($239) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $241=$__i;
      var $242=(($241+12)|0);
      $__i=$242;
      __label__ = 31; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $245=$33;
      var $246=HEAP32[(($245)>>2)];
      var $247=$31;
      var $248=$__j;
      var $249=(($248-12)|0);
      $__j=$249;
      var $250=FUNCTION_TABLE[$246]($247, $249);
      if ($250) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      __label__ = 34; break;
    case 36: 
      var $253=$__i;
      var $254=$__j;
      var $255=(($253)>>>0) >= (($254)>>>0);
      if ($255) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      __label__ = 39; break;
    case 38: 
      var $258=$__i;
      var $259=$__j;
      var $260=$19;
      var $261=$20;
      var $262=$__t_i2;
      HEAP32[(($19)>>2)]=$258;
      HEAP32[(($20)>>2)]=$259;
      var $263=HEAP32[(($19)>>2)];
      var $264=$18;
      HEAP32[(($18)>>2)]=$263;
      var $265=HEAP32[(($18)>>2)];
      var $266=$18;
      var $267=$__t_i2;
      var $268=$265;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($267)>>2)]=HEAP32[(($268)>>2)];HEAP32[(($267+4)>>2)]=HEAP32[(($268+4)>>2)];HEAP32[(($267+8)>>2)]=HEAP32[(($268+8)>>2)];
      var $269=HEAP32[(($19)>>2)];
      var $270=HEAP32[(($20)>>2)];
      var $271=$16;
      HEAP32[(($16)>>2)]=$270;
      var $272=HEAP32[(($16)>>2)];
      var $273=$16;
      var $274=$269;
      var $275=$272;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($274)>>2)]=HEAP32[(($275)>>2)];HEAP32[(($274+4)>>2)]=HEAP32[(($275+4)>>2)];HEAP32[(($274+8)>>2)]=HEAP32[(($275+8)>>2)];
      var $276=HEAP32[(($20)>>2)];
      var $277=$17;
      HEAP32[(($17)>>2)]=$__t_i2;
      var $278=HEAP32[(($17)>>2)];
      var $279=$17;
      var $280=$276;
      var $281=$278;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($280)>>2)]=HEAP32[(($281)>>2)];HEAP32[(($280+4)>>2)]=HEAP32[(($281+4)>>2)];HEAP32[(($280+8)>>2)]=HEAP32[(($281+8)>>2)];
      var $282=$19;
      var $283=$20;
      var $284=$__t_i2;
      var $285=$__n_swaps;
      var $286=(($285+1)|0);
      $__n_swaps=$286;
      var $287=$__i;
      var $288=(($287+12)|0);
      $__i=$288;
      __label__ = 30; break;
    case 39: 
      var $290=$__i;
      $31=$290;
      __label__ = 3; break;
    case 40: 
      var $292=$33;
      var $293=HEAP32[(($292)>>2)];
      var $294=$__j;
      var $295=$__m;
      var $296=FUNCTION_TABLE[$293]($294, $295);
      if ($296) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $298=$__i;
      var $299=$__j;
      var $300=$14;
      var $301=$15;
      var $302=$__t_i3;
      HEAP32[(($14)>>2)]=$298;
      HEAP32[(($15)>>2)]=$299;
      var $303=HEAP32[(($14)>>2)];
      var $304=$13;
      HEAP32[(($13)>>2)]=$303;
      var $305=HEAP32[(($13)>>2)];
      var $306=$13;
      var $307=$__t_i3;
      var $308=$305;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($307)>>2)]=HEAP32[(($308)>>2)];HEAP32[(($307+4)>>2)]=HEAP32[(($308+4)>>2)];HEAP32[(($307+8)>>2)]=HEAP32[(($308+8)>>2)];
      var $309=HEAP32[(($14)>>2)];
      var $310=HEAP32[(($15)>>2)];
      var $311=$11;
      HEAP32[(($11)>>2)]=$310;
      var $312=HEAP32[(($11)>>2)];
      var $313=$11;
      var $314=$309;
      var $315=$312;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($314)>>2)]=HEAP32[(($315)>>2)];HEAP32[(($314+4)>>2)]=HEAP32[(($315+4)>>2)];HEAP32[(($314+8)>>2)]=HEAP32[(($315+8)>>2)];
      var $316=HEAP32[(($15)>>2)];
      var $317=$12;
      HEAP32[(($12)>>2)]=$__t_i3;
      var $318=HEAP32[(($12)>>2)];
      var $319=$12;
      var $320=$316;
      var $321=$318;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($320)>>2)]=HEAP32[(($321)>>2)];HEAP32[(($320+4)>>2)]=HEAP32[(($321+4)>>2)];HEAP32[(($320+8)>>2)]=HEAP32[(($321+8)>>2)];
      var $322=$14;
      var $323=$15;
      var $324=$__t_i3;
      var $325=$__n_swaps;
      var $326=(($325+1)|0);
      $__n_swaps=$326;
      __label__ = 43; break;
    case 42: 
      __label__ = 18; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $330=$__i;
      var $331=(($330+12)|0);
      $__i=$331;
      var $332=$__i;
      var $333=$__j;
      var $334=(($332)>>>0) < (($333)>>>0);
      if ($334) { __label__ = 45; break; } else { __label__ = 58; break; }
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $338=$33;
      var $339=HEAP32[(($338)>>2)];
      var $340=$__i;
      var $341=$__m;
      var $342=FUNCTION_TABLE[$339]($340, $341);
      if ($342) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $344=$__i;
      var $345=(($344+12)|0);
      $__i=$345;
      __label__ = 47; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $348=$33;
      var $349=HEAP32[(($348)>>2)];
      var $350=$__j;
      var $351=(($350-12)|0);
      $__j=$351;
      var $352=$__m;
      var $353=FUNCTION_TABLE[$349]($351, $352);
      var $354=$353 ^ 1;
      if ($354) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      __label__ = 50; break;
    case 52: 
      var $357=$__i;
      var $358=$__j;
      var $359=(($357)>>>0) > (($358)>>>0);
      if ($359) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      __label__ = 57; break;
    case 54: 
      var $362=$__i;
      var $363=$__j;
      var $364=$9;
      var $365=$10;
      var $366=$__t_i4;
      HEAP32[(($9)>>2)]=$362;
      HEAP32[(($10)>>2)]=$363;
      var $367=HEAP32[(($9)>>2)];
      var $368=$8;
      HEAP32[(($8)>>2)]=$367;
      var $369=HEAP32[(($8)>>2)];
      var $370=$8;
      var $371=$__t_i4;
      var $372=$369;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($371)>>2)]=HEAP32[(($372)>>2)];HEAP32[(($371+4)>>2)]=HEAP32[(($372+4)>>2)];HEAP32[(($371+8)>>2)]=HEAP32[(($372+8)>>2)];
      var $373=HEAP32[(($9)>>2)];
      var $374=HEAP32[(($10)>>2)];
      var $375=$6;
      HEAP32[(($6)>>2)]=$374;
      var $376=HEAP32[(($6)>>2)];
      var $377=$6;
      var $378=$373;
      var $379=$376;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($378)>>2)]=HEAP32[(($379)>>2)];HEAP32[(($378+4)>>2)]=HEAP32[(($379+4)>>2)];HEAP32[(($378+8)>>2)]=HEAP32[(($379+8)>>2)];
      var $380=HEAP32[(($10)>>2)];
      var $381=$7;
      HEAP32[(($7)>>2)]=$__t_i4;
      var $382=HEAP32[(($7)>>2)];
      var $383=$7;
      var $384=$380;
      var $385=$382;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($384)>>2)]=HEAP32[(($385)>>2)];HEAP32[(($384+4)>>2)]=HEAP32[(($385+4)>>2)];HEAP32[(($384+8)>>2)]=HEAP32[(($385+8)>>2)];
      var $386=$9;
      var $387=$10;
      var $388=$__t_i4;
      var $389=$__n_swaps;
      var $390=(($389+1)|0);
      $__n_swaps=$390;
      var $391=$__m;
      var $392=$__i;
      var $393=(($391)|0)==(($392)|0);
      if ($393) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $395=$__j;
      $__m=$395;
      __label__ = 56; break;
    case 56: 
      var $397=$__i;
      var $398=(($397+12)|0);
      $__i=$398;
      __label__ = 46; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $401=$__i;
      var $402=$__m;
      var $403=(($401)|0)!=(($402)|0);
      if ($403) { __label__ = 59; break; } else { __label__ = 61; break; }
    case 59: 
      var $405=$33;
      var $406=HEAP32[(($405)>>2)];
      var $407=$__m;
      var $408=$__i;
      var $409=FUNCTION_TABLE[$406]($407, $408);
      if ($409) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $411=$__i;
      var $412=$__m;
      var $413=$4;
      var $414=$5;
      var $415=$__t_i5;
      HEAP32[(($4)>>2)]=$411;
      HEAP32[(($5)>>2)]=$412;
      var $416=HEAP32[(($4)>>2)];
      var $417=$3;
      HEAP32[(($3)>>2)]=$416;
      var $418=HEAP32[(($3)>>2)];
      var $419=$3;
      var $420=$__t_i5;
      var $421=$418;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($420)>>2)]=HEAP32[(($421)>>2)];HEAP32[(($420+4)>>2)]=HEAP32[(($421+4)>>2)];HEAP32[(($420+8)>>2)]=HEAP32[(($421+8)>>2)];
      var $422=HEAP32[(($4)>>2)];
      var $423=HEAP32[(($5)>>2)];
      var $424=$1;
      HEAP32[(($1)>>2)]=$423;
      var $425=HEAP32[(($1)>>2)];
      var $426=$1;
      var $427=$422;
      var $428=$425;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($427)>>2)]=HEAP32[(($428)>>2)];HEAP32[(($427+4)>>2)]=HEAP32[(($428+4)>>2)];HEAP32[(($427+8)>>2)]=HEAP32[(($428+8)>>2)];
      var $429=HEAP32[(($5)>>2)];
      var $430=$2;
      HEAP32[(($2)>>2)]=$__t_i5;
      var $431=HEAP32[(($2)>>2)];
      var $432=$2;
      var $433=$429;
      var $434=$431;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($433)>>2)]=HEAP32[(($434)>>2)];HEAP32[(($433+4)>>2)]=HEAP32[(($434+4)>>2)];HEAP32[(($433+8)>>2)]=HEAP32[(($434+8)>>2)];
      var $435=$4;
      var $436=$5;
      var $437=$__t_i5;
      var $438=$__n_swaps;
      var $439=(($438+1)|0);
      $__n_swaps=$439;
      __label__ = 61; break;
    case 61: 
      var $441=$__n_swaps;
      var $442=(($441)|0)==0;
      if ($442) { __label__ = 62; break; } else { __label__ = 70; break; }
    case 62: 
      var $444=$31;
      var $445=$__i;
      var $446=$33;
      var $447=__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($444, $445, $446);
      var $448=(($447)&1);
      $__fs=$448;
      var $449=$__i;
      var $450=(($449+12)|0);
      var $451=$32;
      var $452=$33;
      var $453=__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($450, $451, $452);
      if ($453) { __label__ = 63; break; } else { __label__ = 66; break; }
    case 63: 
      var $455=$__fs;
      var $456=(($455) & 1);
      if ($456) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      __label__ = 74; break;
    case 65: 
      var $459=$__i;
      $32=$459;
      __label__ = 2; break;
    case 66: 
      var $461=$__fs;
      var $462=(($461) & 1);
      if ($462) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $464=$__i;
      var $465=(($464+12)|0);
      $__i=$465;
      $31=$465;
      __label__ = 2; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $469=$__i;
      var $470=$31;
      var $471=$469;
      var $472=$470;
      var $473=(($471-$472)|0);
      var $474=(((($473)|0)/12)|0);
      var $475=$32;
      var $476=$__i;
      var $477=$475;
      var $478=$476;
      var $479=(($477-$478)|0);
      var $480=(((($479)|0)/12)|0);
      var $481=(($474)|0) < (($480)|0);
      if ($481) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $483=$31;
      var $484=$__i;
      var $485=$33;
      __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($483, $484, $485);
      var $486=$__i;
      var $487=(($486+12)|0);
      $__i=$487;
      $31=$487;
      __label__ = 73; break;
    case 72: 
      var $489=$__i;
      var $490=(($489+12)|0);
      var $491=$32;
      var $492=$33;
      __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($490, $491, $492);
      var $493=$__i;
      $32=$493;
      __label__ = 73; break;
    case 73: 
      __label__ = 2; break;
    case 74: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x, $__y, $__z, $__c) {
  var __stackBase__  = STACKTOP; STACKTOP += 160; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3=__stackBase__+8;
      var $4=__stackBase__+12;
      var $5=__stackBase__+16;
      var $__t_i4=__stackBase__+20;
      var $6=__stackBase__+32;
      var $7=__stackBase__+36;
      var $8=__stackBase__+40;
      var $9=__stackBase__+44;
      var $10=__stackBase__+48;
      var $__t_i3=__stackBase__+52;
      var $11=__stackBase__+64;
      var $12=__stackBase__+68;
      var $13=__stackBase__+72;
      var $14=__stackBase__+76;
      var $15=__stackBase__+80;
      var $__t_i2=__stackBase__+84;
      var $16=__stackBase__+96;
      var $17=__stackBase__+100;
      var $18=__stackBase__+104;
      var $19=__stackBase__+108;
      var $20=__stackBase__+112;
      var $__t_i1=__stackBase__+116;
      var $21=__stackBase__+128;
      var $22=__stackBase__+132;
      var $23=__stackBase__+136;
      var $24=__stackBase__+140;
      var $25=__stackBase__+144;
      var $__t_i=__stackBase__+148;
      var $26;
      var $27;
      var $28;
      var $29;
      var $30;
      var $__r;
      $27=$__x;
      $28=$__y;
      $29=$__z;
      $30=$__c;
      $__r=0;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$28;
      var $34=$27;
      var $35=FUNCTION_TABLE[$32]($33, $34);
      if ($35) { __label__ = 7; break; } else { __label__ = 2; break; }
    case 2: 
      var $37=$30;
      var $38=HEAP32[(($37)>>2)];
      var $39=$29;
      var $40=$28;
      var $41=FUNCTION_TABLE[$38]($39, $40);
      if ($41) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $43=$__r;
      $26=$43;
      __label__ = 12; break;
    case 4: 
      var $45=$28;
      var $46=$29;
      var $47=$24;
      var $48=$25;
      var $49=$__t_i;
      HEAP32[(($24)>>2)]=$45;
      HEAP32[(($25)>>2)]=$46;
      var $50=HEAP32[(($24)>>2)];
      var $51=$23;
      HEAP32[(($23)>>2)]=$50;
      var $52=HEAP32[(($23)>>2)];
      var $53=$23;
      var $54=$__t_i;
      var $55=$52;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[(($54+4)>>2)]=HEAP32[(($55+4)>>2)];HEAP32[(($54+8)>>2)]=HEAP32[(($55+8)>>2)];
      var $56=HEAP32[(($24)>>2)];
      var $57=HEAP32[(($25)>>2)];
      var $58=$21;
      HEAP32[(($21)>>2)]=$57;
      var $59=HEAP32[(($21)>>2)];
      var $60=$21;
      var $61=$56;
      var $62=$59;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[(($61+4)>>2)]=HEAP32[(($62+4)>>2)];HEAP32[(($61+8)>>2)]=HEAP32[(($62+8)>>2)];
      var $63=HEAP32[(($25)>>2)];
      var $64=$22;
      HEAP32[(($22)>>2)]=$__t_i;
      var $65=HEAP32[(($22)>>2)];
      var $66=$22;
      var $67=$63;
      var $68=$65;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($67)>>2)]=HEAP32[(($68)>>2)];HEAP32[(($67+4)>>2)]=HEAP32[(($68+4)>>2)];HEAP32[(($67+8)>>2)]=HEAP32[(($68+8)>>2)];
      var $69=$24;
      var $70=$25;
      var $71=$__t_i;
      $__r=1;
      var $72=$30;
      var $73=HEAP32[(($72)>>2)];
      var $74=$28;
      var $75=$27;
      var $76=FUNCTION_TABLE[$73]($74, $75);
      if ($76) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $78=$27;
      var $79=$28;
      var $80=$14;
      var $81=$15;
      var $82=$__t_i2;
      HEAP32[(($14)>>2)]=$78;
      HEAP32[(($15)>>2)]=$79;
      var $83=HEAP32[(($14)>>2)];
      var $84=$13;
      HEAP32[(($13)>>2)]=$83;
      var $85=HEAP32[(($13)>>2)];
      var $86=$13;
      var $87=$__t_i2;
      var $88=$85;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[(($87+4)>>2)]=HEAP32[(($88+4)>>2)];HEAP32[(($87+8)>>2)]=HEAP32[(($88+8)>>2)];
      var $89=HEAP32[(($14)>>2)];
      var $90=HEAP32[(($15)>>2)];
      var $91=$11;
      HEAP32[(($11)>>2)]=$90;
      var $92=HEAP32[(($11)>>2)];
      var $93=$11;
      var $94=$89;
      var $95=$92;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[(($94+4)>>2)]=HEAP32[(($95+4)>>2)];HEAP32[(($94+8)>>2)]=HEAP32[(($95+8)>>2)];
      var $96=HEAP32[(($15)>>2)];
      var $97=$12;
      HEAP32[(($12)>>2)]=$__t_i2;
      var $98=HEAP32[(($12)>>2)];
      var $99=$12;
      var $100=$96;
      var $101=$98;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[(($100+4)>>2)]=HEAP32[(($101+4)>>2)];HEAP32[(($100+8)>>2)]=HEAP32[(($101+8)>>2)];
      var $102=$14;
      var $103=$15;
      var $104=$__t_i2;
      $__r=2;
      __label__ = 6; break;
    case 6: 
      var $106=$__r;
      $26=$106;
      __label__ = 12; break;
    case 7: 
      var $108=$30;
      var $109=HEAP32[(($108)>>2)];
      var $110=$29;
      var $111=$28;
      var $112=FUNCTION_TABLE[$109]($110, $111);
      if ($112) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $114=$27;
      var $115=$29;
      var $116=$4;
      var $117=$5;
      var $118=$__t_i4;
      HEAP32[(($4)>>2)]=$114;
      HEAP32[(($5)>>2)]=$115;
      var $119=HEAP32[(($4)>>2)];
      var $120=$3;
      HEAP32[(($3)>>2)]=$119;
      var $121=HEAP32[(($3)>>2)];
      var $122=$3;
      var $123=$__t_i4;
      var $124=$121;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[(($123+4)>>2)]=HEAP32[(($124+4)>>2)];HEAP32[(($123+8)>>2)]=HEAP32[(($124+8)>>2)];
      var $125=HEAP32[(($4)>>2)];
      var $126=HEAP32[(($5)>>2)];
      var $127=$1;
      HEAP32[(($1)>>2)]=$126;
      var $128=HEAP32[(($1)>>2)];
      var $129=$1;
      var $130=$125;
      var $131=$128;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[(($130+4)>>2)]=HEAP32[(($131+4)>>2)];HEAP32[(($130+8)>>2)]=HEAP32[(($131+8)>>2)];
      var $132=HEAP32[(($5)>>2)];
      var $133=$2;
      HEAP32[(($2)>>2)]=$__t_i4;
      var $134=HEAP32[(($2)>>2)];
      var $135=$2;
      var $136=$132;
      var $137=$134;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[(($136+4)>>2)]=HEAP32[(($137+4)>>2)];HEAP32[(($136+8)>>2)]=HEAP32[(($137+8)>>2)];
      var $138=$4;
      var $139=$5;
      var $140=$__t_i4;
      $__r=1;
      var $141=$__r;
      $26=$141;
      __label__ = 12; break;
    case 9: 
      var $143=$27;
      var $144=$28;
      var $145=$9;
      var $146=$10;
      var $147=$__t_i3;
      HEAP32[(($9)>>2)]=$143;
      HEAP32[(($10)>>2)]=$144;
      var $148=HEAP32[(($9)>>2)];
      var $149=$8;
      HEAP32[(($8)>>2)]=$148;
      var $150=HEAP32[(($8)>>2)];
      var $151=$8;
      var $152=$__t_i3;
      var $153=$150;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[(($152+4)>>2)]=HEAP32[(($153+4)>>2)];HEAP32[(($152+8)>>2)]=HEAP32[(($153+8)>>2)];
      var $154=HEAP32[(($9)>>2)];
      var $155=HEAP32[(($10)>>2)];
      var $156=$6;
      HEAP32[(($6)>>2)]=$155;
      var $157=HEAP32[(($6)>>2)];
      var $158=$6;
      var $159=$154;
      var $160=$157;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($159)>>2)]=HEAP32[(($160)>>2)];HEAP32[(($159+4)>>2)]=HEAP32[(($160+4)>>2)];HEAP32[(($159+8)>>2)]=HEAP32[(($160+8)>>2)];
      var $161=HEAP32[(($10)>>2)];
      var $162=$7;
      HEAP32[(($7)>>2)]=$__t_i3;
      var $163=HEAP32[(($7)>>2)];
      var $164=$7;
      var $165=$161;
      var $166=$163;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[(($165+4)>>2)]=HEAP32[(($166+4)>>2)];HEAP32[(($165+8)>>2)]=HEAP32[(($166+8)>>2)];
      var $167=$9;
      var $168=$10;
      var $169=$__t_i3;
      $__r=1;
      var $170=$30;
      var $171=HEAP32[(($170)>>2)];
      var $172=$29;
      var $173=$28;
      var $174=FUNCTION_TABLE[$171]($172, $173);
      if ($174) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $176=$28;
      var $177=$29;
      var $178=$19;
      var $179=$20;
      var $180=$__t_i1;
      HEAP32[(($19)>>2)]=$176;
      HEAP32[(($20)>>2)]=$177;
      var $181=HEAP32[(($19)>>2)];
      var $182=$18;
      HEAP32[(($18)>>2)]=$181;
      var $183=HEAP32[(($18)>>2)];
      var $184=$18;
      var $185=$__t_i1;
      var $186=$183;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($185)>>2)]=HEAP32[(($186)>>2)];HEAP32[(($185+4)>>2)]=HEAP32[(($186+4)>>2)];HEAP32[(($185+8)>>2)]=HEAP32[(($186+8)>>2)];
      var $187=HEAP32[(($19)>>2)];
      var $188=HEAP32[(($20)>>2)];
      var $189=$16;
      HEAP32[(($16)>>2)]=$188;
      var $190=HEAP32[(($16)>>2)];
      var $191=$16;
      var $192=$187;
      var $193=$190;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($192)>>2)]=HEAP32[(($193)>>2)];HEAP32[(($192+4)>>2)]=HEAP32[(($193+4)>>2)];HEAP32[(($192+8)>>2)]=HEAP32[(($193+8)>>2)];
      var $194=HEAP32[(($20)>>2)];
      var $195=$17;
      HEAP32[(($17)>>2)]=$__t_i1;
      var $196=HEAP32[(($17)>>2)];
      var $197=$17;
      var $198=$194;
      var $199=$196;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($198)>>2)]=HEAP32[(($199)>>2)];HEAP32[(($198+4)>>2)]=HEAP32[(($199+4)>>2)];HEAP32[(($198+8)>>2)]=HEAP32[(($199+8)>>2)];
      var $200=$19;
      var $201=$20;
      var $202=$__t_i1;
      $__r=2;
      __label__ = 11; break;
    case 11: 
      var $204=$__r;
      $26=$204;
      __label__ = 12; break;
    case 12: 
      var $206=$26;
      STACKTOP = __stackBase__;
      return $206;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__c) {
  var __stackBase__  = STACKTOP; STACKTOP += 96; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3=__stackBase__+8;
      var $4=__stackBase__+12;
      var $5=__stackBase__+16;
      var $__t_i2=__stackBase__+20;
      var $6=__stackBase__+32;
      var $7=__stackBase__+36;
      var $8=__stackBase__+40;
      var $9=__stackBase__+44;
      var $10=__stackBase__+48;
      var $__t_i1=__stackBase__+52;
      var $11=__stackBase__+64;
      var $12=__stackBase__+68;
      var $13=__stackBase__+72;
      var $14=__stackBase__+76;
      var $15=__stackBase__+80;
      var $__t_i=__stackBase__+84;
      var $16;
      var $17;
      var $18;
      var $19;
      var $20;
      var $__r;
      $16=$__x1;
      $17=$__x2;
      $18=$__x3;
      $19=$__x4;
      $20=$__c;
      var $21=$16;
      var $22=$17;
      var $23=$18;
      var $24=$20;
      var $25=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($21, $22, $23, $24);
      $__r=$25;
      var $26=$20;
      var $27=HEAP32[(($26)>>2)];
      var $28=$19;
      var $29=$18;
      var $30=FUNCTION_TABLE[$27]($28, $29);
      if ($30) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $32=$18;
      var $33=$19;
      var $34=$14;
      var $35=$15;
      var $36=$__t_i;
      HEAP32[(($14)>>2)]=$32;
      HEAP32[(($15)>>2)]=$33;
      var $37=HEAP32[(($14)>>2)];
      var $38=$13;
      HEAP32[(($13)>>2)]=$37;
      var $39=HEAP32[(($13)>>2)];
      var $40=$13;
      var $41=$__t_i;
      var $42=$39;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[(($41+4)>>2)]=HEAP32[(($42+4)>>2)];HEAP32[(($41+8)>>2)]=HEAP32[(($42+8)>>2)];
      var $43=HEAP32[(($14)>>2)];
      var $44=HEAP32[(($15)>>2)];
      var $45=$11;
      HEAP32[(($11)>>2)]=$44;
      var $46=HEAP32[(($11)>>2)];
      var $47=$11;
      var $48=$43;
      var $49=$46;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[(($48+4)>>2)]=HEAP32[(($49+4)>>2)];HEAP32[(($48+8)>>2)]=HEAP32[(($49+8)>>2)];
      var $50=HEAP32[(($15)>>2)];
      var $51=$12;
      HEAP32[(($12)>>2)]=$__t_i;
      var $52=HEAP32[(($12)>>2)];
      var $53=$12;
      var $54=$50;
      var $55=$52;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[(($54+4)>>2)]=HEAP32[(($55+4)>>2)];HEAP32[(($54+8)>>2)]=HEAP32[(($55+8)>>2)];
      var $56=$14;
      var $57=$15;
      var $58=$__t_i;
      var $59=$__r;
      var $60=(($59+1)|0);
      $__r=$60;
      var $61=$20;
      var $62=HEAP32[(($61)>>2)];
      var $63=$18;
      var $64=$17;
      var $65=FUNCTION_TABLE[$62]($63, $64);
      if ($65) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $67=$17;
      var $68=$18;
      var $69=$4;
      var $70=$5;
      var $71=$__t_i2;
      HEAP32[(($4)>>2)]=$67;
      HEAP32[(($5)>>2)]=$68;
      var $72=HEAP32[(($4)>>2)];
      var $73=$3;
      HEAP32[(($3)>>2)]=$72;
      var $74=HEAP32[(($3)>>2)];
      var $75=$3;
      var $76=$__t_i2;
      var $77=$74;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[(($76+4)>>2)]=HEAP32[(($77+4)>>2)];HEAP32[(($76+8)>>2)]=HEAP32[(($77+8)>>2)];
      var $78=HEAP32[(($4)>>2)];
      var $79=HEAP32[(($5)>>2)];
      var $80=$1;
      HEAP32[(($1)>>2)]=$79;
      var $81=HEAP32[(($1)>>2)];
      var $82=$1;
      var $83=$78;
      var $84=$81;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[(($83+4)>>2)]=HEAP32[(($84+4)>>2)];HEAP32[(($83+8)>>2)]=HEAP32[(($84+8)>>2)];
      var $85=HEAP32[(($5)>>2)];
      var $86=$2;
      HEAP32[(($2)>>2)]=$__t_i2;
      var $87=HEAP32[(($2)>>2)];
      var $88=$2;
      var $89=$85;
      var $90=$87;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[(($89+4)>>2)]=HEAP32[(($90+4)>>2)];HEAP32[(($89+8)>>2)]=HEAP32[(($90+8)>>2)];
      var $91=$4;
      var $92=$5;
      var $93=$__t_i2;
      var $94=$__r;
      var $95=(($94+1)|0);
      $__r=$95;
      var $96=$20;
      var $97=HEAP32[(($96)>>2)];
      var $98=$17;
      var $99=$16;
      var $100=FUNCTION_TABLE[$97]($98, $99);
      if ($100) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $102=$16;
      var $103=$17;
      var $104=$9;
      var $105=$10;
      var $106=$__t_i1;
      HEAP32[(($9)>>2)]=$102;
      HEAP32[(($10)>>2)]=$103;
      var $107=HEAP32[(($9)>>2)];
      var $108=$8;
      HEAP32[(($8)>>2)]=$107;
      var $109=HEAP32[(($8)>>2)];
      var $110=$8;
      var $111=$__t_i1;
      var $112=$109;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[(($111+4)>>2)]=HEAP32[(($112+4)>>2)];HEAP32[(($111+8)>>2)]=HEAP32[(($112+8)>>2)];
      var $113=HEAP32[(($9)>>2)];
      var $114=HEAP32[(($10)>>2)];
      var $115=$6;
      HEAP32[(($6)>>2)]=$114;
      var $116=HEAP32[(($6)>>2)];
      var $117=$6;
      var $118=$113;
      var $119=$116;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[(($118+4)>>2)]=HEAP32[(($119+4)>>2)];HEAP32[(($118+8)>>2)]=HEAP32[(($119+8)>>2)];
      var $120=HEAP32[(($10)>>2)];
      var $121=$7;
      HEAP32[(($7)>>2)]=$__t_i1;
      var $122=HEAP32[(($7)>>2)];
      var $123=$7;
      var $124=$120;
      var $125=$122;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[(($124+4)>>2)]=HEAP32[(($125+4)>>2)];HEAP32[(($124+8)>>2)]=HEAP32[(($125+8)>>2)];
      var $126=$9;
      var $127=$10;
      var $128=$__t_i1;
      var $129=$__r;
      var $130=(($129+1)|0);
      $__r=$130;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $134=$__r;
      STACKTOP = __stackBase__;
      return $134;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__x5, $__c) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3=__stackBase__+8;
      var $4=__stackBase__+12;
      var $5=__stackBase__+16;
      var $__t_i3=__stackBase__+20;
      var $6=__stackBase__+32;
      var $7=__stackBase__+36;
      var $8=__stackBase__+40;
      var $9=__stackBase__+44;
      var $10=__stackBase__+48;
      var $__t_i2=__stackBase__+52;
      var $11=__stackBase__+64;
      var $12=__stackBase__+68;
      var $13=__stackBase__+72;
      var $14=__stackBase__+76;
      var $15=__stackBase__+80;
      var $__t_i1=__stackBase__+84;
      var $16=__stackBase__+96;
      var $17=__stackBase__+100;
      var $18=__stackBase__+104;
      var $19=__stackBase__+108;
      var $20=__stackBase__+112;
      var $__t_i=__stackBase__+116;
      var $21;
      var $22;
      var $23;
      var $24;
      var $25;
      var $26;
      var $__r;
      $21=$__x1;
      $22=$__x2;
      $23=$__x3;
      $24=$__x4;
      $25=$__x5;
      $26=$__c;
      var $27=$21;
      var $28=$22;
      var $29=$23;
      var $30=$24;
      var $31=$26;
      var $32=__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($27, $28, $29, $30, $31);
      $__r=$32;
      var $33=$26;
      var $34=HEAP32[(($33)>>2)];
      var $35=$25;
      var $36=$24;
      var $37=FUNCTION_TABLE[$34]($35, $36);
      if ($37) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $39=$24;
      var $40=$25;
      var $41=$19;
      var $42=$20;
      var $43=$__t_i;
      HEAP32[(($19)>>2)]=$39;
      HEAP32[(($20)>>2)]=$40;
      var $44=HEAP32[(($19)>>2)];
      var $45=$18;
      HEAP32[(($18)>>2)]=$44;
      var $46=HEAP32[(($18)>>2)];
      var $47=$18;
      var $48=$__t_i;
      var $49=$46;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[(($48+4)>>2)]=HEAP32[(($49+4)>>2)];HEAP32[(($48+8)>>2)]=HEAP32[(($49+8)>>2)];
      var $50=HEAP32[(($19)>>2)];
      var $51=HEAP32[(($20)>>2)];
      var $52=$16;
      HEAP32[(($16)>>2)]=$51;
      var $53=HEAP32[(($16)>>2)];
      var $54=$16;
      var $55=$50;
      var $56=$53;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[(($55+4)>>2)]=HEAP32[(($56+4)>>2)];HEAP32[(($55+8)>>2)]=HEAP32[(($56+8)>>2)];
      var $57=HEAP32[(($20)>>2)];
      var $58=$17;
      HEAP32[(($17)>>2)]=$__t_i;
      var $59=HEAP32[(($17)>>2)];
      var $60=$17;
      var $61=$57;
      var $62=$59;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[(($61+4)>>2)]=HEAP32[(($62+4)>>2)];HEAP32[(($61+8)>>2)]=HEAP32[(($62+8)>>2)];
      var $63=$19;
      var $64=$20;
      var $65=$__t_i;
      var $66=$__r;
      var $67=(($66+1)|0);
      $__r=$67;
      var $68=$26;
      var $69=HEAP32[(($68)>>2)];
      var $70=$24;
      var $71=$23;
      var $72=FUNCTION_TABLE[$69]($70, $71);
      if ($72) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $74=$23;
      var $75=$24;
      var $76=$9;
      var $77=$10;
      var $78=$__t_i2;
      HEAP32[(($9)>>2)]=$74;
      HEAP32[(($10)>>2)]=$75;
      var $79=HEAP32[(($9)>>2)];
      var $80=$8;
      HEAP32[(($8)>>2)]=$79;
      var $81=HEAP32[(($8)>>2)];
      var $82=$8;
      var $83=$__t_i2;
      var $84=$81;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[(($83+4)>>2)]=HEAP32[(($84+4)>>2)];HEAP32[(($83+8)>>2)]=HEAP32[(($84+8)>>2)];
      var $85=HEAP32[(($9)>>2)];
      var $86=HEAP32[(($10)>>2)];
      var $87=$6;
      HEAP32[(($6)>>2)]=$86;
      var $88=HEAP32[(($6)>>2)];
      var $89=$6;
      var $90=$85;
      var $91=$88;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[(($90+4)>>2)]=HEAP32[(($91+4)>>2)];HEAP32[(($90+8)>>2)]=HEAP32[(($91+8)>>2)];
      var $92=HEAP32[(($10)>>2)];
      var $93=$7;
      HEAP32[(($7)>>2)]=$__t_i2;
      var $94=HEAP32[(($7)>>2)];
      var $95=$7;
      var $96=$92;
      var $97=$94;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[(($96+4)>>2)]=HEAP32[(($97+4)>>2)];HEAP32[(($96+8)>>2)]=HEAP32[(($97+8)>>2)];
      var $98=$9;
      var $99=$10;
      var $100=$__t_i2;
      var $101=$__r;
      var $102=(($101+1)|0);
      $__r=$102;
      var $103=$26;
      var $104=HEAP32[(($103)>>2)];
      var $105=$23;
      var $106=$22;
      var $107=FUNCTION_TABLE[$104]($105, $106);
      if ($107) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $109=$22;
      var $110=$23;
      var $111=$4;
      var $112=$5;
      var $113=$__t_i3;
      HEAP32[(($4)>>2)]=$109;
      HEAP32[(($5)>>2)]=$110;
      var $114=HEAP32[(($4)>>2)];
      var $115=$3;
      HEAP32[(($3)>>2)]=$114;
      var $116=HEAP32[(($3)>>2)];
      var $117=$3;
      var $118=$__t_i3;
      var $119=$116;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[(($118+4)>>2)]=HEAP32[(($119+4)>>2)];HEAP32[(($118+8)>>2)]=HEAP32[(($119+8)>>2)];
      var $120=HEAP32[(($4)>>2)];
      var $121=HEAP32[(($5)>>2)];
      var $122=$1;
      HEAP32[(($1)>>2)]=$121;
      var $123=HEAP32[(($1)>>2)];
      var $124=$1;
      var $125=$120;
      var $126=$123;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($125)>>2)]=HEAP32[(($126)>>2)];HEAP32[(($125+4)>>2)]=HEAP32[(($126+4)>>2)];HEAP32[(($125+8)>>2)]=HEAP32[(($126+8)>>2)];
      var $127=HEAP32[(($5)>>2)];
      var $128=$2;
      HEAP32[(($2)>>2)]=$__t_i3;
      var $129=HEAP32[(($2)>>2)];
      var $130=$2;
      var $131=$127;
      var $132=$129;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[(($131+4)>>2)]=HEAP32[(($132+4)>>2)];HEAP32[(($131+8)>>2)]=HEAP32[(($132+8)>>2)];
      var $133=$4;
      var $134=$5;
      var $135=$__t_i3;
      var $136=$__r;
      var $137=(($136+1)|0);
      $__r=$137;
      var $138=$26;
      var $139=HEAP32[(($138)>>2)];
      var $140=$22;
      var $141=$21;
      var $142=FUNCTION_TABLE[$139]($140, $141);
      if ($142) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $144=$21;
      var $145=$22;
      var $146=$14;
      var $147=$15;
      var $148=$__t_i1;
      HEAP32[(($14)>>2)]=$144;
      HEAP32[(($15)>>2)]=$145;
      var $149=HEAP32[(($14)>>2)];
      var $150=$13;
      HEAP32[(($13)>>2)]=$149;
      var $151=HEAP32[(($13)>>2)];
      var $152=$13;
      var $153=$__t_i1;
      var $154=$151;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($153)>>2)]=HEAP32[(($154)>>2)];HEAP32[(($153+4)>>2)]=HEAP32[(($154+4)>>2)];HEAP32[(($153+8)>>2)]=HEAP32[(($154+8)>>2)];
      var $155=HEAP32[(($14)>>2)];
      var $156=HEAP32[(($15)>>2)];
      var $157=$11;
      HEAP32[(($11)>>2)]=$156;
      var $158=HEAP32[(($11)>>2)];
      var $159=$11;
      var $160=$155;
      var $161=$158;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($160)>>2)]=HEAP32[(($161)>>2)];HEAP32[(($160+4)>>2)]=HEAP32[(($161+4)>>2)];HEAP32[(($160+8)>>2)]=HEAP32[(($161+8)>>2)];
      var $162=HEAP32[(($15)>>2)];
      var $163=$12;
      HEAP32[(($12)>>2)]=$__t_i1;
      var $164=HEAP32[(($12)>>2)];
      var $165=$12;
      var $166=$162;
      var $167=$164;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[(($166+4)>>2)]=HEAP32[(($167+4)>>2)];HEAP32[(($166+8)>>2)]=HEAP32[(($167+8)>>2)];
      var $168=$14;
      var $169=$15;
      var $170=$__t_i1;
      var $171=$__r;
      var $172=(($171+1)|0);
      $__r=$172;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $177=$__r;
      STACKTOP = __stackBase__;
      return $177;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3=__stackBase__+8;
      var $4;
      var $5;
      var $6;
      var $__j;
      var $__i;
      var $__t=__stackBase__+12;
      var $__k;
      $4=$__first;
      $5=$__last;
      $6=$__comp;
      var $7=$4;
      var $8=(($7+24)|0);
      $__j=$8;
      var $9=$4;
      var $10=$4;
      var $11=(($10+12)|0);
      var $12=$__j;
      var $13=$6;
      var $14=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($9, $11, $12, $13);
      var $15=$__j;
      var $16=(($15+12)|0);
      $__i=$16;
      __label__ = 2; break;
    case 2: 
      var $18=$__i;
      var $19=$5;
      var $20=(($18)|0)!=(($19)|0);
      if ($20) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      var $22=$6;
      var $23=HEAP32[(($22)>>2)];
      var $24=$__i;
      var $25=$__j;
      var $26=FUNCTION_TABLE[$23]($24, $25);
      if ($26) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $28=$__i;
      var $29=$3;
      HEAP32[(($3)>>2)]=$28;
      var $30=HEAP32[(($3)>>2)];
      var $31=$3;
      var $32=$__t;
      var $33=$30;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];HEAP32[(($32+8)>>2)]=HEAP32[(($33+8)>>2)];
      var $34=$__j;
      $__k=$34;
      var $35=$__i;
      $__j=$35;
      __label__ = 5; break;
    case 5: 
      var $37=$__j;
      var $38=$__k;
      var $39=$1;
      HEAP32[(($1)>>2)]=$38;
      var $40=HEAP32[(($1)>>2)];
      var $41=$1;
      var $42=$37;
      var $43=$40;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];HEAP32[(($42+8)>>2)]=HEAP32[(($43+8)>>2)];
      var $44=$__k;
      $__j=$44;
      __label__ = 6; break;
    case 6: 
      var $46=$__j;
      var $47=$4;
      var $48=(($46)|0)!=(($47)|0);
      if ($48) { __label__ = 7; break; } else { var $56 = 0;__label__ = 8; break; }
    case 7: 
      var $50=$6;
      var $51=HEAP32[(($50)>>2)];
      var $52=$__k;
      var $53=(($52-12)|0);
      $__k=$53;
      var $54=FUNCTION_TABLE[$51]($__t, $53);
      var $56 = $54;__label__ = 8; break;
    case 8: 
      var $56;
      if ($56) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 9: 
      var $58=$__j;
      var $59=$2;
      HEAP32[(($2)>>2)]=$__t;
      var $60=HEAP32[(($2)>>2)];
      var $61=$2;
      var $62=$58;
      var $63=$60;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[(($62+4)>>2)]=HEAP32[(($63+4)>>2)];HEAP32[(($62+8)>>2)]=HEAP32[(($63+8)>>2)];
      __label__ = 10; break;
    case 10: 
      var $65=$__i;
      $__j=$65;
      __label__ = 11; break;
    case 11: 
      var $67=$__i;
      var $68=(($67+12)|0);
      $__i=$68;
      __label__ = 2; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN17b2ContactListenerD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZN17b2ContactListener12BeginContactEP9b2Contact($this, $contact) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$contact;
  var $3=$1;
  ;
  return;
}


function __ZN17b2ContactListener10EndContactEP9b2Contact($this, $contact) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$contact;
  var $3=$1;
  ;
  return;
}


function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this, $contact, $oldManifold) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$contact;
  $3=$oldManifold;
  var $4=$1;
  ;
  return;
}


function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $contact, $impulse) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$contact;
  $3=$impulse;
  var $4=$1;
  ;
  return;
}


function __ZN15b2ContactFilterD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZN17b2ContactListenerC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((__ZTV17b2ContactListener+8)|0);
  ;
  return;
}


function __ZN15b2ContactFilterC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((__ZTV15b2ContactFilter+8)|0);
  ;
  return;
}


function __ZN15b2GrowableStackIiLi256EE8GetCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+1028)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN15b2GrowableStackIiLi256EEC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=(($3)|0);
  var $5=(($2)|0);
  HEAP32[(($5)>>2)]=$4;
  var $6=(($2+1028)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+1032)|0);
  HEAP32[(($7)>>2)]=256;
  ;
  return;
}


function __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first, $__last, $__comp) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3=__stackBase__+8;
      var $4=__stackBase__+12;
      var $5=__stackBase__+16;
      var $6=__stackBase__+20;
      var $7=__stackBase__+24;
      var $8=__stackBase__+28;
      var $__t_i=__stackBase__+32;
      var $9;
      var $10;
      var $11;
      var $12;
      var $__j;
      var $__limit;
      var $__count;
      var $__i;
      var $__t=__stackBase__+44;
      var $__k;
      $10=$__first;
      $11=$__last;
      $12=$__comp;
      var $13=$11;
      var $14=$10;
      var $15=$13;
      var $16=$14;
      var $17=(($15-$16)|0);
      var $18=(((($17)|0)/12)|0);
      if ((($18)|0) == 0 || (($18)|0) == 1) {
        __label__ = 2; break;
      }
      else if ((($18)|0) == 2) {
        __label__ = 3; break;
      }
      else if ((($18)|0) == 3) {
        __label__ = 6; break;
      }
      else if ((($18)|0) == 4) {
        __label__ = 7; break;
      }
      else if ((($18)|0) == 5) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 2: 
      $9=1;
      __label__ = 23; break;
    case 3: 
      var $21=$12;
      var $22=HEAP32[(($21)>>2)];
      var $23=$11;
      var $24=(($23-12)|0);
      $11=$24;
      var $25=$10;
      var $26=FUNCTION_TABLE[$22]($24, $25);
      if ($26) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $28=$10;
      var $29=$11;
      var $30=$7;
      var $31=$8;
      var $32=$__t_i;
      HEAP32[(($7)>>2)]=$28;
      HEAP32[(($8)>>2)]=$29;
      var $33=HEAP32[(($7)>>2)];
      var $34=$6;
      HEAP32[(($6)>>2)]=$33;
      var $35=HEAP32[(($6)>>2)];
      var $36=$6;
      var $37=$__t_i;
      var $38=$35;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[(($37+4)>>2)]=HEAP32[(($38+4)>>2)];HEAP32[(($37+8)>>2)]=HEAP32[(($38+8)>>2)];
      var $39=HEAP32[(($7)>>2)];
      var $40=HEAP32[(($8)>>2)];
      var $41=$4;
      HEAP32[(($4)>>2)]=$40;
      var $42=HEAP32[(($4)>>2)];
      var $43=$4;
      var $44=$39;
      var $45=$42;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[(($44+4)>>2)]=HEAP32[(($45+4)>>2)];HEAP32[(($44+8)>>2)]=HEAP32[(($45+8)>>2)];
      var $46=HEAP32[(($8)>>2)];
      var $47=$5;
      HEAP32[(($5)>>2)]=$__t_i;
      var $48=HEAP32[(($5)>>2)];
      var $49=$5;
      var $50=$46;
      var $51=$48;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[(($50+4)>>2)]=HEAP32[(($51+4)>>2)];HEAP32[(($50+8)>>2)]=HEAP32[(($51+8)>>2)];
      var $52=$7;
      var $53=$8;
      var $54=$__t_i;
      __label__ = 5; break;
    case 5: 
      $9=1;
      __label__ = 23; break;
    case 6: 
      var $57=$10;
      var $58=$10;
      var $59=(($58+12)|0);
      var $60=$11;
      var $61=(($60-12)|0);
      $11=$61;
      var $62=$12;
      var $63=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($57, $59, $61, $62);
      $9=1;
      __label__ = 23; break;
    case 7: 
      var $65=$10;
      var $66=$10;
      var $67=(($66+12)|0);
      var $68=$10;
      var $69=(($68+24)|0);
      var $70=$11;
      var $71=(($70-12)|0);
      $11=$71;
      var $72=$12;
      var $73=__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($65, $67, $69, $71, $72);
      $9=1;
      __label__ = 23; break;
    case 8: 
      var $75=$10;
      var $76=$10;
      var $77=(($76+12)|0);
      var $78=$10;
      var $79=(($78+24)|0);
      var $80=$10;
      var $81=(($80+36)|0);
      var $82=$11;
      var $83=(($82-12)|0);
      $11=$83;
      var $84=$12;
      var $85=__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($75, $77, $79, $81, $83, $84);
      $9=1;
      __label__ = 23; break;
    case 9: 
      var $87=$10;
      var $88=(($87+24)|0);
      $__j=$88;
      var $89=$10;
      var $90=$10;
      var $91=(($90+12)|0);
      var $92=$__j;
      var $93=$12;
      var $94=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($89, $91, $92, $93);
      $__limit=8;
      $__count=0;
      var $95=$__j;
      var $96=(($95+12)|0);
      $__i=$96;
      __label__ = 10; break;
    case 10: 
      var $98=$__i;
      var $99=$11;
      var $100=(($98)|0)!=(($99)|0);
      if ($100) { __label__ = 11; break; } else { __label__ = 22; break; }
    case 11: 
      var $102=$12;
      var $103=HEAP32[(($102)>>2)];
      var $104=$__i;
      var $105=$__j;
      var $106=FUNCTION_TABLE[$103]($104, $105);
      if ($106) { __label__ = 12; break; } else { __label__ = 20; break; }
    case 12: 
      var $108=$__i;
      var $109=$2;
      HEAP32[(($2)>>2)]=$108;
      var $110=HEAP32[(($2)>>2)];
      var $111=$2;
      var $112=$__t;
      var $113=$110;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[(($112+4)>>2)]=HEAP32[(($113+4)>>2)];HEAP32[(($112+8)>>2)]=HEAP32[(($113+8)>>2)];
      var $114=$__j;
      $__k=$114;
      var $115=$__i;
      $__j=$115;
      __label__ = 13; break;
    case 13: 
      var $117=$__j;
      var $118=$__k;
      var $119=$1;
      HEAP32[(($1)>>2)]=$118;
      var $120=HEAP32[(($1)>>2)];
      var $121=$1;
      var $122=$117;
      var $123=$120;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[(($122+4)>>2)]=HEAP32[(($123+4)>>2)];HEAP32[(($122+8)>>2)]=HEAP32[(($123+8)>>2)];
      var $124=$__k;
      $__j=$124;
      __label__ = 14; break;
    case 14: 
      var $126=$__j;
      var $127=$10;
      var $128=(($126)|0)!=(($127)|0);
      if ($128) { __label__ = 15; break; } else { var $136 = 0;__label__ = 16; break; }
    case 15: 
      var $130=$12;
      var $131=HEAP32[(($130)>>2)];
      var $132=$__k;
      var $133=(($132-12)|0);
      $__k=$133;
      var $134=FUNCTION_TABLE[$131]($__t, $133);
      var $136 = $134;__label__ = 16; break;
    case 16: 
      var $136;
      if ($136) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 17: 
      var $138=$__j;
      var $139=$3;
      HEAP32[(($3)>>2)]=$__t;
      var $140=HEAP32[(($3)>>2)];
      var $141=$3;
      var $142=$138;
      var $143=$140;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($142)>>2)]=HEAP32[(($143)>>2)];HEAP32[(($142+4)>>2)]=HEAP32[(($143+4)>>2)];HEAP32[(($142+8)>>2)]=HEAP32[(($143+8)>>2)];
      var $144=$__count;
      var $145=(($144+1)|0);
      $__count=$145;
      var $146=(($145)|0)==8;
      if ($146) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $148=$__i;
      var $149=(($148+12)|0);
      $__i=$149;
      var $150=$11;
      var $151=(($149)|0)==(($150)|0);
      $9=$151;
      __label__ = 23; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $154=$__i;
      $__j=$154;
      __label__ = 21; break;
    case 21: 
      var $156=$__i;
      var $157=(($156+12)|0);
      $__i=$157;
      __label__ = 10; break;
    case 22: 
      $9=1;
      __label__ = 23; break;
    case 23: 
      var $160=$9;
      STACKTOP = __stackBase__;
      return $160;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2GrowableStackIiLi256EEC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2GrowableStackIiLi256EEC2Ev($2);
  ;
  return;
}


function __ZN15b2GrowableStackIiLi256EE4PushERKi($this, $element) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $old;
      $1=$this;
      $2=$element;
      var $3=$1;
      var $4=(($3+1028)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+1032)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0)==(($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $10=(($3)|0);
      var $11=HEAP32[(($10)>>2)];
      $old=$11;
      var $12=(($3+1032)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13<<1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=(($3+1032)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16<<2))|0);
      var $18=__Z7b2Alloci($17);
      var $19=$18;
      var $20=(($3)|0);
      HEAP32[(($20)>>2)]=$19;
      var $21=(($3)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$old;
      var $25=$24;
      var $26=(($3+1028)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=((($27<<2))|0);
      assert($28 % 1 === 0, 'memcpy given ' + $28 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($23, $25, $28, 1);
      var $29=$old;
      var $30=(($3+4)|0);
      var $31=(($30)|0);
      var $32=(($29)|0)!=(($31)|0);
      if ($32) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $34=$old;
      var $35=$34;
      __Z6b2FreePv($35);
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $38=$2;
      var $39=HEAP32[(($38)>>2)];
      var $40=(($3+1028)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($3)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+($41<<2))|0);
      HEAP32[(($44)>>2)]=$39;
      var $45=(($3+1028)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+1)|0);
      HEAP32[(($45)>>2)]=$47;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2GrowableStackIiLi256EE3PopEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2+1028)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0) > 0;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str3112)|0), 69, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2GrowableStackIiLi256EE3PopEv)|0), ((STRING_TABLE.__str4113)|0));
      __label__ = 4; break;
    case 4: 
      var $9=(($2+1028)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10-1)|0);
      HEAP32[(($9)>>2)]=$11;
      var $12=(($2+1028)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($2)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($13<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13b2TestOverlapRK6b2AABBS1_($a, $b) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $d1=__stackBase__;
      var $d2=__stackBase__+8;
      var $4=__stackBase__+16;
      var $5=__stackBase__+24;
      $2=$a;
      $3=$b;
      __ZN6b2Vec2C1Ev($d1);
      __ZN6b2Vec2C1Ev($d2);
      var $6=$3;
      var $7=(($6)|0);
      var $8=$2;
      var $9=(($8+8)|0);
      __ZmiRK6b2Vec2S1_($4, $7, $9);
      var $10=$d1;
      var $11=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[(($10+4)>>2)]=HEAP32[(($11+4)>>2)];
      var $12=$2;
      var $13=(($12)|0);
      var $14=$3;
      var $15=(($14+8)|0);
      __ZmiRK6b2Vec2S1_($5, $13, $15);
      var $16=$d2;
      var $17=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[(($16+4)>>2)]=HEAP32[(($17+4)>>2)];
      var $18=(($d1)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$19 > 0;
      if ($20) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $22=(($d1+4)|0);
      var $23=HEAPF32[(($22)>>2)];
      var $24=$23 > 0;
      if ($24) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 8; break;
    case 4: 
      var $27=(($d2)|0);
      var $28=HEAPF32[(($27)>>2)];
      var $29=$28 > 0;
      if ($29) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $31=(($d2+4)|0);
      var $32=HEAPF32[(($31)>>2)];
      var $33=$32 > 0;
      if ($33) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 8; break;
    case 7: 
      $1=1;
      __label__ = 8; break;
    case 8: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2GrowableStackIiLi256EED1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2GrowableStackIiLi256EED2Ev($2);
  ;
  return;
}


function __ZN15b2GrowableStackIiLi256EED2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($2+4)|0);
      var $6=(($5)|0);
      var $7=(($4)|0)!=(($6)|0);
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=(($2)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      __Z6b2FreePv($11);
      var $12=(($2)|0);
      HEAP32[(($12)>>2)]=0;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN17b2ContactListenerD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN17b2ContactListenerD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __GLOBAL__I_a120() {
  ;
  var __label__;

  ___cxx_global_var_init115();
  ___cxx_global_var_init1();
  ;
  return;
}


function __ZN9b2FixtureC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+32)|0);
  __ZN8b2FilterC1Ev($3);
  var $4=(($2+40)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+4)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+24)|0);
  HEAP32[(($7)>>2)]=0;
  var $8=(($2+28)|0);
  HEAP32[(($8)>>2)]=0;
  var $9=(($2+12)|0);
  HEAP32[(($9)>>2)]=0;
  var $10=(($2)|0);
  HEAPF32[(($10)>>2)]=0;
  ;
  return;
}


function __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($this, $allocator, $body, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $childCount;
      var $i;
      $1=$this;
      $2=$allocator;
      $3=$body;
      $4=$def;
      var $5=$1;
      var $6=$4;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5+40)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$4;
      var $11=(($10+8)|0);
      var $12=HEAPF32[(($11)>>2)];
      var $13=(($5+16)|0);
      HEAPF32[(($13)>>2)]=$12;
      var $14=$4;
      var $15=(($14+12)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=(($5+20)|0);
      HEAPF32[(($17)>>2)]=$16;
      var $18=$3;
      var $19=(($5+8)|0);
      HEAP32[(($19)>>2)]=$18;
      var $20=(($5+4)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=(($5+32)|0);
      var $22=$4;
      var $23=(($22+22)|0);
      var $24=$21;
      var $25=$23;
      assert(6 % 1 === 0, 'memcpy given ' + 6 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($24)>>1)]=HEAP16[(($25)>>1)];HEAP16[(($24+2)>>1)]=HEAP16[(($25+2)>>1)];HEAP16[(($24+4)>>1)]=HEAP16[(($25+4)>>1)];
      var $26=$4;
      var $27=(($26+20)|0);
      var $28=HEAP8[($27)];
      var $29=(($28) & 1);
      var $30=(($5+38)|0);
      var $31=(($29)&1);
      HEAP8[($30)]=$31;
      var $32=$4;
      var $33=(($32)|0);
      var $34=HEAPU32[(($33)>>2)];
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=FUNCTION_TABLE[$38]($34, $39);
      var $41=(($5+12)|0);
      HEAP32[(($41)>>2)]=$40;
      var $42=(($5+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=FUNCTION_TABLE[$47]($43);
      $childCount=$48;
      var $49=$2;
      var $50=$childCount;
      var $51=(($50*28)|0);
      var $52=__ZN16b2BlockAllocator8AllocateEi($49, $51);
      var $53=$52;
      var $54=(($5+24)|0);
      HEAP32[(($54)>>2)]=$53;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $56=$i;
      var $57=$childCount;
      var $58=(($56)|0) < (($57)|0);
      if ($58) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $60=$i;
      var $61=(($5+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+$60*28)|0);
      var $64=(($63+16)|0);
      HEAP32[(($64)>>2)]=0;
      var $65=$i;
      var $66=(($5+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+$65*28)|0);
      var $69=(($68+24)|0);
      HEAP32[(($69)>>2)]=-1;
      __label__ = 4; break;
    case 4: 
      var $71=$i;
      var $72=(($71+1)|0);
      $i=$72;
      __label__ = 2; break;
    case 5: 
      var $74=(($5+28)|0);
      HEAP32[(($74)>>2)]=0;
      var $75=$4;
      var $76=(($75+16)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=(($5)|0);
      HEAPF32[(($78)>>2)]=$77;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Fixture7DestroyEP16b2BlockAllocator($this, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $childCount;
      var $s;
      var $s1;
      var $s2;
      var $s3;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str121)|0), 72, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture7DestroyEP16b2BlockAllocator)|0), ((STRING_TABLE.__str1122)|0));
      __label__ = 4; break;
    case 4: 
      var $10=(($3+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=FUNCTION_TABLE[$15]($11);
      $childCount=$16;
      var $17=$2;
      var $18=(($3+24)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=$childCount;
      var $22=(($21*28)|0);
      __ZN16b2BlockAllocator4FreeEPvi($17, $20, $22);
      var $23=(($3+24)|0);
      HEAP32[(($23)>>2)]=0;
      var $24=(($3+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      if ((($27)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($27)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($27)|0) == 2) {
        __label__ = 7; break;
      }
      else if ((($27)|0) == 3) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 5: 
      var $29=(($3+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      $s=$31;
      var $32=$s;
      var $33=$32;
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      FUNCTION_TABLE[$36]($32);
      var $37=$2;
      var $38=$s;
      var $39=$38;
      __ZN16b2BlockAllocator4FreeEPvi($37, $39, 20);
      __label__ = 10; break;
    case 6: 
      var $41=(($3+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      $s1=$43;
      var $44=$s1;
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      FUNCTION_TABLE[$48]($44);
      var $49=$2;
      var $50=$s1;
      var $51=$50;
      __ZN16b2BlockAllocator4FreeEPvi($49, $51, 48);
      __label__ = 10; break;
    case 7: 
      var $53=(($3+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      $s2=$55;
      var $56=$s2;
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      FUNCTION_TABLE[$60]($56);
      var $61=$2;
      var $62=$s2;
      var $63=$62;
      __ZN16b2BlockAllocator4FreeEPvi($61, $63, 152);
      __label__ = 10; break;
    case 8: 
      var $65=(($3+12)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$66;
      $s3=$67;
      var $68=$s3;
      var $69=$68;
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      FUNCTION_TABLE[$72]($68);
      var $73=$2;
      var $74=$s3;
      var $75=$74;
      __ZN16b2BlockAllocator4FreeEPvi($73, $75, 40);
      __label__ = 10; break;
    case 9: 
      ___assert_func(((STRING_TABLE.__str121)|0), 115, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture7DestroyEP16b2BlockAllocator)|0), ((STRING_TABLE.__str2123)|0));
      __label__ = 10; break;
    case 10: 
      var $78=(($3+12)|0);
      HEAP32[(($78)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this, $broadPhase, $xf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $proxy;
      $1=$this;
      $2=$broadPhase;
      $3=$xf;
      var $4=$1;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str121)|0), 124, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform)|0), ((STRING_TABLE.__str1122)|0));
      __label__ = 4; break;
    case 4: 
      var $11=(($4+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=FUNCTION_TABLE[$16]($12);
      var $18=(($4+28)|0);
      HEAP32[(($18)>>2)]=$17;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $20=$i;
      var $21=(($4+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($20)|0) < (($22)|0);
      if ($23) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $25=(($4+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$i;
      var $28=(($26+$27*28)|0);
      $proxy=$28;
      var $29=(($4+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$proxy;
      var $36=(($35)|0);
      var $37=$3;
      var $38=$i;
      FUNCTION_TABLE[$34]($30, $36, $37, $38);
      var $39=$2;
      var $40=$proxy;
      var $41=(($40)|0);
      var $42=$proxy;
      var $43=$42;
      var $44=__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($39, $41, $43);
      var $45=$proxy;
      var $46=(($45+24)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$proxy;
      var $48=(($47+16)|0);
      HEAP32[(($48)>>2)]=$4;
      var $49=$i;
      var $50=$proxy;
      var $51=(($50+20)|0);
      HEAP32[(($51)>>2)]=$49;
      __label__ = 7; break;
    case 7: 
      var $53=$i;
      var $54=(($53+1)|0);
      $i=$54;
      __label__ = 5; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($this, $broadPhase) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $proxy;
      $1=$this;
      $2=$broadPhase;
      var $3=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $5=$i;
      var $6=(($3+28)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0) < (($7)|0);
      if ($8) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $10=(($3+24)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$i;
      var $13=(($11+$12*28)|0);
      $proxy=$13;
      var $14=$2;
      var $15=$proxy;
      var $16=(($15+24)|0);
      var $17=HEAP32[(($16)>>2)];
      __ZN12b2BroadPhase12DestroyProxyEi($14, $17);
      var $18=$proxy;
      var $19=(($18+24)|0);
      HEAP32[(($19)>>2)]=-1;
      __label__ = 4; break;
    case 4: 
      var $21=$i;
      var $22=(($21+1)|0);
      $i=$22;
      __label__ = 2; break;
    case 5: 
      var $24=(($3+28)|0);
      HEAP32[(($24)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Contact16FlagForFilteringEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 | 8;
  HEAP32[(($3)>>2)]=$5;
  ;
  return;
}


function __ZN6b2Body8GetWorldEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+88)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this, $broadPhase, $transform1, $transform2) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $proxy;
      var $aabb1=__stackBase__;
      var $aabb2=__stackBase__+16;
      var $displacement=__stackBase__+32;
      $1=$this;
      $2=$broadPhase;
      $3=$transform1;
      $4=$transform2;
      var $5=$1;
      var $6=(($5+28)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 7; break;
    case 3: 
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $12=$i;
      var $13=(($5+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|0) < (($14)|0);
      if ($15) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $17=(($5+24)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$i;
      var $20=(($18+$19*28)|0);
      $proxy=$20;
      __ZN6b2AABBC1Ev($aabb1);
      __ZN6b2AABBC1Ev($aabb2);
      var $21=(($5+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$3;
      var $28=$proxy;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$26]($22, $aabb1, $27, $30);
      var $31=(($5+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+24)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$4;
      var $38=$proxy;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      FUNCTION_TABLE[$36]($32, $aabb2, $37, $40);
      var $41=$proxy;
      var $42=(($41)|0);
      __ZN6b2AABB7CombineERKS_S1_($42, $aabb1, $aabb2);
      var $43=$4;
      var $44=(($43)|0);
      var $45=$3;
      var $46=(($45)|0);
      __ZmiRK6b2Vec2S1_($displacement, $44, $46);
      var $47=$2;
      var $48=$proxy;
      var $49=(($48+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$proxy;
      var $52=(($51)|0);
      __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($47, $50, $52, $displacement);
      __label__ = 6; break;
    case 6: 
      var $54=$i;
      var $55=(($54+1)|0);
      $i=$55;
      __label__ = 4; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Fixture13SetFilterDataERK8b2Filter($this, $filter) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$filter;
  var $3=$1;
  var $4=(($3+32)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(6 % 1 === 0, 'memcpy given ' + 6 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($6)>>1)]=HEAP16[(($7)>>1)];HEAP16[(($6+2)>>1)]=HEAP16[(($7+2)>>1)];HEAP16[(($6+4)>>1)]=HEAP16[(($7+4)>>1)];
  __ZN9b2Fixture8RefilterEv($3);
  ;
  return;
}


function __ZN9b2Fixture8RefilterEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $edge;
      var $contact;
      var $fixtureA;
      var $fixtureB;
      var $world;
      var $broadPhase;
      var $i;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 15; break;
    case 3: 
      var $8=(($2+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=__ZN6b2Body14GetContactListEv($9);
      $edge=$10;
      __label__ = 4; break;
    case 4: 
      var $12=$edge;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $15=$edge;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      $contact=$17;
      var $18=$contact;
      var $19=__ZN9b2Contact11GetFixtureAEv($18);
      $fixtureA=$19;
      var $20=$contact;
      var $21=__ZN9b2Contact11GetFixtureBEv($20);
      $fixtureB=$21;
      var $22=$fixtureA;
      var $23=(($22)|0)==(($2)|0);
      if ($23) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $25=$fixtureB;
      var $26=(($25)|0)==(($2)|0);
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $28=$contact;
      __ZN9b2Contact16FlagForFilteringEv($28);
      __label__ = 8; break;
    case 8: 
      var $30=$edge;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      $edge=$32;
      __label__ = 4; break;
    case 9: 
      var $34=(($2+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=__ZN6b2Body8GetWorldEv($35);
      $world=$36;
      var $37=$world;
      var $38=(($37)|0)==0;
      if ($38) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 15; break;
    case 11: 
      var $41=$world;
      var $42=(($41+102872)|0);
      var $43=(($42)|0);
      $broadPhase=$43;
      $i=0;
      __label__ = 12; break;
    case 12: 
      var $45=$i;
      var $46=(($2+28)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($45)|0) < (($47)|0);
      if ($48) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $50=$broadPhase;
      var $51=$i;
      var $52=(($2+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+$51*28)|0);
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      __ZN12b2BroadPhase10TouchProxyEi($50, $56);
      __label__ = 14; break;
    case 14: 
      var $58=$i;
      var $59=(($58+1)|0);
      $i=$59;
      __label__ = 12; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Fixture9SetSensorEb($this, $sensor) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($sensor)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&1);
      var $8=(($4+38)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&1);
      var $12=(($7)|0)!=(($11)|0);
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $14=(($4+8)|0);
      var $15=HEAP32[(($14)>>2)];
      __ZN6b2Body8SetAwakeEb($15, 1);
      var $16=$2;
      var $17=(($16) & 1);
      var $18=(($4+38)|0);
      var $19=(($17)&1);
      HEAP8[($18)]=$19;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Fixture4DumpEi($this, $bodyIndex) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $s;
      var $s1;
      var $s2;
      var $i;
      var $s3;
      var $i4;
      $1=$this;
      $2=$bodyIndex;
      var $3=$1;
      __Z5b2LogPKcz(((STRING_TABLE.__str3124)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=(($3+16)|0);
      var $5=HEAPF32[(($4)>>2)];
      var $6=$5;
      __Z5b2LogPKcz(((STRING_TABLE.__str4125)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$6,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $7=(($3+20)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=$8;
      __Z5b2LogPKcz(((STRING_TABLE.__str5126)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$9,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $10=(($3)|0);
      var $11=HEAPF32[(($10)>>2)];
      var $12=$11;
      __Z5b2LogPKcz(((STRING_TABLE.__str6127)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$12,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $13=(($3+38)|0);
      var $14=HEAP8[($13)];
      var $15=(($14) & 1);
      var $16=(($15)&1);
      __Z5b2LogPKcz(((STRING_TABLE.__str7128)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $17=(($3+32)|0);
      var $18=(($17)|0);
      var $19=HEAPU16[(($18)>>1)];
      var $20=(($19)&65535);
      __Z5b2LogPKcz(((STRING_TABLE.__str8129)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$20,tempInt));
      var $21=(($3+32)|0);
      var $22=(($21+2)|0);
      var $23=HEAPU16[(($22)>>1)];
      var $24=(($23)&65535);
      __Z5b2LogPKcz(((STRING_TABLE.__str9130)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$24,tempInt));
      var $25=(($3+32)|0);
      var $26=(($25+4)|0);
      var $27=HEAP16[(($26)>>1)];
      var $28=(($27 << 16) >> 16);
      __Z5b2LogPKcz(((STRING_TABLE.__str10131)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$28,tempInt));
      var $29=(($3+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      if ((($32)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($32)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($32)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($32)|0) == 3) {
        __label__ = 9; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 2: 
      var $34=(($3+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      $s=$36;
      __Z5b2LogPKcz(((STRING_TABLE.__str11132)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $37=$s;
      var $38=$37;
      var $39=(($38+8)|0);
      var $40=HEAPF32[(($39)>>2)];
      var $41=$40;
      __Z5b2LogPKcz(((STRING_TABLE.__str12133)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$41,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $42=$s;
      var $43=(($42+12)|0);
      var $44=(($43)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=$45;
      var $47=$s;
      var $48=(($47+12)|0);
      var $49=(($48+4)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=$50;
      __Z5b2LogPKcz(((STRING_TABLE.__str13134)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$46,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$51,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 15; break;
    case 3: 
      var $53=(($3+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      $s1=$55;
      __Z5b2LogPKcz(((STRING_TABLE.__str14135)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $56=$s1;
      var $57=$56;
      var $58=(($57+8)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$59;
      __Z5b2LogPKcz(((STRING_TABLE.__str12133)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$60,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $61=$s1;
      var $62=(($61+28)|0);
      var $63=(($62)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=$64;
      var $66=$s1;
      var $67=(($66+28)|0);
      var $68=(($67+4)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=$69;
      __Z5b2LogPKcz(((STRING_TABLE.__str15136)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$65,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$70,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $71=$s1;
      var $72=(($71+12)|0);
      var $73=(($72)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$74;
      var $76=$s1;
      var $77=(($76+12)|0);
      var $78=(($77+4)|0);
      var $79=HEAPF32[(($78)>>2)];
      var $80=$79;
      __Z5b2LogPKcz(((STRING_TABLE.__str16137)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$75,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$80,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $81=$s1;
      var $82=(($81+20)|0);
      var $83=(($82)|0);
      var $84=HEAPF32[(($83)>>2)];
      var $85=$84;
      var $86=$s1;
      var $87=(($86+20)|0);
      var $88=(($87+4)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=$89;
      __Z5b2LogPKcz(((STRING_TABLE.__str17138)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$85,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$90,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $91=$s1;
      var $92=(($91+36)|0);
      var $93=(($92)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=$94;
      var $96=$s1;
      var $97=(($96+36)|0);
      var $98=(($97+4)|0);
      var $99=HEAPF32[(($98)>>2)];
      var $100=$99;
      __Z5b2LogPKcz(((STRING_TABLE.__str18139)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$95,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$100,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $101=$s1;
      var $102=(($101+44)|0);
      var $103=HEAP8[($102)];
      var $104=(($103) & 1);
      var $105=(($104)&1);
      __Z5b2LogPKcz(((STRING_TABLE.__str19140)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$105,tempInt));
      var $106=$s1;
      var $107=(($106+45)|0);
      var $108=HEAP8[($107)];
      var $109=(($108) & 1);
      var $110=(($109)&1);
      __Z5b2LogPKcz(((STRING_TABLE.__str20141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$110,tempInt));
      __label__ = 15; break;
    case 4: 
      var $112=(($3+12)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113;
      $s2=$114;
      __Z5b2LogPKcz(((STRING_TABLE.__str21142)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str22143)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=8,tempInt));
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $116=$i;
      var $117=$s2;
      var $118=(($117+148)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($116)|0) < (($119)|0);
      if ($120) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $122=$i;
      var $123=$i;
      var $124=$s2;
      var $125=(($124+20)|0);
      var $126=(($125+($123<<3))|0);
      var $127=(($126)|0);
      var $128=HEAPF32[(($127)>>2)];
      var $129=$128;
      var $130=$i;
      var $131=$s2;
      var $132=(($131+20)|0);
      var $133=(($132+($130<<3))|0);
      var $134=(($133+4)|0);
      var $135=HEAPF32[(($134)>>2)];
      var $136=$135;
      __Z5b2LogPKcz(((STRING_TABLE.__str23144)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$122,(tempDoubleF64[0]=$129,HEAP32[((tempInt+4)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$136,HEAP32[((tempInt+12)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+12+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 7; break;
    case 7: 
      var $138=$i;
      var $139=(($138+1)|0);
      $i=$139;
      __label__ = 5; break;
    case 8: 
      var $141=$s2;
      var $142=(($141+148)|0);
      var $143=HEAP32[(($142)>>2)];
      __Z5b2LogPKcz(((STRING_TABLE.__str24145)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$143,tempInt));
      __label__ = 15; break;
    case 9: 
      var $145=(($3+12)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$146;
      $s3=$147;
      __Z5b2LogPKcz(((STRING_TABLE.__str25146)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $148=$s3;
      var $149=(($148+16)|0);
      var $150=HEAP32[(($149)>>2)];
      __Z5b2LogPKcz(((STRING_TABLE.__str22143)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$150,tempInt));
      $i4=0;
      __label__ = 10; break;
    case 10: 
      var $152=$i4;
      var $153=$s3;
      var $154=(($153+16)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($152)|0) < (($155)|0);
      if ($156) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $158=$i4;
      var $159=$i4;
      var $160=$s3;
      var $161=(($160+12)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+($159<<3))|0);
      var $164=(($163)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=$165;
      var $167=$i4;
      var $168=$s3;
      var $169=(($168+12)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170+($167<<3))|0);
      var $172=(($171+4)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=$173;
      __Z5b2LogPKcz(((STRING_TABLE.__str23144)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$158,(tempDoubleF64[0]=$166,HEAP32[((tempInt+4)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$174,HEAP32[((tempInt+12)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+12+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 12; break;
    case 12: 
      var $176=$i4;
      var $177=(($176+1)|0);
      $i4=$177;
      __label__ = 10; break;
    case 13: 
      var $179=$s3;
      var $180=(($179+16)|0);
      var $181=HEAP32[(($180)>>2)];
      __Z5b2LogPKcz(((STRING_TABLE.__str26147)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$181,tempInt));
      var $182=$s3;
      var $183=(($182+20)|0);
      var $184=(($183)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=$185;
      var $187=$s3;
      var $188=(($187+20)|0);
      var $189=(($188+4)|0);
      var $190=HEAPF32[(($189)>>2)];
      var $191=$190;
      __Z5b2LogPKcz(((STRING_TABLE.__str27148)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$186,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$191,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $192=$s3;
      var $193=(($192+28)|0);
      var $194=(($193)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=$195;
      var $197=$s3;
      var $198=(($197+28)|0);
      var $199=(($198+4)|0);
      var $200=HEAPF32[(($199)>>2)];
      var $201=$200;
      __Z5b2LogPKcz(((STRING_TABLE.__str28149)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$196,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$201,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $202=$s3;
      var $203=(($202+36)|0);
      var $204=HEAP8[($203)];
      var $205=(($204) & 1);
      var $206=(($205)&1);
      __Z5b2LogPKcz(((STRING_TABLE.__str29150)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$206,tempInt));
      var $207=$s3;
      var $208=(($207+37)|0);
      var $209=HEAP8[($208)];
      var $210=(($209) & 1);
      var $211=(($210)&1);
      __Z5b2LogPKcz(((STRING_TABLE.__str30151)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$211,tempInt));
      __label__ = 15; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      __Z5b2LogPKcz(((STRING_TABLE.__str31152)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str32153)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str31152)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $214=$2;
      __Z5b2LogPKcz(((STRING_TABLE.__str33)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$214,tempInt));
      __label__ = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($this, $bodyCapacity, $contactCapacity, $jointCapacity, $allocator, $listener) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  $1=$this;
  $2=$bodyCapacity;
  $3=$contactCapacity;
  $4=$jointCapacity;
  $5=$allocator;
  $6=$listener;
  var $7=$1;
  var $8=$2;
  var $9=(($7+40)|0);
  HEAP32[(($9)>>2)]=$8;
  var $10=$3;
  var $11=(($7+44)|0);
  HEAP32[(($11)>>2)]=$10;
  var $12=$4;
  var $13=(($7+48)|0);
  HEAP32[(($13)>>2)]=$12;
  var $14=(($7+28)|0);
  HEAP32[(($14)>>2)]=0;
  var $15=(($7+36)|0);
  HEAP32[(($15)>>2)]=0;
  var $16=(($7+32)|0);
  HEAP32[(($16)>>2)]=0;
  var $17=$5;
  var $18=(($7)|0);
  HEAP32[(($18)>>2)]=$17;
  var $19=$6;
  var $20=(($7+4)|0);
  HEAP32[(($20)>>2)]=$19;
  var $21=(($7)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=$2;
  var $24=((($23<<2))|0);
  var $25=__ZN16b2StackAllocator8AllocateEi($22, $24);
  var $26=$25;
  var $27=(($7+8)|0);
  HEAP32[(($27)>>2)]=$26;
  var $28=(($7)|0);
  var $29=HEAP32[(($28)>>2)];
  var $30=$3;
  var $31=((($30<<2))|0);
  var $32=__ZN16b2StackAllocator8AllocateEi($29, $31);
  var $33=$32;
  var $34=(($7+12)|0);
  HEAP32[(($34)>>2)]=$33;
  var $35=(($7)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=$4;
  var $38=((($37<<2))|0);
  var $39=__ZN16b2StackAllocator8AllocateEi($36, $38);
  var $40=$39;
  var $41=(($7+16)|0);
  HEAP32[(($41)>>2)]=$40;
  var $42=(($7)|0);
  var $43=HEAP32[(($42)>>2)];
  var $44=(($7+40)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=(($45*12)|0);
  var $47=__ZN16b2StackAllocator8AllocateEi($43, $46);
  var $48=$47;
  var $49=(($7+24)|0);
  HEAP32[(($49)>>2)]=$48;
  var $50=(($7)|0);
  var $51=HEAP32[(($50)>>2)];
  var $52=(($7+40)|0);
  var $53=HEAP32[(($52)>>2)];
  var $54=(($53*12)|0);
  var $55=__ZN16b2StackAllocator8AllocateEi($51, $54);
  var $56=$55;
  var $57=(($7+20)|0);
  HEAP32[(($57)>>2)]=$56;
  ;
  return;
}


function __ZN8b2IslandD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($2+20)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  __ZN16b2StackAllocator4FreeEPv($4, $7);
  var $8=(($2)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($2+24)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  __ZN16b2StackAllocator4FreeEPv($9, $12);
  var $13=(($2)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($2+16)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  __ZN16b2StackAllocator4FreeEPv($14, $17);
  var $18=(($2)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=(($2+12)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=$21;
  __ZN16b2StackAllocator4FreeEPv($19, $22);
  var $23=(($2)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=(($2+8)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$26;
  __ZN16b2StackAllocator4FreeEPv($24, $27);
  ;
  return;
}


function __Z7b2ClampIfET_S0_S0_S0_($a, $low, $high) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$a;
  $2=$low;
  $3=$high;
  var $4=$2;
  var $5=$1;
  var $6=$3;
  var $7=__Z5b2MinIfET_S0_S0_($5, $6);
  var $8=__Z5b2MaxIfET_S0_S0_($4, $7);
  ;
  return $8;
}


function __ZN6b2Body20SynchronizeTransformEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2=__stackBase__;
  var $3=__stackBase__+8;
  $1=$this;
  var $4=$1;
  var $5=(($4+12)|0);
  var $6=(($5+8)|0);
  var $7=(($4+28)|0);
  var $8=(($7+28)|0);
  var $9=HEAPF32[(($8)>>2)];
  __ZN5b2Rot3SetEf($6, $9);
  var $10=(($4+12)|0);
  var $11=(($10)|0);
  var $12=(($4+28)|0);
  var $13=(($12+16)|0);
  var $14=(($4+12)|0);
  var $15=(($14+8)|0);
  var $16=(($4+28)|0);
  var $17=(($16)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($3, $15, $17);
  __ZmiRK6b2Vec2S1_($2, $13, $3);
  var $18=$11;
  var $19=$2;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[(($18+4)>>2)]=HEAP32[(($19+4)>>2)];
  STACKTOP = __stackBase__;
  return;
}


function __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($this, $profile, $step, $gravity, $allowSleep) {
  var __stackBase__  = STACKTOP; STACKTOP += 216; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $timer=__stackBase__;
      var $h;
      var $i;
      var $b;
      var $c=__stackBase__+8;
      var $a;
      var $v=__stackBase__+16;
      var $w;
      var $6=__stackBase__+24;
      var $7=__stackBase__+32;
      var $8=__stackBase__+40;
      var $9=__stackBase__+48;
      var $solverData=__stackBase__+56;
      var $contactSolverDef=__stackBase__+88;
      var $contactSolver=__stackBase__+132;
      var $10;
      var $11;
      var $i1;
      var $i2;
      var $j;
      var $i3;
      var $c4=__stackBase__+184;
      var $a5;
      var $v6=__stackBase__+192;
      var $w7;
      var $translation=__stackBase__+200;
      var $ratio;
      var $rotation;
      var $ratio8;
      var $12=__stackBase__+208;
      var $positionSolved;
      var $i9;
      var $contactsOkay;
      var $jointsOkay;
      var $i10;
      var $jointOkay;
      var $i11;
      var $body;
      var $minSleepTime;
      var $linTolSqr;
      var $angTolSqr;
      var $i12;
      var $b13;
      var $i14;
      var $b15;
      $1=$this;
      $2=$profile;
      $3=$step;
      $4=$gravity;
      var $13=(($allowSleep)&1);
      $5=$13;
      var $14=$1;
      FUNCTION_TABLE[__ZN7b2TimerC1Ev]($timer);
      var $15=$3;
      var $16=(($15)|0);
      var $17=HEAPF32[(($16)>>2)];
      $h=$17;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $19=$i;
      var $20=(($14+28)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($19)|0) < (($21)|0);
      if ($22) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $24=$i;
      var $25=(($14+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($24<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      $b=$28;
      var $29=$b;
      var $30=(($29+28)|0);
      var $31=(($30+16)|0);
      var $32=$c;
      var $33=$31;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
      var $34=$b;
      var $35=(($34+28)|0);
      var $36=(($35+28)|0);
      var $37=HEAPF32[(($36)>>2)];
      $a=$37;
      var $38=$b;
      var $39=(($38+64)|0);
      var $40=$v;
      var $41=$39;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      var $42=$b;
      var $43=(($42+72)|0);
      var $44=HEAPF32[(($43)>>2)];
      $w=$44;
      var $45=$b;
      var $46=(($45+28)|0);
      var $47=(($46+8)|0);
      var $48=$b;
      var $49=(($48+28)|0);
      var $50=(($49+16)|0);
      var $51=$47;
      var $52=$50;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[(($51+4)>>2)]=HEAP32[(($52+4)>>2)];
      var $53=$b;
      var $54=(($53+28)|0);
      var $55=(($54+28)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=$b;
      var $58=(($57+28)|0);
      var $59=(($58+24)|0);
      HEAPF32[(($59)>>2)]=$56;
      var $60=$b;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|0)==2;
      if ($63) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $65=$h;
      var $66=$b;
      var $67=(($66+140)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=$4;
      __ZmlfRK6b2Vec2($8, $68, $69);
      var $70=$b;
      var $71=(($70+120)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=$b;
      var $74=(($73+76)|0);
      __ZmlfRK6b2Vec2($9, $72, $74);
      __ZplRK6b2Vec2S1_($7, $8, $9);
      __ZmlfRK6b2Vec2($6, $65, $7);
      __ZN6b2Vec2pLERKS_($v, $6);
      var $75=$h;
      var $76=$b;
      var $77=(($76+128)|0);
      var $78=HEAPF32[(($77)>>2)];
      var $79=$75*$78;
      var $80=$b;
      var $81=(($80+84)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$79*$82;
      var $84=$w;
      var $85=$84+$83;
      $w=$85;
      var $86=$h;
      var $87=$b;
      var $88=(($87+132)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=$86*$89;
      var $91=1-$90;
      var $92=__Z7b2ClampIfET_S0_S0_S0_($91, 0, 1);
      __ZN6b2Vec2mLEf($v, $92);
      var $93=$h;
      var $94=$b;
      var $95=(($94+136)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=$93*$96;
      var $98=1-$97;
      var $99=__Z7b2ClampIfET_S0_S0_S0_($98, 0, 1);
      var $100=$w;
      var $101=$100*$99;
      $w=$101;
      __label__ = 5; break;
    case 5: 
      var $103=$i;
      var $104=(($14+20)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+$103*12)|0);
      var $107=(($106)|0);
      var $108=$107;
      var $109=$c;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[(($108+4)>>2)]=HEAP32[(($109+4)>>2)];
      var $110=$a;
      var $111=$i;
      var $112=(($14+20)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+$111*12)|0);
      var $115=(($114+8)|0);
      HEAPF32[(($115)>>2)]=$110;
      var $116=$i;
      var $117=(($14+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+$116*12)|0);
      var $120=(($119)|0);
      var $121=$120;
      var $122=$v;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[(($121+4)>>2)]=HEAP32[(($122+4)>>2)];
      var $123=$w;
      var $124=$i;
      var $125=(($14+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+$124*12)|0);
      var $128=(($127+8)|0);
      HEAPF32[(($128)>>2)]=$123;
      __label__ = 6; break;
    case 6: 
      var $130=$i;
      var $131=(($130+1)|0);
      $i=$131;
      __label__ = 2; break;
    case 7: 
      __ZN7b2Timer5ResetEv($timer);
      var $133=(($solverData)|0);
      var $134=$3;
      var $135=$133;
      var $136=$134;
      assert(24 % 1 === 0, 'memcpy given ' + 24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[(($135+4)>>2)]=HEAP32[(($136+4)>>2)];HEAP32[(($135+8)>>2)]=HEAP32[(($136+8)>>2)];HEAP32[(($135+12)>>2)]=HEAP32[(($136+12)>>2)];HEAP32[(($135+16)>>2)]=HEAP32[(($136+16)>>2)];HEAP32[(($135+20)>>2)]=HEAP32[(($136+20)>>2)];
      var $137=(($14+20)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($solverData+24)|0);
      HEAP32[(($139)>>2)]=$138;
      var $140=(($14+24)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($solverData+28)|0);
      HEAP32[(($142)>>2)]=$141;
      var $143=(($contactSolverDef)|0);
      var $144=$3;
      var $145=$143;
      var $146=$144;
      assert(24 % 1 === 0, 'memcpy given ' + 24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[(($145+4)>>2)]=HEAP32[(($146+4)>>2)];HEAP32[(($145+8)>>2)]=HEAP32[(($146+8)>>2)];HEAP32[(($145+12)>>2)]=HEAP32[(($146+12)>>2)];HEAP32[(($145+16)>>2)]=HEAP32[(($146+16)>>2)];HEAP32[(($145+20)>>2)]=HEAP32[(($146+20)>>2)];
      var $147=(($14+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($contactSolverDef+24)|0);
      HEAP32[(($149)>>2)]=$148;
      var $150=(($14+36)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($contactSolverDef+28)|0);
      HEAP32[(($152)>>2)]=$151;
      var $153=(($14+20)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($contactSolverDef+32)|0);
      HEAP32[(($155)>>2)]=$154;
      var $156=(($14+24)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($contactSolverDef+36)|0);
      HEAP32[(($158)>>2)]=$157;
      var $159=(($14)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($contactSolverDef+40)|0);
      HEAP32[(($161)>>2)]=$160;
      FUNCTION_TABLE[__ZN15b2ContactSolverC1EP18b2ContactSolverDef]($contactSolver, $contactSolverDef);
      (function() { try { __THREW__ = false; return __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $163=$3;
      var $164=(($163+20)|0);
      var $165=HEAP8[($164)];
      var $166=(($165) & 1);
      if ($166) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      (function() { try { __THREW__ = false; return __ZN15b2ContactSolver9WarmStartEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $170=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $171=$170.f0;
      $10=$171;
      var $172=$170.f1;
      $11=$172;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN15b2ContactSolverD1Ev]($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 94; break; } else { __label__ = 96; break; }
    case 12: 
      $i1=0;
      __label__ = 13; break;
    case 13: 
      var $175=$i1;
      var $176=(($14+32)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=(($175)|0) < (($177)|0);
      if ($178) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $180=$i1;
      var $181=(($14+16)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182+($180<<2))|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=$184;
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+28)|0);
      var $188=HEAP32[(($187)>>2)];
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[$188]($184, $solverData) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 15; break; } else { __label__ = 11; break; }
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $191=$i1;
      var $192=(($191+1)|0);
      $i1=$192;
      __label__ = 13; break;
    case 17: 
      var $194 = (function() { try { __THREW__ = false; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 18; break; } else { __label__ = 11; break; }
    case 18: 
      var $196=$2;
      var $197=(($196+12)|0);
      HEAPF32[(($197)>>2)]=$194;
      (function() { try { __THREW__ = false; return __ZN7b2Timer5ResetEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 19; break; } else { __label__ = 11; break; }
    case 19: 
      $i2=0;
      __label__ = 20; break;
    case 20: 
      var $200=$i2;
      var $201=$3;
      var $202=(($201+12)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($200)|0) < (($203)|0);
      if ($204) { __label__ = 21; break; } else { __label__ = 29; break; }
    case 21: 
      $j=0;
      __label__ = 22; break;
    case 22: 
      var $207=$j;
      var $208=(($14+32)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=(($207)|0) < (($209)|0);
      if ($210) { __label__ = 23; break; } else { __label__ = 26; break; }
    case 23: 
      var $212=$j;
      var $213=(($14+16)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+($212<<2))|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=$216;
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+32)|0);
      var $220=HEAP32[(($219)>>2)];
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[$220]($216, $solverData) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 24; break; } else { __label__ = 11; break; }
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $223=$j;
      var $224=(($223+1)|0);
      $j=$224;
      __label__ = 22; break;
    case 26: 
      (function() { try { __THREW__ = false; return __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 27; break; } else { __label__ = 11; break; }
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $228=$i2;
      var $229=(($228+1)|0);
      $i2=$229;
      __label__ = 20; break;
    case 29: 
      (function() { try { __THREW__ = false; return __ZN15b2ContactSolver13StoreImpulsesEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 30; break; } else { __label__ = 11; break; }
    case 30: 
      var $232 = (function() { try { __THREW__ = false; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 31; break; } else { __label__ = 11; break; }
    case 31: 
      var $234=$2;
      var $235=(($234+16)|0);
      HEAPF32[(($235)>>2)]=$232;
      $i3=0;
      __label__ = 32; break;
    case 32: 
      var $237=$i3;
      var $238=(($14+28)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($237)|0) < (($239)|0);
      if ($240) { __label__ = 33; break; } else { __label__ = 46; break; }
    case 33: 
      var $242=$i3;
      var $243=(($14+20)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244+$242*12)|0);
      var $246=(($245)|0);
      var $247=$c4;
      var $248=$246;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($247)>>2)]=HEAP32[(($248)>>2)];HEAP32[(($247+4)>>2)]=HEAP32[(($248+4)>>2)];
      var $249=$i3;
      var $250=(($14+20)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+$249*12)|0);
      var $253=(($252+8)|0);
      var $254=HEAPF32[(($253)>>2)];
      $a5=$254;
      var $255=$i3;
      var $256=(($14+24)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=(($257+$255*12)|0);
      var $259=(($258)|0);
      var $260=$v6;
      var $261=$259;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($260)>>2)]=HEAP32[(($261)>>2)];HEAP32[(($260+4)>>2)]=HEAP32[(($261+4)>>2)];
      var $262=$i3;
      var $263=(($14+24)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264+$262*12)|0);
      var $266=(($265+8)|0);
      var $267=HEAPF32[(($266)>>2)];
      $w7=$267;
      var $268=$h;
      (function() { try { __THREW__ = false; return __ZmlfRK6b2Vec2($translation, $268, $v6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 34; break; } else { __label__ = 11; break; }
    case 34: 
      var $270 = (function() { try { __THREW__ = false; return __Z5b2DotRK6b2Vec2S1_($translation, $translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 35; break; } else { __label__ = 11; break; }
    case 35: 
      var $272=$270 > 4;
      if ($272) { __label__ = 36; break; } else { __label__ = 39; break; }
    case 36: 
      var $274 = (function() { try { __THREW__ = false; return __ZNK6b2Vec26LengthEv($translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 37; break; } else { __label__ = 11; break; }
    case 37: 
      var $276=2/$274;
      $ratio=$276;
      var $277=$ratio;
      (function() { try { __THREW__ = false; return __ZN6b2Vec2mLEf($v6, $277) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 38; break; } else { __label__ = 11; break; }
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $280=$h;
      var $281=$w7;
      var $282=$280*$281;
      $rotation=$282;
      var $283=$rotation;
      var $284=$rotation;
      var $285=$283*$284;
      var $286=$285 > 2.4674012660980225;
      if ($286) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: 
      var $288=$rotation;
      var $289 = (function() { try { __THREW__ = false; return __Z5b2AbsIfET_S0_($288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 41; break; } else { __label__ = 11; break; }
    case 41: 
      var $291=1.5707963705062866/$289;
      $ratio8=$291;
      var $292=$ratio8;
      var $293=$w7;
      var $294=$293*$292;
      $w7=$294;
      __label__ = 42; break;
    case 42: 
      var $296=$h;
      (function() { try { __THREW__ = false; return __ZmlfRK6b2Vec2($12, $296, $v6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 43; break; } else { __label__ = 11; break; }
    case 43: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2pLERKS_($c4, $12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 44; break; } else { __label__ = 11; break; }
    case 44: 
      var $299=$h;
      var $300=$w7;
      var $301=$299*$300;
      var $302=$a5;
      var $303=$302+$301;
      $a5=$303;
      var $304=$i3;
      var $305=(($14+20)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+$304*12)|0);
      var $308=(($307)|0);
      var $309=$308;
      var $310=$c4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($309)>>2)]=HEAP32[(($310)>>2)];HEAP32[(($309+4)>>2)]=HEAP32[(($310+4)>>2)];
      var $311=$a5;
      var $312=$i3;
      var $313=(($14+20)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=(($314+$312*12)|0);
      var $316=(($315+8)|0);
      HEAPF32[(($316)>>2)]=$311;
      var $317=$i3;
      var $318=(($14+24)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=(($319+$317*12)|0);
      var $321=(($320)|0);
      var $322=$321;
      var $323=$v6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($322)>>2)]=HEAP32[(($323)>>2)];HEAP32[(($322+4)>>2)]=HEAP32[(($323+4)>>2)];
      var $324=$w7;
      var $325=$i3;
      var $326=(($14+24)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327+$325*12)|0);
      var $329=(($328+8)|0);
      HEAPF32[(($329)>>2)]=$324;
      __label__ = 45; break;
    case 45: 
      var $331=$i3;
      var $332=(($331+1)|0);
      $i3=$332;
      __label__ = 32; break;
    case 46: 
      (function() { try { __THREW__ = false; return __ZN7b2Timer5ResetEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 47; break; } else { __label__ = 11; break; }
    case 47: 
      $positionSolved=0;
      $i9=0;
      __label__ = 48; break;
    case 48: 
      var $336=$i9;
      var $337=$3;
      var $338=(($337+16)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=(($336)|0) < (($339)|0);
      if ($340) { __label__ = 49; break; } else { __label__ = 62; break; }
    case 49: 
      var $342 = (function() { try { __THREW__ = false; return __ZN15b2ContactSolver24SolvePositionConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 50; break; } else { __label__ = 11; break; }
    case 50: 
      var $344=(($342)&1);
      $contactsOkay=$344;
      $jointsOkay=1;
      $i10=0;
      __label__ = 51; break;
    case 51: 
      var $346=$i10;
      var $347=(($14+32)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=(($346)|0) < (($348)|0);
      if ($349) { __label__ = 52; break; } else { __label__ = 57; break; }
    case 52: 
      var $351=$i10;
      var $352=(($14+16)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=(($353+($351<<2))|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=$355;
      var $357=HEAP32[(($356)>>2)];
      var $358=(($357+36)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360 = (function() { try { __THREW__ = false; return FUNCTION_TABLE[$359]($355, $solverData) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 53; break; } else { __label__ = 11; break; }
    case 53: 
      var $362=(($360)&1);
      $jointOkay=$362;
      var $363=$jointsOkay;
      var $364=(($363) & 1);
      if ($364) { __label__ = 54; break; } else { var $369 = 0;__label__ = 55; break; }
    case 54: 
      var $366=$jointOkay;
      var $367=(($366) & 1);
      var $369 = $367;__label__ = 55; break;
    case 55: 
      var $369;
      var $370=(($369)&1);
      $jointsOkay=$370;
      __label__ = 56; break;
    case 56: 
      var $372=$i10;
      var $373=(($372+1)|0);
      $i10=$373;
      __label__ = 51; break;
    case 57: 
      var $375=$contactsOkay;
      var $376=(($375) & 1);
      if ($376) { __label__ = 58; break; } else { __label__ = 60; break; }
    case 58: 
      var $378=$jointsOkay;
      var $379=(($378) & 1);
      if ($379) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      $positionSolved=1;
      __label__ = 62; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $383=$i9;
      var $384=(($383+1)|0);
      $i9=$384;
      __label__ = 48; break;
    case 62: 
      $i11=0;
      __label__ = 63; break;
    case 63: 
      var $387=$i11;
      var $388=(($14+28)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($387)|0) < (($389)|0);
      if ($390) { __label__ = 64; break; } else { __label__ = 67; break; }
    case 64: 
      var $392=$i11;
      var $393=(($14+8)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=(($394+($392<<2))|0);
      var $396=HEAP32[(($395)>>2)];
      $body=$396;
      var $397=$body;
      var $398=(($397+28)|0);
      var $399=(($398+16)|0);
      var $400=$i11;
      var $401=(($14+20)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=(($402+$400*12)|0);
      var $404=(($403)|0);
      var $405=$399;
      var $406=$404;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($405)>>2)]=HEAP32[(($406)>>2)];HEAP32[(($405+4)>>2)]=HEAP32[(($406+4)>>2)];
      var $407=$i11;
      var $408=(($14+20)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($409+$407*12)|0);
      var $411=(($410+8)|0);
      var $412=HEAPF32[(($411)>>2)];
      var $413=$body;
      var $414=(($413+28)|0);
      var $415=(($414+28)|0);
      HEAPF32[(($415)>>2)]=$412;
      var $416=$body;
      var $417=(($416+64)|0);
      var $418=$i11;
      var $419=(($14+24)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420+$418*12)|0);
      var $422=(($421)|0);
      var $423=$417;
      var $424=$422;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($423)>>2)]=HEAP32[(($424)>>2)];HEAP32[(($423+4)>>2)]=HEAP32[(($424+4)>>2)];
      var $425=$i11;
      var $426=(($14+24)|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=(($427+$425*12)|0);
      var $429=(($428+8)|0);
      var $430=HEAPF32[(($429)>>2)];
      var $431=$body;
      var $432=(($431+72)|0);
      HEAPF32[(($432)>>2)]=$430;
      var $433=$body;
      (function() { try { __THREW__ = false; return __ZN6b2Body20SynchronizeTransformEv($433) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 65; break; } else { __label__ = 11; break; }
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $436=$i11;
      var $437=(($436+1)|0);
      $i11=$437;
      __label__ = 63; break;
    case 67: 
      var $439 = (function() { try { __THREW__ = false; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 68; break; } else { __label__ = 11; break; }
    case 68: 
      var $441=$2;
      var $442=(($441+20)|0);
      HEAPF32[(($442)>>2)]=$439;
      var $443=(($contactSolver+40)|0);
      var $444=HEAP32[(($443)>>2)];
      (function() { try { __THREW__ = false; return __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($14, $444) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 69; break; } else { __label__ = 11; break; }
    case 69: 
      var $446=$5;
      var $447=(($446) & 1);
      if ($447) { __label__ = 70; break; } else { __label__ = 93; break; }
    case 70: 
      $minSleepTime=3.4028234663852886e+38;
      $linTolSqr=0.00009999999747378752;
      $angTolSqr=0.001218469929881394;
      $i12=0;
      __label__ = 71; break;
    case 71: 
      var $450=$i12;
      var $451=(($14+28)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=(($450)|0) < (($452)|0);
      if ($453) { __label__ = 72; break; } else { __label__ = 84; break; }
    case 72: 
      var $455=$i12;
      var $456=(($14+8)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457+($455<<2))|0);
      var $459=HEAP32[(($458)>>2)];
      $b13=$459;
      var $460=$b13;
      var $461 = (function() { try { __THREW__ = false; return __ZNK6b2Body7GetTypeEv($460) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 73; break; } else { __label__ = 11; break; }
    case 73: 
      var $463=(($461)|0)==0;
      if ($463) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: 
      __label__ = 83; break;
    case 75: 
      var $466=$b13;
      var $467=(($466+4)|0);
      var $468=HEAPU16[(($467)>>1)];
      var $469=(($468)&65535);
      var $470=$469 & 4;
      var $471=(($470)|0)==0;
      if ($471) { __label__ = 79; break; } else { __label__ = 76; break; }
    case 76: 
      var $473=$b13;
      var $474=(($473+72)|0);
      var $475=HEAPF32[(($474)>>2)];
      var $476=$b13;
      var $477=(($476+72)|0);
      var $478=HEAPF32[(($477)>>2)];
      var $479=$475*$478;
      var $480=$479 > 0.001218469929881394;
      if ($480) { __label__ = 79; break; } else { __label__ = 77; break; }
    case 77: 
      var $482=$b13;
      var $483=(($482+64)|0);
      var $484=$b13;
      var $485=(($484+64)|0);
      var $486 = (function() { try { __THREW__ = false; return __Z5b2DotRK6b2Vec2S1_($483, $485) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 78; break; } else { __label__ = 11; break; }
    case 78: 
      var $488=$486 > 0.00009999999747378752;
      if ($488) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $490=$b13;
      var $491=(($490+144)|0);
      HEAPF32[(($491)>>2)]=0;
      $minSleepTime=0;
      __label__ = 82; break;
    case 80: 
      var $493=$h;
      var $494=$b13;
      var $495=(($494+144)|0);
      var $496=HEAPF32[(($495)>>2)];
      var $497=$496+$493;
      HEAPF32[(($495)>>2)]=$497;
      var $498=$minSleepTime;
      var $499=$b13;
      var $500=(($499+144)|0);
      var $501=HEAPF32[(($500)>>2)];
      var $502 = (function() { try { __THREW__ = false; return __Z5b2MinIfET_S0_S0_($498, $501) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 81; break; } else { __label__ = 11; break; }
    case 81: 
      $minSleepTime=$502;
      __label__ = 82; break;
    case 82: 
      __label__ = 83; break;
    case 83: 
      var $506=$i12;
      var $507=(($506+1)|0);
      $i12=$507;
      __label__ = 71; break;
    case 84: 
      var $509=$minSleepTime;
      var $510=$509 >= 0.5;
      if ($510) { __label__ = 85; break; } else { __label__ = 92; break; }
    case 85: 
      var $512=$positionSolved;
      var $513=(($512) & 1);
      if ($513) { __label__ = 86; break; } else { __label__ = 92; break; }
    case 86: 
      $i14=0;
      __label__ = 87; break;
    case 87: 
      var $516=$i14;
      var $517=(($14+28)|0);
      var $518=HEAP32[(($517)>>2)];
      var $519=(($516)|0) < (($518)|0);
      if ($519) { __label__ = 88; break; } else { __label__ = 91; break; }
    case 88: 
      var $521=$i14;
      var $522=(($14+8)|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=(($523+($521<<2))|0);
      var $525=HEAP32[(($524)>>2)];
      $b15=$525;
      var $526=$b15;
      (function() { try { __THREW__ = false; return __ZN6b2Body8SetAwakeEb($526, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 89; break; } else { __label__ = 11; break; }
    case 89: 
      __label__ = 90; break;
    case 90: 
      var $529=$i14;
      var $530=(($529+1)|0);
      $i14=$530;
      __label__ = 87; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      __label__ = 93; break;
    case 93: 
      FUNCTION_TABLE[__ZN15b2ContactSolverD1Ev]($contactSolver);
      STACKTOP = __stackBase__;
      return;
    case 94: 
      __label__ = 95; break;
    case 95: 
      var $536=$10;
      var $537=$10;
      var $538=$11;
      var $539=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $537, tempValue);
      var $540=($539.f1 = $538, $539);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 96: 
      var $542=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Body7GetTypeEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2World22SetDestructionListenerEP21b2DestructionListener($this, $listener) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$listener;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102980)|0);
  HEAP32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN7b2World16SetContactFilterEP15b2ContactFilter($this, $filter) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$filter;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102872)|0);
  var $6=(($5+68)|0);
  HEAP32[(($6)>>2)]=$4;
  ;
  return;
}


function __ZN7b2World18SetContactListenerEP17b2ContactListener($this, $listener) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$listener;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102872)|0);
  var $6=(($5+72)|0);
  HEAP32[(($6)>>2)]=$4;
  ;
  return;
}


function __ZN7b2World12SetDebugDrawEP6b2Draw($this, $debugDraw) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$debugDraw;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102984)|0);
  HEAP32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($this, $constraints) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $c;
      var $vc;
      var $impulse=__stackBase__;
      var $j;
      $1=$this;
      $2=$constraints;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 11; break;
    case 3: 
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $10=$i;
      var $11=(($3+36)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|0) < (($12)|0);
      if ($13) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      var $15=$i;
      var $16=(($3+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      $c=$19;
      var $20=$2;
      var $21=$i;
      var $22=(($20+$21*152)|0);
      $vc=$22;
      var $23=$vc;
      var $24=(($23+144)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($impulse+16)|0);
      HEAP32[(($26)>>2)]=$25;
      $j=0;
      __label__ = 6; break;
    case 6: 
      var $28=$j;
      var $29=$vc;
      var $30=(($29+144)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($28)|0) < (($31)|0);
      if ($32) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $34=$j;
      var $35=$vc;
      var $36=(($35)|0);
      var $37=(($36+$34*36)|0);
      var $38=(($37+16)|0);
      var $39=HEAPF32[(($38)>>2)];
      var $40=$j;
      var $41=(($impulse)|0);
      var $42=(($41+($40<<2))|0);
      HEAPF32[(($42)>>2)]=$39;
      var $43=$j;
      var $44=$vc;
      var $45=(($44)|0);
      var $46=(($45+$43*36)|0);
      var $47=(($46+20)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=$j;
      var $50=(($impulse+8)|0);
      var $51=(($50+($49<<2))|0);
      HEAPF32[(($51)>>2)]=$48;
      __label__ = 8; break;
    case 8: 
      var $53=$j;
      var $54=(($53+1)|0);
      $j=$54;
      __label__ = 6; break;
    case 9: 
      var $56=(($3+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+20)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$c;
      FUNCTION_TABLE[$61]($57, $62, $impulse);
      __label__ = 10; break;
    case 10: 
      var $64=$i;
      var $65=(($64+1)|0);
      $i=$65;
      __label__ = 4; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2ContactManagerD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2ContactManagerD2Ev($2);
  ;
  return;
}


function __ZN8b2Island8SolveTOIERK10b2TimeStepii($this, $subStep, $toiIndexA, $toiIndexB) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $b;
      var $contactSolverDef=__stackBase__;
      var $contactSolver=__stackBase__+44;
      var $i1;
      var $contactsOkay;
      var $5;
      var $6;
      var $i2;
      var $h;
      var $i3;
      var $c=__stackBase__+96;
      var $a;
      var $v=__stackBase__+104;
      var $w;
      var $translation=__stackBase__+112;
      var $ratio;
      var $rotation;
      var $ratio4;
      var $7=__stackBase__+120;
      var $body;
      $1=$this;
      $2=$subStep;
      $3=$toiIndexA;
      $4=$toiIndexB;
      var $8=$1;
      var $9=$3;
      var $10=(($8+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($9)|0) < (($11)|0);
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str170)|0), 386, ((STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island8SolveTOIERK10b2TimeStepii)|0), ((STRING_TABLE.__str1171)|0));
      __label__ = 4; break;
    case 4: 
      var $16=$4;
      var $17=(($8+28)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|0) < (($18)|0);
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str170)|0), 387, ((STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island8SolveTOIERK10b2TimeStepii)|0), ((STRING_TABLE.__str2172)|0));
      __label__ = 7; break;
    case 7: 
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $24=$i;
      var $25=(($8+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($24)|0) < (($26)|0);
      if ($27) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $29=$i;
      var $30=(($8+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($29<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      $b=$33;
      var $34=$i;
      var $35=(($8+20)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+$34*12)|0);
      var $38=(($37)|0);
      var $39=$b;
      var $40=(($39+28)|0);
      var $41=(($40+16)|0);
      var $42=$38;
      var $43=$41;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
      var $44=$b;
      var $45=(($44+28)|0);
      var $46=(($45+28)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=$i;
      var $49=(($8+20)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+$48*12)|0);
      var $52=(($51+8)|0);
      HEAPF32[(($52)>>2)]=$47;
      var $53=$i;
      var $54=(($8+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+$53*12)|0);
      var $57=(($56)|0);
      var $58=$b;
      var $59=(($58+64)|0);
      var $60=$57;
      var $61=$59;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[(($60+4)>>2)]=HEAP32[(($61+4)>>2)];
      var $62=$b;
      var $63=(($62+72)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=$i;
      var $66=(($8+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+$65*12)|0);
      var $69=(($68+8)|0);
      HEAPF32[(($69)>>2)]=$64;
      __label__ = 10; break;
    case 10: 
      var $71=$i;
      var $72=(($71+1)|0);
      $i=$72;
      __label__ = 8; break;
    case 11: 
      var $74=(($8+12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($contactSolverDef+24)|0);
      HEAP32[(($76)>>2)]=$75;
      var $77=(($8+36)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($contactSolverDef+28)|0);
      HEAP32[(($79)>>2)]=$78;
      var $80=(($8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($contactSolverDef+40)|0);
      HEAP32[(($82)>>2)]=$81;
      var $83=(($contactSolverDef)|0);
      var $84=$2;
      var $85=$83;
      var $86=$84;
      assert(24 % 1 === 0, 'memcpy given ' + 24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[(($85+4)>>2)]=HEAP32[(($86+4)>>2)];HEAP32[(($85+8)>>2)]=HEAP32[(($86+8)>>2)];HEAP32[(($85+12)>>2)]=HEAP32[(($86+12)>>2)];HEAP32[(($85+16)>>2)]=HEAP32[(($86+16)>>2)];HEAP32[(($85+20)>>2)]=HEAP32[(($86+20)>>2)];
      var $87=(($8+20)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($contactSolverDef+32)|0);
      HEAP32[(($89)>>2)]=$88;
      var $90=(($8+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($contactSolverDef+36)|0);
      HEAP32[(($92)>>2)]=$91;
      FUNCTION_TABLE[__ZN15b2ContactSolverC1EP18b2ContactSolverDef]($contactSolver, $contactSolverDef);
      $i1=0;
      __label__ = 12; break;
    case 12: 
      var $94=$i1;
      var $95=$2;
      var $96=(($95+16)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($94)|0) < (($97)|0);
      if ($98) { __label__ = 13; break; } else { __label__ = 19; break; }
    case 13: 
      var $100=$3;
      var $101=$4;
      var $102 = (function() { try { __THREW__ = false; return __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($contactSolver, $100, $101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $104=(($102)&1);
      $contactsOkay=$104;
      var $105=$contactsOkay;
      var $106=(($105) & 1);
      if ($106) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      __label__ = 19; break;
    case 16: 
      var $109=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $110=$109.f0;
      $5=$110;
      var $111=$109.f1;
      $6=$111;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN15b2ContactSolverD1Ev]($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $114=$i1;
      var $115=(($114+1)|0);
      $i1=$115;
      __label__ = 12; break;
    case 19: 
      var $117=$3;
      var $118=(($8+8)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+($117<<2))|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+28)|0);
      var $123=(($122+8)|0);
      var $124=$3;
      var $125=(($8+20)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+$124*12)|0);
      var $128=(($127)|0);
      var $129=$123;
      var $130=$128;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($129)>>2)]=HEAP32[(($130)>>2)];HEAP32[(($129+4)>>2)]=HEAP32[(($130+4)>>2)];
      var $131=$3;
      var $132=(($8+20)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+$131*12)|0);
      var $135=(($134+8)|0);
      var $136=HEAPF32[(($135)>>2)];
      var $137=$3;
      var $138=(($8+8)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+($137<<2))|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+28)|0);
      var $143=(($142+24)|0);
      HEAPF32[(($143)>>2)]=$136;
      var $144=$4;
      var $145=(($8+8)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+($144<<2))|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+28)|0);
      var $150=(($149+8)|0);
      var $151=$4;
      var $152=(($8+20)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($153+$151*12)|0);
      var $155=(($154)|0);
      var $156=$150;
      var $157=$155;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($156)>>2)]=HEAP32[(($157)>>2)];HEAP32[(($156+4)>>2)]=HEAP32[(($157+4)>>2)];
      var $158=$4;
      var $159=(($8+20)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160+$158*12)|0);
      var $162=(($161+8)|0);
      var $163=HEAPF32[(($162)>>2)];
      var $164=$4;
      var $165=(($8+8)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+($164<<2))|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+28)|0);
      var $170=(($169+24)|0);
      HEAPF32[(($170)>>2)]=$163;
      (function() { try { __THREW__ = false; return __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 20; break; } else { __label__ = 16; break; }
    case 20: 
      $i2=0;
      __label__ = 21; break;
    case 21: 
      var $173=$i2;
      var $174=$2;
      var $175=(($174+12)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($173)|0) < (($176)|0);
      if ($177) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      (function() { try { __THREW__ = false; return __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 23; break; } else { __label__ = 16; break; }
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $181=$i2;
      var $182=(($181+1)|0);
      $i2=$182;
      __label__ = 21; break;
    case 25: 
      var $184=$2;
      var $185=(($184)|0);
      var $186=HEAPF32[(($185)>>2)];
      $h=$186;
      $i3=0;
      __label__ = 26; break;
    case 26: 
      var $188=$i3;
      var $189=(($8+28)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($188)|0) < (($190)|0);
      if ($191) { __label__ = 27; break; } else { __label__ = 41; break; }
    case 27: 
      var $193=$i3;
      var $194=(($8+20)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=(($195+$193*12)|0);
      var $197=(($196)|0);
      var $198=$c;
      var $199=$197;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($198)>>2)]=HEAP32[(($199)>>2)];HEAP32[(($198+4)>>2)]=HEAP32[(($199+4)>>2)];
      var $200=$i3;
      var $201=(($8+20)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=(($202+$200*12)|0);
      var $204=(($203+8)|0);
      var $205=HEAPF32[(($204)>>2)];
      $a=$205;
      var $206=$i3;
      var $207=(($8+24)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=(($208+$206*12)|0);
      var $210=(($209)|0);
      var $211=$v;
      var $212=$210;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[(($211+4)>>2)]=HEAP32[(($212+4)>>2)];
      var $213=$i3;
      var $214=(($8+24)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($215+$213*12)|0);
      var $217=(($216+8)|0);
      var $218=HEAPF32[(($217)>>2)];
      $w=$218;
      var $219=$h;
      (function() { try { __THREW__ = false; return __ZmlfRK6b2Vec2($translation, $219, $v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 28; break; } else { __label__ = 16; break; }
    case 28: 
      var $221 = (function() { try { __THREW__ = false; return __Z5b2DotRK6b2Vec2S1_($translation, $translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 29; break; } else { __label__ = 16; break; }
    case 29: 
      var $223=$221 > 4;
      if ($223) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $225 = (function() { try { __THREW__ = false; return __ZNK6b2Vec26LengthEv($translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 31; break; } else { __label__ = 16; break; }
    case 31: 
      var $227=2/$225;
      $ratio=$227;
      var $228=$ratio;
      (function() { try { __THREW__ = false; return __ZN6b2Vec2mLEf($v, $228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 32; break; } else { __label__ = 16; break; }
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $231=$h;
      var $232=$w;
      var $233=$231*$232;
      $rotation=$233;
      var $234=$rotation;
      var $235=$rotation;
      var $236=$234*$235;
      var $237=$236 > 2.4674012660980225;
      if ($237) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      var $239=$rotation;
      var $240 = (function() { try { __THREW__ = false; return __Z5b2AbsIfET_S0_($239) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 35; break; } else { __label__ = 16; break; }
    case 35: 
      var $242=1.5707963705062866/$240;
      $ratio4=$242;
      var $243=$ratio4;
      var $244=$w;
      var $245=$244*$243;
      $w=$245;
      __label__ = 36; break;
    case 36: 
      var $247=$h;
      (function() { try { __THREW__ = false; return __ZmlfRK6b2Vec2($7, $247, $v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 37; break; } else { __label__ = 16; break; }
    case 37: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2pLERKS_($c, $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 38; break; } else { __label__ = 16; break; }
    case 38: 
      var $250=$h;
      var $251=$w;
      var $252=$250*$251;
      var $253=$a;
      var $254=$253+$252;
      $a=$254;
      var $255=$i3;
      var $256=(($8+20)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=(($257+$255*12)|0);
      var $259=(($258)|0);
      var $260=$259;
      var $261=$c;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($260)>>2)]=HEAP32[(($261)>>2)];HEAP32[(($260+4)>>2)]=HEAP32[(($261+4)>>2)];
      var $262=$a;
      var $263=$i3;
      var $264=(($8+20)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265+$263*12)|0);
      var $267=(($266+8)|0);
      HEAPF32[(($267)>>2)]=$262;
      var $268=$i3;
      var $269=(($8+24)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270+$268*12)|0);
      var $272=(($271)|0);
      var $273=$272;
      var $274=$v;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];HEAP32[(($273+4)>>2)]=HEAP32[(($274+4)>>2)];
      var $275=$w;
      var $276=$i3;
      var $277=(($8+24)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+$276*12)|0);
      var $280=(($279+8)|0);
      HEAPF32[(($280)>>2)]=$275;
      var $281=$i3;
      var $282=(($8+8)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=(($283+($281<<2))|0);
      var $285=HEAP32[(($284)>>2)];
      $body=$285;
      var $286=$body;
      var $287=(($286+28)|0);
      var $288=(($287+16)|0);
      var $289=$288;
      var $290=$c;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($289)>>2)]=HEAP32[(($290)>>2)];HEAP32[(($289+4)>>2)]=HEAP32[(($290+4)>>2)];
      var $291=$a;
      var $292=$body;
      var $293=(($292+28)|0);
      var $294=(($293+28)|0);
      HEAPF32[(($294)>>2)]=$291;
      var $295=$body;
      var $296=(($295+64)|0);
      var $297=$296;
      var $298=$v;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($297)>>2)]=HEAP32[(($298)>>2)];HEAP32[(($297+4)>>2)]=HEAP32[(($298+4)>>2)];
      var $299=$w;
      var $300=$body;
      var $301=(($300+72)|0);
      HEAPF32[(($301)>>2)]=$299;
      var $302=$body;
      (function() { try { __THREW__ = false; return __ZN6b2Body20SynchronizeTransformEv($302) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 39; break; } else { __label__ = 16; break; }
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $305=$i3;
      var $306=(($305+1)|0);
      $i3=$306;
      __label__ = 26; break;
    case 41: 
      var $308=(($contactSolver+40)|0);
      var $309=HEAP32[(($308)>>2)];
      (function() { try { __THREW__ = false; return __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($8, $309) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 42; break; } else { __label__ = 16; break; }
    case 42: 
      FUNCTION_TABLE[__ZN15b2ContactSolverD1Ev]($contactSolver);
      STACKTOP = __stackBase__;
      return;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $313=$5;
      var $314=$5;
      var $315=$6;
      var $316=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $314, tempValue);
      var $317=($316.f1 = $315, $316);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 45: 
      var $319=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2WorldC2ERK6b2Vec2($this, $gravity) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$gravity;
      var $5=$1;
      var $6=(($5)|0);
      FUNCTION_TABLE[__ZN16b2BlockAllocatorC1Ev]($6);
      var $7=(($5+68)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2StackAllocatorC1Ev]($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=(($5+102872)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2ContactManagerC1Ev]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $11=(($5+102968)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $13=(($5+102996)|0);
      var $14=(($5+102980)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=(($5+102984)|0);
      HEAP32[(($15)>>2)]=0;
      var $16=(($5+102952)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=(($5+102956)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=(($5+102960)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=(($5+102964)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=(($5+102992)|0);
      HEAP8[($20)]=1;
      var $21=(($5+102993)|0);
      HEAP8[($21)]=1;
      var $22=(($5+102994)|0);
      HEAP8[($22)]=0;
      var $23=(($5+102995)|0);
      HEAP8[($23)]=1;
      var $24=(($5+102976)|0);
      HEAP8[($24)]=1;
      var $25=(($5+102968)|0);
      var $26=$2;
      var $27=$25;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      var $29=(($5+102868)|0);
      HEAP32[(($29)>>2)]=4;
      var $30=(($5+102988)|0);
      HEAPF32[(($30)>>2)]=0;
      var $31=(($5)|0);
      var $32=(($5+102872)|0);
      var $33=(($32+76)|0);
      HEAP32[(($33)>>2)]=$31;
      var $34=(($5+102996)|0);
      var $35=$34;
      _memset($35, 0, 32, 1);
      ;
      return;
    case 5: 
      var $37=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $38=$37.f0;
      $3=$38;
      var $39=$37.f1;
      $4=$39;
      __label__ = 11; break;
    case 6: 
      var $41=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $42=$41.f0;
      $3=$42;
      var $43=$41.f1;
      $4=$43;
      __label__ = 9; break;
    case 7: 
      var $45=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $46=$45.f0;
      $3=$46;
      var $47=$45.f1;
      $4=$47;
      var $48=(($5+102872)|0);
      (function() { try { __THREW__ = false; return __ZN16b2ContactManagerD1Ev($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $51=(($5+68)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2StackAllocatorD1Ev]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $54=(($5)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2BlockAllocatorD1Ev]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $57=$3;
      var $58=$3;
      var $59=$4;
      var $60=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $58, tempValue);
      var $61=($60.f1 = $59, $60);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 14: 
      var $63=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2WorldD2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $b;
      var $bNext;
      var $f;
      var $fNext;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=(($4+102952)|0);
      var $6=HEAP32[(($5)>>2)];
      $b=$6;
      __label__ = 2; break;
    case 2: 
      var $8=$b;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $11=$b;
      var $12=(($11+96)|0);
      var $13=HEAP32[(($12)>>2)];
      $bNext=$13;
      var $14=$b;
      var $15=(($14+100)|0);
      var $16=HEAP32[(($15)>>2)];
      $f=$16;
      __label__ = 4; break;
    case 4: 
      var $18=$f;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $21=$f;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      $fNext=$23;
      var $24=$f;
      var $25=(($24+28)|0);
      HEAP32[(($25)>>2)]=0;
      var $26=$f;
      var $27=(($4)|0);
      (function() { try { __THREW__ = false; return __ZN9b2Fixture7DestroyEP16b2BlockAllocator($26, $27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $29=$fNext;
      $f=$29;
      __label__ = 4; break;
    case 7: 
      var $31=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $32=$31.f0;
      $2=$32;
      var $33=$31.f1;
      $3=$33;
      var $34=(($4+102872)|0);
      (function() { try { __THREW__ = false; return __ZN16b2ContactManagerD1Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 20; break; }
    case 8: 
      var $36=$bNext;
      $b=$36;
      __label__ = 2; break;
    case 9: 
      var $38=(($4+102872)|0);
      (function() { try { __THREW__ = false; return __ZN16b2ContactManagerD1Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $40=(($4+68)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2StackAllocatorD1Ev]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $42=(($4)|0);
      FUNCTION_TABLE[__ZN16b2BlockAllocatorD1Ev]($42);
      ;
      return;
    case 12: 
      var $44=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $45=$44.f0;
      $2=$45;
      var $46=$44.f1;
      $3=$46;
      __label__ = 15; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $49=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $50=$49.f0;
      $2=$50;
      var $51=$49.f1;
      $3=$51;
      __label__ = 17; break;
    case 15: 
      var $53=(($4+68)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2StackAllocatorD1Ev]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $56=(($4)|0);
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2BlockAllocatorD1Ev]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $59=$2;
      var $60=$2;
      var $61=$3;
      var $62=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $60, tempValue);
      var $63=($62.f1 = $61, $62);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 20: 
      var $65=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World10CreateBodyEPK9b2BodyDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $mem;
      var $b;
      $2=$this;
      $3=$def;
      var $4=$2;
      var $5=__ZNK7b2World8IsLockedEv($4);
      var $6=(($5)&1);
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str174)|0), 109, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World10CreateBodyEPK9b2BodyDef)|0), ((STRING_TABLE.__str1175)|0));
      __label__ = 4; break;
    case 4: 
      var $11=__ZNK7b2World8IsLockedEv($4);
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 11; break;
    case 6: 
      var $14=(($4)|0);
      var $15=__ZN16b2BlockAllocator8AllocateEi($14, 152);
      $mem=$15;
      var $16=$mem;
      var $17=(($16)|0)==0;
      if ($17) { var $22 = 0;__label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $19=$16;
      var $20=$3;
      FUNCTION_TABLE[__ZN6b2BodyC1EPK9b2BodyDefP7b2World]($19, $20, $4);
      var $22 = $19;__label__ = 8; break;
    case 8: 
      var $22;
      $b=$22;
      var $23=$b;
      var $24=(($23+92)|0);
      HEAP32[(($24)>>2)]=0;
      var $25=(($4+102952)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$b;
      var $28=(($27+96)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=(($4+102952)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|0)!=0;
      if ($31) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $33=$b;
      var $34=(($4+102952)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+92)|0);
      HEAP32[(($36)>>2)]=$33;
      __label__ = 10; break;
    case 10: 
      var $38=$b;
      var $39=(($4+102952)|0);
      HEAP32[(($39)>>2)]=$38;
      var $40=(($4+102960)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+1)|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=$b;
      $1=$43;
      __label__ = 11; break;
    case 11: 
      var $45=$1;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World11DestroyBodyEP6b2Body($this, $b) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $je;
      var $je0;
      var $ce;
      var $ce0;
      var $f;
      var $f0;
      $1=$this;
      $2=$b;
      var $3=$1;
      var $4=(($3+102960)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0) > 0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str174)|0), 133, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11DestroyBodyEP6b2Body)|0), ((STRING_TABLE.__str2176)|0));
      __label__ = 4; break;
    case 4: 
      var $10=__ZNK7b2World8IsLockedEv($3);
      var $11=(($10)&1);
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str174)|0), 134, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11DestroyBodyEP6b2Body)|0), ((STRING_TABLE.__str1175)|0));
      __label__ = 7; break;
    case 7: 
      var $16=__ZNK7b2World8IsLockedEv($3);
      if ($16) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 29; break;
    case 9: 
      var $19=$2;
      var $20=(($19+108)|0);
      var $21=HEAP32[(($20)>>2)];
      $je=$21;
      __label__ = 10; break;
    case 10: 
      var $23=$je;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $26=$je;
      $je0=$26;
      var $27=$je;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      $je=$29;
      var $30=(($3+102980)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $34=(($3+102980)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$je0;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      FUNCTION_TABLE[$39]($35, $42);
      __label__ = 13; break;
    case 13: 
      var $44=$je0;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      __ZN7b2World12DestroyJointEP7b2Joint($3, $46);
      var $47=$je;
      var $48=$2;
      var $49=(($48+108)|0);
      HEAP32[(($49)>>2)]=$47;
      __label__ = 10; break;
    case 14: 
      var $51=$2;
      var $52=(($51+108)|0);
      HEAP32[(($52)>>2)]=0;
      var $53=$2;
      var $54=(($53+112)|0);
      var $55=HEAP32[(($54)>>2)];
      $ce=$55;
      __label__ = 15; break;
    case 15: 
      var $57=$ce;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $60=$ce;
      $ce0=$60;
      var $61=$ce;
      var $62=(($61+12)|0);
      var $63=HEAP32[(($62)>>2)];
      $ce=$63;
      var $64=(($3+102872)|0);
      var $65=$ce0;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      __ZN16b2ContactManager7DestroyEP9b2Contact($64, $67);
      __label__ = 15; break;
    case 17: 
      var $69=$2;
      var $70=(($69+112)|0);
      HEAP32[(($70)>>2)]=0;
      var $71=$2;
      var $72=(($71+100)|0);
      var $73=HEAP32[(($72)>>2)];
      $f=$73;
      __label__ = 18; break;
    case 18: 
      var $75=$f;
      var $76=(($75)|0)!=0;
      if ($76) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $78=$f;
      $f0=$78;
      var $79=$f;
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      $f=$81;
      var $82=(($3+102980)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|0)!=0;
      if ($84) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $86=(($3+102980)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87;
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+12)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$f0;
      FUNCTION_TABLE[$91]($87, $92);
      __label__ = 21; break;
    case 21: 
      var $94=$f0;
      var $95=(($3+102872)|0);
      var $96=(($95)|0);
      __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($94, $96);
      var $97=$f0;
      var $98=(($3)|0);
      __ZN9b2Fixture7DestroyEP16b2BlockAllocator($97, $98);
      var $99=$f0;
      var $100=(($3)|0);
      var $101=$f0;
      var $102=$101;
      __ZN16b2BlockAllocator4FreeEPvi($100, $102, 44);
      var $103=$f;
      var $104=$2;
      var $105=(($104+100)|0);
      HEAP32[(($105)>>2)]=$103;
      var $106=$2;
      var $107=(($106+104)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108-1)|0);
      HEAP32[(($107)>>2)]=$109;
      __label__ = 18; break;
    case 22: 
      var $111=$2;
      var $112=(($111+100)|0);
      HEAP32[(($112)>>2)]=0;
      var $113=$2;
      var $114=(($113+104)|0);
      HEAP32[(($114)>>2)]=0;
      var $115=$2;
      var $116=(($115+92)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|0)!=0;
      if ($118) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $120=$2;
      var $121=(($120+96)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$2;
      var $124=(($123+92)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125+96)|0);
      HEAP32[(($126)>>2)]=$122;
      __label__ = 24; break;
    case 24: 
      var $128=$2;
      var $129=(($128+96)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130)|0)!=0;
      if ($131) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $133=$2;
      var $134=(($133+92)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$2;
      var $137=(($136+96)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+92)|0);
      HEAP32[(($139)>>2)]=$135;
      __label__ = 26; break;
    case 26: 
      var $141=$2;
      var $142=(($3+102952)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($141)|0)==(($143)|0);
      if ($144) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $146=$2;
      var $147=(($146+96)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($3+102952)|0);
      HEAP32[(($149)>>2)]=$148;
      __label__ = 28; break;
    case 28: 
      var $151=(($3+102960)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=(($152-1)|0);
      HEAP32[(($151)>>2)]=$153;
      var $154=$2;
      FUNCTION_TABLE[__ZN6b2BodyD1Ev]($154);
      var $155=(($3)|0);
      var $156=$2;
      var $157=$156;
      __ZN16b2BlockAllocator4FreeEPvi($155, $157, 152);
      __label__ = 29; break;
    case 29: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World12DestroyJointEP7b2Joint($this, $j) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $collideConnected;
      var $bodyA;
      var $bodyB;
      var $edge;
      $1=$this;
      $2=$j;
      var $3=$1;
      var $4=__ZNK7b2World8IsLockedEv($3);
      var $5=(($4)&1);
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str174)|0), 274, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World12DestroyJointEP7b2Joint)|0), ((STRING_TABLE.__str1175)|0));
      __label__ = 4; break;
    case 4: 
      var $10=__ZNK7b2World8IsLockedEv($3);
      if ($10) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 34; break;
    case 6: 
      var $13=$2;
      var $14=(($13+61)|0);
      var $15=HEAP8[($14)];
      var $16=(($15) & 1);
      var $17=(($16)&1);
      $collideConnected=$17;
      var $18=$2;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=$2;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+12)|0);
      HEAP32[(($29)>>2)]=$25;
      __label__ = 8; break;
    case 8: 
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $36=$2;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+8)|0);
      HEAP32[(($42)>>2)]=$38;
      __label__ = 10; break;
    case 10: 
      var $44=$2;
      var $45=(($3+102956)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($44)|0)==(($46)|0);
      if ($47) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $49=$2;
      var $50=(($49+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($3+102956)|0);
      HEAP32[(($52)>>2)]=$51;
      __label__ = 12; break;
    case 12: 
      var $54=$2;
      var $55=(($54+48)|0);
      var $56=HEAP32[(($55)>>2)];
      $bodyA=$56;
      var $57=$2;
      var $58=(($57+52)|0);
      var $59=HEAP32[(($58)>>2)];
      $bodyB=$59;
      var $60=$bodyA;
      __ZN6b2Body8SetAwakeEb($60, 1);
      var $61=$bodyB;
      __ZN6b2Body8SetAwakeEb($61, 1);
      var $62=$2;
      var $63=(($62+16)|0);
      var $64=(($63+8)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0)!=0;
      if ($66) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $68=$2;
      var $69=(($68+16)|0);
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$2;
      var $73=(($72+16)|0);
      var $74=(($73+8)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+12)|0);
      HEAP32[(($76)>>2)]=$71;
      __label__ = 14; break;
    case 14: 
      var $78=$2;
      var $79=(($78+16)|0);
      var $80=(($79+12)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81)|0)!=0;
      if ($82) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $84=$2;
      var $85=(($84+16)|0);
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$2;
      var $89=(($88+16)|0);
      var $90=(($89+12)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+8)|0);
      HEAP32[(($92)>>2)]=$87;
      __label__ = 16; break;
    case 16: 
      var $94=$2;
      var $95=(($94+16)|0);
      var $96=$bodyA;
      var $97=(($96+108)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($95)|0)==(($98)|0);
      if ($99) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $101=$2;
      var $102=(($101+16)|0);
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$bodyA;
      var $106=(($105+108)|0);
      HEAP32[(($106)>>2)]=$104;
      __label__ = 18; break;
    case 18: 
      var $108=$2;
      var $109=(($108+16)|0);
      var $110=(($109+8)|0);
      HEAP32[(($110)>>2)]=0;
      var $111=$2;
      var $112=(($111+16)|0);
      var $113=(($112+12)|0);
      HEAP32[(($113)>>2)]=0;
      var $114=$2;
      var $115=(($114+32)|0);
      var $116=(($115+8)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|0)!=0;
      if ($118) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $120=$2;
      var $121=(($120+32)|0);
      var $122=(($121+12)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$2;
      var $125=(($124+32)|0);
      var $126=(($125+8)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+12)|0);
      HEAP32[(($128)>>2)]=$123;
      __label__ = 20; break;
    case 20: 
      var $130=$2;
      var $131=(($130+32)|0);
      var $132=(($131+12)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|0)!=0;
      if ($134) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $136=$2;
      var $137=(($136+32)|0);
      var $138=(($137+8)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=$2;
      var $141=(($140+32)|0);
      var $142=(($141+12)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143+8)|0);
      HEAP32[(($144)>>2)]=$139;
      __label__ = 22; break;
    case 22: 
      var $146=$2;
      var $147=(($146+32)|0);
      var $148=$bodyB;
      var $149=(($148+108)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($147)|0)==(($150)|0);
      if ($151) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $153=$2;
      var $154=(($153+32)|0);
      var $155=(($154+12)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=$bodyB;
      var $158=(($157+108)|0);
      HEAP32[(($158)>>2)]=$156;
      __label__ = 24; break;
    case 24: 
      var $160=$2;
      var $161=(($160+32)|0);
      var $162=(($161+8)|0);
      HEAP32[(($162)>>2)]=0;
      var $163=$2;
      var $164=(($163+32)|0);
      var $165=(($164+12)|0);
      HEAP32[(($165)>>2)]=0;
      var $166=$2;
      var $167=(($3)|0);
      __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($166, $167);
      var $168=(($3+102964)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($169)|0) > 0;
      if ($170) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      __label__ = 27; break;
    case 26: 
      ___assert_func(((STRING_TABLE.__str174)|0), 346, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World12DestroyJointEP7b2Joint)|0), ((STRING_TABLE.__str3177)|0));
      __label__ = 27; break;
    case 27: 
      var $174=(($3+102964)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=(($175-1)|0);
      HEAP32[(($174)>>2)]=$176;
      var $177=$collideConnected;
      var $178=(($177) & 1);
      var $179=(($178)&1);
      var $180=(($179)|0)==0;
      if ($180) { __label__ = 28; break; } else { __label__ = 34; break; }
    case 28: 
      var $182=$bodyB;
      var $183=__ZN6b2Body14GetContactListEv($182);
      $edge=$183;
      __label__ = 29; break;
    case 29: 
      var $185=$edge;
      var $186=(($185)|0)!=0;
      if ($186) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $188=$edge;
      var $189=(($188)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$bodyA;
      var $192=(($190)|0)==(($191)|0);
      if ($192) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $194=$edge;
      var $195=(($194+4)|0);
      var $196=HEAP32[(($195)>>2)];
      __ZN9b2Contact16FlagForFilteringEv($196);
      __label__ = 32; break;
    case 32: 
      var $198=$edge;
      var $199=(($198+12)|0);
      var $200=HEAP32[(($199)>>2)];
      $edge=$200;
      __label__ = 29; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World11CreateJointEPK10b2JointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $j;
      var $bodyA;
      var $bodyB;
      var $edge;
      $2=$this;
      $3=$def;
      var $4=$2;
      var $5=__ZNK7b2World8IsLockedEv($4);
      var $6=(($5)&1);
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str174)|0), 214, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11CreateJointEPK10b2JointDef)|0), ((STRING_TABLE.__str1175)|0));
      __label__ = 4; break;
    case 4: 
      var $11=__ZNK7b2World8IsLockedEv($4);
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 20; break;
    case 6: 
      var $14=$3;
      var $15=(($4)|0);
      var $16=__ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($14, $15);
      $j=$16;
      var $17=$j;
      var $18=(($17+8)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=(($4+102956)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$j;
      var $22=(($21+12)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=(($4+102956)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $27=$j;
      var $28=(($4+102956)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+8)|0);
      HEAP32[(($30)>>2)]=$27;
      __label__ = 8; break;
    case 8: 
      var $32=$j;
      var $33=(($4+102956)|0);
      HEAP32[(($33)>>2)]=$32;
      var $34=(($4+102964)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+1)|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=$j;
      var $38=$j;
      var $39=(($38+16)|0);
      var $40=(($39+4)|0);
      HEAP32[(($40)>>2)]=$37;
      var $41=$j;
      var $42=(($41+52)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$j;
      var $45=(($44+16)|0);
      var $46=(($45)|0);
      HEAP32[(($46)>>2)]=$43;
      var $47=$j;
      var $48=(($47+16)|0);
      var $49=(($48+8)|0);
      HEAP32[(($49)>>2)]=0;
      var $50=$j;
      var $51=(($50+48)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+108)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$j;
      var $56=(($55+16)|0);
      var $57=(($56+12)|0);
      HEAP32[(($57)>>2)]=$54;
      var $58=$j;
      var $59=(($58+48)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+108)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|0)!=0;
      if ($63) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $65=$j;
      var $66=(($65+16)|0);
      var $67=$j;
      var $68=(($67+48)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+108)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+8)|0);
      HEAP32[(($72)>>2)]=$66;
      __label__ = 10; break;
    case 10: 
      var $74=$j;
      var $75=(($74+16)|0);
      var $76=$j;
      var $77=(($76+48)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+108)|0);
      HEAP32[(($79)>>2)]=$75;
      var $80=$j;
      var $81=$j;
      var $82=(($81+32)|0);
      var $83=(($82+4)|0);
      HEAP32[(($83)>>2)]=$80;
      var $84=$j;
      var $85=(($84+48)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$j;
      var $88=(($87+32)|0);
      var $89=(($88)|0);
      HEAP32[(($89)>>2)]=$86;
      var $90=$j;
      var $91=(($90+32)|0);
      var $92=(($91+8)|0);
      HEAP32[(($92)>>2)]=0;
      var $93=$j;
      var $94=(($93+52)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+108)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$j;
      var $99=(($98+32)|0);
      var $100=(($99+12)|0);
      HEAP32[(($100)>>2)]=$97;
      var $101=$j;
      var $102=(($101+52)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+108)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0)!=0;
      if ($106) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $108=$j;
      var $109=(($108+32)|0);
      var $110=$j;
      var $111=(($110+52)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+108)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+8)|0);
      HEAP32[(($115)>>2)]=$109;
      __label__ = 12; break;
    case 12: 
      var $117=$j;
      var $118=(($117+32)|0);
      var $119=$j;
      var $120=(($119+52)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+108)|0);
      HEAP32[(($122)>>2)]=$118;
      var $123=$3;
      var $124=(($123+8)|0);
      var $125=HEAP32[(($124)>>2)];
      $bodyA=$125;
      var $126=$3;
      var $127=(($126+12)|0);
      var $128=HEAP32[(($127)>>2)];
      $bodyB=$128;
      var $129=$3;
      var $130=(($129+16)|0);
      var $131=HEAP8[($130)];
      var $132=(($131) & 1);
      var $133=(($132)&1);
      var $134=(($133)|0)==0;
      if ($134) { __label__ = 13; break; } else { __label__ = 19; break; }
    case 13: 
      var $136=$bodyB;
      var $137=__ZN6b2Body14GetContactListEv($136);
      $edge=$137;
      __label__ = 14; break;
    case 14: 
      var $139=$edge;
      var $140=(($139)|0)!=0;
      if ($140) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $142=$edge;
      var $143=(($142)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$bodyA;
      var $146=(($144)|0)==(($145)|0);
      if ($146) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $148=$edge;
      var $149=(($148+4)|0);
      var $150=HEAP32[(($149)>>2)];
      __ZN9b2Contact16FlagForFilteringEv($150);
      __label__ = 17; break;
    case 17: 
      var $152=$edge;
      var $153=(($152+12)|0);
      var $154=HEAP32[(($153)>>2)];
      $edge=$154;
      __label__ = 14; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $157=$j;
      $1=$157;
      __label__ = 20; break;
    case 20: 
      var $159=$1;
      ;
      return $159;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World16SetAllowSleepingEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $b;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&1);
      var $8=(($4+102976)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&1);
      var $12=(($7)|0)==(($11)|0);
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 9; break;
    case 3: 
      var $15=$2;
      var $16=(($15) & 1);
      var $17=(($4+102976)|0);
      var $18=(($16)&1);
      HEAP8[($17)]=$18;
      var $19=(($4+102976)|0);
      var $20=HEAP8[($19)];
      var $21=(($20) & 1);
      var $22=(($21)&1);
      var $23=(($22)|0)==0;
      if ($23) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $25=(($4+102952)|0);
      var $26=HEAP32[(($25)>>2)];
      $b=$26;
      __label__ = 5; break;
    case 5: 
      var $28=$b;
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $31=$b;
      __ZN6b2Body8SetAwakeEb($31, 1);
      __label__ = 7; break;
    case 7: 
      var $33=$b;
      var $34=(($33+96)|0);
      var $35=HEAP32[(($34)>>2)];
      $b=$35;
      __label__ = 5; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN8b2Island5ClearEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=(($2+36)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+32)|0);
  HEAP32[(($5)>>2)]=0;
  ;
  return;
}


function __ZNK9b2Contact9IsEnabledEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 4;
  var $6=(($5)|0)==4;
  ;
  return $6;
}


function __ZN6b2Body7GetNextEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+96)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN8b2Island3AddEP6b2Body($this, $body) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$body;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0) < (($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str25202)|0), 54, ((STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP6b2Body)|0), ((STRING_TABLE.__str28205)|0));
      __label__ = 4; break;
    case 4: 
      var $12=(($3+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+8)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$2;
      var $17=(($3+28)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($3+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($18<<2))|0);
      HEAP32[(($21)>>2)]=$16;
      var $22=(($3+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+1)|0);
      HEAP32[(($22)>>2)]=$24;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN8b2Island3AddEP9b2Contact($this, $contact) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$contact;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+44)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0) < (($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str25202)|0), 62, ((STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP9b2Contact)|0), ((STRING_TABLE.__str27204)|0));
      __label__ = 4; break;
    case 4: 
      var $12=$2;
      var $13=(($3+36)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+1)|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($3+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14<<2))|0);
      HEAP32[(($18)>>2)]=$12;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN8b2Island3AddEP7b2Joint($this, $joint) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$joint;
      var $3=$1;
      var $4=(($3+32)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+48)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|0) < (($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str25202)|0), 68, ((STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP7b2Joint)|0), ((STRING_TABLE.__str26203)|0));
      __label__ = 4; break;
    case 4: 
      var $12=$2;
      var $13=(($3+32)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+1)|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($3+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14<<2))|0);
      HEAP32[(($18)>>2)]=$12;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World5SolveERK10b2TimeStep($this, $step) {
  var __stackBase__  = STACKTOP; STACKTOP += 92; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $island=__stackBase__;
      var $b;
      var $c;
      var $j;
      var $stackSize;
      var $stack;
      var $3;
      var $4;
      var $seed;
      var $stackCount;
      var $b1;
      var $ce;
      var $contact;
      var $sensorA;
      var $sensorB;
      var $other;
      var $je;
      var $other2;
      var $profile=__stackBase__+52;
      var $i;
      var $b3;
      var $timer=__stackBase__+84;
      var $b4;
      $1=$this;
      $2=$step;
      var $5=$1;
      var $6=(($5+102996)|0);
      var $7=(($6+12)|0);
      HEAPF32[(($7)>>2)]=0;
      var $8=(($5+102996)|0);
      var $9=(($8+16)|0);
      HEAPF32[(($9)>>2)]=0;
      var $10=(($5+102996)|0);
      var $11=(($10+20)|0);
      HEAPF32[(($11)>>2)]=0;
      var $12=(($5+102960)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($5+102872)|0);
      var $15=(($14+64)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($5+102964)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($5+68)|0);
      var $20=(($5+102872)|0);
      var $21=(($20+72)|0);
      var $22=HEAP32[(($21)>>2)];
      FUNCTION_TABLE[__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener]($island, $13, $16, $18, $19, $22);
      var $23=(($5+102952)|0);
      var $24=HEAP32[(($23)>>2)];
      $b=$24;
      __label__ = 2; break;
    case 2: 
      var $26=$b;
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $29=$b;
      var $30=(($29+4)|0);
      var $31=HEAPU16[(($30)>>1)];
      var $32=(($31)&65535);
      var $33=$32 & -2;
      var $34=(($33) & 65535);
      HEAP16[(($30)>>1)]=$34;
      __label__ = 4; break;
    case 4: 
      var $36=$b;
      var $37=(($36+96)|0);
      var $38=HEAP32[(($37)>>2)];
      $b=$38;
      __label__ = 2; break;
    case 5: 
      var $40=(($5+102872)|0);
      var $41=(($40+60)|0);
      var $42=HEAP32[(($41)>>2)];
      $c=$42;
      __label__ = 6; break;
    case 6: 
      var $44=$c;
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $47=$c;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & -2;
      HEAP32[(($48)>>2)]=$50;
      __label__ = 8; break;
    case 8: 
      var $52=$c;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      $c=$54;
      __label__ = 6; break;
    case 9: 
      var $56=(($5+102956)|0);
      var $57=HEAP32[(($56)>>2)];
      $j=$57;
      __label__ = 10; break;
    case 10: 
      var $59=$j;
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $62=$j;
      var $63=(($62+60)|0);
      HEAP8[($63)]=0;
      __label__ = 12; break;
    case 12: 
      var $65=$j;
      var $66=(($65+12)|0);
      var $67=HEAP32[(($66)>>2)];
      $j=$67;
      __label__ = 10; break;
    case 13: 
      var $69=(($5+102960)|0);
      var $70=HEAP32[(($69)>>2)];
      $stackSize=$70;
      var $71=(($5+68)|0);
      var $72=$stackSize;
      var $73=((($72<<2))|0);
      var $74 = (function() { try { __THREW__ = false; return __ZN16b2StackAllocator8AllocateEi($71, $73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $76=$74;
      $stack=$76;
      var $77=(($5+102952)|0);
      var $78=HEAP32[(($77)>>2)];
      $seed=$78;
      __label__ = 15; break;
    case 15: 
      var $80=$seed;
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 16; break; } else { __label__ = 88; break; }
    case 16: 
      var $83=$seed;
      var $84=(($83+4)|0);
      var $85=HEAPU16[(($84)>>1)];
      var $86=(($85)&65535);
      var $87=$86 & 1;
      var $88=(($87)|0)!=0;
      if ($88) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      __label__ = 87; break;
    case 18: 
      var $91=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $92=$91.f0;
      $3=$92;
      var $93=$91.f1;
      $4=$93;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN8b2IslandD1Ev]($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 104; break; } else { __label__ = 106; break; }
    case 19: 
      var $95=$seed;
      var $96 = (function() { try { __THREW__ = false; return __ZNK6b2Body7IsAwakeEv($95) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 20; break; } else { __label__ = 18; break; }
    case 20: 
      var $98=(($96)&1);
      var $99=(($98)|0)==0;
      if ($99) { __label__ = 23; break; } else { __label__ = 21; break; }
    case 21: 
      var $101=$seed;
      var $102 = (function() { try { __THREW__ = false; return __ZNK6b2Body8IsActiveEv($101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 22; break; } else { __label__ = 18; break; }
    case 22: 
      var $104=(($102)&1);
      var $105=(($104)|0)==0;
      if ($105) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 87; break;
    case 24: 
      var $108=$seed;
      var $109 = (function() { try { __THREW__ = false; return __ZNK6b2Body7GetTypeEv($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 25; break; } else { __label__ = 18; break; }
    case 25: 
      var $111=(($109)|0)==0;
      if ($111) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 87; break;
    case 27: 
      (function() { try { __THREW__ = false; return __ZN8b2Island5ClearEv($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 28; break; } else { __label__ = 18; break; }
    case 28: 
      $stackCount=0;
      var $115=$seed;
      var $116=$stackCount;
      var $117=(($116+1)|0);
      $stackCount=$117;
      var $118=$stack;
      var $119=(($118+($116<<2))|0);
      HEAP32[(($119)>>2)]=$115;
      var $120=$seed;
      var $121=(($120+4)|0);
      var $122=HEAPU16[(($121)>>1)];
      var $123=(($122)&65535);
      var $124=$123 | 1;
      var $125=(($124) & 65535);
      HEAP16[(($121)>>1)]=$125;
      __label__ = 29; break;
    case 29: 
      var $127=$stackCount;
      var $128=(($127)|0) > 0;
      if ($128) { __label__ = 30; break; } else { __label__ = 78; break; }
    case 30: 
      var $130=$stackCount;
      var $131=(($130-1)|0);
      $stackCount=$131;
      var $132=$stack;
      var $133=(($132+($131<<2))|0);
      var $134=HEAP32[(($133)>>2)];
      $b1=$134;
      var $135=$b1;
      var $136 = (function() { try { __THREW__ = false; return __ZNK6b2Body8IsActiveEv($135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 31; break; } else { __label__ = 18; break; }
    case 31: 
      var $138=(($136)&1);
      var $139=(($138)|0)==1;
      if ($139) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      __label__ = 35; break;
    case 33: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str174)|0), 445, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep)|0), ((STRING_TABLE.__str4178)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 34; break; } else { __label__ = 18; break; }
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $144=$b1;
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP6b2Body($island, $144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 36; break; } else { __label__ = 18; break; }
    case 36: 
      var $146=$b1;
      (function() { try { __THREW__ = false; return __ZN6b2Body8SetAwakeEb($146, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 37; break; } else { __label__ = 18; break; }
    case 37: 
      var $148=$b1;
      var $149 = (function() { try { __THREW__ = false; return __ZNK6b2Body7GetTypeEv($148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 38; break; } else { __label__ = 18; break; }
    case 38: 
      var $151=(($149)|0)==0;
      if ($151) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      __label__ = 29; break;
    case 40: 
      var $154=$b1;
      var $155=(($154+112)|0);
      var $156=HEAP32[(($155)>>2)];
      $ce=$156;
      __label__ = 41; break;
    case 41: 
      var $158=$ce;
      var $159=(($158)|0)!=0;
      if ($159) { __label__ = 42; break; } else { __label__ = 61; break; }
    case 42: 
      var $161=$ce;
      var $162=(($161+4)|0);
      var $163=HEAP32[(($162)>>2)];
      $contact=$163;
      var $164=$contact;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$166 & 1;
      var $168=(($167)|0)!=0;
      if ($168) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      __label__ = 60; break;
    case 44: 
      var $171=$contact;
      var $172 = (function() { try { __THREW__ = false; return __ZNK9b2Contact9IsEnabledEv($171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 45; break; } else { __label__ = 18; break; }
    case 45: 
      var $174=(($172)&1);
      var $175=(($174)|0)==0;
      if ($175) { __label__ = 48; break; } else { __label__ = 46; break; }
    case 46: 
      var $177=$contact;
      var $178 = (function() { try { __THREW__ = false; return __ZNK9b2Contact10IsTouchingEv($177) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 47; break; } else { __label__ = 18; break; }
    case 47: 
      var $180=(($178)&1);
      var $181=(($180)|0)==0;
      if ($181) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 60; break;
    case 49: 
      var $184=$contact;
      var $185=(($184+48)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+38)|0);
      var $188=HEAP8[($187)];
      var $189=(($188) & 1);
      var $190=(($189)&1);
      $sensorA=$190;
      var $191=$contact;
      var $192=(($191+52)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+38)|0);
      var $195=HEAP8[($194)];
      var $196=(($195) & 1);
      var $197=(($196)&1);
      $sensorB=$197;
      var $198=$sensorA;
      var $199=(($198) & 1);
      if ($199) { __label__ = 51; break; } else { __label__ = 50; break; }
    case 50: 
      var $201=$sensorB;
      var $202=(($201) & 1);
      if ($202) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      __label__ = 60; break;
    case 52: 
      var $205=$contact;
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP9b2Contact($island, $205) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 53; break; } else { __label__ = 18; break; }
    case 53: 
      var $207=$contact;
      var $208=(($207+4)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$209 | 1;
      HEAP32[(($208)>>2)]=$210;
      var $211=$ce;
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      $other=$213;
      var $214=$other;
      var $215=(($214+4)|0);
      var $216=HEAPU16[(($215)>>1)];
      var $217=(($216)&65535);
      var $218=$217 & 1;
      var $219=(($218)|0)!=0;
      if ($219) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      __label__ = 60; break;
    case 55: 
      var $222=$stackCount;
      var $223=$stackSize;
      var $224=(($222)|0) < (($223)|0);
      if ($224) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      __label__ = 59; break;
    case 57: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str174)|0), 495, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep)|0), ((STRING_TABLE.__str5179)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 58; break; } else { __label__ = 18; break; }
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $229=$other;
      var $230=$stackCount;
      var $231=(($230+1)|0);
      $stackCount=$231;
      var $232=$stack;
      var $233=(($232+($230<<2))|0);
      HEAP32[(($233)>>2)]=$229;
      var $234=$other;
      var $235=(($234+4)|0);
      var $236=HEAPU16[(($235)>>1)];
      var $237=(($236)&65535);
      var $238=$237 | 1;
      var $239=(($238) & 65535);
      HEAP16[(($235)>>1)]=$239;
      __label__ = 60; break;
    case 60: 
      var $241=$ce;
      var $242=(($241+12)|0);
      var $243=HEAP32[(($242)>>2)];
      $ce=$243;
      __label__ = 41; break;
    case 61: 
      var $245=$b1;
      var $246=(($245+108)|0);
      var $247=HEAP32[(($246)>>2)];
      $je=$247;
      __label__ = 62; break;
    case 62: 
      var $249=$je;
      var $250=(($249)|0)!=0;
      if ($250) { __label__ = 63; break; } else { __label__ = 77; break; }
    case 63: 
      var $252=$je;
      var $253=(($252+4)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=(($254+60)|0);
      var $256=HEAP8[($255)];
      var $257=(($256) & 1);
      var $258=(($257)&1);
      var $259=(($258)|0)==1;
      if ($259) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      __label__ = 76; break;
    case 65: 
      var $262=$je;
      var $263=(($262)|0);
      var $264=HEAP32[(($263)>>2)];
      $other2=$264;
      var $265=$other2;
      var $266 = (function() { try { __THREW__ = false; return __ZNK6b2Body8IsActiveEv($265) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 66; break; } else { __label__ = 18; break; }
    case 66: 
      var $268=(($266)&1);
      var $269=(($268)|0)==0;
      if ($269) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      __label__ = 76; break;
    case 68: 
      var $272=$je;
      var $273=(($272+4)|0);
      var $274=HEAP32[(($273)>>2)];
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP7b2Joint($island, $274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 69; break; } else { __label__ = 18; break; }
    case 69: 
      var $276=$je;
      var $277=(($276+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+60)|0);
      HEAP8[($279)]=1;
      var $280=$other2;
      var $281=(($280+4)|0);
      var $282=HEAPU16[(($281)>>1)];
      var $283=(($282)&65535);
      var $284=$283 & 1;
      var $285=(($284)|0)!=0;
      if ($285) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      __label__ = 76; break;
    case 71: 
      var $288=$stackCount;
      var $289=$stackSize;
      var $290=(($288)|0) < (($289)|0);
      if ($290) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      __label__ = 75; break;
    case 73: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str174)|0), 524, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep)|0), ((STRING_TABLE.__str5179)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 74; break; } else { __label__ = 18; break; }
    case 74: 
      __label__ = 75; break;
    case 75: 
      var $295=$other2;
      var $296=$stackCount;
      var $297=(($296+1)|0);
      $stackCount=$297;
      var $298=$stack;
      var $299=(($298+($296<<2))|0);
      HEAP32[(($299)>>2)]=$295;
      var $300=$other2;
      var $301=(($300+4)|0);
      var $302=HEAPU16[(($301)>>1)];
      var $303=(($302)&65535);
      var $304=$303 | 1;
      var $305=(($304) & 65535);
      HEAP16[(($301)>>1)]=$305;
      __label__ = 76; break;
    case 76: 
      var $307=$je;
      var $308=(($307+12)|0);
      var $309=HEAP32[(($308)>>2)];
      $je=$309;
      __label__ = 62; break;
    case 77: 
      __label__ = 29; break;
    case 78: 
      var $312=$2;
      var $313=(($5+102968)|0);
      var $314=(($5+102976)|0);
      var $315=HEAP8[($314)];
      var $316=(($315) & 1);
      (function() { try { __THREW__ = false; return __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($island, $profile, $312, $313, $316) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 79; break; } else { __label__ = 18; break; }
    case 79: 
      var $318=(($profile+12)|0);
      var $319=HEAPF32[(($318)>>2)];
      var $320=(($5+102996)|0);
      var $321=(($320+12)|0);
      var $322=HEAPF32[(($321)>>2)];
      var $323=$322+$319;
      HEAPF32[(($321)>>2)]=$323;
      var $324=(($profile+16)|0);
      var $325=HEAPF32[(($324)>>2)];
      var $326=(($5+102996)|0);
      var $327=(($326+16)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=$328+$325;
      HEAPF32[(($327)>>2)]=$329;
      var $330=(($profile+20)|0);
      var $331=HEAPF32[(($330)>>2)];
      var $332=(($5+102996)|0);
      var $333=(($332+20)|0);
      var $334=HEAPF32[(($333)>>2)];
      var $335=$334+$331;
      HEAPF32[(($333)>>2)]=$335;
      $i=0;
      __label__ = 80; break;
    case 80: 
      var $337=$i;
      var $338=(($island+28)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=(($337)|0) < (($339)|0);
      if ($340) { __label__ = 81; break; } else { __label__ = 86; break; }
    case 81: 
      var $342=$i;
      var $343=(($island+8)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=(($344+($342<<2))|0);
      var $346=HEAP32[(($345)>>2)];
      $b3=$346;
      var $347=$b3;
      var $348 = (function() { try { __THREW__ = false; return __ZNK6b2Body7GetTypeEv($347) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 82; break; } else { __label__ = 18; break; }
    case 82: 
      var $350=(($348)|0)==0;
      if ($350) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $352=$b3;
      var $353=(($352+4)|0);
      var $354=HEAPU16[(($353)>>1)];
      var $355=(($354)&65535);
      var $356=$355 & -2;
      var $357=(($356) & 65535);
      HEAP16[(($353)>>1)]=$357;
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      var $360=$i;
      var $361=(($360+1)|0);
      $i=$361;
      __label__ = 80; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      var $364=$seed;
      var $365=(($364+96)|0);
      var $366=HEAP32[(($365)>>2)];
      $seed=$366;
      __label__ = 15; break;
    case 88: 
      var $368=(($5+68)|0);
      var $369=$stack;
      var $370=$369;
      (function() { try { __THREW__ = false; return __ZN16b2StackAllocator4FreeEPv($368, $370) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 89; break; } else { __label__ = 18; break; }
    case 89: 
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN7b2TimerC1Ev]($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 90; break; } else { __label__ = 18; break; }
    case 90: 
      var $373=(($5+102952)|0);
      var $374=HEAP32[(($373)>>2)];
      $b4=$374;
      __label__ = 91; break;
    case 91: 
      var $376=$b4;
      var $377=(($376)|0)!=0;
      if ($377) { __label__ = 92; break; } else { __label__ = 101; break; }
    case 92: 
      var $379=$b4;
      var $380=(($379+4)|0);
      var $381=HEAPU16[(($380)>>1)];
      var $382=(($381)&65535);
      var $383=$382 & 1;
      var $384=(($383)|0)==0;
      if ($384) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      __label__ = 99; break;
    case 94: 
      var $387=$b4;
      var $388 = (function() { try { __THREW__ = false; return __ZNK6b2Body7GetTypeEv($387) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 95; break; } else { __label__ = 18; break; }
    case 95: 
      var $390=(($388)|0)==0;
      if ($390) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      __label__ = 99; break;
    case 97: 
      var $393=$b4;
      (function() { try { __THREW__ = false; return __ZN6b2Body19SynchronizeFixturesEv($393) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 98; break; } else { __label__ = 18; break; }
    case 98: 
      __label__ = 99; break;
    case 99: 
      var $396=$b4;
      var $397 = (function() { try { __THREW__ = false; return __ZN6b2Body7GetNextEv($396) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 100; break; } else { __label__ = 18; break; }
    case 100: 
      $b4=$397;
      __label__ = 91; break;
    case 101: 
      var $400=(($5+102872)|0);
      (function() { try { __THREW__ = false; return __ZN16b2ContactManager15FindNewContactsEv($400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 102; break; } else { __label__ = 18; break; }
    case 102: 
      var $402 = (function() { try { __THREW__ = false; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 103; break; } else { __label__ = 18; break; }
    case 103: 
      var $404=(($5+102996)|0);
      var $405=(($404+24)|0);
      HEAPF32[(($405)>>2)]=$402;
      FUNCTION_TABLE[__ZN8b2IslandD1Ev]($island);
      STACKTOP = __stackBase__;
      return;
    case 104: 
      __label__ = 105; break;
    case 105: 
      var $408=$3;
      var $409=$3;
      var $410=$4;
      var $411=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $409, tempValue);
      var $412=($411.f1 = $410, $411);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 106: 
      var $414=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World8SolveTOIERK10b2TimeStep($this, $step) {
  var __stackBase__  = STACKTOP; STACKTOP += 332; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $island=__stackBase__;
      var $b;
      var $c;
      var $minContact;
      var $minAlpha;
      var $c1;
      var $3;
      var $4;
      var $alpha;
      var $fA;
      var $fB;
      var $bA;
      var $bB;
      var $typeA;
      var $typeB;
      var $activeA;
      var $activeB;
      var $collideA;
      var $collideB;
      var $alpha0;
      var $indexA;
      var $indexB;
      var $input=__stackBase__+52;
      var $output=__stackBase__+184;
      var $beta;
      var $fA2;
      var $fB3;
      var $bA4;
      var $bB5;
      var $backup1=__stackBase__+192;
      var $backup2=__stackBase__+228;
      var $bodies=__stackBase__+264;
      var $i;
      var $body;
      var $ce;
      var $contact;
      var $other;
      var $sensorA;
      var $sensorB;
      var $backup=__stackBase__+272;
      var $subStep=__stackBase__+308;
      var $i6;
      var $body7;
      var $ce8;
      $1=$this;
      $2=$step;
      var $5=$1;
      var $6=(($5+68)|0);
      var $7=(($5+102872)|0);
      var $8=(($7+72)|0);
      var $9=HEAP32[(($8)>>2)];
      FUNCTION_TABLE[__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener]($island, 64, 32, 0, $6, $9);
      var $10=(($5+102995)|0);
      var $11=HEAP8[($10)];
      var $12=(($11) & 1);
      if ($12) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $14=(($5+102952)|0);
      var $15=HEAP32[(($14)>>2)];
      $b=$15;
      __label__ = 3; break;
    case 3: 
      var $17=$b;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $20=$b;
      var $21=(($20+4)|0);
      var $22=HEAPU16[(($21)>>1)];
      var $23=(($22)&65535);
      var $24=$23 & -2;
      var $25=(($24) & 65535);
      HEAP16[(($21)>>1)]=$25;
      var $26=$b;
      var $27=(($26+28)|0);
      var $28=(($27+32)|0);
      HEAPF32[(($28)>>2)]=0;
      __label__ = 5; break;
    case 5: 
      var $30=$b;
      var $31=(($30+96)|0);
      var $32=HEAP32[(($31)>>2)];
      $b=$32;
      __label__ = 3; break;
    case 6: 
      var $34=(($5+102872)|0);
      var $35=(($34+60)|0);
      var $36=HEAP32[(($35)>>2)];
      $c=$36;
      __label__ = 7; break;
    case 7: 
      var $38=$c;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $41=$c;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & -34;
      HEAP32[(($42)>>2)]=$44;
      var $45=$c;
      var $46=(($45+128)|0);
      HEAP32[(($46)>>2)]=0;
      var $47=$c;
      var $48=(($47+132)|0);
      HEAPF32[(($48)>>2)]=1;
      __label__ = 9; break;
    case 9: 
      var $50=$c;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $c=$52;
      __label__ = 7; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      $minContact=0;
      $minAlpha=1;
      var $56=(($5+102872)|0);
      var $57=(($56+60)|0);
      var $58=HEAP32[(($57)>>2)];
      $c1=$58;
      __label__ = 13; break;
    case 13: 
      var $60=$c1;
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 14; break; } else { __label__ = 82; break; }
    case 14: 
      var $63=$c1;
      var $64 = (function() { try { __THREW__ = false; return __ZNK9b2Contact9IsEnabledEv($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $66=(($64)&1);
      var $67=(($66)|0)==0;
      if ($67) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      __label__ = 81; break;
    case 17: 
      var $70=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $71=$70.f0;
      $3=$71;
      var $72=$70.f1;
      $4=$72;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN8b2IslandD1Ev]($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 167; break; } else { __label__ = 169; break; }
    case 18: 
      var $74=$c1;
      var $75=(($74+128)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|0) > 8;
      if ($77) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 81; break;
    case 20: 
      $alpha=1;
      var $80=$c1;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$82 & 32;
      var $84=(($83)|0)!=0;
      if ($84) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $86=$c1;
      var $87=(($86+132)|0);
      var $88=HEAPF32[(($87)>>2)];
      $alpha=$88;
      __label__ = 78; break;
    case 22: 
      var $90=$c1;
      var $91 = (function() { try { __THREW__ = false; return __ZN9b2Contact11GetFixtureAEv($90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 23; break; } else { __label__ = 17; break; }
    case 23: 
      $fA=$91;
      var $93=$c1;
      var $94 = (function() { try { __THREW__ = false; return __ZN9b2Contact11GetFixtureBEv($93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 24; break; } else { __label__ = 17; break; }
    case 24: 
      $fB=$94;
      var $96=$fA;
      var $97 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture8IsSensorEv($96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 25; break; } else { __label__ = 17; break; }
    case 25: 
      if ($97) { __label__ = 28; break; } else { __label__ = 26; break; }
    case 26: 
      var $100=$fB;
      var $101 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture8IsSensorEv($100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 27; break; } else { __label__ = 17; break; }
    case 27: 
      if ($101) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 81; break;
    case 29: 
      var $105=$fA;
      var $106 = (function() { try { __THREW__ = false; return __ZN9b2Fixture7GetBodyEv($105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 30; break; } else { __label__ = 17; break; }
    case 30: 
      $bA=$106;
      var $108=$fB;
      var $109 = (function() { try { __THREW__ = false; return __ZN9b2Fixture7GetBodyEv($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 31; break; } else { __label__ = 17; break; }
    case 31: 
      $bB=$109;
      var $111=$bA;
      var $112=(($111)|0);
      var $113=HEAP32[(($112)>>2)];
      $typeA=$113;
      var $114=$bB;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      $typeB=$116;
      var $117=$typeA;
      var $118=(($117)|0)==2;
      if ($118) { __label__ = 33; break; } else { __label__ = 32; break; }
    case 32: 
      var $120=$typeB;
      var $121=(($120)|0)==2;
      if ($121) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      __label__ = 36; break;
    case 34: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str174)|0), 641, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World8SolveTOIERK10b2TimeStep)|0), ((STRING_TABLE.__str6180)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 35; break; } else { __label__ = 17; break; }
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $126=$bA;
      var $127 = (function() { try { __THREW__ = false; return __ZNK6b2Body7IsAwakeEv($126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 37; break; } else { __label__ = 17; break; }
    case 37: 
      if ($127) { __label__ = 38; break; } else { var $133 = 0;__label__ = 39; break; }
    case 38: 
      var $130=$typeA;
      var $131=(($130)|0)!=0;
      var $133 = $131;__label__ = 39; break;
    case 39: 
      var $133;
      var $134=(($133)&1);
      $activeA=$134;
      var $135=$bB;
      var $136 = (function() { try { __THREW__ = false; return __ZNK6b2Body7IsAwakeEv($135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 40; break; } else { __label__ = 17; break; }
    case 40: 
      if ($136) { __label__ = 41; break; } else { var $142 = 0;__label__ = 42; break; }
    case 41: 
      var $139=$typeB;
      var $140=(($139)|0)!=0;
      var $142 = $140;__label__ = 42; break;
    case 42: 
      var $142;
      var $143=(($142)&1);
      $activeB=$143;
      var $144=$activeA;
      var $145=(($144) & 1);
      var $146=(($145)&1);
      var $147=(($146)|0)==0;
      if ($147) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      var $149=$activeB;
      var $150=(($149) & 1);
      var $151=(($150)&1);
      var $152=(($151)|0)==0;
      if ($152) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      __label__ = 81; break;
    case 45: 
      var $155=$bA;
      var $156 = (function() { try { __THREW__ = false; return __ZNK6b2Body8IsBulletEv($155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 46; break; } else { __label__ = 17; break; }
    case 46: 
      if ($156) { var $162 = 1;__label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $159=$typeA;
      var $160=(($159)|0)!=2;
      var $162 = $160;__label__ = 48; break;
    case 48: 
      var $162;
      var $163=(($162)&1);
      $collideA=$163;
      var $164=$bB;
      var $165 = (function() { try { __THREW__ = false; return __ZNK6b2Body8IsBulletEv($164) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 49; break; } else { __label__ = 17; break; }
    case 49: 
      if ($165) { var $171 = 1;__label__ = 51; break; } else { __label__ = 50; break; }
    case 50: 
      var $168=$typeB;
      var $169=(($168)|0)!=2;
      var $171 = $169;__label__ = 51; break;
    case 51: 
      var $171;
      var $172=(($171)&1);
      $collideB=$172;
      var $173=$collideA;
      var $174=(($173) & 1);
      var $175=(($174)&1);
      var $176=(($175)|0)==0;
      if ($176) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: 
      var $178=$collideB;
      var $179=(($178) & 1);
      var $180=(($179)&1);
      var $181=(($180)|0)==0;
      if ($181) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      __label__ = 81; break;
    case 54: 
      var $184=$bA;
      var $185=(($184+28)|0);
      var $186=(($185+32)|0);
      var $187=HEAPF32[(($186)>>2)];
      $alpha0=$187;
      var $188=$bA;
      var $189=(($188+28)|0);
      var $190=(($189+32)|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=$bB;
      var $193=(($192+28)|0);
      var $194=(($193+32)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=$191 < $195;
      if ($196) { __label__ = 55; break; } else { __label__ = 57; break; }
    case 55: 
      var $198=$bB;
      var $199=(($198+28)|0);
      var $200=(($199+32)|0);
      var $201=HEAPF32[(($200)>>2)];
      $alpha0=$201;
      var $202=$bA;
      var $203=(($202+28)|0);
      var $204=$alpha0;
      (function() { try { __THREW__ = false; return __ZN7b2Sweep7AdvanceEf($203, $204) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 56; break; } else { __label__ = 17; break; }
    case 56: 
      __label__ = 61; break;
    case 57: 
      var $207=$bB;
      var $208=(($207+28)|0);
      var $209=(($208+32)|0);
      var $210=HEAPF32[(($209)>>2)];
      var $211=$bA;
      var $212=(($211+28)|0);
      var $213=(($212+32)|0);
      var $214=HEAPF32[(($213)>>2)];
      var $215=$210 < $214;
      if ($215) { __label__ = 58; break; } else { __label__ = 60; break; }
    case 58: 
      var $217=$bA;
      var $218=(($217+28)|0);
      var $219=(($218+32)|0);
      var $220=HEAPF32[(($219)>>2)];
      $alpha0=$220;
      var $221=$bB;
      var $222=(($221+28)|0);
      var $223=$alpha0;
      (function() { try { __THREW__ = false; return __ZN7b2Sweep7AdvanceEf($222, $223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 59; break; } else { __label__ = 17; break; }
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $227=$alpha0;
      var $228=$227 < 1;
      if ($228) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      __label__ = 65; break;
    case 63: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str174)|0), 676, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World8SolveTOIERK10b2TimeStep)|0), ((STRING_TABLE.__str7181)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 64; break; } else { __label__ = 17; break; }
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $233=$c1;
      var $234 = (function() { try { __THREW__ = false; return __ZNK9b2Contact14GetChildIndexAEv($233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 66; break; } else { __label__ = 17; break; }
    case 66: 
      $indexA=$234;
      var $236=$c1;
      var $237 = (function() { try { __THREW__ = false; return __ZNK9b2Contact14GetChildIndexBEv($236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 67; break; } else { __label__ = 17; break; }
    case 67: 
      $indexB=$237;
      (function() { try { __THREW__ = false; return __ZN10b2TOIInputC1Ev($input) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 68; break; } else { __label__ = 17; break; }
    case 68: 
      var $240=(($input)|0);
      var $241=$fA;
      var $242 = (function() { try { __THREW__ = false; return __ZN9b2Fixture8GetShapeEv($241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 69; break; } else { __label__ = 17; break; }
    case 69: 
      var $244=$indexA;
      (function() { try { __THREW__ = false; return __ZN15b2DistanceProxy3SetEPK7b2Shapei($240, $242, $244) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 70; break; } else { __label__ = 17; break; }
    case 70: 
      var $246=(($input+28)|0);
      var $247=$fB;
      var $248 = (function() { try { __THREW__ = false; return __ZN9b2Fixture8GetShapeEv($247) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 71; break; } else { __label__ = 17; break; }
    case 71: 
      var $250=$indexB;
      (function() { try { __THREW__ = false; return __ZN15b2DistanceProxy3SetEPK7b2Shapei($246, $248, $250) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 72; break; } else { __label__ = 17; break; }
    case 72: 
      var $252=(($input+56)|0);
      var $253=$bA;
      var $254=(($253+28)|0);
      var $255=$252;
      var $256=$254;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $256>>2, $$dest = $255>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $257=(($input+92)|0);
      var $258=$bB;
      var $259=(($258+28)|0);
      var $260=$257;
      var $261=$259;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $261>>2, $$dest = $260>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $262=(($input+128)|0);
      HEAPF32[(($262)>>2)]=1;
      (function() { try { __THREW__ = false; return __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 73; break; } else { __label__ = 17; break; }
    case 73: 
      var $264=(($output+4)|0);
      var $265=HEAPF32[(($264)>>2)];
      $beta=$265;
      var $266=(($output)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=(($267)|0)==3;
      if ($268) { __label__ = 74; break; } else { __label__ = 76; break; }
    case 74: 
      var $270=$alpha0;
      var $271=$alpha0;
      var $272=1-$271;
      var $273=$beta;
      var $274=$272*$273;
      var $275=$270+$274;
      var $276 = (function() { try { __THREW__ = false; return __Z5b2MinIfET_S0_S0_($275, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 75; break; } else { __label__ = 17; break; }
    case 75: 
      $alpha=$276;
      __label__ = 77; break;
    case 76: 
      $alpha=1;
      __label__ = 77; break;
    case 77: 
      var $280=$alpha;
      var $281=$c1;
      var $282=(($281+132)|0);
      HEAPF32[(($282)>>2)]=$280;
      var $283=$c1;
      var $284=(($283+4)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$285 | 32;
      HEAP32[(($284)>>2)]=$286;
      __label__ = 78; break;
    case 78: 
      var $288=$alpha;
      var $289=$minAlpha;
      var $290=$288 < $289;
      if ($290) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $292=$c1;
      $minContact=$292;
      var $293=$alpha;
      $minAlpha=$293;
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      var $296=$c1;
      var $297=(($296+12)|0);
      var $298=HEAP32[(($297)>>2)];
      $c1=$298;
      __label__ = 13; break;
    case 82: 
      var $300=$minContact;
      var $301=(($300)|0)==0;
      if ($301) { __label__ = 84; break; } else { __label__ = 83; break; }
    case 83: 
      var $303=$minAlpha;
      var $304=0.9999988079071045 < $303;
      if ($304) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $306=(($5+102995)|0);
      HEAP8[($306)]=1;
      __label__ = 166; break;
    case 85: 
      var $308=$minContact;
      var $309 = (function() { try { __THREW__ = false; return __ZN9b2Contact11GetFixtureAEv($308) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 86; break; } else { __label__ = 17; break; }
    case 86: 
      $fA2=$309;
      var $311=$minContact;
      var $312 = (function() { try { __THREW__ = false; return __ZN9b2Contact11GetFixtureBEv($311) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 87; break; } else { __label__ = 17; break; }
    case 87: 
      $fB3=$312;
      var $314=$fA2;
      var $315 = (function() { try { __THREW__ = false; return __ZN9b2Fixture7GetBodyEv($314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 88; break; } else { __label__ = 17; break; }
    case 88: 
      $bA4=$315;
      var $317=$fB3;
      var $318 = (function() { try { __THREW__ = false; return __ZN9b2Fixture7GetBodyEv($317) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 89; break; } else { __label__ = 17; break; }
    case 89: 
      $bB5=$318;
      var $320=$bA4;
      var $321=(($320+28)|0);
      var $322=$backup1;
      var $323=$321;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $323>>2, $$dest = $322>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $324=$bB5;
      var $325=(($324+28)|0);
      var $326=$backup2;
      var $327=$325;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $327>>2, $$dest = $326>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $328=$bA4;
      var $329=$minAlpha;
      (function() { try { __THREW__ = false; return __ZN6b2Body7AdvanceEf($328, $329) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 90; break; } else { __label__ = 17; break; }
    case 90: 
      var $331=$bB5;
      var $332=$minAlpha;
      (function() { try { __THREW__ = false; return __ZN6b2Body7AdvanceEf($331, $332) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 91; break; } else { __label__ = 17; break; }
    case 91: 
      var $334=$minContact;
      var $335=(($5+102872)|0);
      var $336=(($335+72)|0);
      var $337=HEAP32[(($336)>>2)];
      (function() { try { __THREW__ = false; return __ZN9b2Contact6UpdateEP17b2ContactListener($334, $337) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 92; break; } else { __label__ = 17; break; }
    case 92: 
      var $339=$minContact;
      var $340=(($339+4)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$341 & -33;
      HEAP32[(($340)>>2)]=$342;
      var $343=$minContact;
      var $344=(($343+128)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=(($345+1)|0);
      HEAP32[(($344)>>2)]=$346;
      var $347=$minContact;
      var $348 = (function() { try { __THREW__ = false; return __ZNK9b2Contact9IsEnabledEv($347) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 93; break; } else { __label__ = 17; break; }
    case 93: 
      var $350=(($348)&1);
      var $351=(($350)|0)==0;
      if ($351) { __label__ = 96; break; } else { __label__ = 94; break; }
    case 94: 
      var $353=$minContact;
      var $354 = (function() { try { __THREW__ = false; return __ZNK9b2Contact10IsTouchingEv($353) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 95; break; } else { __label__ = 17; break; }
    case 95: 
      var $356=(($354)&1);
      var $357=(($356)|0)==0;
      if ($357) { __label__ = 96; break; } else { __label__ = 100; break; }
    case 96: 
      var $359=$minContact;
      (function() { try { __THREW__ = false; return __ZN9b2Contact10SetEnabledEb($359, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 97; break; } else { __label__ = 17; break; }
    case 97: 
      var $361=$bA4;
      var $362=(($361+28)|0);
      var $363=$362;
      var $364=$backup1;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $364>>2, $$dest = $363>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $365=$bB5;
      var $366=(($365+28)|0);
      var $367=$366;
      var $368=$backup2;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $368>>2, $$dest = $367>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $369=$bA4;
      (function() { try { __THREW__ = false; return __ZN6b2Body20SynchronizeTransformEv($369) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 98; break; } else { __label__ = 17; break; }
    case 98: 
      var $371=$bB5;
      (function() { try { __THREW__ = false; return __ZN6b2Body20SynchronizeTransformEv($371) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 99; break; } else { __label__ = 17; break; }
    case 99: 
      __label__ = 12; break;
    case 100: 
      var $374=$bA4;
      (function() { try { __THREW__ = false; return __ZN6b2Body8SetAwakeEb($374, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 101; break; } else { __label__ = 17; break; }
    case 101: 
      var $376=$bB5;
      (function() { try { __THREW__ = false; return __ZN6b2Body8SetAwakeEb($376, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 102; break; } else { __label__ = 17; break; }
    case 102: 
      (function() { try { __THREW__ = false; return __ZN8b2Island5ClearEv($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 103; break; } else { __label__ = 17; break; }
    case 103: 
      var $379=$bA4;
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP6b2Body($island, $379) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 104; break; } else { __label__ = 17; break; }
    case 104: 
      var $381=$bB5;
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP6b2Body($island, $381) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 105; break; } else { __label__ = 17; break; }
    case 105: 
      var $383=$minContact;
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP9b2Contact($island, $383) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 106; break; } else { __label__ = 17; break; }
    case 106: 
      var $385=$bA4;
      var $386=(($385+4)|0);
      var $387=HEAPU16[(($386)>>1)];
      var $388=(($387)&65535);
      var $389=$388 | 1;
      var $390=(($389) & 65535);
      HEAP16[(($386)>>1)]=$390;
      var $391=$bB5;
      var $392=(($391+4)|0);
      var $393=HEAPU16[(($392)>>1)];
      var $394=(($393)&65535);
      var $395=$394 | 1;
      var $396=(($395) & 65535);
      HEAP16[(($392)>>1)]=$396;
      var $397=$minContact;
      var $398=(($397+4)|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=$399 | 1;
      HEAP32[(($398)>>2)]=$400;
      var $401=(($bodies)|0);
      var $402=$bA4;
      HEAP32[(($401)>>2)]=$402;
      var $403=(($401+4)|0);
      var $404=$bB5;
      HEAP32[(($403)>>2)]=$404;
      $i=0;
      __label__ = 107; break;
    case 107: 
      var $406=$i;
      var $407=(($406)|0) < 2;
      if ($407) { __label__ = 108; break; } else { __label__ = 150; break; }
    case 108: 
      var $409=$i;
      var $410=(($bodies+($409<<2))|0);
      var $411=HEAP32[(($410)>>2)];
      $body=$411;
      var $412=$body;
      var $413=(($412)|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=(($414)|0)==2;
      if ($415) { __label__ = 109; break; } else { __label__ = 148; break; }
    case 109: 
      var $417=$body;
      var $418=(($417+112)|0);
      var $419=HEAP32[(($418)>>2)];
      $ce=$419;
      __label__ = 110; break;
    case 110: 
      var $421=$ce;
      var $422=(($421)|0)!=0;
      if ($422) { __label__ = 111; break; } else { __label__ = 147; break; }
    case 111: 
      var $424=(($island+28)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=(($island+40)|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=(($425)|0)==(($427)|0);
      if ($428) { __label__ = 112; break; } else { __label__ = 113; break; }
    case 112: 
      __label__ = 147; break;
    case 113: 
      var $431=(($island+36)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($island+44)|0);
      var $434=HEAP32[(($433)>>2)];
      var $435=(($432)|0)==(($434)|0);
      if ($435) { __label__ = 114; break; } else { __label__ = 115; break; }
    case 114: 
      __label__ = 147; break;
    case 115: 
      var $438=$ce;
      var $439=(($438+4)|0);
      var $440=HEAP32[(($439)>>2)];
      $contact=$440;
      var $441=$contact;
      var $442=(($441+4)|0);
      var $443=HEAP32[(($442)>>2)];
      var $444=$443 & 1;
      var $445=(($444)|0)!=0;
      if ($445) { __label__ = 116; break; } else { __label__ = 117; break; }
    case 116: 
      __label__ = 146; break;
    case 117: 
      var $448=$ce;
      var $449=(($448)|0);
      var $450=HEAP32[(($449)>>2)];
      $other=$450;
      var $451=$other;
      var $452=(($451)|0);
      var $453=HEAP32[(($452)>>2)];
      var $454=(($453)|0)==2;
      if ($454) { __label__ = 118; break; } else { __label__ = 123; break; }
    case 118: 
      var $456=$body;
      var $457 = (function() { try { __THREW__ = false; return __ZNK6b2Body8IsBulletEv($456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 119; break; } else { __label__ = 17; break; }
    case 119: 
      var $459=(($457)&1);
      var $460=(($459)|0)==0;
      if ($460) { __label__ = 120; break; } else { __label__ = 123; break; }
    case 120: 
      var $462=$other;
      var $463 = (function() { try { __THREW__ = false; return __ZNK6b2Body8IsBulletEv($462) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 121; break; } else { __label__ = 17; break; }
    case 121: 
      var $465=(($463)&1);
      var $466=(($465)|0)==0;
      if ($466) { __label__ = 122; break; } else { __label__ = 123; break; }
    case 122: 
      __label__ = 146; break;
    case 123: 
      var $469=$contact;
      var $470=(($469+48)|0);
      var $471=HEAP32[(($470)>>2)];
      var $472=(($471+38)|0);
      var $473=HEAP8[($472)];
      var $474=(($473) & 1);
      var $475=(($474)&1);
      $sensorA=$475;
      var $476=$contact;
      var $477=(($476+52)|0);
      var $478=HEAP32[(($477)>>2)];
      var $479=(($478+38)|0);
      var $480=HEAP8[($479)];
      var $481=(($480) & 1);
      var $482=(($481)&1);
      $sensorB=$482;
      var $483=$sensorA;
      var $484=(($483) & 1);
      if ($484) { __label__ = 125; break; } else { __label__ = 124; break; }
    case 124: 
      var $486=$sensorB;
      var $487=(($486) & 1);
      if ($487) { __label__ = 125; break; } else { __label__ = 126; break; }
    case 125: 
      __label__ = 146; break;
    case 126: 
      var $490=$other;
      var $491=(($490+28)|0);
      var $492=$backup;
      var $493=$491;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $493>>2, $$dest = $492>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $494=$other;
      var $495=(($494+4)|0);
      var $496=HEAPU16[(($495)>>1)];
      var $497=(($496)&65535);
      var $498=$497 & 1;
      var $499=(($498)|0)==0;
      if ($499) { __label__ = 127; break; } else { __label__ = 129; break; }
    case 127: 
      var $501=$other;
      var $502=$minAlpha;
      (function() { try { __THREW__ = false; return __ZN6b2Body7AdvanceEf($501, $502) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 128; break; } else { __label__ = 17; break; }
    case 128: 
      __label__ = 129; break;
    case 129: 
      var $505=$contact;
      var $506=(($5+102872)|0);
      var $507=(($506+72)|0);
      var $508=HEAP32[(($507)>>2)];
      (function() { try { __THREW__ = false; return __ZN9b2Contact6UpdateEP17b2ContactListener($505, $508) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 130; break; } else { __label__ = 17; break; }
    case 130: 
      var $510=$contact;
      var $511 = (function() { try { __THREW__ = false; return __ZNK9b2Contact9IsEnabledEv($510) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 131; break; } else { __label__ = 17; break; }
    case 131: 
      var $513=(($511)&1);
      var $514=(($513)|0)==0;
      if ($514) { __label__ = 132; break; } else { __label__ = 134; break; }
    case 132: 
      var $516=$other;
      var $517=(($516+28)|0);
      var $518=$517;
      var $519=$backup;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $519>>2, $$dest = $518>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $520=$other;
      (function() { try { __THREW__ = false; return __ZN6b2Body20SynchronizeTransformEv($520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 133; break; } else { __label__ = 17; break; }
    case 133: 
      __label__ = 146; break;
    case 134: 
      var $523=$contact;
      var $524 = (function() { try { __THREW__ = false; return __ZNK9b2Contact10IsTouchingEv($523) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 135; break; } else { __label__ = 17; break; }
    case 135: 
      var $526=(($524)&1);
      var $527=(($526)|0)==0;
      if ($527) { __label__ = 136; break; } else { __label__ = 138; break; }
    case 136: 
      var $529=$other;
      var $530=(($529+28)|0);
      var $531=$530;
      var $532=$backup;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $532>>2, $$dest = $531>>2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $533=$other;
      (function() { try { __THREW__ = false; return __ZN6b2Body20SynchronizeTransformEv($533) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 137; break; } else { __label__ = 17; break; }
    case 137: 
      __label__ = 146; break;
    case 138: 
      var $536=$contact;
      var $537=(($536+4)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=$538 | 1;
      HEAP32[(($537)>>2)]=$539;
      var $540=$contact;
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP9b2Contact($island, $540) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 139; break; } else { __label__ = 17; break; }
    case 139: 
      var $542=$other;
      var $543=(($542+4)|0);
      var $544=HEAPU16[(($543)>>1)];
      var $545=(($544)&65535);
      var $546=$545 & 1;
      var $547=(($546)|0)!=0;
      if ($547) { __label__ = 140; break; } else { __label__ = 141; break; }
    case 140: 
      __label__ = 146; break;
    case 141: 
      var $550=$other;
      var $551=(($550+4)|0);
      var $552=HEAPU16[(($551)>>1)];
      var $553=(($552)&65535);
      var $554=$553 | 1;
      var $555=(($554) & 65535);
      HEAP16[(($551)>>1)]=$555;
      var $556=$other;
      var $557=(($556)|0);
      var $558=HEAP32[(($557)>>2)];
      var $559=(($558)|0)!=0;
      if ($559) { __label__ = 142; break; } else { __label__ = 144; break; }
    case 142: 
      var $561=$other;
      (function() { try { __THREW__ = false; return __ZN6b2Body8SetAwakeEb($561, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 143; break; } else { __label__ = 17; break; }
    case 143: 
      __label__ = 144; break;
    case 144: 
      var $564=$other;
      (function() { try { __THREW__ = false; return __ZN8b2Island3AddEP6b2Body($island, $564) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 145; break; } else { __label__ = 17; break; }
    case 145: 
      __label__ = 146; break;
    case 146: 
      var $567=$ce;
      var $568=(($567+12)|0);
      var $569=HEAP32[(($568)>>2)];
      $ce=$569;
      __label__ = 110; break;
    case 147: 
      __label__ = 148; break;
    case 148: 
      __label__ = 149; break;
    case 149: 
      var $573=$i;
      var $574=(($573+1)|0);
      $i=$574;
      __label__ = 107; break;
    case 150: 
      var $576=$minAlpha;
      var $577=1-$576;
      var $578=$2;
      var $579=(($578)|0);
      var $580=HEAPF32[(($579)>>2)];
      var $581=$577*$580;
      var $582=(($subStep)|0);
      HEAPF32[(($582)>>2)]=$581;
      var $583=(($subStep)|0);
      var $584=HEAPF32[(($583)>>2)];
      var $585=1/$584;
      var $586=(($subStep+4)|0);
      HEAPF32[(($586)>>2)]=$585;
      var $587=(($subStep+8)|0);
      HEAPF32[(($587)>>2)]=1;
      var $588=(($subStep+16)|0);
      HEAP32[(($588)>>2)]=20;
      var $589=$2;
      var $590=(($589+12)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=(($subStep+12)|0);
      HEAP32[(($592)>>2)]=$591;
      var $593=(($subStep+20)|0);
      HEAP8[($593)]=0;
      var $594=$bA4;
      var $595=(($594+8)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=$bB5;
      var $598=(($597+8)|0);
      var $599=HEAP32[(($598)>>2)];
      (function() { try { __THREW__ = false; return __ZN8b2Island8SolveTOIERK10b2TimeStepii($island, $subStep, $596, $599) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 151; break; } else { __label__ = 17; break; }
    case 151: 
      $i6=0;
      __label__ = 152; break;
    case 152: 
      var $602=$i6;
      var $603=(($island+28)|0);
      var $604=HEAP32[(($603)>>2)];
      var $605=(($602)|0) < (($604)|0);
      if ($605) { __label__ = 153; break; } else { __label__ = 162; break; }
    case 153: 
      var $607=$i6;
      var $608=(($island+8)|0);
      var $609=HEAP32[(($608)>>2)];
      var $610=(($609+($607<<2))|0);
      var $611=HEAP32[(($610)>>2)];
      $body7=$611;
      var $612=$body7;
      var $613=(($612+4)|0);
      var $614=HEAPU16[(($613)>>1)];
      var $615=(($614)&65535);
      var $616=$615 & -2;
      var $617=(($616) & 65535);
      HEAP16[(($613)>>1)]=$617;
      var $618=$body7;
      var $619=(($618)|0);
      var $620=HEAP32[(($619)>>2)];
      var $621=(($620)|0)!=2;
      if ($621) { __label__ = 154; break; } else { __label__ = 155; break; }
    case 154: 
      __label__ = 161; break;
    case 155: 
      var $624=$body7;
      (function() { try { __THREW__ = false; return __ZN6b2Body19SynchronizeFixturesEv($624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 156; break; } else { __label__ = 17; break; }
    case 156: 
      var $626=$body7;
      var $627=(($626+112)|0);
      var $628=HEAP32[(($627)>>2)];
      $ce8=$628;
      __label__ = 157; break;
    case 157: 
      var $630=$ce8;
      var $631=(($630)|0)!=0;
      if ($631) { __label__ = 158; break; } else { __label__ = 160; break; }
    case 158: 
      var $633=$ce8;
      var $634=(($633+4)|0);
      var $635=HEAP32[(($634)>>2)];
      var $636=(($635+4)|0);
      var $637=HEAP32[(($636)>>2)];
      var $638=$637 & -34;
      HEAP32[(($636)>>2)]=$638;
      __label__ = 159; break;
    case 159: 
      var $640=$ce8;
      var $641=(($640+12)|0);
      var $642=HEAP32[(($641)>>2)];
      $ce8=$642;
      __label__ = 157; break;
    case 160: 
      __label__ = 161; break;
    case 161: 
      var $645=$i6;
      var $646=(($645+1)|0);
      $i6=$646;
      __label__ = 152; break;
    case 162: 
      var $648=(($5+102872)|0);
      (function() { try { __THREW__ = false; return __ZN16b2ContactManager15FindNewContactsEv($648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 163; break; } else { __label__ = 17; break; }
    case 163: 
      var $650=(($5+102994)|0);
      var $651=HEAP8[($650)];
      var $652=(($651) & 1);
      if ($652) { __label__ = 164; break; } else { __label__ = 165; break; }
    case 164: 
      var $654=(($5+102995)|0);
      HEAP8[($654)]=0;
      __label__ = 166; break;
    case 165: 
      __label__ = 12; break;
    case 166: 
      FUNCTION_TABLE[__ZN8b2IslandD1Ev]($island);
      STACKTOP = __stackBase__;
      return;
    case 167: 
      __label__ = 168; break;
    case 168: 
      var $659=$3;
      var $660=$3;
      var $661=$4;
      var $662=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $660, tempValue);
      var $663=($662.f1 = $661, $662);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 169: 
      var $665=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK9b2Fixture8IsSensorEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+38)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZNK6b2Body8IsBulletEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPU16[(($3)>>1)];
  var $5=(($4)&65535);
  var $6=$5 & 8;
  var $7=(($6)|0)==8;
  ;
  return $7;
}


function __ZN9b2Fixture8GetShapeEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Contact10SetEnabledEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 | 4;
      HEAP32[(($8)>>2)]=$10;
      __label__ = 4; break;
    case 3: 
      var $12=(($4+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & -5;
      HEAP32[(($12)>>2)]=$14;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2Joint8GetBodyAEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2Joint8GetBodyBEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body12GetTransformEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  ;
  return $3;
}


function __ZNK7b2Joint7GetTypeEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2Sweep7AdvanceEf($this, $alpha) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $beta;
      var $3=__stackBase__;
      var $4=__stackBase__+8;
      var $5=__stackBase__+16;
      $1=$this;
      $2=$alpha;
      var $6=$1;
      var $7=(($6+32)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=$8 < 1;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str24201)|0), 723, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf)|0), ((STRING_TABLE.__str7181)|0));
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=(($6+32)|0);
      var $15=HEAPF32[(($14)>>2)];
      var $16=$13-$15;
      var $17=(($6+32)|0);
      var $18=HEAPF32[(($17)>>2)];
      var $19=1-$18;
      var $20=$16/$19;
      $beta=$20;
      var $21=(($6+8)|0);
      var $22=$beta;
      var $23=1-$22;
      var $24=(($6+8)|0);
      __ZmlfRK6b2Vec2($4, $23, $24);
      var $25=$beta;
      var $26=(($6+16)|0);
      __ZmlfRK6b2Vec2($5, $25, $26);
      __ZplRK6b2Vec2S1_($3, $4, $5);
      var $27=$21;
      var $28=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      var $29=$beta;
      var $30=1-$29;
      var $31=(($6+24)|0);
      var $32=HEAPF32[(($31)>>2)];
      var $33=$30*$32;
      var $34=$beta;
      var $35=(($6+28)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=$34*$36;
      var $38=$33+$37;
      var $39=(($6+24)|0);
      HEAPF32[(($39)>>2)]=$38;
      var $40=$2;
      var $41=(($6+32)|0);
      HEAPF32[(($41)>>2)]=$40;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10b2TOIInputC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2TOIInputC2Ev($2);
  ;
  return;
}


function __ZN6b2Body7AdvanceEf($this, $alpha) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=__stackBase__+8;
  $1=$this;
  $2=$alpha;
  var $5=$1;
  var $6=(($5+28)|0);
  var $7=$2;
  __ZN7b2Sweep7AdvanceEf($6, $7);
  var $8=(($5+28)|0);
  var $9=(($8+16)|0);
  var $10=(($5+28)|0);
  var $11=(($10+8)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[(($12+4)>>2)]=HEAP32[(($13+4)>>2)];
  var $14=(($5+28)|0);
  var $15=(($14+24)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=(($5+28)|0);
  var $18=(($17+28)|0);
  HEAPF32[(($18)>>2)]=$16;
  var $19=(($5+12)|0);
  var $20=(($19+8)|0);
  var $21=(($5+28)|0);
  var $22=(($21+28)|0);
  var $23=HEAPF32[(($22)>>2)];
  __ZN5b2Rot3SetEf($20, $23);
  var $24=(($5+12)|0);
  var $25=(($24)|0);
  var $26=(($5+28)|0);
  var $27=(($26+16)|0);
  var $28=(($5+12)|0);
  var $29=(($28+8)|0);
  var $30=(($5+28)|0);
  var $31=(($30)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($4, $29, $31);
  __ZmiRK6b2Vec2S1_($3, $27, $4);
  var $32=$25;
  var $33=$3;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
  STACKTOP = __stackBase__;
  return;
}


function __ZN7b2World4StepEfii($this, $dt, $velocityIterations, $positionIterations) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $stepTimer=__stackBase__;
      var $step=__stackBase__+8;
      var $timer=__stackBase__+32;
      var $timer1=__stackBase__+40;
      var $timer2=__stackBase__+48;
      $1=$this;
      $2=$dt;
      $3=$velocityIterations;
      $4=$positionIterations;
      var $5=$1;
      FUNCTION_TABLE[__ZN7b2TimerC1Ev]($stepTimer);
      var $6=(($5+102868)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=(($5+102872)|0);
      __ZN16b2ContactManager15FindNewContactsEv($11);
      var $12=(($5+102868)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & -2;
      HEAP32[(($12)>>2)]=$14;
      __label__ = 3; break;
    case 3: 
      var $16=(($5+102868)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 | 2;
      HEAP32[(($16)>>2)]=$18;
      var $19=$2;
      var $20=(($step)|0);
      HEAPF32[(($20)>>2)]=$19;
      var $21=$3;
      var $22=(($step+12)|0);
      HEAP32[(($22)>>2)]=$21;
      var $23=$4;
      var $24=(($step+16)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=$2;
      var $26=$25 > 0;
      if ($26) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $28=$2;
      var $29=1/$28;
      var $30=(($step+4)|0);
      HEAPF32[(($30)>>2)]=$29;
      __label__ = 6; break;
    case 5: 
      var $32=(($step+4)|0);
      HEAPF32[(($32)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      var $34=(($5+102988)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=$2;
      var $37=$35*$36;
      var $38=(($step+8)|0);
      HEAPF32[(($38)>>2)]=$37;
      var $39=(($5+102992)|0);
      var $40=HEAP8[($39)];
      var $41=(($40) & 1);
      var $42=(($step+20)|0);
      var $43=(($41)&1);
      HEAP8[($42)]=$43;
      FUNCTION_TABLE[__ZN7b2TimerC1Ev]($timer);
      var $44=(($5+102872)|0);
      __ZN16b2ContactManager7CollideEv($44);
      var $45=__ZNK7b2Timer15GetMillisecondsEv($timer);
      var $46=(($5+102996)|0);
      var $47=(($46+4)|0);
      HEAPF32[(($47)>>2)]=$45;
      var $48=(($5+102995)|0);
      var $49=HEAP8[($48)];
      var $50=(($49) & 1);
      if ($50) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $52=(($step)|0);
      var $53=HEAPF32[(($52)>>2)];
      var $54=$53 > 0;
      if ($54) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      FUNCTION_TABLE[__ZN7b2TimerC1Ev]($timer1);
      __ZN7b2World5SolveERK10b2TimeStep($5, $step);
      var $56=__ZNK7b2Timer15GetMillisecondsEv($timer1);
      var $57=(($5+102996)|0);
      var $58=(($57+8)|0);
      HEAPF32[(($58)>>2)]=$56;
      __label__ = 9; break;
    case 9: 
      var $60=(($5+102993)|0);
      var $61=HEAP8[($60)];
      var $62=(($61) & 1);
      if ($62) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $64=(($step)|0);
      var $65=HEAPF32[(($64)>>2)];
      var $66=$65 > 0;
      if ($66) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      FUNCTION_TABLE[__ZN7b2TimerC1Ev]($timer2);
      __ZN7b2World8SolveTOIERK10b2TimeStep($5, $step);
      var $68=__ZNK7b2Timer15GetMillisecondsEv($timer2);
      var $69=(($5+102996)|0);
      var $70=(($69+28)|0);
      HEAPF32[(($70)>>2)]=$68;
      __label__ = 12; break;
    case 12: 
      var $72=(($step)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$73 > 0;
      if ($74) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $76=(($step+4)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=(($5+102988)|0);
      HEAPF32[(($78)>>2)]=$77;
      __label__ = 14; break;
    case 14: 
      var $80=(($5+102868)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & 4;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __ZN7b2World11ClearForcesEv($5);
      __label__ = 16; break;
    case 16: 
      var $86=(($5+102868)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & -3;
      HEAP32[(($86)>>2)]=$88;
      var $89=__ZNK7b2Timer15GetMillisecondsEv($stepTimer);
      var $90=(($5+102996)|0);
      var $91=(($90)|0);
      HEAPF32[(($91)>>2)]=$89;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2World11ClearForcesEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $body;
      $1=$this;
      var $2=$1;
      var $3=(($2+102952)|0);
      var $4=HEAP32[(($3)>>2)];
      $body=$4;
      __label__ = 2; break;
    case 2: 
      var $6=$body;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$body;
      var $10=(($9+76)|0);
      __ZN6b2Vec27SetZeroEv($10);
      var $11=$body;
      var $12=(($11+84)|0);
      HEAPF32[(($12)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      var $14=$body;
      var $15=__ZN6b2Body7GetNextEv($14);
      $body=$15;
      __label__ = 2; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB($this, $callback, $aabb) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $wrapper=__stackBase__;
  $1=$this;
  $2=$callback;
  $3=$aabb;
  var $4=$1;
  var $5=(($4+102872)|0);
  var $6=(($5)|0);
  var $7=(($wrapper)|0);
  HEAP32[(($7)>>2)]=$6;
  var $8=$2;
  var $9=(($wrapper+4)|0);
  HEAP32[(($9)>>2)]=$8;
  var $10=(($4+102872)|0);
  var $11=(($10)|0);
  var $12=$3;
  __ZNK12b2BroadPhase5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($11, $wrapper, $12);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK12b2BroadPhase5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$callback;
  $3=$aabb;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$3;
  __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($5, $6, $7);
  ;
  return;
}


function __ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_($this, $callback, $point1, $point2) {
  var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $wrapper=__stackBase__;
  var $input=__stackBase__+8;
  $1=$this;
  $2=$callback;
  $3=$point1;
  $4=$point2;
  var $5=$1;
  var $6=(($5+102872)|0);
  var $7=(($6)|0);
  var $8=(($wrapper)|0);
  HEAP32[(($8)>>2)]=$7;
  var $9=$2;
  var $10=(($wrapper+4)|0);
  HEAP32[(($10)>>2)]=$9;
  __ZN14b2RayCastInputC1Ev($input);
  var $11=(($input+16)|0);
  HEAPF32[(($11)>>2)]=1;
  var $12=(($input)|0);
  var $13=$3;
  var $14=$12;
  var $15=$13;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[(($14+4)>>2)]=HEAP32[(($15+4)>>2)];
  var $16=(($input+8)|0);
  var $17=$4;
  var $18=$16;
  var $19=$17;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[(($18+4)>>2)]=HEAP32[(($19+4)>>2)];
  var $20=(($5+102872)|0);
  var $21=(($20)|0);
  __ZNK12b2BroadPhase7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($21, $wrapper, $input);
  STACKTOP = __stackBase__;
  return;
}


function __ZN14b2RayCastInputC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2RayCastInputC2Ev($2);
  ;
  return;
}


function __ZNK12b2BroadPhase7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($this, $callback, $input) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$callback;
  $3=$input;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$3;
  __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($5, $6, $7);
  ;
  return;
}


function __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $fixture, $xf, $color) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $circle;
      var $center=__stackBase__;
      var $radius;
      var $axis=__stackBase__+8;
      var $5=__stackBase__+16;
      var $edge;
      var $v1=__stackBase__+24;
      var $v2=__stackBase__+32;
      var $chain;
      var $count;
      var $vertices;
      var $v11=__stackBase__+40;
      var $i;
      var $v22=__stackBase__+48;
      var $poly;
      var $vertexCount;
      var $vertices3=__stackBase__+56;
      var $i4;
      var $6=__stackBase__+120;
      $1=$this;
      $2=$fixture;
      $3=$xf;
      $4=$color;
      var $7=$1;
      var $8=$2;
      var $9=__ZNK9b2Fixture7GetTypeEv($8);
      if ((($9)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($9)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 3) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 9; break;
      }
      else {
      __label__ = 19; break;
      }
      
    case 2: 
      var $11=$2;
      var $12=__ZN9b2Fixture8GetShapeEv($11);
      var $13=$12;
      $circle=$13;
      var $14=$3;
      var $15=$circle;
      var $16=(($15+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($center, $14, $16);
      var $17=$circle;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAPF32[(($19)>>2)];
      $radius=$20;
      var $21=$3;
      var $22=(($21+8)|0);
      __ZN6b2Vec2C1Eff($5, 1, 0);
      __Z5b2MulRK5b2RotRK6b2Vec2($axis, $22, $5);
      var $23=(($7+102984)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$radius;
      var $30=$4;
      FUNCTION_TABLE[$28]($24, $center, $29, $axis, $30);
      __label__ = 20; break;
    case 3: 
      var $32=$2;
      var $33=__ZN9b2Fixture8GetShapeEv($32);
      var $34=$33;
      $edge=$34;
      var $35=$3;
      var $36=$edge;
      var $37=(($36+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $35, $37);
      var $38=$3;
      var $39=$edge;
      var $40=(($39+20)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $38, $40);
      var $41=(($7+102984)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$4;
      FUNCTION_TABLE[$46]($42, $v1, $v2, $47);
      __label__ = 20; break;
    case 4: 
      var $49=$2;
      var $50=__ZN9b2Fixture8GetShapeEv($49);
      var $51=$50;
      $chain=$51;
      var $52=$chain;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      $count=$54;
      var $55=$chain;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      $vertices=$57;
      var $58=$3;
      var $59=$vertices;
      var $60=(($59)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v11, $58, $60);
      $i=1;
      __label__ = 5; break;
    case 5: 
      var $62=$i;
      var $63=$count;
      var $64=(($62)|0) < (($63)|0);
      if ($64) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $66=$3;
      var $67=$i;
      var $68=$vertices;
      var $69=(($68+($67<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v22, $66, $69);
      var $70=(($7+102984)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$4;
      FUNCTION_TABLE[$75]($71, $v11, $v22, $76);
      var $77=(($7+102984)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78;
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+16)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$4;
      FUNCTION_TABLE[$82]($78, $v11, 0.05000000074505806, $83);
      var $84=$v11;
      var $85=$v22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($84)>>2)]=HEAP32[(($85)>>2)];HEAP32[(($84+4)>>2)]=HEAP32[(($85+4)>>2)];
      __label__ = 7; break;
    case 7: 
      var $87=$i;
      var $88=(($87+1)|0);
      $i=$88;
      __label__ = 5; break;
    case 8: 
      __label__ = 20; break;
    case 9: 
      var $91=$2;
      var $92=__ZN9b2Fixture8GetShapeEv($91);
      var $93=$92;
      $poly=$93;
      var $94=$poly;
      var $95=(($94+148)|0);
      var $96=HEAP32[(($95)>>2)];
      $vertexCount=$96;
      var $97=$vertexCount;
      var $98=(($97)|0) <= 8;
      if ($98) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      ___assert_func(((STRING_TABLE.__str174)|0), 1077, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color)|0), ((STRING_TABLE.__str8182)|0));
      __label__ = 12; break;
    case 12: 
      var $102=(($vertices3)|0);
      var $103=(($102+64)|0);
      var $105 = $102;__label__ = 13; break;
    case 13: 
      var $105;
      __ZN6b2Vec2C1Ev($105);
      var $106=(($105+8)|0);
      var $107=(($106)|0)==(($103)|0);
      if ($107) { __label__ = 14; break; } else { var $105 = $106;__label__ = 13; break; }
    case 14: 
      $i4=0;
      __label__ = 15; break;
    case 15: 
      var $110=$i4;
      var $111=$vertexCount;
      var $112=(($110)|0) < (($111)|0);
      if ($112) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $114=$i4;
      var $115=(($vertices3+($114<<3))|0);
      var $116=$3;
      var $117=$i4;
      var $118=$poly;
      var $119=(($118+20)|0);
      var $120=(($119+($117<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $116, $120);
      var $121=$115;
      var $122=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[(($121+4)>>2)]=HEAP32[(($122+4)>>2)];
      __label__ = 17; break;
    case 17: 
      var $124=$i4;
      var $125=(($124+1)|0);
      $i4=$125;
      __label__ = 15; break;
    case 18: 
      var $127=(($7+102984)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$128;
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+12)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($vertices3)|0);
      var $134=$vertexCount;
      var $135=$4;
      FUNCTION_TABLE[$132]($128, $133, $134, $135);
      __label__ = 20; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK9b2Fixture7GetTypeEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=__ZNK7b2Shape7GetTypeEv($4);
  ;
  return $5;
}


function __ZN7b2World9DrawJointEP7b2Joint($this, $joint) {
  var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $bodyA;
      var $bodyB;
      var $xf1;
      var $xf2;
      var $x1=__stackBase__;
      var $x2=__stackBase__+8;
      var $p1=__stackBase__+16;
      var $p2=__stackBase__+24;
      var $color=__stackBase__+32;
      var $pulley;
      var $s1=__stackBase__+44;
      var $s2=__stackBase__+52;
      $1=$this;
      $2=$joint;
      var $3=$1;
      var $4=$2;
      var $5=__ZN7b2Joint8GetBodyAEv($4);
      $bodyA=$5;
      var $6=$2;
      var $7=__ZN7b2Joint8GetBodyBEv($6);
      $bodyB=$7;
      var $8=$bodyA;
      var $9=__ZNK6b2Body12GetTransformEv($8);
      $xf1=$9;
      var $10=$bodyB;
      var $11=__ZNK6b2Body12GetTransformEv($10);
      $xf2=$11;
      var $12=$xf1;
      var $13=(($12)|0);
      var $14=$x1;
      var $15=$13;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[(($14+4)>>2)]=HEAP32[(($15+4)>>2)];
      var $16=$xf2;
      var $17=(($16)|0);
      var $18=$x2;
      var $19=$17;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[(($18+4)>>2)]=HEAP32[(($19+4)>>2)];
      var $20=$2;
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      FUNCTION_TABLE[$24]($p1, $20);
      var $25=$2;
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      FUNCTION_TABLE[$29]($p2, $25);
      __ZN7b2ColorC1Efff($color, 0.5, 0.800000011920929, 0.800000011920929);
      var $30=$2;
      var $31=__ZNK7b2Joint7GetTypeEv($30);
      if ((($31)|0) == 3) {
        __label__ = 2; break;
      }
      else if ((($31)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($31)|0) == 5) {
        __label__ = 5; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 2: 
      var $33=(($3+102984)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      FUNCTION_TABLE[$38]($34, $p1, $p2, $color);
      __label__ = 5; break;
    case 3: 
      var $40=$2;
      var $41=$40;
      $pulley=$41;
      var $42=$pulley;
      __ZNK13b2PulleyJoint16GetGroundAnchorAEv($s1, $42);
      var $43=$pulley;
      __ZNK13b2PulleyJoint16GetGroundAnchorBEv($s2, $43);
      var $44=(($3+102984)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      FUNCTION_TABLE[$49]($45, $s1, $p1, $color);
      var $50=(($3+102984)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      FUNCTION_TABLE[$55]($51, $s2, $p2, $color);
      var $56=(($3+102984)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$61]($57, $s1, $s2, $color);
      __label__ = 5; break;
    case 4: 
      var $63=(($3+102984)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      FUNCTION_TABLE[$68]($64, $x1, $p1, $color);
      var $69=(($3+102984)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70;
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      FUNCTION_TABLE[$74]($70, $p1, $p2, $color);
      var $75=(($3+102984)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$76;
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      FUNCTION_TABLE[$80]($76, $x2, $p2, $color);
      __label__ = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2ColorC1Efff($this, $r, $g, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$r;
  $3=$g;
  $4=$b;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN7b2ColorC2Efff($5, $6, $7, $8);
  ;
  return;
}


function __ZN6b2Body14GetFixtureListEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+100)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Fixture7GetNextEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2Joint7GetNextEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body14GetWorldCenterEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=(($3+16)|0);
  ;
  return $4;
}


function __ZNK12b2BroadPhase13GetProxyCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2World13DrawDebugDataEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 148; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $flags;
      var $b;
      var $xf;
      var $f;
      var $2=__stackBase__;
      var $3=__stackBase__+12;
      var $4=__stackBase__+24;
      var $5=__stackBase__+36;
      var $6=__stackBase__+48;
      var $j;
      var $color=__stackBase__+60;
      var $c;
      var $color1=__stackBase__+72;
      var $bp;
      var $b2;
      var $f3;
      var $i;
      var $proxy;
      var $aabb=__stackBase__+84;
      var $vs=__stackBase__+100;
      var $b4;
      var $xf5=__stackBase__+132;
      $1=$this;
      var $7=$1;
      var $8=(($7+102984)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 61; break;
    case 3: 
      var $13=(($7+102984)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=__ZNK6b2Draw8GetFlagsEv($14);
      $flags=$15;
      var $16=$flags;
      var $17=$16 & 1;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 25; break; }
    case 4: 
      var $20=(($7+102952)|0);
      var $21=HEAP32[(($20)>>2)];
      $b=$21;
      __label__ = 5; break;
    case 5: 
      var $23=$b;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 24; break; }
    case 6: 
      var $26=$b;
      var $27=__ZNK6b2Body12GetTransformEv($26);
      $xf=$27;
      var $28=$b;
      var $29=__ZN6b2Body14GetFixtureListEv($28);
      $f=$29;
      __label__ = 7; break;
    case 7: 
      var $31=$f;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 8; break; } else { __label__ = 22; break; }
    case 8: 
      var $34=$b;
      var $35=__ZNK6b2Body8IsActiveEv($34);
      var $36=(($35)&1);
      var $37=(($36)|0)==0;
      if ($37) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $39=$f;
      var $40=$xf;
      __ZN7b2ColorC1Efff($2, 0.5, 0.5, 0.30000001192092896);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $39, $40, $2);
      __label__ = 20; break;
    case 10: 
      var $42=$b;
      var $43=__ZNK6b2Body7GetTypeEv($42);
      var $44=(($43)|0)==0;
      if ($44) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $46=$f;
      var $47=$xf;
      __ZN7b2ColorC1Efff($3, 0.5, 0.8999999761581421, 0.5);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $46, $47, $3);
      __label__ = 19; break;
    case 12: 
      var $49=$b;
      var $50=__ZNK6b2Body7GetTypeEv($49);
      var $51=(($50)|0)==1;
      if ($51) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $53=$f;
      var $54=$xf;
      __ZN7b2ColorC1Efff($4, 0.5, 0.5, 0.8999999761581421);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $53, $54, $4);
      __label__ = 18; break;
    case 14: 
      var $56=$b;
      var $57=__ZNK6b2Body7IsAwakeEv($56);
      var $58=(($57)&1);
      var $59=(($58)|0)==0;
      if ($59) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $61=$f;
      var $62=$xf;
      __ZN7b2ColorC1Efff($5, 0.6000000238418579, 0.6000000238418579, 0.6000000238418579);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $61, $62, $5);
      __label__ = 17; break;
    case 16: 
      var $64=$f;
      var $65=$xf;
      __ZN7b2ColorC1Efff($6, 0.8999999761581421, 0.699999988079071, 0.699999988079071);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $64, $65, $6);
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $71=$f;
      var $72=__ZN9b2Fixture7GetNextEv($71);
      $f=$72;
      __label__ = 7; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $75=$b;
      var $76=__ZN6b2Body7GetNextEv($75);
      $b=$76;
      __label__ = 5; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $79=$flags;
      var $80=$79 & 2;
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 26; break; } else { __label__ = 31; break; }
    case 26: 
      var $83=(($7+102956)|0);
      var $84=HEAP32[(($83)>>2)];
      $j=$84;
      __label__ = 27; break;
    case 27: 
      var $86=$j;
      var $87=(($86)|0)!=0;
      if ($87) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: 
      var $89=$j;
      __ZN7b2World9DrawJointEP7b2Joint($7, $89);
      __label__ = 29; break;
    case 29: 
      var $91=$j;
      var $92=__ZN7b2Joint7GetNextEv($91);
      $j=$92;
      __label__ = 27; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $95=$flags;
      var $96=$95 & 8;
      var $97=(($96)|0)!=0;
      if ($97) { __label__ = 32; break; } else { __label__ = 37; break; }
    case 32: 
      __ZN7b2ColorC1Efff($color, 0.30000001192092896, 0.8999999761581421, 0.8999999761581421);
      var $99=(($7+102872)|0);
      var $100=(($99+60)|0);
      var $101=HEAP32[(($100)>>2)];
      $c=$101;
      __label__ = 33; break;
    case 33: 
      var $103=$c;
      var $104=(($103)|0)!=0;
      if ($104) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $107=$c;
      var $108=__ZN9b2Contact7GetNextEv($107);
      $c=$108;
      __label__ = 33; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $111=$flags;
      var $112=$111 & 4;
      var $113=(($112)|0)!=0;
      if ($113) { __label__ = 38; break; } else { __label__ = 55; break; }
    case 38: 
      __ZN7b2ColorC1Efff($color1, 0.8999999761581421, 0.30000001192092896, 0.8999999761581421);
      var $115=(($7+102872)|0);
      var $116=(($115)|0);
      $bp=$116;
      var $117=(($7+102952)|0);
      var $118=HEAP32[(($117)>>2)];
      $b2=$118;
      __label__ = 39; break;
    case 39: 
      var $120=$b2;
      var $121=(($120)|0)!=0;
      if ($121) { __label__ = 40; break; } else { __label__ = 54; break; }
    case 40: 
      var $123=$b2;
      var $124=__ZNK6b2Body8IsActiveEv($123);
      var $125=(($124)&1);
      var $126=(($125)|0)==0;
      if ($126) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      __label__ = 53; break;
    case 42: 
      var $129=$b2;
      var $130=__ZN6b2Body14GetFixtureListEv($129);
      $f3=$130;
      __label__ = 43; break;
    case 43: 
      var $132=$f3;
      var $133=(($132)|0)!=0;
      if ($133) { __label__ = 44; break; } else { __label__ = 52; break; }
    case 44: 
      $i=0;
      __label__ = 45; break;
    case 45: 
      var $136=$i;
      var $137=$f3;
      var $138=(($137+28)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($136)|0) < (($139)|0);
      if ($140) { __label__ = 46; break; } else { __label__ = 50; break; }
    case 46: 
      var $142=$f3;
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$i;
      var $146=(($144+$145*28)|0);
      $proxy=$146;
      var $147=$bp;
      var $148=$proxy;
      var $149=(($148+24)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=__ZNK12b2BroadPhase10GetFatAABBEi($147, $150);
      var $152=$aabb;
      var $153=$151;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[(($152+4)>>2)]=HEAP32[(($153+4)>>2)];HEAP32[(($152+8)>>2)]=HEAP32[(($153+8)>>2)];HEAP32[(($152+12)>>2)]=HEAP32[(($153+12)>>2)];
      var $154=(($vs)|0);
      var $155=(($154+32)|0);
      var $157 = $154;__label__ = 47; break;
    case 47: 
      var $157;
      __ZN6b2Vec2C1Ev($157);
      var $158=(($157+8)|0);
      var $159=(($158)|0)==(($155)|0);
      if ($159) { __label__ = 48; break; } else { var $157 = $158;__label__ = 47; break; }
    case 48: 
      var $161=(($vs)|0);
      var $162=(($aabb)|0);
      var $163=(($162)|0);
      var $164=HEAPF32[(($163)>>2)];
      var $165=(($aabb)|0);
      var $166=(($165+4)|0);
      var $167=HEAPF32[(($166)>>2)];
      __ZN6b2Vec23SetEff($161, $164, $167);
      var $168=(($vs+8)|0);
      var $169=(($aabb+8)|0);
      var $170=(($169)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=(($aabb)|0);
      var $173=(($172+4)|0);
      var $174=HEAPF32[(($173)>>2)];
      __ZN6b2Vec23SetEff($168, $171, $174);
      var $175=(($vs+16)|0);
      var $176=(($aabb+8)|0);
      var $177=(($176)|0);
      var $178=HEAPF32[(($177)>>2)];
      var $179=(($aabb+8)|0);
      var $180=(($179+4)|0);
      var $181=HEAPF32[(($180)>>2)];
      __ZN6b2Vec23SetEff($175, $178, $181);
      var $182=(($vs+24)|0);
      var $183=(($aabb)|0);
      var $184=(($183)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(($aabb+8)|0);
      var $187=(($186+4)|0);
      var $188=HEAPF32[(($187)>>2)];
      __ZN6b2Vec23SetEff($182, $185, $188);
      var $189=(($7+102984)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$190;
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192+8)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($vs)|0);
      FUNCTION_TABLE[$194]($190, $195, 4, $color1);
      __label__ = 49; break;
    case 49: 
      var $197=$i;
      var $198=(($197+1)|0);
      $i=$198;
      __label__ = 45; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      var $201=$f3;
      var $202=__ZN9b2Fixture7GetNextEv($201);
      $f3=$202;
      __label__ = 43; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $205=$b2;
      var $206=__ZN6b2Body7GetNextEv($205);
      $b2=$206;
      __label__ = 39; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $209=$flags;
      var $210=$209 & 16;
      var $211=(($210)|0)!=0;
      if ($211) { __label__ = 56; break; } else { __label__ = 61; break; }
    case 56: 
      var $213=(($7+102952)|0);
      var $214=HEAP32[(($213)>>2)];
      $b4=$214;
      __label__ = 57; break;
    case 57: 
      var $216=$b4;
      var $217=(($216)|0)!=0;
      if ($217) { __label__ = 58; break; } else { __label__ = 60; break; }
    case 58: 
      var $219=$b4;
      var $220=__ZNK6b2Body12GetTransformEv($219);
      var $221=$xf5;
      var $222=$220;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($221)>>2)]=HEAP32[(($222)>>2)];HEAP32[(($221+4)>>2)]=HEAP32[(($222+4)>>2)];HEAP32[(($221+8)>>2)]=HEAP32[(($222+8)>>2)];HEAP32[(($221+12)>>2)]=HEAP32[(($222+12)>>2)];
      var $223=(($xf5)|0);
      var $224=$b4;
      var $225=__ZNK6b2Body14GetWorldCenterEv($224);
      var $226=$223;
      var $227=$225;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($226)>>2)]=HEAP32[(($227)>>2)];HEAP32[(($226+4)>>2)]=HEAP32[(($227+4)>>2)];
      var $228=(($7+102984)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=$229;
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231+28)|0);
      var $233=HEAP32[(($232)>>2)];
      FUNCTION_TABLE[$233]($229, $xf5);
      __label__ = 59; break;
    case 59: 
      var $235=$b4;
      var $236=__ZN6b2Body7GetNextEv($235);
      $b4=$236;
      __label__ = 57; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2BroadPhase10GetFatAABBEi($this, $proxyId) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=__ZNK13b2DynamicTree10GetFatAABBEi($4, $5);
  ;
  return $6;
}


function __ZNK7b2World13GetProxyCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase13GetProxyCountEv($4);
  ;
  return $5;
}


function __ZNK7b2World13GetTreeHeightEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase13GetTreeHeightEv($4);
  ;
  return $5;
}


function __ZNK12b2BroadPhase13GetTreeHeightEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=__ZNK13b2DynamicTree9GetHeightEv($3);
  ;
  return $4;
}


function __ZNK7b2World14GetTreeBalanceEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase14GetTreeBalanceEv($4);
  ;
  return $5;
}


function __ZNK12b2BroadPhase14GetTreeBalanceEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=__ZNK13b2DynamicTree13GetMaxBalanceEv($3);
  ;
  return $4;
}


function __ZNK7b2World14GetTreeQualityEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase14GetTreeQualityEv($4);
  ;
  return $5;
}


function __ZNK12b2BroadPhase14GetTreeQualityEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=__ZNK13b2DynamicTree12GetAreaRatioEv($3);
  ;
  return $4;
}


function __ZN7b2World4DumpEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      var $b;
      var $j;
      var $j1;
      var $j2;
      $1=$this;
      var $2=$1;
      var $3=(($2+102868)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 & 2;
      var $6=(($5)|0)==2;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 24; break;
    case 3: 
      var $9=(($2+102968)|0);
      var $10=(($9)|0);
      var $11=HEAPF32[(($10)>>2)];
      var $12=$11;
      var $13=(($2+102968)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      var $16=$15;
      __Z5b2LogPKcz(((STRING_TABLE.__str9183)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$12,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$16,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str10184)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $17=(($2+102960)|0);
      var $18=HEAP32[(($17)>>2)];
      __Z5b2LogPKcz(((STRING_TABLE.__str11185)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$18,tempInt));
      var $19=(($2+102964)|0);
      var $20=HEAP32[(($19)>>2)];
      __Z5b2LogPKcz(((STRING_TABLE.__str12186)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$20,tempInt));
      $i=0;
      var $21=(($2+102952)|0);
      var $22=HEAP32[(($21)>>2)];
      $b=$22;
      __label__ = 4; break;
    case 4: 
      var $24=$b;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $27=$i;
      var $28=$b;
      var $29=(($28+8)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$b;
      __ZN6b2Body4DumpEv($30);
      var $31=$i;
      var $32=(($31+1)|0);
      $i=$32;
      __label__ = 6; break;
    case 6: 
      var $34=$b;
      var $35=(($34+96)|0);
      var $36=HEAP32[(($35)>>2)];
      $b=$36;
      __label__ = 4; break;
    case 7: 
      $i=0;
      var $38=(($2+102956)|0);
      var $39=HEAP32[(($38)>>2)];
      $j=$39;
      __label__ = 8; break;
    case 8: 
      var $41=$j;
      var $42=(($41)|0)!=0;
      if ($42) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $44=$i;
      var $45=$j;
      var $46=(($45+56)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$i;
      var $48=(($47+1)|0);
      $i=$48;
      __label__ = 10; break;
    case 10: 
      var $50=$j;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $j=$52;
      __label__ = 8; break;
    case 11: 
      var $54=(($2+102956)|0);
      var $55=HEAP32[(($54)>>2)];
      $j1=$55;
      __label__ = 12; break;
    case 12: 
      var $57=$j1;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $60=$j1;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|0)==6;
      if ($63) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 16; break;
    case 15: 
      __Z5b2LogPKcz(((STRING_TABLE.__str13187)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $66=$j1;
      var $67=$66;
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+16)|0);
      var $70=HEAP32[(($69)>>2)];
      FUNCTION_TABLE[$70]($66);
      __Z5b2LogPKcz(((STRING_TABLE.__str14188)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 16; break;
    case 16: 
      var $72=$j1;
      var $73=(($72+12)|0);
      var $74=HEAP32[(($73)>>2)];
      $j1=$74;
      __label__ = 12; break;
    case 17: 
      var $76=(($2+102956)|0);
      var $77=HEAP32[(($76)>>2)];
      $j2=$77;
      __label__ = 18; break;
    case 18: 
      var $79=$j2;
      var $80=(($79)|0)!=0;
      if ($80) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      var $82=$j2;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|0)!=6;
      if ($85) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 22; break;
    case 21: 
      __Z5b2LogPKcz(((STRING_TABLE.__str13187)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $88=$j2;
      var $89=$88;
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+16)|0);
      var $92=HEAP32[(($91)>>2)];
      FUNCTION_TABLE[$92]($88);
      __Z5b2LogPKcz(((STRING_TABLE.__str14188)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 22; break;
    case 22: 
      var $94=$j2;
      var $95=(($94+12)|0);
      var $96=HEAP32[(($95)>>2)];
      $j2=$96;
      __label__ = 18; break;
    case 23: 
      __Z5b2LogPKcz(((STRING_TABLE.__str15189)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str16190)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str17191)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((STRING_TABLE.__str18192)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 24; break;
    case 24: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2ContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZN7b2ColorC2Efff($this, $r, $g, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$r;
  $3=$g;
  $4=$b;
  var $5=$1;
  var $6=(($5)|0);
  var $7=$2;
  HEAPF32[(($6)>>2)]=$7;
  var $8=(($5+4)|0);
  var $9=$3;
  HEAPF32[(($8)>>2)]=$9;
  var $10=(($5+8)|0);
  var $11=$4;
  HEAPF32[(($10)>>2)]=$11;
  ;
  return;
}


function __ZNK9b2Fixture13GetFilterDataEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+32)|0);
  ;
  return $3;
}


function __ZNK6b2AABB9GetCenterEv($agg_result, $this) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2=__stackBase__;
  $1=$this;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($3+8)|0);
  __ZplRK6b2Vec2S1_($2, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, 0.5, $2);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK6b2AABB10GetExtentsEv($agg_result, $this) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2=__stackBase__;
  $1=$this;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=(($3)|0);
  __ZmiRK6b2Vec2S1_($2, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, 0.5, $2);
  STACKTOP = __stackBase__;
  return;
}


function __ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($this, $input, $proxyId) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $userData;
      var $proxy;
      var $fixture;
      var $index;
      var $output=__stackBase__;
      var $hit;
      var $fraction;
      var $point=__stackBase__+12;
      var $5=__stackBase__+20;
      var $6=__stackBase__+28;
      $2=$this;
      $3=$input;
      $4=$proxyId;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$4;
      var $11=__ZNK12b2BroadPhase11GetUserDataEi($9, $10);
      $userData=$11;
      var $12=$userData;
      var $13=$12;
      $proxy=$13;
      var $14=$proxy;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      $fixture=$16;
      var $17=$proxy;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      $index=$19;
      __ZN15b2RayCastOutputC1Ev($output);
      var $20=$fixture;
      var $21=$3;
      var $22=$index;
      var $23=__ZNK9b2Fixture7RayCastEP15b2RayCastOutputRK14b2RayCastInputi($20, $output, $21, $22);
      var $24=(($23)&1);
      $hit=$24;
      var $25=$hit;
      var $26=(($25) & 1);
      if ($26) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $28=(($output+8)|0);
      var $29=HEAPF32[(($28)>>2)];
      $fraction=$29;
      var $30=$fraction;
      var $31=1-$30;
      var $32=$3;
      var $33=(($32)|0);
      __ZmlfRK6b2Vec2($5, $31, $33);
      var $34=$fraction;
      var $35=$3;
      var $36=(($35+8)|0);
      __ZmlfRK6b2Vec2($6, $34, $36);
      __ZplRK6b2Vec2S1_($point, $5, $6);
      var $37=(($7+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$fixture;
      var $44=(($output)|0);
      var $45=$fraction;
      var $46=FUNCTION_TABLE[$42]($38, $43, $point, $44, $45);
      $1=$46;
      __label__ = 4; break;
    case 3: 
      var $48=$3;
      var $49=(($48+16)|0);
      var $50=HEAPF32[(($49)>>2)];
      $1=$50;
      __label__ = 4; break;
    case 4: 
      var $52=$1;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2BroadPhase11GetUserDataEi($this, $proxyId) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=__ZNK13b2DynamicTree11GetUserDataEi($4, $5);
  ;
  return $6;
}


function __ZN15b2RayCastOutputC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2RayCastOutputC2Ev($2);
  ;
  return;
}


function __ZNK9b2Fixture7RayCastEP15b2RayCastOutputRK14b2RayCastInputi($this, $output, $input, $childIndex) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$output;
  $3=$input;
  $4=$childIndex;
  var $5=$1;
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=(($9+20)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$2;
  var $13=$3;
  var $14=(($5+8)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZNK6b2Body12GetTransformEv($15);
  var $17=$4;
  var $18=FUNCTION_TABLE[$11]($7, $12, $13, $16, $17);
  ;
  return $18;
}


function __ZN15b2RayCastOutputC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  ;
  return;
}


function __ZN19b2WorldQueryWrapper13QueryCallbackEi($this, $proxyId) {
  ;
  var __label__;

  var $1;
  var $2;
  var $proxy;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__ZNK12b2BroadPhase11GetUserDataEi($5, $6);
  var $8=$7;
  $proxy=$8;
  var $9=(($3+4)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$10;
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+8)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=$proxy;
  var $16=(($15+16)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=FUNCTION_TABLE[$14]($10, $17);
  ;
  return $18;
}


function __ZN14b2RayCastInputC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  ;
  return;
}


function __ZN10b2TOIInputC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN15b2DistanceProxyC1Ev($3);
  var $4=(($2+28)|0);
  __ZN15b2DistanceProxyC1Ev($4);
  var $5=(($2+56)|0);
  __ZN7b2SweepC1Ev($5);
  var $6=(($2+92)|0);
  __ZN7b2SweepC1Ev($6);
  ;
  return;
}


function __ZN16b2ContactManagerD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  FUNCTION_TABLE[__ZN12b2BroadPhaseD1Ev]($3);
  ;
  return;
}


function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $filterA;
      var $filterB;
      var $collide;
      $2=$this;
      $3=$fixtureA;
      $4=$fixtureB;
      var $5=$2;
      var $6=$3;
      var $7=__ZNK9b2Fixture13GetFilterDataEv($6);
      $filterA=$7;
      var $8=$4;
      var $9=__ZNK9b2Fixture13GetFilterDataEv($8);
      $filterB=$9;
      var $10=$filterA;
      var $11=(($10+4)|0);
      var $12=HEAP16[(($11)>>1)];
      var $13=(($12 << 16) >> 16);
      var $14=$filterB;
      var $15=(($14+4)|0);
      var $16=HEAP16[(($15)>>1)];
      var $17=(($16 << 16) >> 16);
      var $18=(($13)|0)==(($17)|0);
      if ($18) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $20=$filterA;
      var $21=(($20+4)|0);
      var $22=HEAP16[(($21)>>1)];
      var $23=(($22 << 16) >> 16);
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $26=$filterA;
      var $27=(($26+4)|0);
      var $28=HEAP16[(($27)>>1)];
      var $29=(($28 << 16) >> 16);
      var $30=(($29)|0) > 0;
      $1=$30;
      __label__ = 7; break;
    case 4: 
      var $32=$filterA;
      var $33=(($32+2)|0);
      var $34=HEAPU16[(($33)>>1)];
      var $35=(($34)&65535);
      var $36=$filterB;
      var $37=(($36)|0);
      var $38=HEAPU16[(($37)>>1)];
      var $39=(($38)&65535);
      var $40=$35 & $39;
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 5; break; } else { var $54 = 0;__label__ = 6; break; }
    case 5: 
      var $43=$filterA;
      var $44=(($43)|0);
      var $45=HEAPU16[(($44)>>1)];
      var $46=(($45)&65535);
      var $47=$filterB;
      var $48=(($47+2)|0);
      var $49=HEAPU16[(($48)>>1)];
      var $50=(($49)&65535);
      var $51=$46 & $50;
      var $52=(($51)|0)!=0;
      var $54 = $52;__label__ = 6; break;
    case 6: 
      var $54;
      var $55=(($54)&1);
      $collide=$55;
      var $56=$collide;
      var $57=(($56) & 1);
      $1=$57;
      __label__ = 7; break;
    case 7: 
      var $59=$1;
      ;
      return $59;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ContactFilterD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN15b2ContactFilterD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $mem;
      $1=$fixtureA;
      $2=$indexA;
      $3=$fixtureB;
      $4=$indexB;
      $5=$allocator;
      var $6=$5;
      var $7=__ZN16b2BlockAllocator8AllocateEi($6, 144);
      $mem=$7;
      var $8=$mem;
      var $9=(($8)|0)==0;
      if ($9) { var $17 = 0;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$8;
      var $12=$1;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      FUNCTION_TABLE[__ZN23b2ChainAndCircleContactC1EP9b2FixtureiS1_i]($11, $12, $13, $14, $15);
      var $17 = $11;__label__ = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  ;
  return;
}


function __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($this, $callback, $input) {
  var __stackBase__  = STACKTOP; STACKTOP += 1216; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p1=__stackBase__;
      var $p2=__stackBase__+8;
      var $r=__stackBase__+16;
      var $v=__stackBase__+24;
      var $abs_v=__stackBase__+32;
      var $maxFraction;
      var $segmentAABB=__stackBase__+40;
      var $t=__stackBase__+56;
      var $4=__stackBase__+64;
      var $5=__stackBase__+72;
      var $6=__stackBase__+80;
      var $7=__stackBase__+88;
      var $stack=__stackBase__+96;
      var $8;
      var $9;
      var $nodeId;
      var $node;
      var $c=__stackBase__+1132;
      var $h=__stackBase__+1140;
      var $separation;
      var $10=__stackBase__+1148;
      var $subInput=__stackBase__+1156;
      var $value;
      var $11;
      var $t1=__stackBase__+1176;
      var $12=__stackBase__+1184;
      var $13=__stackBase__+1192;
      var $14=__stackBase__+1200;
      var $15=__stackBase__+1208;
      $1=$this;
      $2=$callback;
      $3=$input;
      var $16=$1;
      var $17=$3;
      var $18=(($17)|0);
      var $19=$p1;
      var $20=$18;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[(($19+4)>>2)]=HEAP32[(($20+4)>>2)];
      var $21=$3;
      var $22=(($21+8)|0);
      var $23=$p2;
      var $24=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[(($23+4)>>2)]=HEAP32[(($24+4)>>2)];
      __ZmiRK6b2Vec2S1_($r, $p2, $p1);
      var $25=__ZNK6b2Vec213LengthSquaredEv($r);
      var $26=$25 > 0;
      if ($26) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str19193)|0), 204, ((STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput)|0), ((STRING_TABLE.__str20194)|0));
      __label__ = 4; break;
    case 4: 
      var $30=__ZN6b2Vec29NormalizeEv($r);
      __Z7b2CrossfRK6b2Vec2($v, 1, $r);
      __Z5b2AbsRK6b2Vec2($abs_v, $v);
      var $31=$3;
      var $32=(($31+16)|0);
      var $33=HEAPF32[(($32)>>2)];
      $maxFraction=$33;
      __ZN6b2AABBC1Ev($segmentAABB);
      var $34=$maxFraction;
      __ZmiRK6b2Vec2S1_($5, $p2, $p1);
      __ZmlfRK6b2Vec2($4, $34, $5);
      __ZplRK6b2Vec2S1_($t, $p1, $4);
      var $35=(($segmentAABB)|0);
      __Z5b2MinRK6b2Vec2S1_($6, $p1, $t);
      var $36=$35;
      var $37=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[(($36+4)>>2)]=HEAP32[(($37+4)>>2)];
      var $38=(($segmentAABB+8)|0);
      __Z5b2MaxRK6b2Vec2S1_($7, $p1, $t);
      var $39=$38;
      var $40=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[(($39+4)>>2)]=HEAP32[(($40+4)>>2)];
      __ZN15b2GrowableStackIiLi256EEC1Ev($stack);
      var $41=(($16)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $44 = (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE8GetCountEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $46=(($44)|0) > 0;
      if ($46) { __label__ = 8; break; } else { __label__ = 41; break; }
    case 8: 
      var $48 = (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE3PopEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      $nodeId=$48;
      var $50=$nodeId;
      var $51=(($50)|0)==-1;
      if ($51) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 6; break;
    case 11: 
      var $54=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $55=$54.f0;
      $8=$55;
      var $56=$54.f1;
      $9=$56;
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EED1Ev($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 44; break; } else { __label__ = 46; break; }
    case 12: 
      var $58=(($16+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$nodeId;
      var $61=(($59+$60*36)|0);
      $node=$61;
      var $62=$node;
      var $63=(($62)|0);
      var $64 = (function() { try { __THREW__ = false; return __Z13b2TestOverlapRK6b2AABBS1_($63, $segmentAABB) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 11; break; }
    case 13: 
      var $66=(($64)&1);
      var $67=(($66)|0)==0;
      if ($67) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 6; break;
    case 15: 
      var $70=$node;
      var $71=(($70)|0);
      (function() { try { __THREW__ = false; return __ZNK6b2AABB9GetCenterEv($c, $71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 16; break; } else { __label__ = 11; break; }
    case 16: 
      var $73=$node;
      var $74=(($73)|0);
      (function() { try { __THREW__ = false; return __ZNK6b2AABB10GetExtentsEv($h, $74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 17; break; } else { __label__ = 11; break; }
    case 17: 
      (function() { try { __THREW__ = false; return __ZmiRK6b2Vec2S1_($10, $p1, $c) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 18; break; } else { __label__ = 11; break; }
    case 18: 
      var $77 = (function() { try { __THREW__ = false; return __Z5b2DotRK6b2Vec2S1_($v, $10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 19; break; } else { __label__ = 11; break; }
    case 19: 
      var $79 = (function() { try { __THREW__ = false; return __Z5b2AbsIfET_S0_($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 20; break; } else { __label__ = 11; break; }
    case 20: 
      var $81 = (function() { try { __THREW__ = false; return __Z5b2DotRK6b2Vec2S1_($abs_v, $h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 21; break; } else { __label__ = 11; break; }
    case 21: 
      var $83=$79-$81;
      $separation=$83;
      var $84=$separation;
      var $85=$84 > 0;
      if ($85) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 6; break;
    case 23: 
      var $88=$node;
      var $89 = (function() { try { __THREW__ = false; return __ZNK10b2TreeNode6IsLeafEv($88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 24; break; } else { __label__ = 11; break; }
    case 24: 
      if ($89) { __label__ = 25; break; } else { __label__ = 37; break; }
    case 25: 
      (function() { try { __THREW__ = false; return __ZN14b2RayCastInputC1Ev($subInput) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 26; break; } else { __label__ = 11; break; }
    case 26: 
      var $93=(($subInput)|0);
      var $94=$3;
      var $95=(($94)|0);
      var $96=$93;
      var $97=$95;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[(($96+4)>>2)]=HEAP32[(($97+4)>>2)];
      var $98=(($subInput+8)|0);
      var $99=$3;
      var $100=(($99+8)|0);
      var $101=$98;
      var $102=$100;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[(($101+4)>>2)]=HEAP32[(($102+4)>>2)];
      var $103=$maxFraction;
      var $104=(($subInput+16)|0);
      HEAPF32[(($104)>>2)]=$103;
      var $105=$2;
      var $106=$nodeId;
      var $107 = (function() { try { __THREW__ = false; return __ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($105, $subInput, $106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 27; break; } else { __label__ = 11; break; }
    case 27: 
      $value=$107;
      var $109=$value;
      var $110=$109 == 0;
      if ($110) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      $11=1;
      __label__ = 42; break;
    case 29: 
      var $113=$value;
      var $114=$113 > 0;
      if ($114) { __label__ = 30; break; } else { __label__ = 36; break; }
    case 30: 
      var $116=$value;
      $maxFraction=$116;
      var $117=$maxFraction;
      (function() { try { __THREW__ = false; return __ZmiRK6b2Vec2S1_($13, $p2, $p1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 31; break; } else { __label__ = 11; break; }
    case 31: 
      (function() { try { __THREW__ = false; return __ZmlfRK6b2Vec2($12, $117, $13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 32; break; } else { __label__ = 11; break; }
    case 32: 
      (function() { try { __THREW__ = false; return __ZplRK6b2Vec2S1_($t1, $p1, $12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 33; break; } else { __label__ = 11; break; }
    case 33: 
      var $121=(($segmentAABB)|0);
      (function() { try { __THREW__ = false; return __Z5b2MinRK6b2Vec2S1_($14, $p1, $t1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 34; break; } else { __label__ = 11; break; }
    case 34: 
      var $123=$121;
      var $124=$14;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[(($123+4)>>2)]=HEAP32[(($124+4)>>2)];
      var $125=(($segmentAABB+8)|0);
      (function() { try { __THREW__ = false; return __Z5b2MaxRK6b2Vec2S1_($15, $p1, $t1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 35; break; } else { __label__ = 11; break; }
    case 35: 
      var $127=$125;
      var $128=$15;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($127)>>2)]=HEAP32[(($128)>>2)];HEAP32[(($127+4)>>2)]=HEAP32[(($128+4)>>2)];
      __label__ = 36; break;
    case 36: 
      __label__ = 40; break;
    case 37: 
      var $131=$node;
      var $132=(($131+24)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 38; break; } else { __label__ = 11; break; }
    case 38: 
      var $134=$node;
      var $135=(($134+28)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 39; break; } else { __label__ = 11; break; }
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 6; break;
    case 41: 
      $11=0;
      __label__ = 42; break;
    case 42: 
      __ZN15b2GrowableStackIiLi256EED1Ev($stack);
      var $cleanup_dest=$11;
      if ((($cleanup_dest)|0) == 0 || (($cleanup_dest)|0) == 1) {
        __label__ = 43; break;
      }
      else {
      __label__ = 47; break;
      }
      
    case 43: 
      STACKTOP = __stackBase__;
      return;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $143=$8;
      var $144=$8;
      var $145=$9;
      var $146=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $144, tempValue);
      var $147=($146.f1 = $145, $146);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 46: 
      var $149=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    case 47: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
  var __stackBase__  = STACKTOP; STACKTOP += 1036; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $stack=__stackBase__;
      var $4;
      var $5;
      var $nodeId;
      var $node;
      var $proceed;
      var $6;
      $1=$this;
      $2=$callback;
      $3=$aabb;
      var $7=$1;
      __ZN15b2GrowableStackIiLi256EEC1Ev($stack);
      var $8=(($7)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      __label__ = 3; break;
    case 3: 
      var $11 = (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE8GetCountEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $13=(($11)|0) > 0;
      if ($13) { __label__ = 5; break; } else { __label__ = 22; break; }
    case 5: 
      var $15 = (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE3PopEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      $nodeId=$15;
      var $17=$nodeId;
      var $18=(($17)|0)==-1;
      if ($18) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      __label__ = 3; break;
    case 8: 
      var $21=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $22=$21.f0;
      $4=$22;
      var $23=$21.f1;
      $5=$23;
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EED1Ev($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 9: 
      var $25=(($7+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$nodeId;
      var $28=(($26+$27*36)|0);
      $node=$28;
      var $29=$node;
      var $30=(($29)|0);
      var $31=$3;
      var $32 = (function() { try { __THREW__ = false; return __Z13b2TestOverlapRK6b2AABBS1_($30, $31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 8; break; }
    case 10: 
      if ($32) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: 
      var $35=$node;
      var $36 = (function() { try { __THREW__ = false; return __ZNK10b2TreeNode6IsLeafEv($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 12: 
      if ($36) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $39=$2;
      var $40=$nodeId;
      var $41 = (function() { try { __THREW__ = false; return __ZN19b2WorldQueryWrapper13QueryCallbackEi($39, $40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 8; break; }
    case 14: 
      var $43=(($41)&1);
      $proceed=$43;
      var $44=$proceed;
      var $45=(($44) & 1);
      var $46=(($45)&1);
      var $47=(($46)|0)==0;
      if ($47) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $6=1;
      __label__ = 23; break;
    case 16: 
      __label__ = 20; break;
    case 17: 
      var $51=$node;
      var $52=(($51+24)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 18; break; } else { __label__ = 8; break; }
    case 18: 
      var $54=$node;
      var $55=(($54+28)|0);
      (function() { try { __THREW__ = false; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 19; break; } else { __label__ = 8; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 3; break;
    case 22: 
      $6=0;
      __label__ = 23; break;
    case 23: 
      __ZN15b2GrowableStackIiLi256EED1Ev($stack);
      var $cleanup_dest=$6;
      if ((($cleanup_dest)|0) == 0 || (($cleanup_dest)|0) == 1) {
        __label__ = 24; break;
      }
      else {
      __label__ = 28; break;
      }
      
    case 24: 
      STACKTOP = __stackBase__;
      return;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $64=$4;
      var $65=$4;
      var $66=$5;
      var $67=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $65, tempValue);
      var $68=($67.f1 = $66, $67);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 27: 
      var $70=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    case 28: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      $1=$this;
      $2=$fixtureA;
      $3=$indexA;
      $4=$fixtureB;
      $5=$indexB;
      var $8=$1;
      var $9=$8;
      var $10=$2;
      var $11=$3;
      var $12=$4;
      var $13=$5;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($9, $10, $11, $12, $13);
      var $14=$8;
      HEAP32[(($14)>>2)]=((__ZTV23b2ChainAndCircleContact+8)|0);
      var $15=$8;
      var $16=(($15+48)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $20=(($18)|0)==3;
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str208)|0), 43, ((STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i)|0), ((STRING_TABLE.__str1209)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $25=$8;
      var $26=(($25+52)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $30=(($28)|0)==0;
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str208)|0), 44, ((STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i)|0), ((STRING_TABLE.__str2210)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    case 12: 
      var $36=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $37=$36.f0;
      $6=$37;
      var $38=$36.f1;
      $7=$38;
      var $39=$8;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD2Ev($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $42=$6;
      var $43=$6;
      var $44=$7;
      var $45=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $43, tempValue);
      var $46=($45.f1 = $44, $45);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 15: 
      var $48=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2ChainAndCircleContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN23b2ChainAndCircleContactD2Ev($2);
  ;
  return;
}


function __ZN23b2ChainAndCircleContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN23b2ChainAndCircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2ChainAndCircleContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  ;
  return;
}


function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $mem;
      $1=$fixtureA;
      $2=$indexA;
      $3=$fixtureB;
      $4=$indexB;
      $5=$allocator;
      var $6=$5;
      var $7=__ZN16b2BlockAllocator8AllocateEi($6, 144);
      $mem=$7;
      var $8=$mem;
      var $9=(($8)|0)==0;
      if ($9) { var $17 = 0;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$8;
      var $12=$1;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      FUNCTION_TABLE[__ZN24b2ChainAndPolygonContactC1EP9b2FixtureiS1_i]($11, $12, $13, $14, $15);
      var $17 = $11;__label__ = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  ;
  return;
}


function __ZN24b2ChainAndPolygonContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN24b2ChainAndPolygonContactD2Ev($2);
  ;
  return;
}


function __ZN24b2ChainAndPolygonContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN24b2ChainAndPolygonContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN24b2ChainAndPolygonContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  ;
  return;
}


function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      FUNCTION_TABLE[__ZN15b2CircleContactC1EP9b2FixtureS1_]($13, $14, $15);
      var $17 = $13;__label__ = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  ;
  return;
}


function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($6, $11, $12, $17, $18);
  ;
  return;
}


function __ZN15b2CircleContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2CircleContactD2Ev($2);
  ;
  return;
}


function __ZN15b2CircleContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN15b2CircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2CircleContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  ;
  return;
}


function __ZN9b2Contact19InitializeRegistersEv() {
  ;
  var __label__;

  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(8, 10, 0, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(12, 14, 2, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(16, 18, 2, 2);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(20, 22, 1, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(24, 26, 1, 2);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(28, 30, 3, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(32, 34, 3, 2);
  ;
  return;
}


function __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_($createFcn, $destoryFcn, $type1, $type2) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$createFcn;
      $2=$destoryFcn;
      $3=$type1;
      $4=$type2;
      var $5=$3;
      var $6=0 <= (($5)|0);
      if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($8)|0) < 4;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str217)|0), 54, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_)|0), ((STRING_TABLE.__str1218)|0));
      __label__ = 5; break;
    case 5: 
      var $13=$4;
      var $14=0 <= (($13)|0);
      if ($14) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $16=$4;
      var $17=(($16)|0) < 4;
      if ($17) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 9; break;
    case 8: 
      ___assert_func(((STRING_TABLE.__str217)|0), 55, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_)|0), ((STRING_TABLE.__str2219)|0));
      __label__ = 9; break;
    case 9: 
      var $21=$1;
      var $22=$4;
      var $23=$3;
      var $24=((__ZN9b2Contact11s_registersE+$23*48)|0);
      var $25=(($24+$22*12)|0);
      var $26=(($25)|0);
      HEAP32[(($26)>>2)]=$21;
      var $27=$2;
      var $28=$4;
      var $29=$3;
      var $30=((__ZN9b2Contact11s_registersE+$29*48)|0);
      var $31=(($30+$28*12)|0);
      var $32=(($31+4)|0);
      HEAP32[(($32)>>2)]=$27;
      var $33=$4;
      var $34=$3;
      var $35=((__ZN9b2Contact11s_registersE+$34*48)|0);
      var $36=(($35+$33*12)|0);
      var $37=(($36+8)|0);
      HEAP8[($37)]=1;
      var $38=$3;
      var $39=$4;
      var $40=(($38)|0)!=(($39)|0);
      if ($40) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $42=$1;
      var $43=$3;
      var $44=$4;
      var $45=((__ZN9b2Contact11s_registersE+$44*48)|0);
      var $46=(($45+$43*12)|0);
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=$42;
      var $48=$2;
      var $49=$3;
      var $50=$4;
      var $51=((__ZN9b2Contact11s_registersE+$50*48)|0);
      var $52=(($51+$49*12)|0);
      var $53=(($52+4)|0);
      HEAP32[(($53)>>2)]=$48;
      var $54=$3;
      var $55=$4;
      var $56=((__ZN9b2Contact11s_registersE+$55*48)|0);
      var $57=(($56+$54*12)|0);
      var $58=(($57+8)|0);
      HEAP8[($58)]=0;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $type1;
      var $type2;
      var $createFcn;
      $2=$fixtureA;
      $3=$indexA;
      $4=$fixtureB;
      $5=$indexB;
      $6=$allocator;
      var $7=HEAP8[(__ZN9b2Contact13s_initializedE)];
      var $8=(($7) & 1);
      var $9=(($8)&1);
      var $10=(($9)|0)==0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __ZN9b2Contact19InitializeRegistersEv();
      HEAP8[(__ZN9b2Contact13s_initializedE)]=1;
      __label__ = 3; break;
    case 3: 
      var $13=$2;
      var $14=__ZNK9b2Fixture7GetTypeEv($13);
      $type1=$14;
      var $15=$4;
      var $16=__ZNK9b2Fixture7GetTypeEv($15);
      $type2=$16;
      var $17=$type1;
      var $18=0 <= (($17)|0);
      if ($18) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $20=$type1;
      var $21=(($20)|0) < 4;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str217)|0), 80, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)|0), ((STRING_TABLE.__str1218)|0));
      __label__ = 7; break;
    case 7: 
      var $25=$type2;
      var $26=0 <= (($25)|0);
      if ($26) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $28=$type2;
      var $29=(($28)|0) < 4;
      if ($29) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 11; break;
    case 10: 
      ___assert_func(((STRING_TABLE.__str217)|0), 81, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)|0), ((STRING_TABLE.__str2219)|0));
      __label__ = 11; break;
    case 11: 
      var $33=$type2;
      var $34=$type1;
      var $35=((__ZN9b2Contact11s_registersE+$34*48)|0);
      var $36=(($35+$33*12)|0);
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      $createFcn=$38;
      var $39=$createFcn;
      var $40=(($39)|0)!=0;
      if ($40) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $42=$type2;
      var $43=$type1;
      var $44=((__ZN9b2Contact11s_registersE+$43*48)|0);
      var $45=(($44+$42*12)|0);
      var $46=(($45+8)|0);
      var $47=HEAP8[($46)];
      var $48=(($47) & 1);
      if ($48) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $50=$createFcn;
      var $51=$2;
      var $52=$3;
      var $53=$4;
      var $54=$5;
      var $55=$6;
      var $56=FUNCTION_TABLE[$50]($51, $52, $53, $54, $55);
      $1=$56;
      __label__ = 16; break;
    case 14: 
      var $58=$createFcn;
      var $59=$4;
      var $60=$5;
      var $61=$2;
      var $62=$3;
      var $63=$6;
      var $64=FUNCTION_TABLE[$58]($59, $60, $61, $62, $63);
      $1=$64;
      __label__ = 16; break;
    case 15: 
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $67=$1;
      ;
      return $67;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $typeA;
      var $typeB;
      var $destroyFcn;
      $1=$contact;
      $2=$allocator;
      var $3=HEAP8[(__ZN9b2Contact13s_initializedE)];
      var $4=(($3) & 1);
      var $5=(($4)&1);
      var $6=(($5)|0)==1;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str217)|0), 103, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator)|0), ((STRING_TABLE.__str3220)|0));
      __label__ = 4; break;
    case 4: 
      var $10=$1;
      var $11=(($10+64)|0);
      var $12=(($11+60)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0) > 0;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$1;
      var $17=__ZN9b2Contact11GetFixtureAEv($16);
      var $18=__ZN9b2Fixture7GetBodyEv($17);
      __ZN6b2Body8SetAwakeEb($18, 1);
      var $19=$1;
      var $20=__ZN9b2Contact11GetFixtureBEv($19);
      var $21=__ZN9b2Fixture7GetBodyEv($20);
      __ZN6b2Body8SetAwakeEb($21, 1);
      __label__ = 6; break;
    case 6: 
      var $23=$1;
      var $24=__ZN9b2Contact11GetFixtureAEv($23);
      var $25=__ZNK9b2Fixture7GetTypeEv($24);
      $typeA=$25;
      var $26=$1;
      var $27=__ZN9b2Contact11GetFixtureBEv($26);
      var $28=__ZNK9b2Fixture7GetTypeEv($27);
      $typeB=$28;
      var $29=$typeA;
      var $30=0 <= (($29)|0);
      if ($30) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $32=$typeB;
      var $33=(($32)|0) < 4;
      if ($33) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 10; break;
    case 9: 
      ___assert_func(((STRING_TABLE.__str217)|0), 114, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator)|0), ((STRING_TABLE.__str4221)|0));
      __label__ = 10; break;
    case 10: 
      var $37=$typeA;
      var $38=0 <= (($37)|0);
      if ($38) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $40=$typeB;
      var $41=(($40)|0) < 4;
      if ($41) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 14; break;
    case 13: 
      ___assert_func(((STRING_TABLE.__str217)|0), 115, ((STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator)|0), ((STRING_TABLE.__str4221)|0));
      __label__ = 14; break;
    case 14: 
      var $45=$typeB;
      var $46=$typeA;
      var $47=((__ZN9b2Contact11s_registersE+$46*48)|0);
      var $48=(($47+$45*12)|0);
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      $destroyFcn=$50;
      var $51=$destroyFcn;
      var $52=$1;
      var $53=$2;
      FUNCTION_TABLE[$51]($52, $53);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $chain;
      var $edge=__stackBase__;
      var $5;
      var $6;
      $1=$this;
      $2=$manifold;
      $3=$xfA;
      $4=$xfB;
      var $7=$1;
      var $8=$7;
      var $9=(($8+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=__ZN9b2Fixture8GetShapeEv($10);
      var $12=$11;
      $chain=$12;
      __ZN11b2EdgeShapeC1Ev($edge);
      var $13=$chain;
      var $14=$7;
      var $15=(($14+56)|0);
      var $16=HEAP32[(($15)>>2)];
      (function() { try { __THREW__ = false; return __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($13, $edge, $16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $18=$2;
      var $19=$3;
      var $20=$7;
      var $21=(($20+52)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23 = (function() { try { __THREW__ = false; return __ZN9b2Fixture8GetShapeEv($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $25=$23;
      var $26=$4;
      (function() { try { __THREW__ = false; return __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($18, $edge, $19, $25, $26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN11b2EdgeShapeD1Ev($edge);
      STACKTOP = __stackBase__;
      return;
    case 5: 
      var $29=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $30=$29.f0;
      $5=$30;
      var $31=$29.f1;
      $6=$31;
      (function() { try { __THREW__ = false; return __ZN11b2EdgeShapeD1Ev($edge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $34=$5;
      var $35=$5;
      var $36=$6;
      var $37=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $35, tempValue);
      var $38=($37.f1 = $36, $37);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 8: 
      var $40=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      $1=$this;
      $2=$fixtureA;
      $3=$indexA;
      $4=$fixtureB;
      $5=$indexB;
      var $8=$1;
      var $9=$8;
      var $10=$2;
      var $11=$3;
      var $12=$4;
      var $13=$5;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($9, $10, $11, $12, $13);
      var $14=$8;
      HEAP32[(($14)>>2)]=((__ZTV24b2ChainAndPolygonContact+8)|0);
      var $15=$8;
      var $16=(($15+48)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $20=(($18)|0)==3;
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str211)|0), 43, ((STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i)|0), ((STRING_TABLE.__str1212)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $25=$8;
      var $26=(($25+52)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $30=(($28)|0)==2;
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str211)|0), 44, ((STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i)|0), ((STRING_TABLE.__str2213)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    case 12: 
      var $36=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $37=$36.f0;
      $6=$37;
      var $38=$36.f1;
      $7=$38;
      var $39=$8;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD2Ev($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $42=$6;
      var $43=$6;
      var $44=$7;
      var $45=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $43, tempValue);
      var $46=($45.f1 = $44, $45);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 15: 
      var $48=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $chain;
      var $edge=__stackBase__;
      var $5;
      var $6;
      $1=$this;
      $2=$manifold;
      $3=$xfA;
      $4=$xfB;
      var $7=$1;
      var $8=$7;
      var $9=(($8+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=__ZN9b2Fixture8GetShapeEv($10);
      var $12=$11;
      $chain=$12;
      __ZN11b2EdgeShapeC1Ev($edge);
      var $13=$chain;
      var $14=$7;
      var $15=(($14+56)|0);
      var $16=HEAP32[(($15)>>2)];
      (function() { try { __THREW__ = false; return __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($13, $edge, $16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $18=$2;
      var $19=$3;
      var $20=$7;
      var $21=(($20+52)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23 = (function() { try { __THREW__ = false; return __ZN9b2Fixture8GetShapeEv($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $25=$23;
      var $26=$4;
      (function() { try { __THREW__ = false; return __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($18, $edge, $19, $25, $26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN11b2EdgeShapeD1Ev($edge);
      STACKTOP = __stackBase__;
      return;
    case 5: 
      var $29=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $30=$29.f0;
      $5=$30;
      var $31=$29.f1;
      $6=$31;
      (function() { try { __THREW__ = false; return __ZN11b2EdgeShapeD1Ev($edge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $34=$5;
      var $35=$5;
      var $36=$6;
      var $37=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $35, tempValue);
      var $38=($37.f1 = $36, $37);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 8: 
      var $40=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2CircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV15b2CircleContact+8)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $16=(($14)|0)==0;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str214)|0), 44, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str1215)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $21=$6;
      var $22=(($21+52)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $26=(($24)|0)==0;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str214)|0), 45, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str2216)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    case 12: 
      var $32=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $33=$32.f0;
      $4=$33;
      var $34=$32.f1;
      $5=$34;
      var $35=$6;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD2Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $38=$4;
      var $39=$4;
      var $40=$5;
      var $41=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $39, tempValue);
      var $42=($41.f1 = $40, $41);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 15: 
      var $44=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16b2MixRestitutionff($restitution1, $restitution2) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$restitution1;
  $2=$restitution2;
  var $3=$1;
  var $4=$2;
  var $5=$3 > $4;
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  ;
  return $8;
}


function __ZN9b2Contact11GetManifoldEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+64)|0);
  ;
  return $3;
}


function __ZN7b2Mat227SetZeroEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=(($3)|0);
  HEAPF32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  var $6=(($5)|0);
  HEAPF32[(($6)>>2)]=0;
  var $7=(($2)|0);
  var $8=(($7+4)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=(($2+8)|0);
  var $10=(($9+4)|0);
  HEAPF32[(($10)>>2)]=0;
  ;
  return;
}


function __ZN9b2ContactC2EP9b2FixtureiS1_i($this, $fA, $indexA, $fB, $indexB) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$this;
  $2=$fA;
  $3=$indexA;
  $4=$fB;
  $5=$indexB;
  var $6=$1;
  var $7=$6;
  HEAP32[(($7)>>2)]=((__ZTV9b2Contact+8)|0);
  var $8=(($6+16)|0);
  var $9=(($6+32)|0);
  var $10=(($6+64)|0);
  __ZN10b2ManifoldC1Ev($10);
  var $11=(($6+4)|0);
  HEAP32[(($11)>>2)]=4;
  var $12=$2;
  var $13=(($6+48)|0);
  HEAP32[(($13)>>2)]=$12;
  var $14=$4;
  var $15=(($6+52)|0);
  HEAP32[(($15)>>2)]=$14;
  var $16=$3;
  var $17=(($6+56)|0);
  HEAP32[(($17)>>2)]=$16;
  var $18=$5;
  var $19=(($6+60)|0);
  HEAP32[(($19)>>2)]=$18;
  var $20=(($6+64)|0);
  var $21=(($20+60)|0);
  HEAP32[(($21)>>2)]=0;
  var $22=(($6+8)|0);
  HEAP32[(($22)>>2)]=0;
  var $23=(($6+12)|0);
  HEAP32[(($23)>>2)]=0;
  var $24=(($6+16)|0);
  var $25=(($24+4)|0);
  HEAP32[(($25)>>2)]=0;
  var $26=(($6+16)|0);
  var $27=(($26+8)|0);
  HEAP32[(($27)>>2)]=0;
  var $28=(($6+16)|0);
  var $29=(($28+12)|0);
  HEAP32[(($29)>>2)]=0;
  var $30=(($6+16)|0);
  var $31=(($30)|0);
  HEAP32[(($31)>>2)]=0;
  var $32=(($6+32)|0);
  var $33=(($32+4)|0);
  HEAP32[(($33)>>2)]=0;
  var $34=(($6+32)|0);
  var $35=(($34+8)|0);
  HEAP32[(($35)>>2)]=0;
  var $36=(($6+32)|0);
  var $37=(($36+12)|0);
  HEAP32[(($37)>>2)]=0;
  var $38=(($6+32)|0);
  var $39=(($38)|0);
  HEAP32[(($39)>>2)]=0;
  var $40=(($6+128)|0);
  HEAP32[(($40)>>2)]=0;
  var $41=(($6+48)|0);
  var $42=HEAP32[(($41)>>2)];
  var $43=(($42+16)|0);
  var $44=HEAPF32[(($43)>>2)];
  var $45=(($6+52)|0);
  var $46=HEAP32[(($45)>>2)];
  var $47=(($46+16)|0);
  var $48=HEAPF32[(($47)>>2)];
  var $49=__Z13b2MixFrictionff($44, $48);
  var $50=(($6+136)|0);
  HEAPF32[(($50)>>2)]=$49;
  var $51=(($6+48)|0);
  var $52=HEAP32[(($51)>>2)];
  var $53=(($52+20)|0);
  var $54=HEAPF32[(($53)>>2)];
  var $55=(($6+52)|0);
  var $56=HEAP32[(($55)>>2)];
  var $57=(($56+20)|0);
  var $58=HEAPF32[(($57)>>2)];
  var $59=__Z16b2MixRestitutionff($54, $58);
  var $60=(($6+140)|0);
  HEAPF32[(($60)>>2)]=$59;
  ;
  return;
}


function __ZN10b2ManifoldC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2ManifoldC2Ev($2);
  ;
  return;
}


function __Z13b2MixFrictionff($friction1, $friction2) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $2;
  var $3;
  $2=$friction1;
  $3=$friction2;
  var $4=$2;
  var $5=$3;
  var $6=$4*$5;
  var $7=$1;
  HEAPF32[(($1)>>2)]=$6;
  var $8=HEAPF32[(($1)>>2)];
  var $9=_sqrtf($8);
  var $10=$1;
  STACKTOP = __stackBase__;
  return $9;
}


function __ZN9b2Contact6UpdateEP17b2ContactListener($this, $listener) {
  var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $oldManifold=__stackBase__;
      var $touching;
      var $wasTouching;
      var $sensorA;
      var $sensorB;
      var $sensor;
      var $bodyA;
      var $bodyB;
      var $xfA;
      var $xfB;
      var $shapeA;
      var $shapeB;
      var $i;
      var $mp2;
      var $id2=__stackBase__+64;
      var $j;
      var $mp1;
      $1=$this;
      $2=$listener;
      var $3=$1;
      var $4=(($3+64)|0);
      var $5=$oldManifold;
      var $6=$4;
      assert(64 % 1 === 0, 'memcpy given ' + 64 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $6>>2, $$dest = $5>>2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $7=(($3+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 | 4;
      HEAP32[(($7)>>2)]=$9;
      $touching=0;
      var $10=(($3+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 2;
      var $13=(($12)|0)==2;
      var $14=(($13)&1);
      $wasTouching=$14;
      var $15=(($3+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=__ZNK9b2Fixture8IsSensorEv($16);
      var $18=(($17)&1);
      $sensorA=$18;
      var $19=(($3+52)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=__ZNK9b2Fixture8IsSensorEv($20);
      var $22=(($21)&1);
      $sensorB=$22;
      var $23=$sensorA;
      var $24=(($23) & 1);
      if ($24) { var $29 = 1;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $26=$sensorB;
      var $27=(($26) & 1);
      var $29 = $27;__label__ = 3; break;
    case 3: 
      var $29;
      var $30=(($29)&1);
      $sensor=$30;
      var $31=(($3+48)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=__ZN9b2Fixture7GetBodyEv($32);
      $bodyA=$33;
      var $34=(($3+52)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=__ZN9b2Fixture7GetBodyEv($35);
      $bodyB=$36;
      var $37=$bodyA;
      var $38=__ZNK6b2Body12GetTransformEv($37);
      $xfA=$38;
      var $39=$bodyB;
      var $40=__ZNK6b2Body12GetTransformEv($39);
      $xfB=$40;
      var $41=$sensor;
      var $42=(($41) & 1);
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=(($3+48)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=__ZN9b2Fixture8GetShapeEv($45);
      $shapeA=$46;
      var $47=(($3+52)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=__ZN9b2Fixture8GetShapeEv($48);
      $shapeB=$49;
      var $50=$shapeA;
      var $51=(($3+56)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$shapeB;
      var $54=(($3+60)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$xfA;
      var $57=$xfB;
      var $58=__Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($50, $52, $53, $55, $56, $57);
      var $59=(($58)&1);
      $touching=$59;
      var $60=(($3+64)|0);
      var $61=(($60+60)|0);
      HEAP32[(($61)>>2)]=0;
      __label__ = 18; break;
    case 5: 
      var $63=$3;
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($3+64)|0);
      var $68=$xfA;
      var $69=$xfB;
      FUNCTION_TABLE[$66]($3, $67, $68, $69);
      var $70=(($3+64)|0);
      var $71=(($70+60)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|0) > 0;
      var $74=(($73)&1);
      $touching=$74;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $76=$i;
      var $77=(($3+64)|0);
      var $78=(($77+60)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($76)|0) < (($79)|0);
      if ($80) { __label__ = 7; break; } else { __label__ = 15; break; }
    case 7: 
      var $82=(($3+64)|0);
      var $83=(($82)|0);
      var $84=(($83)|0);
      var $85=$i;
      var $86=(($84+$85*20)|0);
      $mp2=$86;
      var $87=$mp2;
      var $88=(($87+8)|0);
      HEAPF32[(($88)>>2)]=0;
      var $89=$mp2;
      var $90=(($89+12)|0);
      HEAPF32[(($90)>>2)]=0;
      var $91=$mp2;
      var $92=(($91+16)|0);
      var $93=$id2;
      var $94=$92;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($93)>>2)]=HEAP32[(($94)>>2)];
      $j=0;
      __label__ = 8; break;
    case 8: 
      var $96=$j;
      var $97=(($oldManifold+60)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($96)|0) < (($98)|0);
      if ($99) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $101=(($oldManifold)|0);
      var $102=(($101)|0);
      var $103=$j;
      var $104=(($102+$103*20)|0);
      $mp1=$104;
      var $105=$mp1;
      var $106=(($105+16)|0);
      var $107=$106;
      var $108=HEAP32[(($107)>>2)];
      var $109=$id2;
      var $110=HEAP32[(($109)>>2)];
      var $111=(($108)|0)==(($110)|0);
      if ($111) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $113=$mp1;
      var $114=(($113+8)|0);
      var $115=HEAPF32[(($114)>>2)];
      var $116=$mp2;
      var $117=(($116+8)|0);
      HEAPF32[(($117)>>2)]=$115;
      var $118=$mp1;
      var $119=(($118+12)|0);
      var $120=HEAPF32[(($119)>>2)];
      var $121=$mp2;
      var $122=(($121+12)|0);
      HEAPF32[(($122)>>2)]=$120;
      __label__ = 13; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $125=$j;
      var $126=(($125+1)|0);
      $j=$126;
      __label__ = 8; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $129=$i;
      var $130=(($129+1)|0);
      $i=$130;
      __label__ = 6; break;
    case 15: 
      var $132=$touching;
      var $133=(($132) & 1);
      var $134=(($133)&1);
      var $135=$wasTouching;
      var $136=(($135) & 1);
      var $137=(($136)&1);
      var $138=(($134)|0)!=(($137)|0);
      if ($138) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $140=$bodyA;
      __ZN6b2Body8SetAwakeEb($140, 1);
      var $141=$bodyB;
      __ZN6b2Body8SetAwakeEb($141, 1);
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $144=$touching;
      var $145=(($144) & 1);
      if ($145) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $147=(($3+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148 | 2;
      HEAP32[(($147)>>2)]=$149;
      __label__ = 21; break;
    case 20: 
      var $151=(($3+4)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$152 & -3;
      HEAP32[(($151)>>2)]=$153;
      __label__ = 21; break;
    case 21: 
      var $155=$wasTouching;
      var $156=(($155) & 1);
      var $157=(($156)&1);
      var $158=(($157)|0)==0;
      if ($158) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $160=$touching;
      var $161=(($160) & 1);
      var $162=(($161)&1);
      var $163=(($162)|0)==1;
      if ($163) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $165=$2;
      var $166=(($165)|0)!=0;
      if ($166) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $168=$2;
      var $169=$168;
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170+8)|0);
      var $172=HEAP32[(($171)>>2)];
      FUNCTION_TABLE[$172]($168, $3);
      __label__ = 25; break;
    case 25: 
      var $174=$wasTouching;
      var $175=(($174) & 1);
      var $176=(($175)&1);
      var $177=(($176)|0)==1;
      if ($177) { __label__ = 26; break; } else { __label__ = 29; break; }
    case 26: 
      var $179=$touching;
      var $180=(($179) & 1);
      var $181=(($180)&1);
      var $182=(($181)|0)==0;
      if ($182) { __label__ = 27; break; } else { __label__ = 29; break; }
    case 27: 
      var $184=$2;
      var $185=(($184)|0)!=0;
      if ($185) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $187=$2;
      var $188=$187;
      var $189=HEAP32[(($188)>>2)];
      var $190=(($189+12)|0);
      var $191=HEAP32[(($190)>>2)];
      FUNCTION_TABLE[$191]($187, $3);
      __label__ = 29; break;
    case 29: 
      var $193=$sensor;
      var $194=(($193) & 1);
      var $195=(($194)&1);
      var $196=(($195)|0)==0;
      if ($196) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $198=$touching;
      var $199=(($198) & 1);
      if ($199) { __label__ = 31; break; } else { __label__ = 33; break; }
    case 31: 
      var $201=$2;
      var $202=(($201)|0)!=0;
      if ($202) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $204=$2;
      var $205=$204;
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206+16)|0);
      var $208=HEAP32[(($207)>>2)];
      FUNCTION_TABLE[$208]($204, $3, $oldManifold);
      __label__ = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2ContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN9b2ContactD2Ev($2);
  ;
  return;
}


function __ZN9b2ContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10b2ManifoldC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=(($4+40)|0);
      var $7 = $4;__label__ = 2; break;
    case 2: 
      var $7;
      __ZN15b2ManifoldPointC1Ev($7);
      var $8=(($7+20)|0);
      var $9=(($8)|0)==(($5)|0);
      if ($9) { __label__ = 3; break; } else { var $7 = $8;__label__ = 2; break; }
    case 3: 
      var $11=(($2+40)|0);
      __ZN6b2Vec2C1Ev($11);
      var $12=(($2+48)|0);
      __ZN6b2Vec2C1Ev($12);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ManifoldPointC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ManifoldPointC2Ev($2);
  ;
  return;
}


function __ZN15b2ManifoldPointC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+16)|0);
  ;
  return;
}


function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $contact;
      var $fixtureA;
      var $fixtureB;
      var $shapeA;
      var $shapeB;
      var $radiusA;
      var $radiusB;
      var $bodyA;
      var $bodyB;
      var $manifold;
      var $pointCount;
      var $vc;
      var $pc;
      var $j;
      var $cp;
      var $vcp;
      $1=$this;
      $2=$def;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($3)|0);
      var $6=$2;
      var $7=(($6)|0);
      var $8=$5;
      var $9=$7;
      assert(24 % 1 === 0, 'memcpy given ' + 24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[(($8+4)>>2)]=HEAP32[(($9+4)>>2)];HEAP32[(($8+8)>>2)]=HEAP32[(($9+8)>>2)];HEAP32[(($8+12)>>2)]=HEAP32[(($9+12)>>2)];HEAP32[(($8+16)>>2)]=HEAP32[(($9+16)>>2)];HEAP32[(($8+20)>>2)]=HEAP32[(($9+20)>>2)];
      var $10=$2;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($3+32)|0);
      HEAP32[(($13)>>2)]=$12;
      var $14=$2;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($3+48)|0);
      HEAP32[(($17)>>2)]=$16;
      var $18=(($3+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($3+48)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21*88)|0);
      var $23=__ZN16b2StackAllocator8AllocateEi($19, $22);
      var $24=$23;
      var $25=(($3+36)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=(($3+32)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($3+48)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29*152)|0);
      var $31=__ZN16b2StackAllocator8AllocateEi($27, $30);
      var $32=$31;
      var $33=(($3+40)|0);
      HEAP32[(($33)>>2)]=$32;
      var $34=$2;
      var $35=(($34+32)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($3+24)|0);
      HEAP32[(($37)>>2)]=$36;
      var $38=$2;
      var $39=(($38+36)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($3+28)|0);
      HEAP32[(($41)>>2)]=$40;
      var $42=$2;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($3+44)|0);
      HEAP32[(($45)>>2)]=$44;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $47=$i;
      var $48=(($3+48)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($47)|0) < (($49)|0);
      if ($50) { __label__ = 3; break; } else { __label__ = 15; break; }
    case 3: 
      var $52=$i;
      var $53=(($3+44)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($52<<2))|0);
      var $56=HEAP32[(($55)>>2)];
      $contact=$56;
      var $57=$contact;
      var $58=(($57+48)|0);
      var $59=HEAP32[(($58)>>2)];
      $fixtureA=$59;
      var $60=$contact;
      var $61=(($60+52)|0);
      var $62=HEAP32[(($61)>>2)];
      $fixtureB=$62;
      var $63=$fixtureA;
      var $64=__ZN9b2Fixture8GetShapeEv($63);
      $shapeA=$64;
      var $65=$fixtureB;
      var $66=__ZN9b2Fixture8GetShapeEv($65);
      $shapeB=$66;
      var $67=$shapeA;
      var $68=(($67+8)|0);
      var $69=HEAPF32[(($68)>>2)];
      $radiusA=$69;
      var $70=$shapeB;
      var $71=(($70+8)|0);
      var $72=HEAPF32[(($71)>>2)];
      $radiusB=$72;
      var $73=$fixtureA;
      var $74=__ZN9b2Fixture7GetBodyEv($73);
      $bodyA=$74;
      var $75=$fixtureB;
      var $76=__ZN9b2Fixture7GetBodyEv($75);
      $bodyB=$76;
      var $77=$contact;
      var $78=__ZN9b2Contact11GetManifoldEv($77);
      $manifold=$78;
      var $79=$manifold;
      var $80=(($79+60)|0);
      var $81=HEAP32[(($80)>>2)];
      $pointCount=$81;
      var $82=$pointCount;
      var $83=(($82)|0) > 0;
      if ($83) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      ___assert_func(((STRING_TABLE.__str230)|0), 71, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolverC2EP18b2ContactSolverDef)|0), ((STRING_TABLE.__str1231)|0));
      __label__ = 6; break;
    case 6: 
      var $87=(($3+40)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$i;
      var $90=(($88+$89*152)|0);
      $vc=$90;
      var $91=$contact;
      var $92=(($91+136)|0);
      var $93=HEAPF32[(($92)>>2)];
      var $94=$vc;
      var $95=(($94+136)|0);
      HEAPF32[(($95)>>2)]=$93;
      var $96=$contact;
      var $97=(($96+140)|0);
      var $98=HEAPF32[(($97)>>2)];
      var $99=$vc;
      var $100=(($99+140)|0);
      HEAPF32[(($100)>>2)]=$98;
      var $101=$bodyA;
      var $102=(($101+8)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$vc;
      var $105=(($104+112)|0);
      HEAP32[(($105)>>2)]=$103;
      var $106=$bodyB;
      var $107=(($106+8)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$vc;
      var $110=(($109+116)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$bodyA;
      var $112=(($111+120)|0);
      var $113=HEAPF32[(($112)>>2)];
      var $114=$vc;
      var $115=(($114+120)|0);
      HEAPF32[(($115)>>2)]=$113;
      var $116=$bodyB;
      var $117=(($116+120)|0);
      var $118=HEAPF32[(($117)>>2)];
      var $119=$vc;
      var $120=(($119+124)|0);
      HEAPF32[(($120)>>2)]=$118;
      var $121=$bodyA;
      var $122=(($121+128)|0);
      var $123=HEAPF32[(($122)>>2)];
      var $124=$vc;
      var $125=(($124+128)|0);
      HEAPF32[(($125)>>2)]=$123;
      var $126=$bodyB;
      var $127=(($126+128)|0);
      var $128=HEAPF32[(($127)>>2)];
      var $129=$vc;
      var $130=(($129+132)|0);
      HEAPF32[(($130)>>2)]=$128;
      var $131=$i;
      var $132=$vc;
      var $133=(($132+148)|0);
      HEAP32[(($133)>>2)]=$131;
      var $134=$pointCount;
      var $135=$vc;
      var $136=(($135+144)|0);
      HEAP32[(($136)>>2)]=$134;
      var $137=$vc;
      var $138=(($137+96)|0);
      __ZN7b2Mat227SetZeroEv($138);
      var $139=$vc;
      var $140=(($139+80)|0);
      __ZN7b2Mat227SetZeroEv($140);
      var $141=(($3+36)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$i;
      var $144=(($142+$143*88)|0);
      $pc=$144;
      var $145=$bodyA;
      var $146=(($145+8)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$pc;
      var $149=(($148+32)|0);
      HEAP32[(($149)>>2)]=$147;
      var $150=$bodyB;
      var $151=(($150+8)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$pc;
      var $154=(($153+36)|0);
      HEAP32[(($154)>>2)]=$152;
      var $155=$bodyA;
      var $156=(($155+120)|0);
      var $157=HEAPF32[(($156)>>2)];
      var $158=$pc;
      var $159=(($158+40)|0);
      HEAPF32[(($159)>>2)]=$157;
      var $160=$bodyB;
      var $161=(($160+120)|0);
      var $162=HEAPF32[(($161)>>2)];
      var $163=$pc;
      var $164=(($163+44)|0);
      HEAPF32[(($164)>>2)]=$162;
      var $165=$pc;
      var $166=(($165+48)|0);
      var $167=$bodyA;
      var $168=(($167+28)|0);
      var $169=(($168)|0);
      var $170=$166;
      var $171=$169;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($170)>>2)]=HEAP32[(($171)>>2)];HEAP32[(($170+4)>>2)]=HEAP32[(($171+4)>>2)];
      var $172=$pc;
      var $173=(($172+56)|0);
      var $174=$bodyB;
      var $175=(($174+28)|0);
      var $176=(($175)|0);
      var $177=$173;
      var $178=$176;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($177)>>2)]=HEAP32[(($178)>>2)];HEAP32[(($177+4)>>2)]=HEAP32[(($178+4)>>2)];
      var $179=$bodyA;
      var $180=(($179+128)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=$pc;
      var $183=(($182+64)|0);
      HEAPF32[(($183)>>2)]=$181;
      var $184=$bodyB;
      var $185=(($184+128)|0);
      var $186=HEAPF32[(($185)>>2)];
      var $187=$pc;
      var $188=(($187+68)|0);
      HEAPF32[(($188)>>2)]=$186;
      var $189=$pc;
      var $190=(($189+16)|0);
      var $191=$manifold;
      var $192=(($191+40)|0);
      var $193=$190;
      var $194=$192;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($193)>>2)]=HEAP32[(($194)>>2)];HEAP32[(($193+4)>>2)]=HEAP32[(($194+4)>>2)];
      var $195=$pc;
      var $196=(($195+24)|0);
      var $197=$manifold;
      var $198=(($197+48)|0);
      var $199=$196;
      var $200=$198;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($199)>>2)]=HEAP32[(($200)>>2)];HEAP32[(($199+4)>>2)]=HEAP32[(($200+4)>>2)];
      var $201=$pointCount;
      var $202=$pc;
      var $203=(($202+84)|0);
      HEAP32[(($203)>>2)]=$201;
      var $204=$radiusA;
      var $205=$pc;
      var $206=(($205+76)|0);
      HEAPF32[(($206)>>2)]=$204;
      var $207=$radiusB;
      var $208=$pc;
      var $209=(($208+80)|0);
      HEAPF32[(($209)>>2)]=$207;
      var $210=$manifold;
      var $211=(($210+56)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$pc;
      var $214=(($213+72)|0);
      HEAP32[(($214)>>2)]=$212;
      $j=0;
      __label__ = 7; break;
    case 7: 
      var $216=$j;
      var $217=$pointCount;
      var $218=(($216)|0) < (($217)|0);
      if ($218) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $220=$manifold;
      var $221=(($220)|0);
      var $222=(($221)|0);
      var $223=$j;
      var $224=(($222+$223*20)|0);
      $cp=$224;
      var $225=$vc;
      var $226=(($225)|0);
      var $227=(($226)|0);
      var $228=$j;
      var $229=(($227+$228*36)|0);
      $vcp=$229;
      var $230=(($3)|0);
      var $231=(($230+20)|0);
      var $232=HEAP8[($231)];
      var $233=(($232) & 1);
      if ($233) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $235=(($3)|0);
      var $236=(($235+8)|0);
      var $237=HEAPF32[(($236)>>2)];
      var $238=$cp;
      var $239=(($238+8)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=$237*$240;
      var $242=$vcp;
      var $243=(($242+16)|0);
      HEAPF32[(($243)>>2)]=$241;
      var $244=(($3)|0);
      var $245=(($244+8)|0);
      var $246=HEAPF32[(($245)>>2)];
      var $247=$cp;
      var $248=(($247+12)|0);
      var $249=HEAPF32[(($248)>>2)];
      var $250=$246*$249;
      var $251=$vcp;
      var $252=(($251+20)|0);
      HEAPF32[(($252)>>2)]=$250;
      __label__ = 11; break;
    case 10: 
      var $254=$vcp;
      var $255=(($254+16)|0);
      HEAPF32[(($255)>>2)]=0;
      var $256=$vcp;
      var $257=(($256+20)|0);
      HEAPF32[(($257)>>2)]=0;
      __label__ = 11; break;
    case 11: 
      var $259=$vcp;
      var $260=(($259)|0);
      __ZN6b2Vec27SetZeroEv($260);
      var $261=$vcp;
      var $262=(($261+8)|0);
      __ZN6b2Vec27SetZeroEv($262);
      var $263=$vcp;
      var $264=(($263+24)|0);
      HEAPF32[(($264)>>2)]=0;
      var $265=$vcp;
      var $266=(($265+28)|0);
      HEAPF32[(($266)>>2)]=0;
      var $267=$vcp;
      var $268=(($267+32)|0);
      HEAPF32[(($268)>>2)]=0;
      var $269=$j;
      var $270=$pc;
      var $271=(($270)|0);
      var $272=(($271+($269<<3))|0);
      var $273=$cp;
      var $274=(($273)|0);
      var $275=$272;
      var $276=$274;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($275)>>2)]=HEAP32[(($276)>>2)];HEAP32[(($275+4)>>2)]=HEAP32[(($276+4)>>2)];
      __label__ = 12; break;
    case 12: 
      var $278=$j;
      var $279=(($278+1)|0);
      $j=$279;
      __label__ = 7; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $282=$i;
      var $283=(($282+1)|0);
      $i=$283;
      __label__ = 2; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ContactSolverD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+32)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($2+40)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  __ZN16b2StackAllocator4FreeEPv($4, $7);
  var $8=(($2+32)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($2+36)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  __ZN16b2StackAllocator4FreeEPv($9, $12);
  ;
  return;
}


function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 216; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $pc;
      var $radiusA;
      var $radiusB;
      var $manifold;
      var $indexA;
      var $indexB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $localCenterA=__stackBase__;
      var $localCenterB=__stackBase__+8;
      var $cA=__stackBase__+16;
      var $aA;
      var $vA=__stackBase__+24;
      var $wA;
      var $cB=__stackBase__+32;
      var $aB;
      var $vB=__stackBase__+40;
      var $wB;
      var $xfA=__stackBase__+48;
      var $xfB=__stackBase__+64;
      var $2=__stackBase__+80;
      var $3=__stackBase__+88;
      var $4=__stackBase__+96;
      var $5=__stackBase__+104;
      var $worldManifold=__stackBase__+112;
      var $pointCount;
      var $j;
      var $vcp;
      var $6=__stackBase__+136;
      var $7=__stackBase__+144;
      var $rnA;
      var $rnB;
      var $kNormal;
      var $tangent=__stackBase__+152;
      var $rtA;
      var $rtB;
      var $kTangent;
      var $vRel;
      var $8=__stackBase__+160;
      var $9=__stackBase__+168;
      var $10=__stackBase__+176;
      var $11=__stackBase__+184;
      var $12=__stackBase__+192;
      var $vcp1;
      var $vcp2;
      var $rn1A;
      var $rn1B;
      var $rn2A;
      var $rn2B;
      var $k11;
      var $k22;
      var $k12;
      var $k_maxConditionNumber;
      var $13=__stackBase__+200;
      $1=$this;
      var $14=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $16=$i;
      var $17=(($14+48)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|0) < (($18)|0);
      if ($19) { __label__ = 3; break; } else { __label__ = 25; break; }
    case 3: 
      var $21=(($14+40)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$i;
      var $24=(($22+$23*152)|0);
      $vc=$24;
      var $25=(($14+36)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$i;
      var $28=(($26+$27*88)|0);
      $pc=$28;
      var $29=$pc;
      var $30=(($29+76)|0);
      var $31=HEAPF32[(($30)>>2)];
      $radiusA=$31;
      var $32=$pc;
      var $33=(($32+80)|0);
      var $34=HEAPF32[(($33)>>2)];
      $radiusB=$34;
      var $35=$vc;
      var $36=(($35+148)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($14+44)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($37<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=__ZN9b2Contact11GetManifoldEv($41);
      $manifold=$42;
      var $43=$vc;
      var $44=(($43+112)|0);
      var $45=HEAP32[(($44)>>2)];
      $indexA=$45;
      var $46=$vc;
      var $47=(($46+116)|0);
      var $48=HEAP32[(($47)>>2)];
      $indexB=$48;
      var $49=$vc;
      var $50=(($49+120)|0);
      var $51=HEAPF32[(($50)>>2)];
      $mA=$51;
      var $52=$vc;
      var $53=(($52+124)|0);
      var $54=HEAPF32[(($53)>>2)];
      $mB=$54;
      var $55=$vc;
      var $56=(($55+128)|0);
      var $57=HEAPF32[(($56)>>2)];
      $iA=$57;
      var $58=$vc;
      var $59=(($58+132)|0);
      var $60=HEAPF32[(($59)>>2)];
      $iB=$60;
      var $61=$pc;
      var $62=(($61+48)|0);
      var $63=$localCenterA;
      var $64=$62;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[(($63+4)>>2)]=HEAP32[(($64+4)>>2)];
      var $65=$pc;
      var $66=(($65+56)|0);
      var $67=$localCenterB;
      var $68=$66;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($67)>>2)]=HEAP32[(($68)>>2)];HEAP32[(($67+4)>>2)]=HEAP32[(($68+4)>>2)];
      var $69=$indexA;
      var $70=(($14+24)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+$69*12)|0);
      var $73=(($72)|0);
      var $74=$cA;
      var $75=$73;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[(($74+4)>>2)]=HEAP32[(($75+4)>>2)];
      var $76=$indexA;
      var $77=(($14+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+$76*12)|0);
      var $80=(($79+8)|0);
      var $81=HEAPF32[(($80)>>2)];
      $aA=$81;
      var $82=$indexA;
      var $83=(($14+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+$82*12)|0);
      var $86=(($85)|0);
      var $87=$vA;
      var $88=$86;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[(($87+4)>>2)]=HEAP32[(($88+4)>>2)];
      var $89=$indexA;
      var $90=(($14+28)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+$89*12)|0);
      var $93=(($92+8)|0);
      var $94=HEAPF32[(($93)>>2)];
      $wA=$94;
      var $95=$indexB;
      var $96=(($14+24)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+$95*12)|0);
      var $99=(($98)|0);
      var $100=$cB;
      var $101=$99;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[(($100+4)>>2)]=HEAP32[(($101+4)>>2)];
      var $102=$indexB;
      var $103=(($14+24)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+$102*12)|0);
      var $106=(($105+8)|0);
      var $107=HEAPF32[(($106)>>2)];
      $aB=$107;
      var $108=$indexB;
      var $109=(($14+28)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+$108*12)|0);
      var $112=(($111)|0);
      var $113=$vB;
      var $114=$112;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($113)>>2)]=HEAP32[(($114)>>2)];HEAP32[(($113+4)>>2)]=HEAP32[(($114+4)>>2)];
      var $115=$indexB;
      var $116=(($14+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+$115*12)|0);
      var $119=(($118+8)|0);
      var $120=HEAPF32[(($119)>>2)];
      $wB=$120;
      var $121=$manifold;
      var $122=(($121+60)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|0) > 0;
      if ($124) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      ___assert_func(((STRING_TABLE.__str230)|0), 168, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver29InitializeVelocityConstraintsEv)|0), ((STRING_TABLE.__str2232)|0));
      __label__ = 6; break;
    case 6: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $128=(($xfA+8)|0);
      var $129=$aA;
      __ZN5b2Rot3SetEf($128, $129);
      var $130=(($xfB+8)|0);
      var $131=$aB;
      __ZN5b2Rot3SetEf($130, $131);
      var $132=(($xfA)|0);
      var $133=(($xfA+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $133, $localCenterA);
      __ZmiRK6b2Vec2S1_($2, $cA, $3);
      var $134=$132;
      var $135=$2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[(($134+4)>>2)]=HEAP32[(($135+4)>>2)];
      var $136=(($xfB)|0);
      var $137=(($xfB+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $137, $localCenterB);
      __ZmiRK6b2Vec2S1_($4, $cB, $5);
      var $138=$136;
      var $139=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[(($138+4)>>2)]=HEAP32[(($139+4)>>2)];
      __ZN15b2WorldManifoldC1Ev($worldManifold);
      var $140=$manifold;
      var $141=$radiusA;
      var $142=$radiusB;
      __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($worldManifold, $140, $xfA, $141, $xfB, $142);
      var $143=$vc;
      var $144=(($143+72)|0);
      var $145=(($worldManifold)|0);
      var $146=$144;
      var $147=$145;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($146)>>2)]=HEAP32[(($147)>>2)];HEAP32[(($146+4)>>2)]=HEAP32[(($147+4)>>2)];
      var $148=$vc;
      var $149=(($148+144)|0);
      var $150=HEAP32[(($149)>>2)];
      $pointCount=$150;
      $j=0;
      __label__ = 7; break;
    case 7: 
      var $152=$j;
      var $153=$pointCount;
      var $154=(($152)|0) < (($153)|0);
      if ($154) { __label__ = 8; break; } else { __label__ = 18; break; }
    case 8: 
      var $156=$vc;
      var $157=(($156)|0);
      var $158=(($157)|0);
      var $159=$j;
      var $160=(($158+$159*36)|0);
      $vcp=$160;
      var $161=$vcp;
      var $162=(($161)|0);
      var $163=$j;
      var $164=(($worldManifold+8)|0);
      var $165=(($164+($163<<3))|0);
      __ZmiRK6b2Vec2S1_($6, $165, $cA);
      var $166=$162;
      var $167=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[(($166+4)>>2)]=HEAP32[(($167+4)>>2)];
      var $168=$vcp;
      var $169=(($168+8)|0);
      var $170=$j;
      var $171=(($worldManifold+8)|0);
      var $172=(($171+($170<<3))|0);
      __ZmiRK6b2Vec2S1_($7, $172, $cB);
      var $173=$169;
      var $174=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($173)>>2)]=HEAP32[(($174)>>2)];HEAP32[(($173+4)>>2)]=HEAP32[(($174+4)>>2)];
      var $175=$vcp;
      var $176=(($175)|0);
      var $177=$vc;
      var $178=(($177+72)|0);
      var $179=__Z7b2CrossRK6b2Vec2S1_($176, $178);
      $rnA=$179;
      var $180=$vcp;
      var $181=(($180+8)|0);
      var $182=$vc;
      var $183=(($182+72)|0);
      var $184=__Z7b2CrossRK6b2Vec2S1_($181, $183);
      $rnB=$184;
      var $185=$mA;
      var $186=$mB;
      var $187=$185+$186;
      var $188=$iA;
      var $189=$rnA;
      var $190=$188*$189;
      var $191=$rnA;
      var $192=$190*$191;
      var $193=$187+$192;
      var $194=$iB;
      var $195=$rnB;
      var $196=$194*$195;
      var $197=$rnB;
      var $198=$196*$197;
      var $199=$193+$198;
      $kNormal=$199;
      var $200=$kNormal;
      var $201=$200 > 0;
      if ($201) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $203=$kNormal;
      var $204=1/$203;
      var $207 = $204;__label__ = 11; break;
    case 10: 
      var $207 = 0;__label__ = 11; break;
    case 11: 
      var $207;
      var $208=$vcp;
      var $209=(($208+24)|0);
      HEAPF32[(($209)>>2)]=$207;
      var $210=$vc;
      var $211=(($210+72)|0);
      __Z7b2CrossRK6b2Vec2f($tangent, $211, 1);
      var $212=$vcp;
      var $213=(($212)|0);
      var $214=__Z7b2CrossRK6b2Vec2S1_($213, $tangent);
      $rtA=$214;
      var $215=$vcp;
      var $216=(($215+8)|0);
      var $217=__Z7b2CrossRK6b2Vec2S1_($216, $tangent);
      $rtB=$217;
      var $218=$mA;
      var $219=$mB;
      var $220=$218+$219;
      var $221=$iA;
      var $222=$rtA;
      var $223=$221*$222;
      var $224=$rtA;
      var $225=$223*$224;
      var $226=$220+$225;
      var $227=$iB;
      var $228=$rtB;
      var $229=$227*$228;
      var $230=$rtB;
      var $231=$229*$230;
      var $232=$226+$231;
      $kTangent=$232;
      var $233=$kTangent;
      var $234=$233 > 0;
      if ($234) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $236=$kTangent;
      var $237=1/$236;
      var $240 = $237;__label__ = 14; break;
    case 13: 
      var $240 = 0;__label__ = 14; break;
    case 14: 
      var $240;
      var $241=$vcp;
      var $242=(($241+28)|0);
      HEAPF32[(($242)>>2)]=$240;
      var $243=$vcp;
      var $244=(($243+32)|0);
      HEAPF32[(($244)>>2)]=0;
      var $245=$vc;
      var $246=(($245+72)|0);
      var $247=$wB;
      var $248=$vcp;
      var $249=(($248+8)|0);
      __Z7b2CrossfRK6b2Vec2($11, $247, $249);
      __ZplRK6b2Vec2S1_($10, $vB, $11);
      __ZmiRK6b2Vec2S1_($9, $10, $vA);
      var $250=$wA;
      var $251=$vcp;
      var $252=(($251)|0);
      __Z7b2CrossfRK6b2Vec2($12, $250, $252);
      __ZmiRK6b2Vec2S1_($8, $9, $12);
      var $253=__Z5b2DotRK6b2Vec2S1_($246, $8);
      $vRel=$253;
      var $254=$vRel;
      var $255=$254 < -1;
      if ($255) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $257=$vc;
      var $258=(($257+140)|0);
      var $259=HEAPF32[(($258)>>2)];
      var $260=(-$259);
      var $261=$vRel;
      var $262=$260*$261;
      var $263=$vcp;
      var $264=(($263+32)|0);
      HEAPF32[(($264)>>2)]=$262;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $267=$j;
      var $268=(($267+1)|0);
      $j=$268;
      __label__ = 7; break;
    case 18: 
      var $270=$vc;
      var $271=(($270+144)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=(($272)|0)==2;
      if ($273) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      var $275=$vc;
      var $276=(($275)|0);
      var $277=(($276)|0);
      var $278=(($277)|0);
      $vcp1=$278;
      var $279=$vc;
      var $280=(($279)|0);
      var $281=(($280)|0);
      var $282=(($281+36)|0);
      $vcp2=$282;
      var $283=$vcp1;
      var $284=(($283)|0);
      var $285=$vc;
      var $286=(($285+72)|0);
      var $287=__Z7b2CrossRK6b2Vec2S1_($284, $286);
      $rn1A=$287;
      var $288=$vcp1;
      var $289=(($288+8)|0);
      var $290=$vc;
      var $291=(($290+72)|0);
      var $292=__Z7b2CrossRK6b2Vec2S1_($289, $291);
      $rn1B=$292;
      var $293=$vcp2;
      var $294=(($293)|0);
      var $295=$vc;
      var $296=(($295+72)|0);
      var $297=__Z7b2CrossRK6b2Vec2S1_($294, $296);
      $rn2A=$297;
      var $298=$vcp2;
      var $299=(($298+8)|0);
      var $300=$vc;
      var $301=(($300+72)|0);
      var $302=__Z7b2CrossRK6b2Vec2S1_($299, $301);
      $rn2B=$302;
      var $303=$mA;
      var $304=$mB;
      var $305=$303+$304;
      var $306=$iA;
      var $307=$rn1A;
      var $308=$306*$307;
      var $309=$rn1A;
      var $310=$308*$309;
      var $311=$305+$310;
      var $312=$iB;
      var $313=$rn1B;
      var $314=$312*$313;
      var $315=$rn1B;
      var $316=$314*$315;
      var $317=$311+$316;
      $k11=$317;
      var $318=$mA;
      var $319=$mB;
      var $320=$318+$319;
      var $321=$iA;
      var $322=$rn2A;
      var $323=$321*$322;
      var $324=$rn2A;
      var $325=$323*$324;
      var $326=$320+$325;
      var $327=$iB;
      var $328=$rn2B;
      var $329=$327*$328;
      var $330=$rn2B;
      var $331=$329*$330;
      var $332=$326+$331;
      $k22=$332;
      var $333=$mA;
      var $334=$mB;
      var $335=$333+$334;
      var $336=$iA;
      var $337=$rn1A;
      var $338=$336*$337;
      var $339=$rn2A;
      var $340=$338*$339;
      var $341=$335+$340;
      var $342=$iB;
      var $343=$rn1B;
      var $344=$342*$343;
      var $345=$rn2B;
      var $346=$344*$345;
      var $347=$341+$346;
      $k12=$347;
      $k_maxConditionNumber=1000;
      var $348=$k11;
      var $349=$k11;
      var $350=$348*$349;
      var $351=$k11;
      var $352=$k22;
      var $353=$351*$352;
      var $354=$k12;
      var $355=$k12;
      var $356=$354*$355;
      var $357=$353-$356;
      var $358=$357*1000;
      var $359=$350 < $358;
      if ($359) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $361=$vc;
      var $362=(($361+96)|0);
      var $363=(($362)|0);
      var $364=$k11;
      var $365=$k12;
      __ZN6b2Vec23SetEff($363, $364, $365);
      var $366=$vc;
      var $367=(($366+96)|0);
      var $368=(($367+8)|0);
      var $369=$k12;
      var $370=$k22;
      __ZN6b2Vec23SetEff($368, $369, $370);
      var $371=$vc;
      var $372=(($371+80)|0);
      var $373=$vc;
      var $374=(($373+96)|0);
      __ZNK7b2Mat2210GetInverseEv($13, $374);
      var $375=$372;
      var $376=$13;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($375)>>2)]=HEAP32[(($376)>>2)];HEAP32[(($375+4)>>2)]=HEAP32[(($376+4)>>2)];HEAP32[(($375+8)>>2)]=HEAP32[(($376+8)>>2)];HEAP32[(($375+12)>>2)]=HEAP32[(($376+12)>>2)];
      __label__ = 22; break;
    case 21: 
      var $378=$vc;
      var $379=(($378+144)|0);
      HEAP32[(($379)>>2)]=1;
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $383=$i;
      var $384=(($383+1)|0);
      $i=$384;
      __label__ = 2; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2WorldManifoldC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2WorldManifoldC2Ev($2);
  ;
  return;
}


function __ZNK7b2Mat2210GetInverseEv($agg_result, $this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $a;
      var $b;
      var $c;
      var $d;
      var $det;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=HEAPF32[(($4)>>2)];
      $a=$5;
      var $6=(($2+8)|0);
      var $7=(($6)|0);
      var $8=HEAPF32[(($7)>>2)];
      $b=$8;
      var $9=(($2)|0);
      var $10=(($9+4)|0);
      var $11=HEAPF32[(($10)>>2)];
      $c=$11;
      var $12=(($2+8)|0);
      var $13=(($12+4)|0);
      var $14=HEAPF32[(($13)>>2)];
      $d=$14;
      __ZN7b2Mat22C1Ev($agg_result);
      var $15=$a;
      var $16=$d;
      var $17=$15*$16;
      var $18=$b;
      var $19=$c;
      var $20=$18*$19;
      var $21=$17-$20;
      $det=$21;
      var $22=$det;
      var $23=$22 != 0;
      if ($23) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $25=$det;
      var $26=1/$25;
      $det=$26;
      __label__ = 3; break;
    case 3: 
      var $28=$det;
      var $29=$d;
      var $30=$28*$29;
      var $31=(($agg_result)|0);
      var $32=(($31)|0);
      HEAPF32[(($32)>>2)]=$30;
      var $33=$det;
      var $34=(-$33);
      var $35=$b;
      var $36=$34*$35;
      var $37=(($agg_result+8)|0);
      var $38=(($37)|0);
      HEAPF32[(($38)>>2)]=$36;
      var $39=$det;
      var $40=(-$39);
      var $41=$c;
      var $42=$40*$41;
      var $43=(($agg_result)|0);
      var $44=(($43+4)|0);
      HEAPF32[(($44)>>2)]=$42;
      var $45=$det;
      var $46=$a;
      var $47=$45*$46;
      var $48=(($agg_result+8)|0);
      var $49=(($48+4)|0);
      HEAPF32[(($49)>>2)]=$47;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ContactSolver9WarmStartEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $indexA;
      var $indexB;
      var $mA;
      var $iA;
      var $mB;
      var $iB;
      var $pointCount;
      var $vA=__stackBase__;
      var $wA;
      var $vB=__stackBase__+8;
      var $wB;
      var $normal=__stackBase__+16;
      var $tangent=__stackBase__+24;
      var $j;
      var $vcp;
      var $P=__stackBase__+32;
      var $2=__stackBase__+40;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      $1=$this;
      var $6=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $8=$i;
      var $9=(($6+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|0) < (($10)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $13=(($6+40)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$i;
      var $16=(($14+$15*152)|0);
      $vc=$16;
      var $17=$vc;
      var $18=(($17+112)|0);
      var $19=HEAP32[(($18)>>2)];
      $indexA=$19;
      var $20=$vc;
      var $21=(($20+116)|0);
      var $22=HEAP32[(($21)>>2)];
      $indexB=$22;
      var $23=$vc;
      var $24=(($23+120)|0);
      var $25=HEAPF32[(($24)>>2)];
      $mA=$25;
      var $26=$vc;
      var $27=(($26+128)|0);
      var $28=HEAPF32[(($27)>>2)];
      $iA=$28;
      var $29=$vc;
      var $30=(($29+124)|0);
      var $31=HEAPF32[(($30)>>2)];
      $mB=$31;
      var $32=$vc;
      var $33=(($32+132)|0);
      var $34=HEAPF32[(($33)>>2)];
      $iB=$34;
      var $35=$vc;
      var $36=(($35+144)|0);
      var $37=HEAP32[(($36)>>2)];
      $pointCount=$37;
      var $38=$indexA;
      var $39=(($6+28)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$38*12)|0);
      var $42=(($41)|0);
      var $43=$vA;
      var $44=$42;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[(($43+4)>>2)]=HEAP32[(($44+4)>>2)];
      var $45=$indexA;
      var $46=(($6+28)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+$45*12)|0);
      var $49=(($48+8)|0);
      var $50=HEAPF32[(($49)>>2)];
      $wA=$50;
      var $51=$indexB;
      var $52=(($6+28)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+$51*12)|0);
      var $55=(($54)|0);
      var $56=$vB;
      var $57=$55;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[(($56+4)>>2)]=HEAP32[(($57+4)>>2)];
      var $58=$indexB;
      var $59=(($6+28)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+$58*12)|0);
      var $62=(($61+8)|0);
      var $63=HEAPF32[(($62)>>2)];
      $wB=$63;
      var $64=$vc;
      var $65=(($64+72)|0);
      var $66=$normal;
      var $67=$65;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[(($66+4)>>2)]=HEAP32[(($67+4)>>2)];
      __Z7b2CrossRK6b2Vec2f($tangent, $normal, 1);
      $j=0;
      __label__ = 4; break;
    case 4: 
      var $69=$j;
      var $70=$pointCount;
      var $71=(($69)|0) < (($70)|0);
      if ($71) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $73=$vc;
      var $74=(($73)|0);
      var $75=(($74)|0);
      var $76=$j;
      var $77=(($75+$76*36)|0);
      $vcp=$77;
      var $78=$vcp;
      var $79=(($78+16)|0);
      var $80=HEAPF32[(($79)>>2)];
      __ZmlfRK6b2Vec2($2, $80, $normal);
      var $81=$vcp;
      var $82=(($81+20)|0);
      var $83=HEAPF32[(($82)>>2)];
      __ZmlfRK6b2Vec2($3, $83, $tangent);
      __ZplRK6b2Vec2S1_($P, $2, $3);
      var $84=$iA;
      var $85=$vcp;
      var $86=(($85)|0);
      var $87=__Z7b2CrossRK6b2Vec2S1_($86, $P);
      var $88=$84*$87;
      var $89=$wA;
      var $90=$89-$88;
      $wA=$90;
      var $91=$mA;
      __ZmlfRK6b2Vec2($4, $91, $P);
      __ZN6b2Vec2mIERKS_($vA, $4);
      var $92=$iB;
      var $93=$vcp;
      var $94=(($93+8)|0);
      var $95=__Z7b2CrossRK6b2Vec2S1_($94, $P);
      var $96=$92*$95;
      var $97=$wB;
      var $98=$97+$96;
      $wB=$98;
      var $99=$mB;
      __ZmlfRK6b2Vec2($5, $99, $P);
      __ZN6b2Vec2pLERKS_($vB, $5);
      __label__ = 6; break;
    case 6: 
      var $101=$j;
      var $102=(($101+1)|0);
      $j=$102;
      __label__ = 4; break;
    case 7: 
      var $104=$indexA;
      var $105=(($6+28)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+$104*12)|0);
      var $108=(($107)|0);
      var $109=$108;
      var $110=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($109)>>2)]=HEAP32[(($110)>>2)];HEAP32[(($109+4)>>2)]=HEAP32[(($110+4)>>2)];
      var $111=$wA;
      var $112=$indexA;
      var $113=(($6+28)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+$112*12)|0);
      var $116=(($115+8)|0);
      HEAPF32[(($116)>>2)]=$111;
      var $117=$indexB;
      var $118=(($6+28)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+$117*12)|0);
      var $121=(($120)|0);
      var $122=$121;
      var $123=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[(($122+4)>>2)]=HEAP32[(($123+4)>>2)];
      var $124=$wB;
      var $125=$indexB;
      var $126=(($6+28)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+$125*12)|0);
      var $129=(($128+8)|0);
      HEAPF32[(($129)>>2)]=$124;
      __label__ = 8; break;
    case 8: 
      var $131=$i;
      var $132=(($131+1)|0);
      $i=$132;
      __label__ = 2; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 504; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $indexA;
      var $indexB;
      var $mA;
      var $iA;
      var $mB;
      var $iB;
      var $pointCount;
      var $vA=__stackBase__;
      var $wA;
      var $vB=__stackBase__+8;
      var $wB;
      var $normal=__stackBase__+16;
      var $tangent=__stackBase__+24;
      var $friction;
      var $j;
      var $vcp;
      var $dv=__stackBase__+32;
      var $2=__stackBase__+40;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      var $vt;
      var $lambda;
      var $maxFriction;
      var $newImpulse;
      var $P=__stackBase__+72;
      var $6=__stackBase__+80;
      var $7=__stackBase__+88;
      var $vcp1;
      var $dv2=__stackBase__+96;
      var $8=__stackBase__+104;
      var $9=__stackBase__+112;
      var $10=__stackBase__+120;
      var $11=__stackBase__+128;
      var $vn;
      var $lambda3;
      var $newImpulse4;
      var $P5=__stackBase__+136;
      var $12=__stackBase__+144;
      var $13=__stackBase__+152;
      var $cp1;
      var $cp2;
      var $a=__stackBase__+160;
      var $dv1=__stackBase__+168;
      var $14=__stackBase__+176;
      var $15=__stackBase__+184;
      var $16=__stackBase__+192;
      var $17=__stackBase__+200;
      var $dv26=__stackBase__+208;
      var $18=__stackBase__+216;
      var $19=__stackBase__+224;
      var $20=__stackBase__+232;
      var $21=__stackBase__+240;
      var $vn1;
      var $vn2;
      var $b=__stackBase__+248;
      var $22=__stackBase__+256;
      var $k_errorTol;
      var $x=__stackBase__+264;
      var $23=__stackBase__+272;
      var $d=__stackBase__+280;
      var $P1=__stackBase__+288;
      var $P2=__stackBase__+296;
      var $24=__stackBase__+304;
      var $25=__stackBase__+312;
      var $26=__stackBase__+320;
      var $27=__stackBase__+328;
      var $d7=__stackBase__+336;
      var $P18=__stackBase__+344;
      var $P29=__stackBase__+352;
      var $28=__stackBase__+360;
      var $29=__stackBase__+368;
      var $30=__stackBase__+376;
      var $31=__stackBase__+384;
      var $d10=__stackBase__+392;
      var $P111=__stackBase__+400;
      var $P212=__stackBase__+408;
      var $32=__stackBase__+416;
      var $33=__stackBase__+424;
      var $34=__stackBase__+432;
      var $35=__stackBase__+440;
      var $d13=__stackBase__+448;
      var $P114=__stackBase__+456;
      var $P215=__stackBase__+464;
      var $36=__stackBase__+472;
      var $37=__stackBase__+480;
      var $38=__stackBase__+488;
      var $39=__stackBase__+496;
      $1=$this;
      var $40=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $42=$i;
      var $43=(($40+48)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($42)|0) < (($44)|0);
      if ($45) { __label__ = 3; break; } else { __label__ = 34; break; }
    case 3: 
      var $47=(($40+40)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$i;
      var $50=(($48+$49*152)|0);
      $vc=$50;
      var $51=$vc;
      var $52=(($51+112)|0);
      var $53=HEAP32[(($52)>>2)];
      $indexA=$53;
      var $54=$vc;
      var $55=(($54+116)|0);
      var $56=HEAP32[(($55)>>2)];
      $indexB=$56;
      var $57=$vc;
      var $58=(($57+120)|0);
      var $59=HEAPF32[(($58)>>2)];
      $mA=$59;
      var $60=$vc;
      var $61=(($60+128)|0);
      var $62=HEAPF32[(($61)>>2)];
      $iA=$62;
      var $63=$vc;
      var $64=(($63+124)|0);
      var $65=HEAPF32[(($64)>>2)];
      $mB=$65;
      var $66=$vc;
      var $67=(($66+132)|0);
      var $68=HEAPF32[(($67)>>2)];
      $iB=$68;
      var $69=$vc;
      var $70=(($69+144)|0);
      var $71=HEAP32[(($70)>>2)];
      $pointCount=$71;
      var $72=$indexA;
      var $73=(($40+28)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+$72*12)|0);
      var $76=(($75)|0);
      var $77=$vA;
      var $78=$76;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[(($77+4)>>2)]=HEAP32[(($78+4)>>2)];
      var $79=$indexA;
      var $80=(($40+28)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+$79*12)|0);
      var $83=(($82+8)|0);
      var $84=HEAPF32[(($83)>>2)];
      $wA=$84;
      var $85=$indexB;
      var $86=(($40+28)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+$85*12)|0);
      var $89=(($88)|0);
      var $90=$vB;
      var $91=$89;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[(($90+4)>>2)]=HEAP32[(($91+4)>>2)];
      var $92=$indexB;
      var $93=(($40+28)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+$92*12)|0);
      var $96=(($95+8)|0);
      var $97=HEAPF32[(($96)>>2)];
      $wB=$97;
      var $98=$vc;
      var $99=(($98+72)|0);
      var $100=$normal;
      var $101=$99;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[(($100+4)>>2)]=HEAP32[(($101+4)>>2)];
      __Z7b2CrossRK6b2Vec2f($tangent, $normal, 1);
      var $102=$vc;
      var $103=(($102+136)|0);
      var $104=HEAPF32[(($103)>>2)];
      $friction=$104;
      var $105=$pointCount;
      var $106=(($105)|0)==1;
      if ($106) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $108=$pointCount;
      var $109=(($108)|0)==2;
      if ($109) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      ___assert_func(((STRING_TABLE.__str230)|0), 311, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver24SolveVelocityConstraintsEv)|0), ((STRING_TABLE.__str3233)|0));
      __label__ = 7; break;
    case 7: 
      $j=0;
      __label__ = 8; break;
    case 8: 
      var $114=$j;
      var $115=$pointCount;
      var $116=(($114)|0) < (($115)|0);
      if ($116) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $118=$vc;
      var $119=(($118)|0);
      var $120=(($119)|0);
      var $121=$j;
      var $122=(($120+$121*36)|0);
      $vcp=$122;
      var $123=$wB;
      var $124=$vcp;
      var $125=(($124+8)|0);
      __Z7b2CrossfRK6b2Vec2($4, $123, $125);
      __ZplRK6b2Vec2S1_($3, $vB, $4);
      __ZmiRK6b2Vec2S1_($2, $3, $vA);
      var $126=$wA;
      var $127=$vcp;
      var $128=(($127)|0);
      __Z7b2CrossfRK6b2Vec2($5, $126, $128);
      __ZmiRK6b2Vec2S1_($dv, $2, $5);
      var $129=__Z5b2DotRK6b2Vec2S1_($dv, $tangent);
      $vt=$129;
      var $130=$vcp;
      var $131=(($130+28)|0);
      var $132=HEAPF32[(($131)>>2)];
      var $133=$vt;
      var $134=(-$133);
      var $135=$132*$134;
      $lambda=$135;
      var $136=$friction;
      var $137=$vcp;
      var $138=(($137+16)|0);
      var $139=HEAPF32[(($138)>>2)];
      var $140=$136*$139;
      $maxFriction=$140;
      var $141=$vcp;
      var $142=(($141+20)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=$lambda;
      var $145=$143+$144;
      var $146=$maxFriction;
      var $147=(-$146);
      var $148=$maxFriction;
      var $149=__Z7b2ClampIfET_S0_S0_S0_($145, $147, $148);
      $newImpulse=$149;
      var $150=$newImpulse;
      var $151=$vcp;
      var $152=(($151+20)|0);
      var $153=HEAPF32[(($152)>>2)];
      var $154=$150-$153;
      $lambda=$154;
      var $155=$newImpulse;
      var $156=$vcp;
      var $157=(($156+20)|0);
      HEAPF32[(($157)>>2)]=$155;
      var $158=$lambda;
      __ZmlfRK6b2Vec2($P, $158, $tangent);
      var $159=$mA;
      __ZmlfRK6b2Vec2($6, $159, $P);
      __ZN6b2Vec2mIERKS_($vA, $6);
      var $160=$iA;
      var $161=$vcp;
      var $162=(($161)|0);
      var $163=__Z7b2CrossRK6b2Vec2S1_($162, $P);
      var $164=$160*$163;
      var $165=$wA;
      var $166=$165-$164;
      $wA=$166;
      var $167=$mB;
      __ZmlfRK6b2Vec2($7, $167, $P);
      __ZN6b2Vec2pLERKS_($vB, $7);
      var $168=$iB;
      var $169=$vcp;
      var $170=(($169+8)|0);
      var $171=__Z7b2CrossRK6b2Vec2S1_($170, $P);
      var $172=$168*$171;
      var $173=$wB;
      var $174=$173+$172;
      $wB=$174;
      __label__ = 10; break;
    case 10: 
      var $176=$j;
      var $177=(($176+1)|0);
      $j=$177;
      __label__ = 8; break;
    case 11: 
      var $179=$vc;
      var $180=(($179+144)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181)|0)==1;
      if ($182) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $184=$vc;
      var $185=(($184)|0);
      var $186=(($185)|0);
      var $187=(($186)|0);
      $vcp1=$187;
      var $188=$wB;
      var $189=$vcp1;
      var $190=(($189+8)|0);
      __Z7b2CrossfRK6b2Vec2($10, $188, $190);
      __ZplRK6b2Vec2S1_($9, $vB, $10);
      __ZmiRK6b2Vec2S1_($8, $9, $vA);
      var $191=$wA;
      var $192=$vcp1;
      var $193=(($192)|0);
      __Z7b2CrossfRK6b2Vec2($11, $191, $193);
      __ZmiRK6b2Vec2S1_($dv2, $8, $11);
      var $194=__Z5b2DotRK6b2Vec2S1_($dv2, $normal);
      $vn=$194;
      var $195=$vcp1;
      var $196=(($195+24)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=(-$197);
      var $199=$vn;
      var $200=$vcp1;
      var $201=(($200+32)|0);
      var $202=HEAPF32[(($201)>>2)];
      var $203=$199-$202;
      var $204=$198*$203;
      $lambda3=$204;
      var $205=$vcp1;
      var $206=(($205+16)|0);
      var $207=HEAPF32[(($206)>>2)];
      var $208=$lambda3;
      var $209=$207+$208;
      var $210=__Z5b2MaxIfET_S0_S0_($209, 0);
      $newImpulse4=$210;
      var $211=$newImpulse4;
      var $212=$vcp1;
      var $213=(($212+16)|0);
      var $214=HEAPF32[(($213)>>2)];
      var $215=$211-$214;
      $lambda3=$215;
      var $216=$newImpulse4;
      var $217=$vcp1;
      var $218=(($217+16)|0);
      HEAPF32[(($218)>>2)]=$216;
      var $219=$lambda3;
      __ZmlfRK6b2Vec2($P5, $219, $normal);
      var $220=$mA;
      __ZmlfRK6b2Vec2($12, $220, $P5);
      __ZN6b2Vec2mIERKS_($vA, $12);
      var $221=$iA;
      var $222=$vcp1;
      var $223=(($222)|0);
      var $224=__Z7b2CrossRK6b2Vec2S1_($223, $P5);
      var $225=$221*$224;
      var $226=$wA;
      var $227=$226-$225;
      $wA=$227;
      var $228=$mB;
      __ZmlfRK6b2Vec2($13, $228, $P5);
      __ZN6b2Vec2pLERKS_($vB, $13);
      var $229=$iB;
      var $230=$vcp1;
      var $231=(($230+8)|0);
      var $232=__Z7b2CrossRK6b2Vec2S1_($231, $P5);
      var $233=$229*$232;
      var $234=$wB;
      var $235=$234+$233;
      $wB=$235;
      __label__ = 32; break;
    case 13: 
      var $237=$vc;
      var $238=(($237)|0);
      var $239=(($238)|0);
      var $240=(($239)|0);
      $cp1=$240;
      var $241=$vc;
      var $242=(($241)|0);
      var $243=(($242)|0);
      var $244=(($243+36)|0);
      $cp2=$244;
      var $245=$cp1;
      var $246=(($245+16)|0);
      var $247=HEAPF32[(($246)>>2)];
      var $248=$cp2;
      var $249=(($248+16)|0);
      var $250=HEAPF32[(($249)>>2)];
      __ZN6b2Vec2C1Eff($a, $247, $250);
      var $251=(($a)|0);
      var $252=HEAPF32[(($251)>>2)];
      var $253=$252 >= 0;
      if ($253) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $255=(($a+4)|0);
      var $256=HEAPF32[(($255)>>2)];
      var $257=$256 >= 0;
      if ($257) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 17; break;
    case 16: 
      ___assert_func(((STRING_TABLE.__str230)|0), 406, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver24SolveVelocityConstraintsEv)|0), ((STRING_TABLE.__str4234)|0));
      __label__ = 17; break;
    case 17: 
      var $261=$wB;
      var $262=$cp1;
      var $263=(($262+8)|0);
      __Z7b2CrossfRK6b2Vec2($16, $261, $263);
      __ZplRK6b2Vec2S1_($15, $vB, $16);
      __ZmiRK6b2Vec2S1_($14, $15, $vA);
      var $264=$wA;
      var $265=$cp1;
      var $266=(($265)|0);
      __Z7b2CrossfRK6b2Vec2($17, $264, $266);
      __ZmiRK6b2Vec2S1_($dv1, $14, $17);
      var $267=$wB;
      var $268=$cp2;
      var $269=(($268+8)|0);
      __Z7b2CrossfRK6b2Vec2($20, $267, $269);
      __ZplRK6b2Vec2S1_($19, $vB, $20);
      __ZmiRK6b2Vec2S1_($18, $19, $vA);
      var $270=$wA;
      var $271=$cp2;
      var $272=(($271)|0);
      __Z7b2CrossfRK6b2Vec2($21, $270, $272);
      __ZmiRK6b2Vec2S1_($dv26, $18, $21);
      var $273=__Z5b2DotRK6b2Vec2S1_($dv1, $normal);
      $vn1=$273;
      var $274=__Z5b2DotRK6b2Vec2S1_($dv26, $normal);
      $vn2=$274;
      __ZN6b2Vec2C1Ev($b);
      var $275=$vn1;
      var $276=$cp1;
      var $277=(($276+32)|0);
      var $278=HEAPF32[(($277)>>2)];
      var $279=$275-$278;
      var $280=(($b)|0);
      HEAPF32[(($280)>>2)]=$279;
      var $281=$vn2;
      var $282=$cp2;
      var $283=(($282+32)|0);
      var $284=HEAPF32[(($283)>>2)];
      var $285=$281-$284;
      var $286=(($b+4)|0);
      HEAPF32[(($286)>>2)]=$285;
      var $287=$vc;
      var $288=(($287+96)|0);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($22, $288, $a);
      __ZN6b2Vec2mIERKS_($b, $22);
      $k_errorTol=0.0010000000474974513;
      __label__ = 18; break;
    case 18: 
      var $290=$vc;
      var $291=(($290+80)|0);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($23, $291, $b);
      __ZNK6b2Vec2ngEv($x, $23);
      var $292=(($x)|0);
      var $293=HEAPF32[(($292)>>2)];
      var $294=$293 >= 0;
      if ($294) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $296=(($x+4)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=$297 >= 0;
      if ($298) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __ZmiRK6b2Vec2S1_($d, $x, $a);
      var $300=(($d)|0);
      var $301=HEAPF32[(($300)>>2)];
      __ZmlfRK6b2Vec2($P1, $301, $normal);
      var $302=(($d+4)|0);
      var $303=HEAPF32[(($302)>>2)];
      __ZmlfRK6b2Vec2($P2, $303, $normal);
      var $304=$mA;
      __ZplRK6b2Vec2S1_($25, $P1, $P2);
      __ZmlfRK6b2Vec2($24, $304, $25);
      __ZN6b2Vec2mIERKS_($vA, $24);
      var $305=$iA;
      var $306=$cp1;
      var $307=(($306)|0);
      var $308=__Z7b2CrossRK6b2Vec2S1_($307, $P1);
      var $309=$cp2;
      var $310=(($309)|0);
      var $311=__Z7b2CrossRK6b2Vec2S1_($310, $P2);
      var $312=$308+$311;
      var $313=$305*$312;
      var $314=$wA;
      var $315=$314-$313;
      $wA=$315;
      var $316=$mB;
      __ZplRK6b2Vec2S1_($27, $P1, $P2);
      __ZmlfRK6b2Vec2($26, $316, $27);
      __ZN6b2Vec2pLERKS_($vB, $26);
      var $317=$iB;
      var $318=$cp1;
      var $319=(($318+8)|0);
      var $320=__Z7b2CrossRK6b2Vec2S1_($319, $P1);
      var $321=$cp2;
      var $322=(($321+8)|0);
      var $323=__Z7b2CrossRK6b2Vec2S1_($322, $P2);
      var $324=$320+$323;
      var $325=$317*$324;
      var $326=$wB;
      var $327=$326+$325;
      $wB=$327;
      var $328=(($x)|0);
      var $329=HEAPF32[(($328)>>2)];
      var $330=$cp1;
      var $331=(($330+16)|0);
      HEAPF32[(($331)>>2)]=$329;
      var $332=(($x+4)|0);
      var $333=HEAPF32[(($332)>>2)];
      var $334=$cp2;
      var $335=(($334+16)|0);
      HEAPF32[(($335)>>2)]=$333;
      __label__ = 31; break;
    case 21: 
      var $337=$cp1;
      var $338=(($337+24)|0);
      var $339=HEAPF32[(($338)>>2)];
      var $340=(-$339);
      var $341=(($b)|0);
      var $342=HEAPF32[(($341)>>2)];
      var $343=$340*$342;
      var $344=(($x)|0);
      HEAPF32[(($344)>>2)]=$343;
      var $345=(($x+4)|0);
      HEAPF32[(($345)>>2)]=0;
      $vn1=0;
      var $346=$vc;
      var $347=(($346+96)|0);
      var $348=(($347)|0);
      var $349=(($348+4)|0);
      var $350=HEAPF32[(($349)>>2)];
      var $351=(($x)|0);
      var $352=HEAPF32[(($351)>>2)];
      var $353=$350*$352;
      var $354=(($b+4)|0);
      var $355=HEAPF32[(($354)>>2)];
      var $356=$353+$355;
      $vn2=$356;
      var $357=(($x)|0);
      var $358=HEAPF32[(($357)>>2)];
      var $359=$358 >= 0;
      if ($359) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $361=$vn2;
      var $362=$361 >= 0;
      if ($362) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __ZmiRK6b2Vec2S1_($d7, $x, $a);
      var $364=(($d7)|0);
      var $365=HEAPF32[(($364)>>2)];
      __ZmlfRK6b2Vec2($P18, $365, $normal);
      var $366=(($d7+4)|0);
      var $367=HEAPF32[(($366)>>2)];
      __ZmlfRK6b2Vec2($P29, $367, $normal);
      var $368=$mA;
      __ZplRK6b2Vec2S1_($29, $P18, $P29);
      __ZmlfRK6b2Vec2($28, $368, $29);
      __ZN6b2Vec2mIERKS_($vA, $28);
      var $369=$iA;
      var $370=$cp1;
      var $371=(($370)|0);
      var $372=__Z7b2CrossRK6b2Vec2S1_($371, $P18);
      var $373=$cp2;
      var $374=(($373)|0);
      var $375=__Z7b2CrossRK6b2Vec2S1_($374, $P29);
      var $376=$372+$375;
      var $377=$369*$376;
      var $378=$wA;
      var $379=$378-$377;
      $wA=$379;
      var $380=$mB;
      __ZplRK6b2Vec2S1_($31, $P18, $P29);
      __ZmlfRK6b2Vec2($30, $380, $31);
      __ZN6b2Vec2pLERKS_($vB, $30);
      var $381=$iB;
      var $382=$cp1;
      var $383=(($382+8)|0);
      var $384=__Z7b2CrossRK6b2Vec2S1_($383, $P18);
      var $385=$cp2;
      var $386=(($385+8)|0);
      var $387=__Z7b2CrossRK6b2Vec2S1_($386, $P29);
      var $388=$384+$387;
      var $389=$381*$388;
      var $390=$wB;
      var $391=$390+$389;
      $wB=$391;
      var $392=(($x)|0);
      var $393=HEAPF32[(($392)>>2)];
      var $394=$cp1;
      var $395=(($394+16)|0);
      HEAPF32[(($395)>>2)]=$393;
      var $396=(($x+4)|0);
      var $397=HEAPF32[(($396)>>2)];
      var $398=$cp2;
      var $399=(($398+16)|0);
      HEAPF32[(($399)>>2)]=$397;
      __label__ = 31; break;
    case 24: 
      var $401=(($x)|0);
      HEAPF32[(($401)>>2)]=0;
      var $402=$cp2;
      var $403=(($402+24)|0);
      var $404=HEAPF32[(($403)>>2)];
      var $405=(-$404);
      var $406=(($b+4)|0);
      var $407=HEAPF32[(($406)>>2)];
      var $408=$405*$407;
      var $409=(($x+4)|0);
      HEAPF32[(($409)>>2)]=$408;
      var $410=$vc;
      var $411=(($410+96)|0);
      var $412=(($411+8)|0);
      var $413=(($412)|0);
      var $414=HEAPF32[(($413)>>2)];
      var $415=(($x+4)|0);
      var $416=HEAPF32[(($415)>>2)];
      var $417=$414*$416;
      var $418=(($b)|0);
      var $419=HEAPF32[(($418)>>2)];
      var $420=$417+$419;
      $vn1=$420;
      $vn2=0;
      var $421=(($x+4)|0);
      var $422=HEAPF32[(($421)>>2)];
      var $423=$422 >= 0;
      if ($423) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $425=$vn1;
      var $426=$425 >= 0;
      if ($426) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __ZmiRK6b2Vec2S1_($d10, $x, $a);
      var $428=(($d10)|0);
      var $429=HEAPF32[(($428)>>2)];
      __ZmlfRK6b2Vec2($P111, $429, $normal);
      var $430=(($d10+4)|0);
      var $431=HEAPF32[(($430)>>2)];
      __ZmlfRK6b2Vec2($P212, $431, $normal);
      var $432=$mA;
      __ZplRK6b2Vec2S1_($33, $P111, $P212);
      __ZmlfRK6b2Vec2($32, $432, $33);
      __ZN6b2Vec2mIERKS_($vA, $32);
      var $433=$iA;
      var $434=$cp1;
      var $435=(($434)|0);
      var $436=__Z7b2CrossRK6b2Vec2S1_($435, $P111);
      var $437=$cp2;
      var $438=(($437)|0);
      var $439=__Z7b2CrossRK6b2Vec2S1_($438, $P212);
      var $440=$436+$439;
      var $441=$433*$440;
      var $442=$wA;
      var $443=$442-$441;
      $wA=$443;
      var $444=$mB;
      __ZplRK6b2Vec2S1_($35, $P111, $P212);
      __ZmlfRK6b2Vec2($34, $444, $35);
      __ZN6b2Vec2pLERKS_($vB, $34);
      var $445=$iB;
      var $446=$cp1;
      var $447=(($446+8)|0);
      var $448=__Z7b2CrossRK6b2Vec2S1_($447, $P111);
      var $449=$cp2;
      var $450=(($449+8)|0);
      var $451=__Z7b2CrossRK6b2Vec2S1_($450, $P212);
      var $452=$448+$451;
      var $453=$445*$452;
      var $454=$wB;
      var $455=$454+$453;
      $wB=$455;
      var $456=(($x)|0);
      var $457=HEAPF32[(($456)>>2)];
      var $458=$cp1;
      var $459=(($458+16)|0);
      HEAPF32[(($459)>>2)]=$457;
      var $460=(($x+4)|0);
      var $461=HEAPF32[(($460)>>2)];
      var $462=$cp2;
      var $463=(($462+16)|0);
      HEAPF32[(($463)>>2)]=$461;
      __label__ = 31; break;
    case 27: 
      var $465=(($x)|0);
      HEAPF32[(($465)>>2)]=0;
      var $466=(($x+4)|0);
      HEAPF32[(($466)>>2)]=0;
      var $467=(($b)|0);
      var $468=HEAPF32[(($467)>>2)];
      $vn1=$468;
      var $469=(($b+4)|0);
      var $470=HEAPF32[(($469)>>2)];
      $vn2=$470;
      var $471=$vn1;
      var $472=$471 >= 0;
      if ($472) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: 
      var $474=$vn2;
      var $475=$474 >= 0;
      if ($475) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      __ZmiRK6b2Vec2S1_($d13, $x, $a);
      var $477=(($d13)|0);
      var $478=HEAPF32[(($477)>>2)];
      __ZmlfRK6b2Vec2($P114, $478, $normal);
      var $479=(($d13+4)|0);
      var $480=HEAPF32[(($479)>>2)];
      __ZmlfRK6b2Vec2($P215, $480, $normal);
      var $481=$mA;
      __ZplRK6b2Vec2S1_($37, $P114, $P215);
      __ZmlfRK6b2Vec2($36, $481, $37);
      __ZN6b2Vec2mIERKS_($vA, $36);
      var $482=$iA;
      var $483=$cp1;
      var $484=(($483)|0);
      var $485=__Z7b2CrossRK6b2Vec2S1_($484, $P114);
      var $486=$cp2;
      var $487=(($486)|0);
      var $488=__Z7b2CrossRK6b2Vec2S1_($487, $P215);
      var $489=$485+$488;
      var $490=$482*$489;
      var $491=$wA;
      var $492=$491-$490;
      $wA=$492;
      var $493=$mB;
      __ZplRK6b2Vec2S1_($39, $P114, $P215);
      __ZmlfRK6b2Vec2($38, $493, $39);
      __ZN6b2Vec2pLERKS_($vB, $38);
      var $494=$iB;
      var $495=$cp1;
      var $496=(($495+8)|0);
      var $497=__Z7b2CrossRK6b2Vec2S1_($496, $P114);
      var $498=$cp2;
      var $499=(($498+8)|0);
      var $500=__Z7b2CrossRK6b2Vec2S1_($499, $P215);
      var $501=$497+$500;
      var $502=$494*$501;
      var $503=$wB;
      var $504=$503+$502;
      $wB=$504;
      var $505=(($x)|0);
      var $506=HEAPF32[(($505)>>2)];
      var $507=$cp1;
      var $508=(($507+16)|0);
      HEAPF32[(($508)>>2)]=$506;
      var $509=(($x+4)|0);
      var $510=HEAPF32[(($509)>>2)];
      var $511=$cp2;
      var $512=(($511+16)|0);
      HEAPF32[(($512)>>2)]=$510;
      __label__ = 31; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $516=$indexA;
      var $517=(($40+28)|0);
      var $518=HEAP32[(($517)>>2)];
      var $519=(($518+$516*12)|0);
      var $520=(($519)|0);
      var $521=$520;
      var $522=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($521)>>2)]=HEAP32[(($522)>>2)];HEAP32[(($521+4)>>2)]=HEAP32[(($522+4)>>2)];
      var $523=$wA;
      var $524=$indexA;
      var $525=(($40+28)|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=(($526+$524*12)|0);
      var $528=(($527+8)|0);
      HEAPF32[(($528)>>2)]=$523;
      var $529=$indexB;
      var $530=(($40+28)|0);
      var $531=HEAP32[(($530)>>2)];
      var $532=(($531+$529*12)|0);
      var $533=(($532)|0);
      var $534=$533;
      var $535=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($534)>>2)]=HEAP32[(($535)>>2)];HEAP32[(($534+4)>>2)]=HEAP32[(($535+4)>>2)];
      var $536=$wB;
      var $537=$indexB;
      var $538=(($40+28)|0);
      var $539=HEAP32[(($538)>>2)];
      var $540=(($539+$537*12)|0);
      var $541=(($540+8)|0);
      HEAPF32[(($541)>>2)]=$536;
      __label__ = 33; break;
    case 33: 
      var $543=$i;
      var $544=(($543+1)|0);
      $i=$544;
      __label__ = 2; break;
    case 34: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5b2MulRK7b2Mat22RK6b2Vec2($agg_result, $A, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$A;
  $2=$v;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=$6*$9;
  var $11=$1;
  var $12=(($11+8)|0);
  var $13=(($12)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$2;
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=$14*$17;
  var $19=$10+$18;
  var $20=$1;
  var $21=(($20)|0);
  var $22=(($21+4)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$2;
  var $25=(($24)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$23*$26;
  var $28=$1;
  var $29=(($28+8)|0);
  var $30=(($29+4)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$2;
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$31*$34;
  var $36=$27+$35;
  __ZN6b2Vec2C1Eff($agg_result, $19, $36);
  ;
  return;
}


function __ZN15b2ContactSolver13StoreImpulsesEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $manifold;
      var $j;
      $1=$this;
      var $2=$1;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+48)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|0) < (($6)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $9=(($2+40)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$i;
      var $12=(($10+$11*152)|0);
      $vc=$12;
      var $13=$vc;
      var $14=(($13+148)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($2+44)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=__ZN9b2Contact11GetManifoldEv($19);
      $manifold=$20;
      $j=0;
      __label__ = 4; break;
    case 4: 
      var $22=$j;
      var $23=$vc;
      var $24=(($23+144)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22)|0) < (($25)|0);
      if ($26) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $28=$j;
      var $29=$vc;
      var $30=(($29)|0);
      var $31=(($30+$28*36)|0);
      var $32=(($31+16)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=$j;
      var $35=$manifold;
      var $36=(($35)|0);
      var $37=(($36+$34*20)|0);
      var $38=(($37+8)|0);
      HEAPF32[(($38)>>2)]=$33;
      var $39=$j;
      var $40=$vc;
      var $41=(($40)|0);
      var $42=(($41+$39*36)|0);
      var $43=(($42+20)|0);
      var $44=HEAPF32[(($43)>>2)];
      var $45=$j;
      var $46=$manifold;
      var $47=(($46)|0);
      var $48=(($47+$45*20)|0);
      var $49=(($48+12)|0);
      HEAPF32[(($49)>>2)]=$44;
      __label__ = 6; break;
    case 6: 
      var $51=$j;
      var $52=(($51+1)|0);
      $j=$52;
      __label__ = 4; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $55=$i;
      var $56=(($55+1)|0);
      $i=$56;
      __label__ = 2; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ContactSolver24SolvePositionConstraintsEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 172; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $minSeparation;
      var $i;
      var $pc;
      var $indexA;
      var $indexB;
      var $localCenterA=__stackBase__;
      var $mA;
      var $iA;
      var $localCenterB=__stackBase__+8;
      var $mB;
      var $iB;
      var $pointCount;
      var $cA=__stackBase__+16;
      var $aA;
      var $cB=__stackBase__+24;
      var $aB;
      var $j;
      var $xfA=__stackBase__+32;
      var $xfB=__stackBase__+48;
      var $2=__stackBase__+64;
      var $3=__stackBase__+72;
      var $4=__stackBase__+80;
      var $5=__stackBase__+88;
      var $psm=__stackBase__+96;
      var $normal=__stackBase__+116;
      var $point=__stackBase__+124;
      var $separation;
      var $rA=__stackBase__+132;
      var $rB=__stackBase__+140;
      var $C;
      var $rnA;
      var $rnB;
      var $K;
      var $impulse;
      var $P=__stackBase__+148;
      var $6=__stackBase__+156;
      var $7=__stackBase__+164;
      $1=$this;
      var $8=$1;
      $minSeparation=0;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $10=$i;
      var $11=(($8+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|0) < (($12)|0);
      if ($13) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      var $15=(($8+36)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$i;
      var $18=(($16+$17*88)|0);
      $pc=$18;
      var $19=$pc;
      var $20=(($19+32)|0);
      var $21=HEAP32[(($20)>>2)];
      $indexA=$21;
      var $22=$pc;
      var $23=(($22+36)|0);
      var $24=HEAP32[(($23)>>2)];
      $indexB=$24;
      var $25=$pc;
      var $26=(($25+48)|0);
      var $27=$localCenterA;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      var $29=$pc;
      var $30=(($29+40)|0);
      var $31=HEAPF32[(($30)>>2)];
      $mA=$31;
      var $32=$pc;
      var $33=(($32+64)|0);
      var $34=HEAPF32[(($33)>>2)];
      $iA=$34;
      var $35=$pc;
      var $36=(($35+56)|0);
      var $37=$localCenterB;
      var $38=$36;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[(($37+4)>>2)]=HEAP32[(($38+4)>>2)];
      var $39=$pc;
      var $40=(($39+44)|0);
      var $41=HEAPF32[(($40)>>2)];
      $mB=$41;
      var $42=$pc;
      var $43=(($42+68)|0);
      var $44=HEAPF32[(($43)>>2)];
      $iB=$44;
      var $45=$pc;
      var $46=(($45+84)|0);
      var $47=HEAP32[(($46)>>2)];
      $pointCount=$47;
      var $48=$indexA;
      var $49=(($8+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+$48*12)|0);
      var $52=(($51)|0);
      var $53=$cA;
      var $54=$52;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[(($53+4)>>2)]=HEAP32[(($54+4)>>2)];
      var $55=$indexA;
      var $56=(($8+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+$55*12)|0);
      var $59=(($58+8)|0);
      var $60=HEAPF32[(($59)>>2)];
      $aA=$60;
      var $61=$indexB;
      var $62=(($8+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+$61*12)|0);
      var $65=(($64)|0);
      var $66=$cB;
      var $67=$65;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[(($66+4)>>2)]=HEAP32[(($67+4)>>2)];
      var $68=$indexB;
      var $69=(($8+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+$68*12)|0);
      var $72=(($71+8)|0);
      var $73=HEAPF32[(($72)>>2)];
      $aB=$73;
      $j=0;
      __label__ = 4; break;
    case 4: 
      var $75=$j;
      var $76=$pointCount;
      var $77=(($75)|0) < (($76)|0);
      if ($77) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $79=(($xfA+8)|0);
      var $80=$aA;
      __ZN5b2Rot3SetEf($79, $80);
      var $81=(($xfB+8)|0);
      var $82=$aB;
      __ZN5b2Rot3SetEf($81, $82);
      var $83=(($xfA)|0);
      var $84=(($xfA+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $84, $localCenterA);
      __ZmiRK6b2Vec2S1_($2, $cA, $3);
      var $85=$83;
      var $86=$2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[(($85+4)>>2)]=HEAP32[(($86+4)>>2)];
      var $87=(($xfB)|0);
      var $88=(($xfB+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $88, $localCenterB);
      __ZmiRK6b2Vec2S1_($4, $cB, $5);
      var $89=$87;
      var $90=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[(($89+4)>>2)]=HEAP32[(($90+4)>>2)];
      __ZN24b2PositionSolverManifoldC1Ev($psm);
      var $91=$pc;
      var $92=$j;
      __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $91, $xfA, $xfB, $92);
      var $93=(($psm)|0);
      var $94=$normal;
      var $95=$93;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[(($94+4)>>2)]=HEAP32[(($95+4)>>2)];
      var $96=(($psm+8)|0);
      var $97=$point;
      var $98=$96;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[(($97+4)>>2)]=HEAP32[(($98+4)>>2)];
      var $99=(($psm+16)|0);
      var $100=HEAPF32[(($99)>>2)];
      $separation=$100;
      __ZmiRK6b2Vec2S1_($rA, $point, $cA);
      __ZmiRK6b2Vec2S1_($rB, $point, $cB);
      var $101=$minSeparation;
      var $102=$separation;
      var $103=__Z5b2MinIfET_S0_S0_($101, $102);
      $minSeparation=$103;
      var $104=$separation;
      var $105=$104+0.004999999888241291;
      var $106=$105*0.20000000298023224;
      var $107=__Z7b2ClampIfET_S0_S0_S0_($106, -0.20000000298023224, 0);
      $C=$107;
      var $108=__Z7b2CrossRK6b2Vec2S1_($rA, $normal);
      $rnA=$108;
      var $109=__Z7b2CrossRK6b2Vec2S1_($rB, $normal);
      $rnB=$109;
      var $110=$mA;
      var $111=$mB;
      var $112=$110+$111;
      var $113=$iA;
      var $114=$rnA;
      var $115=$113*$114;
      var $116=$rnA;
      var $117=$115*$116;
      var $118=$112+$117;
      var $119=$iB;
      var $120=$rnB;
      var $121=$119*$120;
      var $122=$rnB;
      var $123=$121*$122;
      var $124=$118+$123;
      $K=$124;
      var $125=$K;
      var $126=$125 > 0;
      if ($126) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $128=$C;
      var $129=(-$128);
      var $130=$K;
      var $131=$129/$130;
      var $134 = $131;__label__ = 8; break;
    case 7: 
      var $134 = 0;__label__ = 8; break;
    case 8: 
      var $134;
      $impulse=$134;
      var $135=$impulse;
      __ZmlfRK6b2Vec2($P, $135, $normal);
      var $136=$mA;
      __ZmlfRK6b2Vec2($6, $136, $P);
      __ZN6b2Vec2mIERKS_($cA, $6);
      var $137=$iA;
      var $138=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $139=$137*$138;
      var $140=$aA;
      var $141=$140-$139;
      $aA=$141;
      var $142=$mB;
      __ZmlfRK6b2Vec2($7, $142, $P);
      __ZN6b2Vec2pLERKS_($cB, $7);
      var $143=$iB;
      var $144=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $145=$143*$144;
      var $146=$aB;
      var $147=$146+$145;
      $aB=$147;
      __label__ = 9; break;
    case 9: 
      var $149=$j;
      var $150=(($149+1)|0);
      $j=$150;
      __label__ = 4; break;
    case 10: 
      var $152=$indexA;
      var $153=(($8+24)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154+$152*12)|0);
      var $156=(($155)|0);
      var $157=$156;
      var $158=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($157)>>2)]=HEAP32[(($158)>>2)];HEAP32[(($157+4)>>2)]=HEAP32[(($158+4)>>2)];
      var $159=$aA;
      var $160=$indexA;
      var $161=(($8+24)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+$160*12)|0);
      var $164=(($163+8)|0);
      HEAPF32[(($164)>>2)]=$159;
      var $165=$indexB;
      var $166=(($8+24)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+$165*12)|0);
      var $169=(($168)|0);
      var $170=$169;
      var $171=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($170)>>2)]=HEAP32[(($171)>>2)];HEAP32[(($170+4)>>2)]=HEAP32[(($171+4)>>2)];
      var $172=$aB;
      var $173=$indexB;
      var $174=(($8+24)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=(($175+$173*12)|0);
      var $177=(($176+8)|0);
      HEAPF32[(($177)>>2)]=$172;
      __label__ = 11; break;
    case 11: 
      var $179=$i;
      var $180=(($179+1)|0);
      $i=$180;
      __label__ = 2; break;
    case 12: 
      var $182=$minSeparation;
      var $183=$182 >= -0.014999999664723873;
      STACKTOP = __stackBase__;
      return $183;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN24b2PositionSolverManifoldC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN24b2PositionSolverManifoldC2Ev($2);
  ;
  return;
}


function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this, $pc, $xfA, $xfB, $index) {
  var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $pointA=__stackBase__;
      var $pointB=__stackBase__+8;
      var $6=__stackBase__+16;
      var $7=__stackBase__+24;
      var $8=__stackBase__+32;
      var $9=__stackBase__+40;
      var $10=__stackBase__+48;
      var $planePoint=__stackBase__+56;
      var $clipPoint=__stackBase__+64;
      var $11=__stackBase__+72;
      var $12=__stackBase__+80;
      var $planePoint1=__stackBase__+88;
      var $clipPoint2=__stackBase__+96;
      var $13=__stackBase__+104;
      var $14=__stackBase__+112;
      $1=$this;
      $2=$pc;
      $3=$xfA;
      $4=$xfB;
      $5=$index;
      var $15=$1;
      var $16=$2;
      var $17=(($16+84)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0) > 0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str230)|0), 617, ((STRING_TABLE.___PRETTY_FUNCTION____ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i)|0), ((STRING_TABLE.__str5235)|0));
      __label__ = 4; break;
    case 4: 
      var $23=$2;
      var $24=(($23+72)|0);
      var $25=HEAP32[(($24)>>2)];
      if ((($25)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($25)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($25)|0) == 2) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 5: 
      var $27=$3;
      var $28=$2;
      var $29=(($28+24)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $27, $29);
      var $30=$4;
      var $31=$2;
      var $32=(($31)|0);
      var $33=(($32)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $30, $33);
      var $34=(($15)|0);
      __ZmiRK6b2Vec2S1_($6, $pointB, $pointA);
      var $35=$34;
      var $36=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[(($35+4)>>2)]=HEAP32[(($36+4)>>2)];
      var $37=(($15)|0);
      var $38=__ZN6b2Vec29NormalizeEv($37);
      var $39=(($15+8)|0);
      __ZplRK6b2Vec2S1_($8, $pointA, $pointB);
      __ZmlfRK6b2Vec2($7, 0.5, $8);
      var $40=$39;
      var $41=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      __ZmiRK6b2Vec2S1_($9, $pointB, $pointA);
      var $42=(($15)|0);
      var $43=__Z5b2DotRK6b2Vec2S1_($9, $42);
      var $44=$2;
      var $45=(($44+76)|0);
      var $46=HEAPF32[(($45)>>2)];
      var $47=$43-$46;
      var $48=$2;
      var $49=(($48+80)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=$47-$50;
      var $52=(($15+16)|0);
      HEAPF32[(($52)>>2)]=$51;
      __label__ = 8; break;
    case 6: 
      var $54=(($15)|0);
      var $55=$3;
      var $56=(($55+8)|0);
      var $57=$2;
      var $58=(($57+16)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($10, $56, $58);
      var $59=$54;
      var $60=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[(($59+4)>>2)]=HEAP32[(($60+4)>>2)];
      var $61=$3;
      var $62=$2;
      var $63=(($62+24)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint, $61, $63);
      var $64=$4;
      var $65=$5;
      var $66=$2;
      var $67=(($66)|0);
      var $68=(($67+($65<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint, $64, $68);
      __ZmiRK6b2Vec2S1_($11, $clipPoint, $planePoint);
      var $69=(($15)|0);
      var $70=__Z5b2DotRK6b2Vec2S1_($11, $69);
      var $71=$2;
      var $72=(($71+76)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$70-$73;
      var $75=$2;
      var $76=(($75+80)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=$74-$77;
      var $79=(($15+16)|0);
      HEAPF32[(($79)>>2)]=$78;
      var $80=(($15+8)|0);
      var $81=$80;
      var $82=$clipPoint;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[(($81+4)>>2)]=HEAP32[(($82+4)>>2)];
      __label__ = 8; break;
    case 7: 
      var $84=(($15)|0);
      var $85=$4;
      var $86=(($85+8)|0);
      var $87=$2;
      var $88=(($87+16)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($12, $86, $88);
      var $89=$84;
      var $90=$12;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[(($89+4)>>2)]=HEAP32[(($90+4)>>2)];
      var $91=$4;
      var $92=$2;
      var $93=(($92+24)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint1, $91, $93);
      var $94=$3;
      var $95=$5;
      var $96=$2;
      var $97=(($96)|0);
      var $98=(($97+($95<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint2, $94, $98);
      __ZmiRK6b2Vec2S1_($13, $clipPoint2, $planePoint1);
      var $99=(($15)|0);
      var $100=__Z5b2DotRK6b2Vec2S1_($13, $99);
      var $101=$2;
      var $102=(($101+76)|0);
      var $103=HEAPF32[(($102)>>2)];
      var $104=$100-$103;
      var $105=$2;
      var $106=(($105+80)|0);
      var $107=HEAPF32[(($106)>>2)];
      var $108=$104-$107;
      var $109=(($15+16)|0);
      HEAPF32[(($109)>>2)]=$108;
      var $110=(($15+8)|0);
      var $111=$110;
      var $112=$clipPoint2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[(($111+4)>>2)]=HEAP32[(($112+4)>>2)];
      var $113=(($15)|0);
      var $114=(($15)|0);
      __ZNK6b2Vec2ngEv($14, $114);
      var $115=$113;
      var $116=$14;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[(($115+4)>>2)]=HEAP32[(($116+4)>>2)];
      __label__ = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($this, $toiIndexA, $toiIndexB) {
  var __stackBase__  = STACKTOP; STACKTOP += 172; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $minSeparation;
      var $i;
      var $pc;
      var $indexA;
      var $indexB;
      var $localCenterA=__stackBase__;
      var $localCenterB=__stackBase__+8;
      var $pointCount;
      var $mA;
      var $iA;
      var $mB;
      var $iB;
      var $cA=__stackBase__+16;
      var $aA;
      var $cB=__stackBase__+24;
      var $aB;
      var $j;
      var $xfA=__stackBase__+32;
      var $xfB=__stackBase__+48;
      var $4=__stackBase__+64;
      var $5=__stackBase__+72;
      var $6=__stackBase__+80;
      var $7=__stackBase__+88;
      var $psm=__stackBase__+96;
      var $normal=__stackBase__+116;
      var $point=__stackBase__+124;
      var $separation;
      var $rA=__stackBase__+132;
      var $rB=__stackBase__+140;
      var $C;
      var $rnA;
      var $rnB;
      var $K;
      var $impulse;
      var $P=__stackBase__+148;
      var $8=__stackBase__+156;
      var $9=__stackBase__+164;
      $1=$this;
      $2=$toiIndexA;
      $3=$toiIndexB;
      var $10=$1;
      $minSeparation=0;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $12=$i;
      var $13=(($10+48)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|0) < (($14)|0);
      if ($15) { __label__ = 3; break; } else { __label__ = 18; break; }
    case 3: 
      var $17=(($10+36)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$i;
      var $20=(($18+$19*88)|0);
      $pc=$20;
      var $21=$pc;
      var $22=(($21+32)|0);
      var $23=HEAP32[(($22)>>2)];
      $indexA=$23;
      var $24=$pc;
      var $25=(($24+36)|0);
      var $26=HEAP32[(($25)>>2)];
      $indexB=$26;
      var $27=$pc;
      var $28=(($27+48)|0);
      var $29=$localCenterA;
      var $30=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[(($29+4)>>2)]=HEAP32[(($30+4)>>2)];
      var $31=$pc;
      var $32=(($31+56)|0);
      var $33=$localCenterB;
      var $34=$32;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[(($33+4)>>2)]=HEAP32[(($34+4)>>2)];
      var $35=$pc;
      var $36=(($35+84)|0);
      var $37=HEAP32[(($36)>>2)];
      $pointCount=$37;
      $mA=0;
      $iA=0;
      var $38=$indexA;
      var $39=$2;
      var $40=(($38)|0)==(($39)|0);
      if ($40) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $42=$indexA;
      var $43=$3;
      var $44=(($42)|0)==(($43)|0);
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $46=$pc;
      var $47=(($46+40)|0);
      var $48=HEAPF32[(($47)>>2)];
      $mA=$48;
      var $49=$pc;
      var $50=(($49+64)|0);
      var $51=HEAPF32[(($50)>>2)];
      $iA=$51;
      __label__ = 6; break;
    case 6: 
      var $53=$pc;
      var $54=(($53+44)|0);
      var $55=HEAPF32[(($54)>>2)];
      $mB=$55;
      var $56=$pc;
      var $57=(($56+68)|0);
      var $58=HEAPF32[(($57)>>2)];
      $iB=$58;
      var $59=$indexB;
      var $60=$2;
      var $61=(($59)|0)==(($60)|0);
      if ($61) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $63=$indexB;
      var $64=$3;
      var $65=(($63)|0)==(($64)|0);
      if ($65) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $67=$pc;
      var $68=(($67+44)|0);
      var $69=HEAPF32[(($68)>>2)];
      $mB=$69;
      var $70=$pc;
      var $71=(($70+68)|0);
      var $72=HEAPF32[(($71)>>2)];
      $iB=$72;
      __label__ = 9; break;
    case 9: 
      var $74=$indexA;
      var $75=(($10+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+$74*12)|0);
      var $78=(($77)|0);
      var $79=$cA;
      var $80=$78;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[(($79+4)>>2)]=HEAP32[(($80+4)>>2)];
      var $81=$indexA;
      var $82=(($10+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+$81*12)|0);
      var $85=(($84+8)|0);
      var $86=HEAPF32[(($85)>>2)];
      $aA=$86;
      var $87=$indexB;
      var $88=(($10+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+$87*12)|0);
      var $91=(($90)|0);
      var $92=$cB;
      var $93=$91;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[(($92+4)>>2)]=HEAP32[(($93+4)>>2)];
      var $94=$indexB;
      var $95=(($10+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+$94*12)|0);
      var $98=(($97+8)|0);
      var $99=HEAPF32[(($98)>>2)];
      $aB=$99;
      $j=0;
      __label__ = 10; break;
    case 10: 
      var $101=$j;
      var $102=$pointCount;
      var $103=(($101)|0) < (($102)|0);
      if ($103) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $105=(($xfA+8)|0);
      var $106=$aA;
      __ZN5b2Rot3SetEf($105, $106);
      var $107=(($xfB+8)|0);
      var $108=$aB;
      __ZN5b2Rot3SetEf($107, $108);
      var $109=(($xfA)|0);
      var $110=(($xfA+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $110, $localCenterA);
      __ZmiRK6b2Vec2S1_($4, $cA, $5);
      var $111=$109;
      var $112=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[(($111+4)>>2)]=HEAP32[(($112+4)>>2)];
      var $113=(($xfB)|0);
      var $114=(($xfB+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $114, $localCenterB);
      __ZmiRK6b2Vec2S1_($6, $cB, $7);
      var $115=$113;
      var $116=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[(($115+4)>>2)]=HEAP32[(($116+4)>>2)];
      __ZN24b2PositionSolverManifoldC1Ev($psm);
      var $117=$pc;
      var $118=$j;
      __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $117, $xfA, $xfB, $118);
      var $119=(($psm)|0);
      var $120=$normal;
      var $121=$119;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[(($120+4)>>2)]=HEAP32[(($121+4)>>2)];
      var $122=(($psm+8)|0);
      var $123=$point;
      var $124=$122;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[(($123+4)>>2)]=HEAP32[(($124+4)>>2)];
      var $125=(($psm+16)|0);
      var $126=HEAPF32[(($125)>>2)];
      $separation=$126;
      __ZmiRK6b2Vec2S1_($rA, $point, $cA);
      __ZmiRK6b2Vec2S1_($rB, $point, $cB);
      var $127=$minSeparation;
      var $128=$separation;
      var $129=__Z5b2MinIfET_S0_S0_($127, $128);
      $minSeparation=$129;
      var $130=$separation;
      var $131=$130+0.004999999888241291;
      var $132=$131*0.75;
      var $133=__Z7b2ClampIfET_S0_S0_S0_($132, -0.20000000298023224, 0);
      $C=$133;
      var $134=__Z7b2CrossRK6b2Vec2S1_($rA, $normal);
      $rnA=$134;
      var $135=__Z7b2CrossRK6b2Vec2S1_($rB, $normal);
      $rnB=$135;
      var $136=$mA;
      var $137=$mB;
      var $138=$136+$137;
      var $139=$iA;
      var $140=$rnA;
      var $141=$139*$140;
      var $142=$rnA;
      var $143=$141*$142;
      var $144=$138+$143;
      var $145=$iB;
      var $146=$rnB;
      var $147=$145*$146;
      var $148=$rnB;
      var $149=$147*$148;
      var $150=$144+$149;
      $K=$150;
      var $151=$K;
      var $152=$151 > 0;
      if ($152) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $154=$C;
      var $155=(-$154);
      var $156=$K;
      var $157=$155/$156;
      var $160 = $157;__label__ = 14; break;
    case 13: 
      var $160 = 0;__label__ = 14; break;
    case 14: 
      var $160;
      $impulse=$160;
      var $161=$impulse;
      __ZmlfRK6b2Vec2($P, $161, $normal);
      var $162=$mA;
      __ZmlfRK6b2Vec2($8, $162, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $163=$iA;
      var $164=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $165=$163*$164;
      var $166=$aA;
      var $167=$166-$165;
      $aA=$167;
      var $168=$mB;
      __ZmlfRK6b2Vec2($9, $168, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $169=$iB;
      var $170=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $171=$169*$170;
      var $172=$aB;
      var $173=$172+$171;
      $aB=$173;
      __label__ = 15; break;
    case 15: 
      var $175=$j;
      var $176=(($175+1)|0);
      $j=$176;
      __label__ = 10; break;
    case 16: 
      var $178=$indexA;
      var $179=(($10+24)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+$178*12)|0);
      var $182=(($181)|0);
      var $183=$182;
      var $184=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[(($183+4)>>2)]=HEAP32[(($184+4)>>2)];
      var $185=$aA;
      var $186=$indexA;
      var $187=(($10+24)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+$186*12)|0);
      var $190=(($189+8)|0);
      HEAPF32[(($190)>>2)]=$185;
      var $191=$indexB;
      var $192=(($10+24)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+$191*12)|0);
      var $195=(($194)|0);
      var $196=$195;
      var $197=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($196)>>2)]=HEAP32[(($197)>>2)];HEAP32[(($196+4)>>2)]=HEAP32[(($197+4)>>2)];
      var $198=$aB;
      var $199=$indexB;
      var $200=(($10+24)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+$199*12)|0);
      var $203=(($202+8)|0);
      HEAPF32[(($203)>>2)]=$198;
      __label__ = 17; break;
    case 17: 
      var $205=$i;
      var $206=(($205+1)|0);
      $i=$206;
      __label__ = 2; break;
    case 18: 
      var $208=$minSeparation;
      var $209=$208 >= -0.007499999832361937;
      STACKTOP = __stackBase__;
      return $209;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN24b2PositionSolverManifoldC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  ;
  return;
}


function __ZN7b2Mat22C1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2Mat22C2Ev($2);
  ;
  return;
}


function __ZN7b2Mat22C2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  ;
  return;
}


function __ZN15b2WorldManifoldC2Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      __ZN6b2Vec2C1Ev($3);
      var $4=(($2+8)|0);
      var $5=(($4)|0);
      var $6=(($5+16)|0);
      var $8 = $5;__label__ = 2; break;
    case 2: 
      var $8;
      __ZN6b2Vec2C1Ev($8);
      var $9=(($8+8)|0);
      var $10=(($9)|0)==(($6)|0);
      if ($10) { __label__ = 3; break; } else { var $8 = $9;__label__ = 2; break; }
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      FUNCTION_TABLE[__ZN22b2EdgeAndCircleContactC1EP9b2FixtureS1_]($13, $14, $15);
      var $17 = $13;__label__ = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  ;
  return;
}


function __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV22b2EdgeAndCircleContact+8)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $16=(($14)|0)==1;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str252)|0), 41, ((STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str1253)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $21=$6;
      var $22=(($21+52)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $26=(($24)|0)==0;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str252)|0), 42, ((STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str2254)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    case 12: 
      var $32=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $33=$32.f0;
      $4=$33;
      var $34=$32.f1;
      $5=$34;
      var $35=$6;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD2Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $38=$4;
      var $39=$4;
      var $40=$5;
      var $41=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $39, tempValue);
      var $42=($41.f1 = $40, $41);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 15: 
      var $44=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2JointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($6, $11, $12, $17, $18);
  ;
  return;
}


function __ZN22b2EdgeAndCircleContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN22b2EdgeAndCircleContactD2Ev($2);
  ;
  return;
}


function __ZN22b2EdgeAndCircleContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN22b2EdgeAndCircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN22b2EdgeAndCircleContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  ;
  return;
}


function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      FUNCTION_TABLE[__ZN23b2EdgeAndPolygonContactC1EP9b2FixtureS1_]($13, $14, $15);
      var $17 = $13;__label__ = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  ;
  return;
}


function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($6, $11, $12, $17, $18);
  ;
  return;
}


function __ZN23b2EdgeAndPolygonContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN23b2EdgeAndPolygonContactD2Ev($2);
  ;
  return;
}


function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN23b2EdgeAndPolygonContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN23b2EdgeAndPolygonContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  ;
  return;
}


function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      FUNCTION_TABLE[__ZN25b2PolygonAndCircleContactC1EP9b2FixtureS1_]($13, $14, $15);
      var $17 = $13;__label__ = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  ;
  return;
}


function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($6, $11, $12, $17, $18);
  ;
  return;
}


function __ZN25b2PolygonAndCircleContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN25b2PolygonAndCircleContactD2Ev($2);
  ;
  return;
}


function __ZN25b2PolygonAndCircleContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN25b2PolygonAndCircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN25b2PolygonAndCircleContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  ;
  return;
}


function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      FUNCTION_TABLE[__ZN16b2PolygonContactC1EP9b2FixtureS1_]($13, $14, $15);
      var $17 = $13;__label__ = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  ;
  return;
}


function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($6, $11, $12, $17, $18);
  ;
  return;
}


function __ZN16b2PolygonContactD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2PolygonContactD2Ev($2);
  ;
  return;
}


function __ZN16b2PolygonContactD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN16b2PolygonContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2PolygonContactD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  ;
  return;
}


function __ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $b1, $b2, $anchor1, $anchor2) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6=__stackBase__;
  var $7=__stackBase__+8;
  var $d=__stackBase__+16;
  $1=$this;
  $2=$b1;
  $3=$b2;
  $4=$anchor1;
  $5=$anchor2;
  var $8=$1;
  var $9=$2;
  var $10=$8;
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=$9;
  var $12=$3;
  var $13=$8;
  var $14=(($13+12)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=(($8+20)|0);
  var $16=$8;
  var $17=(($16+8)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $18, $19);
  var $20=$15;
  var $21=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[(($20+4)>>2)]=HEAP32[(($21+4)>>2)];
  var $22=(($8+28)|0);
  var $23=$8;
  var $24=(($23+12)|0);
  var $25=HEAP32[(($24)>>2)];
  var $26=$5;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($7, $25, $26);
  var $27=$22;
  var $28=$7;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
  var $29=$5;
  var $30=$4;
  __ZmiRK6b2Vec2S1_($d, $29, $30);
  var $31=__ZNK6b2Vec26LengthEv($d);
  var $32=(($8+36)|0);
  HEAPF32[(($32)>>2)]=$31;
  STACKTOP = __stackBase__;
  return;
}


function __ZNK6b2Body13GetLocalPointERK6b2Vec2($agg_result, $this, $worldPoint) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$worldPoint;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  __Z6b2MulTRK11b2TransformRK6b2Vec2($agg_result, $4, $5);
  ;
  return;
}


function __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV23b2EdgeAndPolygonContact+8)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $16=(($14)|0)==1;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str259)|0), 41, ((STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str1260)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $21=$6;
      var $22=(($21+52)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $26=(($24)|0)==2;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str259)|0), 42, ((STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str2261)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    case 12: 
      var $32=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $33=$32.f0;
      $4=$33;
      var $34=$32.f1;
      $5=$34;
      var $35=$6;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD2Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $38=$4;
      var $39=$4;
      var $40=$5;
      var $41=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $39, tempValue);
      var $42=($41.f1 = $40, $41);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 15: 
      var $44=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV25b2PolygonAndCircleContact+8)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $16=(($14)|0)==2;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str266)|0), 41, ((STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str1267)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $21=$6;
      var $22=(($21+52)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $26=(($24)|0)==0;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str266)|0), 42, ((STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str2268)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    case 12: 
      var $32=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $33=$32.f0;
      $4=$33;
      var $34=$32.f1;
      $5=$34;
      var $35=$6;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD2Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $38=$4;
      var $39=$4;
      var $40=$5;
      var $41=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $39, tempValue);
      var $42=($41.f1 = $40, $41);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 15: 
      var $44=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2PolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV16b2PolygonContact+8)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $16=(($14)|0)==2;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str273)|0), 44, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str1274)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $21=$6;
      var $22=(($21+52)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24 = (function() { try { __THREW__ = false; return __ZNK9b2Fixture7GetTypeEv($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $26=(($24)|0)==2;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str273)|0), 45, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_)|0), ((STRING_TABLE.__str2275)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    case 12: 
      var $32=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $33=$32.f0;
      $4=$33;
      var $34=$32.f1;
      $5=$34;
      var $35=$6;
      (function() { try { __THREW__ = false; return __ZN9b2ContactD2Ev($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $38=$4;
      var $39=$4;
      var $40=$5;
      var $41=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $39, tempValue);
      var $42=($41.f1 = $40, $41);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 15: 
      var $44=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2DistanceJointC2EPK18b2DistanceJointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((__ZTV15b2DistanceJoint+8)|0);
      var $10=(($5+80)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $12=(($5+88)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $14=(($5+116)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $16=(($5+124)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $18=(($5+132)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $20=(($5+140)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $22=(($5+148)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $24=(($5+80)|0);
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=$24;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      var $29=(($5+88)|0);
      var $30=$2;
      var $31=(($30+28)|0);
      var $32=$29;
      var $33=$31;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
      var $34=$2;
      var $35=(($34+36)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=(($5+104)|0);
      HEAPF32[(($37)>>2)]=$36;
      var $38=$2;
      var $39=(($38+40)|0);
      var $40=HEAPF32[(($39)>>2)];
      var $41=(($5+68)|0);
      HEAPF32[(($41)>>2)]=$40;
      var $42=$2;
      var $43=(($42+44)|0);
      var $44=HEAPF32[(($43)>>2)];
      var $45=(($5+72)|0);
      HEAPF32[(($45)>>2)]=$44;
      var $46=(($5+100)|0);
      HEAPF32[(($46)>>2)]=0;
      var $47=(($5+96)|0);
      HEAPF32[(($47)>>2)]=0;
      var $48=(($5+76)|0);
      HEAPF32[(($48)>>2)]=0;
      ;
      return;
    case 9: 
      var $50=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $51=$50.f0;
      $3=$51;
      var $52=$50.f1;
      $4=$52;
      var $53=$5;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $56=$3;
      var $57=$3;
      var $58=$4;
      var $59=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $57, tempValue);
      var $60=($59.f1 = $58, $59);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 12: 
      var $62=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK15b2DistanceJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  ;
  return 0;
}


function __ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      var $6=__stackBase__+72;
      var $7=__stackBase__+80;
      var $8=__stackBase__+88;
      var $9=__stackBase__+96;
      var $length;
      var $crAu;
      var $crBu;
      var $invMass;
      var $C;
      var $omega;
      var $d;
      var $k;
      var $h;
      var $P=__stackBase__+104;
      var $10=__stackBase__+112;
      var $11=__stackBase__+120;
      $1=$this;
      $2=$data;
      var $12=$1;
      var $13=$12;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12+108)|0);
      HEAP32[(($18)>>2)]=$17;
      var $19=$12;
      var $20=(($19+52)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($12+112)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($12+140)|0);
      var $26=$12;
      var $27=(($26+48)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+28)|0);
      var $30=(($29)|0);
      var $31=$25;
      var $32=$30;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[(($31+4)>>2)]=HEAP32[(($32+4)>>2)];
      var $33=(($12+148)|0);
      var $34=$12;
      var $35=(($34+52)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+28)|0);
      var $38=(($37)|0);
      var $39=$33;
      var $40=$38;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[(($39+4)>>2)]=HEAP32[(($40+4)>>2)];
      var $41=$12;
      var $42=(($41+48)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+120)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($12+156)|0);
      HEAPF32[(($46)>>2)]=$45;
      var $47=$12;
      var $48=(($47+52)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+120)|0);
      var $51=HEAPF32[(($50)>>2)];
      var $52=(($12+160)|0);
      HEAPF32[(($52)>>2)]=$51;
      var $53=$12;
      var $54=(($53+48)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+128)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=(($12+164)|0);
      HEAPF32[(($58)>>2)]=$57;
      var $59=$12;
      var $60=(($59+52)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+128)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=(($12+168)|0);
      HEAPF32[(($64)>>2)]=$63;
      var $65=(($12+108)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+$66*12)|0);
      var $71=(($70)|0);
      var $72=$cA;
      var $73=$71;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[(($72+4)>>2)]=HEAP32[(($73+4)>>2)];
      var $74=(($12+108)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$2;
      var $77=(($76+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+$75*12)|0);
      var $80=(($79+8)|0);
      var $81=HEAPF32[(($80)>>2)];
      $aA=$81;
      var $82=(($12+108)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$2;
      var $85=(($84+28)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+$83*12)|0);
      var $88=(($87)|0);
      var $89=$vA;
      var $90=$88;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[(($89+4)>>2)]=HEAP32[(($90+4)>>2)];
      var $91=(($12+108)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$2;
      var $94=(($93+28)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+$92*12)|0);
      var $97=(($96+8)|0);
      var $98=HEAPF32[(($97)>>2)];
      $wA=$98;
      var $99=(($12+112)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$2;
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+$100*12)|0);
      var $105=(($104)|0);
      var $106=$cB;
      var $107=$105;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[(($106+4)>>2)]=HEAP32[(($107+4)>>2)];
      var $108=(($12+112)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$2;
      var $111=(($110+24)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+$109*12)|0);
      var $114=(($113+8)|0);
      var $115=HEAPF32[(($114)>>2)];
      $aB=$115;
      var $116=(($12+112)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$2;
      var $119=(($118+28)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+$117*12)|0);
      var $122=(($121)|0);
      var $123=$vB;
      var $124=$122;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[(($123+4)>>2)]=HEAP32[(($124+4)>>2)];
      var $125=(($12+112)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$2;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+$126*12)|0);
      var $131=(($130+8)|0);
      var $132=HEAPF32[(($131)>>2)];
      $wB=$132;
      var $133=$aA;
      __ZN5b2RotC1Ef($qA, $133);
      var $134=$aB;
      __ZN5b2RotC1Ef($qB, $134);
      var $135=(($12+124)|0);
      var $136=(($12+80)|0);
      var $137=(($12+140)|0);
      __ZmiRK6b2Vec2S1_($4, $136, $137);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $138=$135;
      var $139=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[(($138+4)>>2)]=HEAP32[(($139+4)>>2)];
      var $140=(($12+132)|0);
      var $141=(($12+88)|0);
      var $142=(($12+148)|0);
      __ZmiRK6b2Vec2S1_($6, $141, $142);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $143=$140;
      var $144=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($143)>>2)]=HEAP32[(($144)>>2)];HEAP32[(($143+4)>>2)]=HEAP32[(($144+4)>>2)];
      var $145=(($12+116)|0);
      var $146=(($12+132)|0);
      __ZplRK6b2Vec2S1_($9, $cB, $146);
      __ZmiRK6b2Vec2S1_($8, $9, $cA);
      var $147=(($12+124)|0);
      __ZmiRK6b2Vec2S1_($7, $8, $147);
      var $148=$145;
      var $149=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($148)>>2)]=HEAP32[(($149)>>2)];HEAP32[(($148+4)>>2)]=HEAP32[(($149+4)>>2)];
      var $150=(($12+116)|0);
      var $151=__ZNK6b2Vec26LengthEv($150);
      $length=$151;
      var $152=$length;
      var $153=$152 > 0.004999999888241291;
      if ($153) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $155=(($12+116)|0);
      var $156=$length;
      var $157=1/$156;
      __ZN6b2Vec2mLEf($155, $157);
      __label__ = 4; break;
    case 3: 
      var $159=(($12+116)|0);
      __ZN6b2Vec23SetEff($159, 0, 0);
      __label__ = 4; break;
    case 4: 
      var $161=(($12+124)|0);
      var $162=(($12+116)|0);
      var $163=__Z7b2CrossRK6b2Vec2S1_($161, $162);
      $crAu=$163;
      var $164=(($12+132)|0);
      var $165=(($12+116)|0);
      var $166=__Z7b2CrossRK6b2Vec2S1_($164, $165);
      $crBu=$166;
      var $167=(($12+156)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=(($12+164)|0);
      var $170=HEAPF32[(($169)>>2)];
      var $171=$crAu;
      var $172=$170*$171;
      var $173=$crAu;
      var $174=$172*$173;
      var $175=$168+$174;
      var $176=(($12+160)|0);
      var $177=HEAPF32[(($176)>>2)];
      var $178=$175+$177;
      var $179=(($12+168)|0);
      var $180=HEAPF32[(($179)>>2)];
      var $181=$crBu;
      var $182=$180*$181;
      var $183=$crBu;
      var $184=$182*$183;
      var $185=$178+$184;
      $invMass=$185;
      var $186=$invMass;
      var $187=$186 != 0;
      if ($187) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $189=$invMass;
      var $190=1/$189;
      var $193 = $190;__label__ = 7; break;
    case 6: 
      var $193 = 0;__label__ = 7; break;
    case 7: 
      var $193;
      var $194=(($12+172)|0);
      HEAPF32[(($194)>>2)]=$193;
      var $195=(($12+68)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=$196 > 0;
      if ($197) { __label__ = 8; break; } else { __label__ = 15; break; }
    case 8: 
      var $199=$length;
      var $200=(($12+104)|0);
      var $201=HEAPF32[(($200)>>2)];
      var $202=$199-$201;
      $C=$202;
      var $203=(($12+68)|0);
      var $204=HEAPF32[(($203)>>2)];
      var $205=$204*6.2831854820251465;
      $omega=$205;
      var $206=(($12+172)|0);
      var $207=HEAPF32[(($206)>>2)];
      var $208=$207*2;
      var $209=(($12+72)|0);
      var $210=HEAPF32[(($209)>>2)];
      var $211=$208*$210;
      var $212=$omega;
      var $213=$211*$212;
      $d=$213;
      var $214=(($12+172)|0);
      var $215=HEAPF32[(($214)>>2)];
      var $216=$omega;
      var $217=$215*$216;
      var $218=$omega;
      var $219=$217*$218;
      $k=$219;
      var $220=$2;
      var $221=(($220)|0);
      var $222=(($221)|0);
      var $223=HEAPF32[(($222)>>2)];
      $h=$223;
      var $224=$h;
      var $225=$d;
      var $226=$h;
      var $227=$k;
      var $228=$226*$227;
      var $229=$225+$228;
      var $230=$224*$229;
      var $231=(($12+96)|0);
      HEAPF32[(($231)>>2)]=$230;
      var $232=(($12+96)|0);
      var $233=HEAPF32[(($232)>>2)];
      var $234=$233 != 0;
      if ($234) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $236=(($12+96)|0);
      var $237=HEAPF32[(($236)>>2)];
      var $238=1/$237;
      var $241 = $238;__label__ = 11; break;
    case 10: 
      var $241 = 0;__label__ = 11; break;
    case 11: 
      var $241;
      var $242=(($12+96)|0);
      HEAPF32[(($242)>>2)]=$241;
      var $243=$C;
      var $244=$h;
      var $245=$243*$244;
      var $246=$k;
      var $247=$245*$246;
      var $248=(($12+96)|0);
      var $249=HEAPF32[(($248)>>2)];
      var $250=$247*$249;
      var $251=(($12+76)|0);
      HEAPF32[(($251)>>2)]=$250;
      var $252=(($12+96)|0);
      var $253=HEAPF32[(($252)>>2)];
      var $254=$invMass;
      var $255=$254+$253;
      $invMass=$255;
      var $256=$invMass;
      var $257=$256 != 0;
      if ($257) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $259=$invMass;
      var $260=1/$259;
      var $263 = $260;__label__ = 14; break;
    case 13: 
      var $263 = 0;__label__ = 14; break;
    case 14: 
      var $263;
      var $264=(($12+172)|0);
      HEAPF32[(($264)>>2)]=$263;
      __label__ = 16; break;
    case 15: 
      var $266=(($12+96)|0);
      HEAPF32[(($266)>>2)]=0;
      var $267=(($12+76)|0);
      HEAPF32[(($267)>>2)]=0;
      __label__ = 16; break;
    case 16: 
      var $269=$2;
      var $270=(($269)|0);
      var $271=(($270+20)|0);
      var $272=HEAP8[($271)];
      var $273=(($272) & 1);
      if ($273) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $275=$2;
      var $276=(($275)|0);
      var $277=(($276+8)|0);
      var $278=HEAPF32[(($277)>>2)];
      var $279=(($12+100)|0);
      var $280=HEAPF32[(($279)>>2)];
      var $281=$280*$278;
      HEAPF32[(($279)>>2)]=$281;
      var $282=(($12+100)|0);
      var $283=HEAPF32[(($282)>>2)];
      var $284=(($12+116)|0);
      __ZmlfRK6b2Vec2($P, $283, $284);
      var $285=(($12+156)|0);
      var $286=HEAPF32[(($285)>>2)];
      __ZmlfRK6b2Vec2($10, $286, $P);
      __ZN6b2Vec2mIERKS_($vA, $10);
      var $287=(($12+164)|0);
      var $288=HEAPF32[(($287)>>2)];
      var $289=(($12+124)|0);
      var $290=__Z7b2CrossRK6b2Vec2S1_($289, $P);
      var $291=$288*$290;
      var $292=$wA;
      var $293=$292-$291;
      $wA=$293;
      var $294=(($12+160)|0);
      var $295=HEAPF32[(($294)>>2)];
      __ZmlfRK6b2Vec2($11, $295, $P);
      __ZN6b2Vec2pLERKS_($vB, $11);
      var $296=(($12+168)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=(($12+132)|0);
      var $299=__Z7b2CrossRK6b2Vec2S1_($298, $P);
      var $300=$297*$299;
      var $301=$wB;
      var $302=$301+$300;
      $wB=$302;
      __label__ = 19; break;
    case 18: 
      var $304=(($12+100)|0);
      HEAPF32[(($304)>>2)]=0;
      __label__ = 19; break;
    case 19: 
      var $306=(($12+108)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=$2;
      var $309=(($308+28)|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=(($310+$307*12)|0);
      var $312=(($311)|0);
      var $313=$312;
      var $314=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($313)>>2)]=HEAP32[(($314)>>2)];HEAP32[(($313+4)>>2)]=HEAP32[(($314+4)>>2)];
      var $315=$wA;
      var $316=(($12+108)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=$2;
      var $319=(($318+28)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+$317*12)|0);
      var $322=(($321+8)|0);
      HEAPF32[(($322)>>2)]=$315;
      var $323=(($12+112)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=$2;
      var $326=(($325+28)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327+$324*12)|0);
      var $329=(($328)|0);
      var $330=$329;
      var $331=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($330)>>2)]=HEAP32[(($331)>>2)];HEAP32[(($330+4)>>2)]=HEAP32[(($331+4)>>2)];
      var $332=$wB;
      var $333=(($12+112)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=$2;
      var $336=(($335+28)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337+$334*12)|0);
      var $339=(($338+8)|0);
      HEAPF32[(($339)>>2)]=$332;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN5b2RotC1Ef($this, $angle) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$angle;
  var $3=$1;
  var $4=$2;
  __ZN5b2RotC2Ef($3, $4);
  ;
  return;
}


function __ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $vA=__stackBase__;
  var $wA;
  var $vB=__stackBase__+8;
  var $wB;
  var $vpA=__stackBase__+16;
  var $3=__stackBase__+24;
  var $vpB=__stackBase__+32;
  var $4=__stackBase__+40;
  var $Cdot;
  var $5=__stackBase__+48;
  var $impulse;
  var $P=__stackBase__+56;
  var $6=__stackBase__+64;
  var $7=__stackBase__+72;
  $1=$this;
  $2=$data;
  var $8=$1;
  var $9=(($8+108)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=(($11+28)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13+$10*12)|0);
  var $15=(($14)|0);
  var $16=$vA;
  var $17=$15;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[(($16+4)>>2)]=HEAP32[(($17+4)>>2)];
  var $18=(($8+108)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+28)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=(($22+$19*12)|0);
  var $24=(($23+8)|0);
  var $25=HEAPF32[(($24)>>2)];
  $wA=$25;
  var $26=(($8+112)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$2;
  var $29=(($28+28)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=(($30+$27*12)|0);
  var $32=(($31)|0);
  var $33=$vB;
  var $34=$32;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[(($33+4)>>2)]=HEAP32[(($34+4)>>2)];
  var $35=(($8+112)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=$2;
  var $38=(($37+28)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=(($39+$36*12)|0);
  var $41=(($40+8)|0);
  var $42=HEAPF32[(($41)>>2)];
  $wB=$42;
  var $43=$wA;
  var $44=(($8+124)|0);
  __Z7b2CrossfRK6b2Vec2($3, $43, $44);
  __ZplRK6b2Vec2S1_($vpA, $vA, $3);
  var $45=$wB;
  var $46=(($8+132)|0);
  __Z7b2CrossfRK6b2Vec2($4, $45, $46);
  __ZplRK6b2Vec2S1_($vpB, $vB, $4);
  var $47=(($8+116)|0);
  __ZmiRK6b2Vec2S1_($5, $vpB, $vpA);
  var $48=__Z5b2DotRK6b2Vec2S1_($47, $5);
  $Cdot=$48;
  var $49=(($8+172)|0);
  var $50=HEAPF32[(($49)>>2)];
  var $51=(-$50);
  var $52=$Cdot;
  var $53=(($8+76)|0);
  var $54=HEAPF32[(($53)>>2)];
  var $55=$52+$54;
  var $56=(($8+96)|0);
  var $57=HEAPF32[(($56)>>2)];
  var $58=(($8+100)|0);
  var $59=HEAPF32[(($58)>>2)];
  var $60=$57*$59;
  var $61=$55+$60;
  var $62=$51*$61;
  $impulse=$62;
  var $63=$impulse;
  var $64=(($8+100)|0);
  var $65=HEAPF32[(($64)>>2)];
  var $66=$65+$63;
  HEAPF32[(($64)>>2)]=$66;
  var $67=$impulse;
  var $68=(($8+116)|0);
  __ZmlfRK6b2Vec2($P, $67, $68);
  var $69=(($8+156)|0);
  var $70=HEAPF32[(($69)>>2)];
  __ZmlfRK6b2Vec2($6, $70, $P);
  __ZN6b2Vec2mIERKS_($vA, $6);
  var $71=(($8+164)|0);
  var $72=HEAPF32[(($71)>>2)];
  var $73=(($8+124)|0);
  var $74=__Z7b2CrossRK6b2Vec2S1_($73, $P);
  var $75=$72*$74;
  var $76=$wA;
  var $77=$76-$75;
  $wA=$77;
  var $78=(($8+160)|0);
  var $79=HEAPF32[(($78)>>2)];
  __ZmlfRK6b2Vec2($7, $79, $P);
  __ZN6b2Vec2pLERKS_($vB, $7);
  var $80=(($8+168)|0);
  var $81=HEAPF32[(($80)>>2)];
  var $82=(($8+132)|0);
  var $83=__Z7b2CrossRK6b2Vec2S1_($82, $P);
  var $84=$81*$83;
  var $85=$wB;
  var $86=$85+$84;
  $wB=$86;
  var $87=(($8+108)|0);
  var $88=HEAP32[(($87)>>2)];
  var $89=$2;
  var $90=(($89+28)|0);
  var $91=HEAP32[(($90)>>2)];
  var $92=(($91+$88*12)|0);
  var $93=(($92)|0);
  var $94=$93;
  var $95=$vA;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[(($94+4)>>2)]=HEAP32[(($95+4)>>2)];
  var $96=$wA;
  var $97=(($8+108)|0);
  var $98=HEAP32[(($97)>>2)];
  var $99=$2;
  var $100=(($99+28)|0);
  var $101=HEAP32[(($100)>>2)];
  var $102=(($101+$98*12)|0);
  var $103=(($102+8)|0);
  HEAPF32[(($103)>>2)]=$96;
  var $104=(($8+112)|0);
  var $105=HEAP32[(($104)>>2)];
  var $106=$2;
  var $107=(($106+28)|0);
  var $108=HEAP32[(($107)>>2)];
  var $109=(($108+$105*12)|0);
  var $110=(($109)|0);
  var $111=$110;
  var $112=$vB;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[(($111+4)>>2)]=HEAP32[(($112+4)>>2)];
  var $113=$wB;
  var $114=(($8+112)|0);
  var $115=HEAP32[(($114)>>2)];
  var $116=$2;
  var $117=(($116+28)|0);
  var $118=HEAP32[(($117)>>2)];
  var $119=(($118+$115*12)|0);
  var $120=(($119+8)|0);
  HEAPF32[(($120)>>2)]=$113;
  STACKTOP = __stackBase__;
  return;
}


function __ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cA=__stackBase__;
      var $aA;
      var $cB=__stackBase__+8;
      var $aB;
      var $qA=__stackBase__+16;
      var $qB=__stackBase__+24;
      var $rA=__stackBase__+32;
      var $4=__stackBase__+40;
      var $rB=__stackBase__+48;
      var $5=__stackBase__+56;
      var $u=__stackBase__+64;
      var $6=__stackBase__+72;
      var $7=__stackBase__+80;
      var $length;
      var $C;
      var $impulse;
      var $P=__stackBase__+88;
      var $8=__stackBase__+96;
      var $9=__stackBase__+104;
      $2=$this;
      $3=$data;
      var $10=$2;
      var $11=(($10+68)|0);
      var $12=HEAPF32[(($11)>>2)];
      var $13=$12 > 0;
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=1;
      __label__ = 4; break;
    case 3: 
      var $16=(($10+108)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$3;
      var $19=(($18+24)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+$17*12)|0);
      var $22=(($21)|0);
      var $23=$cA;
      var $24=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[(($23+4)>>2)]=HEAP32[(($24+4)>>2)];
      var $25=(($10+108)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$3;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+$26*12)|0);
      var $31=(($30+8)|0);
      var $32=HEAPF32[(($31)>>2)];
      $aA=$32;
      var $33=(($10+112)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$3;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+$34*12)|0);
      var $39=(($38)|0);
      var $40=$cB;
      var $41=$39;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      var $42=(($10+112)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$3;
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+$43*12)|0);
      var $48=(($47+8)|0);
      var $49=HEAPF32[(($48)>>2)];
      $aB=$49;
      var $50=$aA;
      __ZN5b2RotC1Ef($qA, $50);
      var $51=$aB;
      __ZN5b2RotC1Ef($qB, $51);
      var $52=(($10+80)|0);
      var $53=(($10+140)|0);
      __ZmiRK6b2Vec2S1_($4, $52, $53);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $4);
      var $54=(($10+88)|0);
      var $55=(($10+148)|0);
      __ZmiRK6b2Vec2S1_($5, $54, $55);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $5);
      __ZplRK6b2Vec2S1_($7, $cB, $rB);
      __ZmiRK6b2Vec2S1_($6, $7, $cA);
      __ZmiRK6b2Vec2S1_($u, $6, $rA);
      var $56=__ZN6b2Vec29NormalizeEv($u);
      $length=$56;
      var $57=$length;
      var $58=(($10+104)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$57-$59;
      $C=$60;
      var $61=$C;
      var $62=__Z7b2ClampIfET_S0_S0_S0_($61, -0.20000000298023224, 0.20000000298023224);
      $C=$62;
      var $63=(($10+172)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=(-$64);
      var $66=$C;
      var $67=$65*$66;
      $impulse=$67;
      var $68=$impulse;
      __ZmlfRK6b2Vec2($P, $68, $u);
      var $69=(($10+156)|0);
      var $70=HEAPF32[(($69)>>2)];
      __ZmlfRK6b2Vec2($8, $70, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $71=(($10+164)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $74=$72*$73;
      var $75=$aA;
      var $76=$75-$74;
      $aA=$76;
      var $77=(($10+160)|0);
      var $78=HEAPF32[(($77)>>2)];
      __ZmlfRK6b2Vec2($9, $78, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $79=(($10+168)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $82=$80*$81;
      var $83=$aB;
      var $84=$83+$82;
      $aB=$84;
      var $85=(($10+108)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$3;
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+$86*12)|0);
      var $91=(($90)|0);
      var $92=$91;
      var $93=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[(($92+4)>>2)]=HEAP32[(($93+4)>>2)];
      var $94=$aA;
      var $95=(($10+108)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$3;
      var $98=(($97+24)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+$96*12)|0);
      var $101=(($100+8)|0);
      HEAPF32[(($101)>>2)]=$94;
      var $102=(($10+112)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$3;
      var $105=(($104+24)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+$103*12)|0);
      var $108=(($107)|0);
      var $109=$108;
      var $110=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($109)>>2)]=HEAP32[(($110)>>2)];HEAP32[(($109+4)>>2)]=HEAP32[(($110+4)>>2)];
      var $111=$aB;
      var $112=(($10+112)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$3;
      var $115=(($114+24)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+$113*12)|0);
      var $118=(($117+8)|0);
      HEAPF32[(($118)>>2)]=$111;
      var $119=$C;
      var $120=__Z5b2AbsIfET_S0_($119);
      var $121=$120 < 0.004999999888241291;
      $1=$121;
      __label__ = 4; break;
    case 4: 
      var $123=$1;
      STACKTOP = __stackBase__;
      return $123;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK15b2DistanceJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+80)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $this, $localPoint) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$localPoint;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  __Z5b2MulRK11b2TransformRK6b2Vec2($agg_result, $4, $5);
  ;
  return;
}


function __ZNK15b2DistanceJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+88)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK15b2DistanceJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+100)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  var $8=(($3+116)|0);
  __ZmlfRK6b2Vec2($agg_result, $7, $8);
  ;
  return;
}


function __ZN15b2DistanceJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str281)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str1282)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str2283)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str3284)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+80)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+80)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str4285)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+88)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+88)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str5286)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+104)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((STRING_TABLE.__str6287)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$38,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $39=(($2+68)|0);
  var $40=HEAPF32[(($39)>>2)];
  var $41=$40;
  __Z5b2LogPKcz(((STRING_TABLE.__str7288)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$41,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $42=(($2+72)|0);
  var $43=HEAPF32[(($42)>>2)];
  var $44=$43;
  __Z5b2LogPKcz(((STRING_TABLE.__str8289)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$44,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $45=$2;
  var $46=(($45+56)|0);
  var $47=HEAP32[(($46)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str9290)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$47,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN15b2DistanceJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2DistanceJointD2Ev($2);
  ;
  return;
}


function __ZN15b2DistanceJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN15b2DistanceJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2DistanceJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN5b2RotC2Ef($this, $angle) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$angle;
  var $3=$1;
  var $4=$2;
  var $5=_sinf($4);
  var $6=(($3)|0);
  HEAPF32[(($6)>>2)]=$5;
  var $7=$2;
  var $8=_cosf($7);
  var $9=(($3+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  ;
  return;
}


function __ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  ;
  return 1;
}


function __ZNK15b2FrictionJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+92)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  ;
  return $7;
}


function __ZNK15b2FrictionJoint11GetMaxForceEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+96)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK15b2FrictionJoint12GetMaxTorqueEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+100)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN18b2FrictionJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  var $6=__stackBase__+8;
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  var $7=$1;
  var $8=$2;
  var $9=$7;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$3;
  var $12=$7;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=(($7+20)|0);
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $17, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[(($19+4)>>2)]=HEAP32[(($20+4)>>2)];
  var $21=(($7+28)|0);
  var $22=$7;
  var $23=(($22+12)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $24, $25);
  var $26=$21;
  var $27=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[(($26+4)>>2)]=HEAP32[(($27+4)>>2)];
  STACKTOP = __stackBase__;
  return;
}


function __ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $aA;
      var $vA=__stackBase__;
      var $wA;
      var $aB;
      var $vB=__stackBase__+8;
      var $wB;
      var $qA=__stackBase__+16;
      var $qB=__stackBase__+24;
      var $3=__stackBase__+32;
      var $4=__stackBase__+40;
      var $5=__stackBase__+48;
      var $6=__stackBase__+56;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $K=__stackBase__+64;
      var $7=__stackBase__+80;
      var $P=__stackBase__+96;
      var $8=__stackBase__+104;
      var $9=__stackBase__+112;
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=$10;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($10+104)|0);
      HEAP32[(($16)>>2)]=$15;
      var $17=$10;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($10+108)|0);
      HEAP32[(($22)>>2)]=$21;
      var $23=(($10+128)|0);
      var $24=$10;
      var $25=(($24+48)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+28)|0);
      var $28=(($27)|0);
      var $29=$23;
      var $30=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[(($29+4)>>2)]=HEAP32[(($30+4)>>2)];
      var $31=(($10+136)|0);
      var $32=$10;
      var $33=(($32+52)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+28)|0);
      var $36=(($35)|0);
      var $37=$31;
      var $38=$36;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[(($37+4)>>2)]=HEAP32[(($38+4)>>2)];
      var $39=$10;
      var $40=(($39+48)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+120)|0);
      var $43=HEAPF32[(($42)>>2)];
      var $44=(($10+144)|0);
      HEAPF32[(($44)>>2)]=$43;
      var $45=$10;
      var $46=(($45+52)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+120)|0);
      var $49=HEAPF32[(($48)>>2)];
      var $50=(($10+148)|0);
      HEAPF32[(($50)>>2)]=$49;
      var $51=$10;
      var $52=(($51+48)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+128)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=(($10+152)|0);
      HEAPF32[(($56)>>2)]=$55;
      var $57=$10;
      var $58=(($57+52)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+128)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($10+156)|0);
      HEAPF32[(($62)>>2)]=$61;
      var $63=(($10+104)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$2;
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+$64*12)|0);
      var $69=(($68+8)|0);
      var $70=HEAPF32[(($69)>>2)];
      $aA=$70;
      var $71=(($10+104)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+28)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+$72*12)|0);
      var $77=(($76)|0);
      var $78=$vA;
      var $79=$77;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)];
      var $80=(($10+104)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$2;
      var $83=(($82+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+$81*12)|0);
      var $86=(($85+8)|0);
      var $87=HEAPF32[(($86)>>2)];
      $wA=$87;
      var $88=(($10+108)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$2;
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+$89*12)|0);
      var $94=(($93+8)|0);
      var $95=HEAPF32[(($94)>>2)];
      $aB=$95;
      var $96=(($10+108)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$2;
      var $99=(($98+28)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+$97*12)|0);
      var $102=(($101)|0);
      var $103=$vB;
      var $104=$102;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[(($103+4)>>2)]=HEAP32[(($104+4)>>2)];
      var $105=(($10+108)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=(($107+28)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+$106*12)|0);
      var $111=(($110+8)|0);
      var $112=HEAPF32[(($111)>>2)];
      $wB=$112;
      var $113=$aA;
      __ZN5b2RotC1Ef($qA, $113);
      var $114=$aB;
      __ZN5b2RotC1Ef($qB, $114);
      var $115=(($10+112)|0);
      var $116=(($10+68)|0);
      var $117=(($10+128)|0);
      __ZmiRK6b2Vec2S1_($4, $116, $117);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $118=$115;
      var $119=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[(($118+4)>>2)]=HEAP32[(($119+4)>>2)];
      var $120=(($10+120)|0);
      var $121=(($10+76)|0);
      var $122=(($10+136)|0);
      __ZmiRK6b2Vec2S1_($6, $121, $122);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $123=$120;
      var $124=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[(($123+4)>>2)]=HEAP32[(($124+4)>>2)];
      var $125=(($10+144)|0);
      var $126=HEAPF32[(($125)>>2)];
      $mA=$126;
      var $127=(($10+148)|0);
      var $128=HEAPF32[(($127)>>2)];
      $mB=$128;
      var $129=(($10+152)|0);
      var $130=HEAPF32[(($129)>>2)];
      $iA=$130;
      var $131=(($10+156)|0);
      var $132=HEAPF32[(($131)>>2)];
      $iB=$132;
      __ZN7b2Mat22C1Ev($K);
      var $133=$mA;
      var $134=$mB;
      var $135=$133+$134;
      var $136=$iA;
      var $137=(($10+112)|0);
      var $138=(($137+4)|0);
      var $139=HEAPF32[(($138)>>2)];
      var $140=$136*$139;
      var $141=(($10+112)|0);
      var $142=(($141+4)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=$140*$143;
      var $145=$135+$144;
      var $146=$iB;
      var $147=(($10+120)|0);
      var $148=(($147+4)|0);
      var $149=HEAPF32[(($148)>>2)];
      var $150=$146*$149;
      var $151=(($10+120)|0);
      var $152=(($151+4)|0);
      var $153=HEAPF32[(($152)>>2)];
      var $154=$150*$153;
      var $155=$145+$154;
      var $156=(($K)|0);
      var $157=(($156)|0);
      HEAPF32[(($157)>>2)]=$155;
      var $158=$iA;
      var $159=(-$158);
      var $160=(($10+112)|0);
      var $161=(($160)|0);
      var $162=HEAPF32[(($161)>>2)];
      var $163=$159*$162;
      var $164=(($10+112)|0);
      var $165=(($164+4)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=$163*$166;
      var $168=$iB;
      var $169=(($10+120)|0);
      var $170=(($169)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=$168*$171;
      var $173=(($10+120)|0);
      var $174=(($173+4)|0);
      var $175=HEAPF32[(($174)>>2)];
      var $176=$172*$175;
      var $177=$167-$176;
      var $178=(($K)|0);
      var $179=(($178+4)|0);
      HEAPF32[(($179)>>2)]=$177;
      var $180=(($K)|0);
      var $181=(($180+4)|0);
      var $182=HEAPF32[(($181)>>2)];
      var $183=(($K+8)|0);
      var $184=(($183)|0);
      HEAPF32[(($184)>>2)]=$182;
      var $185=$mA;
      var $186=$mB;
      var $187=$185+$186;
      var $188=$iA;
      var $189=(($10+112)|0);
      var $190=(($189)|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=$188*$191;
      var $193=(($10+112)|0);
      var $194=(($193)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=$192*$195;
      var $197=$187+$196;
      var $198=$iB;
      var $199=(($10+120)|0);
      var $200=(($199)|0);
      var $201=HEAPF32[(($200)>>2)];
      var $202=$198*$201;
      var $203=(($10+120)|0);
      var $204=(($203)|0);
      var $205=HEAPF32[(($204)>>2)];
      var $206=$202*$205;
      var $207=$197+$206;
      var $208=(($K+8)|0);
      var $209=(($208+4)|0);
      HEAPF32[(($209)>>2)]=$207;
      var $210=(($10+160)|0);
      __ZNK7b2Mat2210GetInverseEv($7, $K);
      var $211=$210;
      var $212=$7;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[(($211+4)>>2)]=HEAP32[(($212+4)>>2)];HEAP32[(($211+8)>>2)]=HEAP32[(($212+8)>>2)];HEAP32[(($211+12)>>2)]=HEAP32[(($212+12)>>2)];
      var $213=$iA;
      var $214=$iB;
      var $215=$213+$214;
      var $216=(($10+176)|0);
      HEAPF32[(($216)>>2)]=$215;
      var $217=(($10+176)|0);
      var $218=HEAPF32[(($217)>>2)];
      var $219=$218 > 0;
      if ($219) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $221=(($10+176)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=1/$222;
      var $224=(($10+176)|0);
      HEAPF32[(($224)>>2)]=$223;
      __label__ = 3; break;
    case 3: 
      var $226=$2;
      var $227=(($226)|0);
      var $228=(($227+20)|0);
      var $229=HEAP8[($228)];
      var $230=(($229) & 1);
      if ($230) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $232=(($10+84)|0);
      var $233=$2;
      var $234=(($233)|0);
      var $235=(($234+8)|0);
      var $236=HEAPF32[(($235)>>2)];
      __ZN6b2Vec2mLEf($232, $236);
      var $237=$2;
      var $238=(($237)|0);
      var $239=(($238+8)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=(($10+92)|0);
      var $242=HEAPF32[(($241)>>2)];
      var $243=$242*$240;
      HEAPF32[(($241)>>2)]=$243;
      var $244=(($10+84)|0);
      var $245=(($244)|0);
      var $246=HEAPF32[(($245)>>2)];
      var $247=(($10+84)|0);
      var $248=(($247+4)|0);
      var $249=HEAPF32[(($248)>>2)];
      __ZN6b2Vec2C1Eff($P, $246, $249);
      var $250=$mA;
      __ZmlfRK6b2Vec2($8, $250, $P);
      __ZN6b2Vec2mIERKS_($vA, $8);
      var $251=$iA;
      var $252=(($10+112)|0);
      var $253=__Z7b2CrossRK6b2Vec2S1_($252, $P);
      var $254=(($10+92)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=$253+$255;
      var $257=$251*$256;
      var $258=$wA;
      var $259=$258-$257;
      $wA=$259;
      var $260=$mB;
      __ZmlfRK6b2Vec2($9, $260, $P);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $261=$iB;
      var $262=(($10+120)|0);
      var $263=__Z7b2CrossRK6b2Vec2S1_($262, $P);
      var $264=(($10+92)|0);
      var $265=HEAPF32[(($264)>>2)];
      var $266=$263+$265;
      var $267=$261*$266;
      var $268=$wB;
      var $269=$268+$267;
      $wB=$269;
      __label__ = 6; break;
    case 5: 
      var $271=(($10+84)|0);
      __ZN6b2Vec27SetZeroEv($271);
      var $272=(($10+92)|0);
      HEAPF32[(($272)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      var $274=(($10+104)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=$2;
      var $277=(($276+28)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+$275*12)|0);
      var $280=(($279)|0);
      var $281=$280;
      var $282=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($281)>>2)]=HEAP32[(($282)>>2)];HEAP32[(($281+4)>>2)]=HEAP32[(($282+4)>>2)];
      var $283=$wA;
      var $284=(($10+104)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$2;
      var $287=(($286+28)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=(($288+$285*12)|0);
      var $290=(($289+8)|0);
      HEAPF32[(($290)>>2)]=$283;
      var $291=(($10+108)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=$2;
      var $294=(($293+28)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=(($295+$292*12)|0);
      var $297=(($296)|0);
      var $298=$297;
      var $299=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($298)>>2)]=HEAP32[(($299)>>2)];HEAP32[(($298+4)>>2)]=HEAP32[(($299+4)>>2)];
      var $300=$wB;
      var $301=(($10+108)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=$2;
      var $304=(($303+28)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=(($305+$302*12)|0);
      var $307=(($306+8)|0);
      HEAPF32[(($307)>>2)]=$300;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 104; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=__stackBase__+8;
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $h;
      var $Cdot;
      var $impulse;
      var $oldImpulse;
      var $maxImpulse;
      var $Cdot1=__stackBase__+16;
      var $3=__stackBase__+24;
      var $4=__stackBase__+32;
      var $5=__stackBase__+40;
      var $6=__stackBase__+48;
      var $impulse2=__stackBase__+56;
      var $7=__stackBase__+64;
      var $oldImpulse3=__stackBase__+72;
      var $maxImpulse4;
      var $8=__stackBase__+80;
      var $9=__stackBase__+88;
      var $10=__stackBase__+96;
      $1=$this;
      $2=$data;
      var $11=$1;
      var $12=(($11+104)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$13*12)|0);
      var $18=(($17)|0);
      var $19=$vA;
      var $20=$18;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[(($19+4)>>2)]=HEAP32[(($20+4)>>2)];
      var $21=(($11+104)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$2;
      var $24=(($23+28)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+$22*12)|0);
      var $27=(($26+8)|0);
      var $28=HEAPF32[(($27)>>2)];
      $wA=$28;
      var $29=(($11+108)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=(($31+28)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+$30*12)|0);
      var $35=(($34)|0);
      var $36=$vB;
      var $37=$35;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[(($36+4)>>2)]=HEAP32[(($37+4)>>2)];
      var $38=(($11+108)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$2;
      var $41=(($40+28)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+$39*12)|0);
      var $44=(($43+8)|0);
      var $45=HEAPF32[(($44)>>2)];
      $wB=$45;
      var $46=(($11+144)|0);
      var $47=HEAPF32[(($46)>>2)];
      $mA=$47;
      var $48=(($11+148)|0);
      var $49=HEAPF32[(($48)>>2)];
      $mB=$49;
      var $50=(($11+152)|0);
      var $51=HEAPF32[(($50)>>2)];
      $iA=$51;
      var $52=(($11+156)|0);
      var $53=HEAPF32[(($52)>>2)];
      $iB=$53;
      var $54=$2;
      var $55=(($54)|0);
      var $56=(($55)|0);
      var $57=HEAPF32[(($56)>>2)];
      $h=$57;
      var $58=$wB;
      var $59=$wA;
      var $60=$58-$59;
      $Cdot=$60;
      var $61=(($11+176)|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=(-$62);
      var $64=$Cdot;
      var $65=$63*$64;
      $impulse=$65;
      var $66=(($11+92)|0);
      var $67=HEAPF32[(($66)>>2)];
      $oldImpulse=$67;
      var $68=$h;
      var $69=(($11+100)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=$68*$70;
      $maxImpulse=$71;
      var $72=(($11+92)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$impulse;
      var $75=$73+$74;
      var $76=$maxImpulse;
      var $77=(-$76);
      var $78=$maxImpulse;
      var $79=__Z7b2ClampIfET_S0_S0_S0_($75, $77, $78);
      var $80=(($11+92)|0);
      HEAPF32[(($80)>>2)]=$79;
      var $81=(($11+92)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$oldImpulse;
      var $84=$82-$83;
      $impulse=$84;
      var $85=$iA;
      var $86=$impulse;
      var $87=$85*$86;
      var $88=$wA;
      var $89=$88-$87;
      $wA=$89;
      var $90=$iB;
      var $91=$impulse;
      var $92=$90*$91;
      var $93=$wB;
      var $94=$93+$92;
      $wB=$94;
      var $95=$wB;
      var $96=(($11+120)|0);
      __Z7b2CrossfRK6b2Vec2($5, $95, $96);
      __ZplRK6b2Vec2S1_($4, $vB, $5);
      __ZmiRK6b2Vec2S1_($3, $4, $vA);
      var $97=$wA;
      var $98=(($11+112)|0);
      __Z7b2CrossfRK6b2Vec2($6, $97, $98);
      __ZmiRK6b2Vec2S1_($Cdot1, $3, $6);
      var $99=(($11+160)|0);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($7, $99, $Cdot1);
      __ZNK6b2Vec2ngEv($impulse2, $7);
      var $100=(($11+84)|0);
      var $101=$oldImpulse3;
      var $102=$100;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[(($101+4)>>2)]=HEAP32[(($102+4)>>2)];
      var $103=(($11+84)|0);
      __ZN6b2Vec2pLERKS_($103, $impulse2);
      var $104=$h;
      var $105=(($11+96)|0);
      var $106=HEAPF32[(($105)>>2)];
      var $107=$104*$106;
      $maxImpulse4=$107;
      var $108=(($11+84)|0);
      var $109=__ZNK6b2Vec213LengthSquaredEv($108);
      var $110=$maxImpulse4;
      var $111=$maxImpulse4;
      var $112=$110*$111;
      var $113=$109 > $112;
      if ($113) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $115=(($11+84)|0);
      var $116=__ZN6b2Vec29NormalizeEv($115);
      var $117=(($11+84)|0);
      var $118=$maxImpulse4;
      __ZN6b2Vec2mLEf($117, $118);
      __label__ = 3; break;
    case 3: 
      var $120=(($11+84)|0);
      __ZmiRK6b2Vec2S1_($8, $120, $oldImpulse3);
      var $121=$impulse2;
      var $122=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[(($121+4)>>2)]=HEAP32[(($122+4)>>2)];
      var $123=$mA;
      __ZmlfRK6b2Vec2($9, $123, $impulse2);
      __ZN6b2Vec2mIERKS_($vA, $9);
      var $124=$iA;
      var $125=(($11+112)|0);
      var $126=__Z7b2CrossRK6b2Vec2S1_($125, $impulse2);
      var $127=$124*$126;
      var $128=$wA;
      var $129=$128-$127;
      $wA=$129;
      var $130=$mB;
      __ZmlfRK6b2Vec2($10, $130, $impulse2);
      __ZN6b2Vec2pLERKS_($vB, $10);
      var $131=$iB;
      var $132=(($11+120)|0);
      var $133=__Z7b2CrossRK6b2Vec2S1_($132, $impulse2);
      var $134=$131*$133;
      var $135=$wB;
      var $136=$135+$134;
      $wB=$136;
      var $137=(($11+104)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$2;
      var $140=(($139+28)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+$138*12)|0);
      var $143=(($142)|0);
      var $144=$143;
      var $145=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[(($144+4)>>2)]=HEAP32[(($145+4)>>2)];
      var $146=$wA;
      var $147=(($11+104)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$2;
      var $150=(($149+28)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151+$148*12)|0);
      var $153=(($152+8)|0);
      HEAPF32[(($153)>>2)]=$146;
      var $154=(($11+108)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$2;
      var $157=(($156+28)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158+$155*12)|0);
      var $160=(($159)|0);
      var $161=$160;
      var $162=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($161)>>2)]=HEAP32[(($162)>>2)];HEAP32[(($161+4)>>2)]=HEAP32[(($162+4)>>2)];
      var $163=$wB;
      var $164=(($11+108)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=$2;
      var $167=(($166+28)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+$165*12)|0);
      var $170=(($169+8)|0);
      HEAPF32[(($170)>>2)]=$163;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK15b2FrictionJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK15b2FrictionJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK15b2FrictionJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+84)|0);
  __ZmlfRK6b2Vec2($agg_result, $4, $5);
  ;
  return;
}


function __ZN15b2FrictionJoint11SetMaxForceEf($this, $force) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$force;
      var $3=$1;
      var $4=$2;
      var $5=__Z9b2IsValidf($4);
      if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $7=$2;
      var $8=$7 >= 0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str291)|0), 217, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint11SetMaxForceEf)|0), ((STRING_TABLE.__str1292)|0));
      __label__ = 5; break;
    case 5: 
      var $12=$2;
      var $13=(($3+96)|0);
      HEAPF32[(($13)>>2)]=$12;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2FrictionJoint12SetMaxTorqueEf($this, $torque) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$torque;
      var $3=$1;
      var $4=$2;
      var $5=__Z9b2IsValidf($4);
      if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $7=$2;
      var $8=$7 >= 0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_func(((STRING_TABLE.__str291)|0), 228, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint12SetMaxTorqueEf)|0), ((STRING_TABLE.__str2293)|0));
      __label__ = 5; break;
    case 5: 
      var $12=$2;
      var $13=(($3+100)|0);
      HEAPF32[(($13)>>2)]=$12;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2FrictionJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str3294)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str4295)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str5296)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str6297)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str7298)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str8299)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+96)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((STRING_TABLE.__str9300)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$38,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $39=(($2+100)|0);
  var $40=HEAPF32[(($39)>>2)];
  var $41=$40;
  __Z5b2LogPKcz(((STRING_TABLE.__str10301)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$41,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $42=$2;
  var $43=(($42+56)|0);
  var $44=HEAP32[(($43)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str11302)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$44,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN15b2FrictionJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2FrictionJointD2Ev($2);
  ;
  return;
}


function __ZN15b2FrictionJointC2EPK18b2FrictionJointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((__ZTV15b2FrictionJoint+8)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $14=(($5+84)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $16=(($5+112)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      var $18=(($5+120)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $20=(($5+128)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $22=(($5+136)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $24=(($5+160)|0);
      (function() { try { __THREW__ = false; return __ZN7b2Mat22C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $26=(($5+68)|0);
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=$26;
      var $30=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[(($29+4)>>2)]=HEAP32[(($30+4)>>2)];
      var $31=(($5+76)|0);
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=(($5+84)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $38=(($5+92)|0);
      HEAPF32[(($38)>>2)]=0;
      var $39=$2;
      var $40=(($39+36)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42=(($5+96)|0);
      HEAPF32[(($42)>>2)]=$41;
      var $43=$2;
      var $44=(($43+40)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($5+100)|0);
      HEAPF32[(($46)>>2)]=$45;
      ;
      return;
    case 11: 
      var $48=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $49=$48.f0;
      $3=$49;
      var $50=$48.f1;
      $4=$50;
      var $51=$5;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $54=$3;
      var $55=$3;
      var $56=$4;
      var $57=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $55, tempValue);
      var $58=($57.f1 = $56, $57);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 14: 
      var $60=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2FrictionJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN15b2FrictionJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2FrictionJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN11b2GearJointC2EPK14b2GearJointDef($this, $def) {
  var __stackBase__  = STACKTOP; STACKTOP += 160; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $coordinateA;
      var $coordinateB;
      var $xfA=__stackBase__;
      var $aA;
      var $xfC=__stackBase__+16;
      var $aC;
      var $revolute;
      var $prismatic;
      var $pC=__stackBase__+32;
      var $pA=__stackBase__+40;
      var $5=__stackBase__+48;
      var $6=__stackBase__+56;
      var $7=__stackBase__+64;
      var $8=__stackBase__+72;
      var $xfB=__stackBase__+80;
      var $aB;
      var $xfD=__stackBase__+96;
      var $aD;
      var $revolute1;
      var $prismatic2;
      var $pD=__stackBase__+112;
      var $pB=__stackBase__+120;
      var $9=__stackBase__+128;
      var $10=__stackBase__+136;
      var $11=__stackBase__+144;
      var $12=__stackBase__+152;
      $1=$this;
      $2=$def;
      var $13=$1;
      var $14=$13;
      var $15=$2;
      var $16=$15;
      __ZN7b2JointC2EPK10b2JointDef($14, $16);
      var $17=$13;
      HEAP32[(($17)>>2)]=((__ZTV11b2GearJoint+8)|0);
      var $18=(($13+92)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 30; break; }
    case 2: 
      var $20=(($13+100)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 30; break; }
    case 3: 
      var $22=(($13+108)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 30; break; }
    case 4: 
      var $24=(($13+116)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 30; break; }
    case 5: 
      var $26=(($13+124)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 30; break; }
    case 6: 
      var $28=(($13+132)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 30; break; }
    case 7: 
      var $30=(($13+176)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 30; break; }
    case 8: 
      var $32=(($13+184)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 30; break; }
    case 9: 
      var $34=(($13+192)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 30; break; }
    case 10: 
      var $36=(($13+200)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 11; break; } else { __label__ = 30; break; }
    case 11: 
      var $38=(($13+240)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 30; break; }
    case 12: 
      var $40=(($13+248)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 30; break; }
    case 13: 
      var $42=$2;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($13+68)|0);
      HEAP32[(($45)>>2)]=$44;
      var $46=$2;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($13+72)|0);
      HEAP32[(($49)>>2)]=$48;
      var $50=(($13+68)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52 = (function() { try { __THREW__ = false; return __ZNK7b2Joint7GetTypeEv($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 30; break; }
    case 14: 
      var $54=(($13+76)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=(($13+72)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57 = (function() { try { __THREW__ = false; return __ZNK7b2Joint7GetTypeEv($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 15; break; } else { __label__ = 30; break; }
    case 15: 
      var $59=(($13+80)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=(($13+76)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|0)==1;
      if ($62) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $64=(($13+76)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0)==2;
      if ($66) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 20; break;
    case 18: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str303)|0), 53, ((STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJointC2EPK14b2GearJointDef)|0), ((STRING_TABLE.__str1304)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 19; break; } else { __label__ = 30; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $71=(($13+80)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|0)==1;
      if ($73) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $75=(($13+80)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|0)==2;
      if ($77) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 25; break;
    case 23: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str303)|0), 54, ((STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJointC2EPK14b2GearJointDef)|0), ((STRING_TABLE.__str2305)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 24; break; } else { __label__ = 30; break; }
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $82=(($13+68)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84 = (function() { try { __THREW__ = false; return __ZN7b2Joint8GetBodyAEv($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: 
      var $86=(($13+84)|0);
      HEAP32[(($86)>>2)]=$84;
      var $87=(($13+68)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89 = (function() { try { __THREW__ = false; return __ZN7b2Joint8GetBodyBEv($88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 27; break; } else { __label__ = 30; break; }
    case 27: 
      var $91=$13;
      var $92=(($91+48)|0);
      HEAP32[(($92)>>2)]=$89;
      var $93=$13;
      var $94=(($93+48)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+12)|0);
      var $97=$xfA;
      var $98=$96;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[(($97+4)>>2)]=HEAP32[(($98+4)>>2)];HEAP32[(($97+8)>>2)]=HEAP32[(($98+8)>>2)];HEAP32[(($97+12)>>2)]=HEAP32[(($98+12)>>2)];
      var $99=$13;
      var $100=(($99+48)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+28)|0);
      var $103=(($102+28)|0);
      var $104=HEAPF32[(($103)>>2)];
      $aA=$104;
      var $105=(($13+84)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+12)|0);
      var $108=$xfC;
      var $109=$107;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[(($108+4)>>2)]=HEAP32[(($109+4)>>2)];HEAP32[(($108+8)>>2)]=HEAP32[(($109+8)>>2)];HEAP32[(($108+12)>>2)]=HEAP32[(($109+12)>>2)];
      var $110=(($13+84)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+28)|0);
      var $113=(($112+28)|0);
      var $114=HEAPF32[(($113)>>2)];
      $aC=$114;
      var $115=(($13+76)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116)|0)==1;
      if ($117) { __label__ = 28; break; } else { __label__ = 31; break; }
    case 28: 
      var $119=$2;
      var $120=(($119+20)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$121;
      $revolute=$122;
      var $123=(($13+108)|0);
      var $124=$revolute;
      var $125=(($124+68)|0);
      var $126=$123;
      var $127=$125;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[(($126+4)>>2)]=HEAP32[(($127+4)>>2)];
      var $128=(($13+92)|0);
      var $129=$revolute;
      var $130=(($129+76)|0);
      var $131=$128;
      var $132=$130;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[(($131+4)>>2)]=HEAP32[(($132+4)>>2)];
      var $133=$revolute;
      var $134=(($133+116)|0);
      var $135=HEAPF32[(($134)>>2)];
      var $136=(($13+140)|0);
      HEAPF32[(($136)>>2)]=$135;
      var $137=(($13+124)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $139=$aA;
      var $140=$aC;
      var $141=$139-$140;
      var $142=(($13+140)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=$141-$143;
      $coordinateA=$144;
      __label__ = 38; break;
    case 30: 
      var $146=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $147=$146.f0;
      $3=$147;
      var $148=$146.f1;
      $4=$148;
      var $149=$13;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 31: 
      var $151=$2;
      var $152=(($151+20)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$153;
      $prismatic=$154;
      var $155=(($13+108)|0);
      var $156=$prismatic;
      var $157=(($156+68)|0);
      var $158=$155;
      var $159=$157;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[(($158+4)>>2)]=HEAP32[(($159+4)>>2)];
      var $160=(($13+92)|0);
      var $161=$prismatic;
      var $162=(($161+76)|0);
      var $163=$160;
      var $164=$162;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($163)>>2)]=HEAP32[(($164)>>2)];HEAP32[(($163+4)>>2)]=HEAP32[(($164+4)>>2)];
      var $165=$prismatic;
      var $166=(($165+100)|0);
      var $167=HEAPF32[(($166)>>2)];
      var $168=(($13+140)|0);
      HEAPF32[(($168)>>2)]=$167;
      var $169=(($13+124)|0);
      var $170=$prismatic;
      var $171=(($170+84)|0);
      var $172=$169;
      var $173=$171;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($172)>>2)]=HEAP32[(($173)>>2)];HEAP32[(($172+4)>>2)]=HEAP32[(($173+4)>>2)];
      var $174=(($13+108)|0);
      var $175=$pC;
      var $176=$174;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($175)>>2)]=HEAP32[(($176)>>2)];HEAP32[(($175+4)>>2)]=HEAP32[(($176+4)>>2)];
      var $177=(($xfC+8)|0);
      var $178=(($xfA+8)|0);
      var $179=(($13+92)|0);
      (function() { try { __THREW__ = false; return __Z5b2MulRK5b2RotRK6b2Vec2($6, $178, $179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 32; break; } else { __label__ = 30; break; }
    case 32: 
      var $181=(($xfA)|0);
      var $182=(($xfC)|0);
      (function() { try { __THREW__ = false; return __ZmiRK6b2Vec2S1_($7, $181, $182) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 33; break; } else { __label__ = 30; break; }
    case 33: 
      (function() { try { __THREW__ = false; return __ZplRK6b2Vec2S1_($5, $6, $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 34; break; } else { __label__ = 30; break; }
    case 34: 
      (function() { try { __THREW__ = false; return __Z6b2MulTRK5b2RotRK6b2Vec2($pA, $177, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 35; break; } else { __label__ = 30; break; }
    case 35: 
      (function() { try { __THREW__ = false; return __ZmiRK6b2Vec2S1_($8, $pA, $pC) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 36; break; } else { __label__ = 30; break; }
    case 36: 
      var $187=(($13+124)|0);
      var $188 = (function() { try { __THREW__ = false; return __Z5b2DotRK6b2Vec2S1_($8, $187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 37; break; } else { __label__ = 30; break; }
    case 37: 
      $coordinateA=$188;
      __label__ = 38; break;
    case 38: 
      var $191=(($13+72)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193 = (function() { try { __THREW__ = false; return __ZN7b2Joint8GetBodyAEv($192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 39; break; } else { __label__ = 30; break; }
    case 39: 
      var $195=(($13+88)|0);
      HEAP32[(($195)>>2)]=$193;
      var $196=(($13+72)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198 = (function() { try { __THREW__ = false; return __ZN7b2Joint8GetBodyBEv($197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 40; break; } else { __label__ = 30; break; }
    case 40: 
      var $200=$13;
      var $201=(($200+52)|0);
      HEAP32[(($201)>>2)]=$198;
      var $202=$13;
      var $203=(($202+52)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=(($204+12)|0);
      var $206=$xfB;
      var $207=$205;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($206)>>2)]=HEAP32[(($207)>>2)];HEAP32[(($206+4)>>2)]=HEAP32[(($207+4)>>2)];HEAP32[(($206+8)>>2)]=HEAP32[(($207+8)>>2)];HEAP32[(($206+12)>>2)]=HEAP32[(($207+12)>>2)];
      var $208=$13;
      var $209=(($208+52)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($210+28)|0);
      var $212=(($211+28)|0);
      var $213=HEAPF32[(($212)>>2)];
      $aB=$213;
      var $214=(($13+88)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($215+12)|0);
      var $217=$xfD;
      var $218=$216;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($217)>>2)]=HEAP32[(($218)>>2)];HEAP32[(($217+4)>>2)]=HEAP32[(($218+4)>>2)];HEAP32[(($217+8)>>2)]=HEAP32[(($218+8)>>2)];HEAP32[(($217+12)>>2)]=HEAP32[(($218+12)>>2)];
      var $219=(($13+88)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220+28)|0);
      var $222=(($221+28)|0);
      var $223=HEAPF32[(($222)>>2)];
      $aD=$223;
      var $224=(($13+80)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225)|0)==1;
      if ($226) { __label__ = 41; break; } else { __label__ = 43; break; }
    case 41: 
      var $228=$2;
      var $229=(($228+24)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=$230;
      $revolute1=$231;
      var $232=(($13+116)|0);
      var $233=$revolute1;
      var $234=(($233+68)|0);
      var $235=$232;
      var $236=$234;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($235)>>2)]=HEAP32[(($236)>>2)];HEAP32[(($235+4)>>2)]=HEAP32[(($236+4)>>2)];
      var $237=(($13+100)|0);
      var $238=$revolute1;
      var $239=(($238+76)|0);
      var $240=$237;
      var $241=$239;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($240)>>2)]=HEAP32[(($241)>>2)];HEAP32[(($240+4)>>2)]=HEAP32[(($241+4)>>2)];
      var $242=$revolute1;
      var $243=(($242+116)|0);
      var $244=HEAPF32[(($243)>>2)];
      var $245=(($13+144)|0);
      HEAPF32[(($245)>>2)]=$244;
      var $246=(($13+132)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($246) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 42; break; } else { __label__ = 30; break; }
    case 42: 
      var $248=$aB;
      var $249=$aD;
      var $250=$248-$249;
      var $251=(($13+144)|0);
      var $252=HEAPF32[(($251)>>2)];
      var $253=$250-$252;
      $coordinateB=$253;
      __label__ = 50; break;
    case 43: 
      var $255=$2;
      var $256=(($255+24)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=$257;
      $prismatic2=$258;
      var $259=(($13+116)|0);
      var $260=$prismatic2;
      var $261=(($260+68)|0);
      var $262=$259;
      var $263=$261;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($262)>>2)]=HEAP32[(($263)>>2)];HEAP32[(($262+4)>>2)]=HEAP32[(($263+4)>>2)];
      var $264=(($13+100)|0);
      var $265=$prismatic2;
      var $266=(($265+76)|0);
      var $267=$264;
      var $268=$266;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($267)>>2)]=HEAP32[(($268)>>2)];HEAP32[(($267+4)>>2)]=HEAP32[(($268+4)>>2)];
      var $269=$prismatic2;
      var $270=(($269+100)|0);
      var $271=HEAPF32[(($270)>>2)];
      var $272=(($13+144)|0);
      HEAPF32[(($272)>>2)]=$271;
      var $273=(($13+132)|0);
      var $274=$prismatic2;
      var $275=(($274+84)|0);
      var $276=$273;
      var $277=$275;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($276)>>2)]=HEAP32[(($277)>>2)];HEAP32[(($276+4)>>2)]=HEAP32[(($277+4)>>2)];
      var $278=(($13+116)|0);
      var $279=$pD;
      var $280=$278;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($279)>>2)]=HEAP32[(($280)>>2)];HEAP32[(($279+4)>>2)]=HEAP32[(($280+4)>>2)];
      var $281=(($xfD+8)|0);
      var $282=(($xfB+8)|0);
      var $283=(($13+100)|0);
      (function() { try { __THREW__ = false; return __Z5b2MulRK5b2RotRK6b2Vec2($10, $282, $283) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 44; break; } else { __label__ = 30; break; }
    case 44: 
      var $285=(($xfB)|0);
      var $286=(($xfD)|0);
      (function() { try { __THREW__ = false; return __ZmiRK6b2Vec2S1_($11, $285, $286) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 45; break; } else { __label__ = 30; break; }
    case 45: 
      (function() { try { __THREW__ = false; return __ZplRK6b2Vec2S1_($9, $10, $11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 46; break; } else { __label__ = 30; break; }
    case 46: 
      (function() { try { __THREW__ = false; return __Z6b2MulTRK5b2RotRK6b2Vec2($pB, $281, $9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 47; break; } else { __label__ = 30; break; }
    case 47: 
      (function() { try { __THREW__ = false; return __ZmiRK6b2Vec2S1_($12, $pB, $pD) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 48; break; } else { __label__ = 30; break; }
    case 48: 
      var $291=(($13+132)|0);
      var $292 = (function() { try { __THREW__ = false; return __Z5b2DotRK6b2Vec2S1_($12, $291) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 49; break; } else { __label__ = 30; break; }
    case 49: 
      $coordinateB=$292;
      __label__ = 50; break;
    case 50: 
      var $295=$2;
      var $296=(($295+28)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=(($13+152)|0);
      HEAPF32[(($298)>>2)]=$297;
      var $299=$coordinateA;
      var $300=(($13+152)|0);
      var $301=HEAPF32[(($300)>>2)];
      var $302=$coordinateB;
      var $303=$301*$302;
      var $304=$299+$303;
      var $305=(($13+148)|0);
      HEAPF32[(($305)>>2)]=$304;
      var $306=(($13+156)|0);
      HEAPF32[(($306)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $309=$3;
      var $310=$3;
      var $311=$4;
      var $312=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $310, tempValue);
      var $313=($312.f1 = $311, $312);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 53: 
      var $315=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 216; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $cC=__stackBase__+32;
      var $aC;
      var $vC=__stackBase__+40;
      var $wC;
      var $cD=__stackBase__+48;
      var $aD;
      var $vD=__stackBase__+56;
      var $wD;
      var $qA=__stackBase__+64;
      var $qB=__stackBase__+72;
      var $qC=__stackBase__+80;
      var $qD=__stackBase__+88;
      var $u=__stackBase__+96;
      var $rC=__stackBase__+104;
      var $3=__stackBase__+112;
      var $rA=__stackBase__+120;
      var $4=__stackBase__+128;
      var $u1=__stackBase__+136;
      var $rD=__stackBase__+144;
      var $5=__stackBase__+152;
      var $rB=__stackBase__+160;
      var $6=__stackBase__+168;
      var $7=__stackBase__+176;
      var $8=__stackBase__+184;
      var $9=__stackBase__+192;
      var $10=__stackBase__+200;
      var $11=__stackBase__+208;
      $1=$this;
      $2=$data;
      var $12=$1;
      var $13=$12;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12+160)|0);
      HEAP32[(($18)>>2)]=$17;
      var $19=$12;
      var $20=(($19+52)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($12+164)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($12+84)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($12+168)|0);
      HEAP32[(($29)>>2)]=$28;
      var $30=(($12+88)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($12+172)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=(($12+176)|0);
      var $36=$12;
      var $37=(($36+48)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+28)|0);
      var $40=(($39)|0);
      var $41=$35;
      var $42=$40;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[(($41+4)>>2)]=HEAP32[(($42+4)>>2)];
      var $43=(($12+184)|0);
      var $44=$12;
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+28)|0);
      var $48=(($47)|0);
      var $49=$43;
      var $50=$48;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[(($49+4)>>2)]=HEAP32[(($50+4)>>2)];
      var $51=(($12+192)|0);
      var $52=(($12+84)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+28)|0);
      var $55=(($54)|0);
      var $56=$51;
      var $57=$55;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[(($56+4)>>2)]=HEAP32[(($57+4)>>2)];
      var $58=(($12+200)|0);
      var $59=(($12+88)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+28)|0);
      var $62=(($61)|0);
      var $63=$58;
      var $64=$62;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[(($63+4)>>2)]=HEAP32[(($64+4)>>2)];
      var $65=$12;
      var $66=(($65+48)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+120)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=(($12+208)|0);
      HEAPF32[(($70)>>2)]=$69;
      var $71=$12;
      var $72=(($71+52)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+120)|0);
      var $75=HEAPF32[(($74)>>2)];
      var $76=(($12+212)|0);
      HEAPF32[(($76)>>2)]=$75;
      var $77=(($12+84)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+120)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=(($12+216)|0);
      HEAPF32[(($81)>>2)]=$80;
      var $82=(($12+88)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+120)|0);
      var $85=HEAPF32[(($84)>>2)];
      var $86=(($12+220)|0);
      HEAPF32[(($86)>>2)]=$85;
      var $87=$12;
      var $88=(($87+48)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+128)|0);
      var $91=HEAPF32[(($90)>>2)];
      var $92=(($12+224)|0);
      HEAPF32[(($92)>>2)]=$91;
      var $93=$12;
      var $94=(($93+52)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+128)|0);
      var $97=HEAPF32[(($96)>>2)];
      var $98=(($12+228)|0);
      HEAPF32[(($98)>>2)]=$97;
      var $99=(($12+84)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+128)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=(($12+232)|0);
      HEAPF32[(($103)>>2)]=$102;
      var $104=(($12+88)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+128)|0);
      var $107=HEAPF32[(($106)>>2)];
      var $108=(($12+236)|0);
      HEAPF32[(($108)>>2)]=$107;
      var $109=(($12+160)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$2;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+$110*12)|0);
      var $115=(($114)|0);
      var $116=$cA;
      var $117=$115;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[(($116+4)>>2)]=HEAP32[(($117+4)>>2)];
      var $118=(($12+160)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$2;
      var $121=(($120+24)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+$119*12)|0);
      var $124=(($123+8)|0);
      var $125=HEAPF32[(($124)>>2)];
      $aA=$125;
      var $126=(($12+160)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$2;
      var $129=(($128+28)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+$127*12)|0);
      var $132=(($131)|0);
      var $133=$vA;
      var $134=$132;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[(($133+4)>>2)]=HEAP32[(($134+4)>>2)];
      var $135=(($12+160)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$2;
      var $138=(($137+28)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+$136*12)|0);
      var $141=(($140+8)|0);
      var $142=HEAPF32[(($141)>>2)];
      $wA=$142;
      var $143=(($12+164)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$2;
      var $146=(($145+24)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+$144*12)|0);
      var $149=(($148)|0);
      var $150=$cB;
      var $151=$149;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];HEAP32[(($150+4)>>2)]=HEAP32[(($151+4)>>2)];
      var $152=(($12+164)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$2;
      var $155=(($154+24)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+$153*12)|0);
      var $158=(($157+8)|0);
      var $159=HEAPF32[(($158)>>2)];
      $aB=$159;
      var $160=(($12+164)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$2;
      var $163=(($162+28)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+$161*12)|0);
      var $166=(($165)|0);
      var $167=$vB;
      var $168=$166;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($167)>>2)]=HEAP32[(($168)>>2)];HEAP32[(($167+4)>>2)]=HEAP32[(($168+4)>>2)];
      var $169=(($12+164)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$2;
      var $172=(($171+28)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173+$170*12)|0);
      var $175=(($174+8)|0);
      var $176=HEAPF32[(($175)>>2)];
      $wB=$176;
      var $177=(($12+168)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$2;
      var $180=(($179+24)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+$178*12)|0);
      var $183=(($182)|0);
      var $184=$cC;
      var $185=$183;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($184)>>2)]=HEAP32[(($185)>>2)];HEAP32[(($184+4)>>2)]=HEAP32[(($185+4)>>2)];
      var $186=(($12+168)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=$2;
      var $189=(($188+24)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190+$187*12)|0);
      var $192=(($191+8)|0);
      var $193=HEAPF32[(($192)>>2)];
      $aC=$193;
      var $194=(($12+168)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=$2;
      var $197=(($196+28)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+$195*12)|0);
      var $200=(($199)|0);
      var $201=$vC;
      var $202=$200;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($201)>>2)]=HEAP32[(($202)>>2)];HEAP32[(($201+4)>>2)]=HEAP32[(($202+4)>>2)];
      var $203=(($12+168)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$2;
      var $206=(($205+28)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($207+$204*12)|0);
      var $209=(($208+8)|0);
      var $210=HEAPF32[(($209)>>2)];
      $wC=$210;
      var $211=(($12+172)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$2;
      var $214=(($213+24)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($215+$212*12)|0);
      var $217=(($216)|0);
      var $218=$cD;
      var $219=$217;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($218)>>2)]=HEAP32[(($219)>>2)];HEAP32[(($218+4)>>2)]=HEAP32[(($219+4)>>2)];
      var $220=(($12+172)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$2;
      var $223=(($222+24)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=(($224+$221*12)|0);
      var $226=(($225+8)|0);
      var $227=HEAPF32[(($226)>>2)];
      $aD=$227;
      var $228=(($12+172)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=$2;
      var $231=(($230+28)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=(($232+$229*12)|0);
      var $234=(($233)|0);
      var $235=$vD;
      var $236=$234;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($235)>>2)]=HEAP32[(($236)>>2)];HEAP32[(($235+4)>>2)]=HEAP32[(($236+4)>>2)];
      var $237=(($12+172)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$2;
      var $240=(($239+28)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241+$238*12)|0);
      var $243=(($242+8)|0);
      var $244=HEAPF32[(($243)>>2)];
      $wD=$244;
      var $245=$aA;
      __ZN5b2RotC1Ef($qA, $245);
      var $246=$aB;
      __ZN5b2RotC1Ef($qB, $246);
      var $247=$aC;
      __ZN5b2RotC1Ef($qC, $247);
      var $248=$aD;
      __ZN5b2RotC1Ef($qD, $248);
      var $249=(($12+272)|0);
      HEAPF32[(($249)>>2)]=0;
      var $250=(($12+76)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251)|0)==1;
      if ($252) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $254=(($12+240)|0);
      __ZN6b2Vec27SetZeroEv($254);
      var $255=(($12+256)|0);
      HEAPF32[(($255)>>2)]=1;
      var $256=(($12+264)|0);
      HEAPF32[(($256)>>2)]=1;
      var $257=(($12+224)|0);
      var $258=HEAPF32[(($257)>>2)];
      var $259=(($12+232)|0);
      var $260=HEAPF32[(($259)>>2)];
      var $261=$258+$260;
      var $262=(($12+272)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=$263+$261;
      HEAPF32[(($262)>>2)]=$264;
      __label__ = 4; break;
    case 3: 
      var $266=(($12+124)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u, $qC, $266);
      var $267=(($12+108)|0);
      var $268=(($12+192)|0);
      __ZmiRK6b2Vec2S1_($3, $267, $268);
      __Z5b2MulRK5b2RotRK6b2Vec2($rC, $qC, $3);
      var $269=(($12+92)|0);
      var $270=(($12+176)|0);
      __ZmiRK6b2Vec2S1_($4, $269, $270);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $4);
      var $271=(($12+240)|0);
      var $272=$271;
      var $273=$u;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($272)>>2)]=HEAP32[(($273)>>2)];HEAP32[(($272+4)>>2)]=HEAP32[(($273+4)>>2)];
      var $274=__Z7b2CrossRK6b2Vec2S1_($rC, $u);
      var $275=(($12+264)|0);
      HEAPF32[(($275)>>2)]=$274;
      var $276=__Z7b2CrossRK6b2Vec2S1_($rA, $u);
      var $277=(($12+256)|0);
      HEAPF32[(($277)>>2)]=$276;
      var $278=(($12+216)|0);
      var $279=HEAPF32[(($278)>>2)];
      var $280=(($12+208)|0);
      var $281=HEAPF32[(($280)>>2)];
      var $282=$279+$281;
      var $283=(($12+232)|0);
      var $284=HEAPF32[(($283)>>2)];
      var $285=(($12+264)|0);
      var $286=HEAPF32[(($285)>>2)];
      var $287=$284*$286;
      var $288=(($12+264)|0);
      var $289=HEAPF32[(($288)>>2)];
      var $290=$287*$289;
      var $291=$282+$290;
      var $292=(($12+224)|0);
      var $293=HEAPF32[(($292)>>2)];
      var $294=(($12+256)|0);
      var $295=HEAPF32[(($294)>>2)];
      var $296=$293*$295;
      var $297=(($12+256)|0);
      var $298=HEAPF32[(($297)>>2)];
      var $299=$296*$298;
      var $300=$291+$299;
      var $301=(($12+272)|0);
      var $302=HEAPF32[(($301)>>2)];
      var $303=$302+$300;
      HEAPF32[(($301)>>2)]=$303;
      __label__ = 4; break;
    case 4: 
      var $305=(($12+80)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306)|0)==1;
      if ($307) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $309=(($12+248)|0);
      __ZN6b2Vec27SetZeroEv($309);
      var $310=(($12+152)|0);
      var $311=HEAPF32[(($310)>>2)];
      var $312=(($12+260)|0);
      HEAPF32[(($312)>>2)]=$311;
      var $313=(($12+152)|0);
      var $314=HEAPF32[(($313)>>2)];
      var $315=(($12+268)|0);
      HEAPF32[(($315)>>2)]=$314;
      var $316=(($12+152)|0);
      var $317=HEAPF32[(($316)>>2)];
      var $318=(($12+152)|0);
      var $319=HEAPF32[(($318)>>2)];
      var $320=$317*$319;
      var $321=(($12+228)|0);
      var $322=HEAPF32[(($321)>>2)];
      var $323=(($12+236)|0);
      var $324=HEAPF32[(($323)>>2)];
      var $325=$322+$324;
      var $326=$320*$325;
      var $327=(($12+272)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=$328+$326;
      HEAPF32[(($327)>>2)]=$329;
      __label__ = 7; break;
    case 6: 
      var $331=(($12+132)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u1, $qD, $331);
      var $332=(($12+116)|0);
      var $333=(($12+200)|0);
      __ZmiRK6b2Vec2S1_($5, $332, $333);
      __Z5b2MulRK5b2RotRK6b2Vec2($rD, $qD, $5);
      var $334=(($12+100)|0);
      var $335=(($12+184)|0);
      __ZmiRK6b2Vec2S1_($6, $334, $335);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $6);
      var $336=(($12+248)|0);
      var $337=(($12+152)|0);
      var $338=HEAPF32[(($337)>>2)];
      __ZmlfRK6b2Vec2($7, $338, $u1);
      var $339=$336;
      var $340=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($339)>>2)]=HEAP32[(($340)>>2)];HEAP32[(($339+4)>>2)]=HEAP32[(($340+4)>>2)];
      var $341=(($12+152)|0);
      var $342=HEAPF32[(($341)>>2)];
      var $343=__Z7b2CrossRK6b2Vec2S1_($rD, $u1);
      var $344=$342*$343;
      var $345=(($12+268)|0);
      HEAPF32[(($345)>>2)]=$344;
      var $346=(($12+152)|0);
      var $347=HEAPF32[(($346)>>2)];
      var $348=__Z7b2CrossRK6b2Vec2S1_($rB, $u1);
      var $349=$347*$348;
      var $350=(($12+260)|0);
      HEAPF32[(($350)>>2)]=$349;
      var $351=(($12+152)|0);
      var $352=HEAPF32[(($351)>>2)];
      var $353=(($12+152)|0);
      var $354=HEAPF32[(($353)>>2)];
      var $355=$352*$354;
      var $356=(($12+220)|0);
      var $357=HEAPF32[(($356)>>2)];
      var $358=(($12+212)|0);
      var $359=HEAPF32[(($358)>>2)];
      var $360=$357+$359;
      var $361=$355*$360;
      var $362=(($12+236)|0);
      var $363=HEAPF32[(($362)>>2)];
      var $364=(($12+268)|0);
      var $365=HEAPF32[(($364)>>2)];
      var $366=$363*$365;
      var $367=(($12+268)|0);
      var $368=HEAPF32[(($367)>>2)];
      var $369=$366*$368;
      var $370=$361+$369;
      var $371=(($12+228)|0);
      var $372=HEAPF32[(($371)>>2)];
      var $373=(($12+260)|0);
      var $374=HEAPF32[(($373)>>2)];
      var $375=$372*$374;
      var $376=(($12+260)|0);
      var $377=HEAPF32[(($376)>>2)];
      var $378=$375*$377;
      var $379=$370+$378;
      var $380=(($12+272)|0);
      var $381=HEAPF32[(($380)>>2)];
      var $382=$381+$379;
      HEAPF32[(($380)>>2)]=$382;
      __label__ = 7; break;
    case 7: 
      var $384=(($12+272)|0);
      var $385=HEAPF32[(($384)>>2)];
      var $386=$385 > 0;
      if ($386) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $388=(($12+272)|0);
      var $389=HEAPF32[(($388)>>2)];
      var $390=1/$389;
      var $393 = $390;__label__ = 10; break;
    case 9: 
      var $393 = 0;__label__ = 10; break;
    case 10: 
      var $393;
      var $394=(($12+272)|0);
      HEAPF32[(($394)>>2)]=$393;
      var $395=$2;
      var $396=(($395)|0);
      var $397=(($396+20)|0);
      var $398=HEAP8[($397)];
      var $399=(($398) & 1);
      if ($399) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $401=(($12+208)|0);
      var $402=HEAPF32[(($401)>>2)];
      var $403=(($12+156)|0);
      var $404=HEAPF32[(($403)>>2)];
      var $405=$402*$404;
      var $406=(($12+240)|0);
      __ZmlfRK6b2Vec2($8, $405, $406);
      __ZN6b2Vec2pLERKS_($vA, $8);
      var $407=(($12+224)|0);
      var $408=HEAPF32[(($407)>>2)];
      var $409=(($12+156)|0);
      var $410=HEAPF32[(($409)>>2)];
      var $411=$408*$410;
      var $412=(($12+256)|0);
      var $413=HEAPF32[(($412)>>2)];
      var $414=$411*$413;
      var $415=$wA;
      var $416=$415+$414;
      $wA=$416;
      var $417=(($12+212)|0);
      var $418=HEAPF32[(($417)>>2)];
      var $419=(($12+156)|0);
      var $420=HEAPF32[(($419)>>2)];
      var $421=$418*$420;
      var $422=(($12+248)|0);
      __ZmlfRK6b2Vec2($9, $421, $422);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $423=(($12+228)|0);
      var $424=HEAPF32[(($423)>>2)];
      var $425=(($12+156)|0);
      var $426=HEAPF32[(($425)>>2)];
      var $427=$424*$426;
      var $428=(($12+260)|0);
      var $429=HEAPF32[(($428)>>2)];
      var $430=$427*$429;
      var $431=$wB;
      var $432=$431+$430;
      $wB=$432;
      var $433=(($12+216)|0);
      var $434=HEAPF32[(($433)>>2)];
      var $435=(($12+156)|0);
      var $436=HEAPF32[(($435)>>2)];
      var $437=$434*$436;
      var $438=(($12+240)|0);
      __ZmlfRK6b2Vec2($10, $437, $438);
      __ZN6b2Vec2mIERKS_($vC, $10);
      var $439=(($12+232)|0);
      var $440=HEAPF32[(($439)>>2)];
      var $441=(($12+156)|0);
      var $442=HEAPF32[(($441)>>2)];
      var $443=$440*$442;
      var $444=(($12+264)|0);
      var $445=HEAPF32[(($444)>>2)];
      var $446=$443*$445;
      var $447=$wC;
      var $448=$447-$446;
      $wC=$448;
      var $449=(($12+220)|0);
      var $450=HEAPF32[(($449)>>2)];
      var $451=(($12+156)|0);
      var $452=HEAPF32[(($451)>>2)];
      var $453=$450*$452;
      var $454=(($12+248)|0);
      __ZmlfRK6b2Vec2($11, $453, $454);
      __ZN6b2Vec2mIERKS_($vD, $11);
      var $455=(($12+236)|0);
      var $456=HEAPF32[(($455)>>2)];
      var $457=(($12+156)|0);
      var $458=HEAPF32[(($457)>>2)];
      var $459=$456*$458;
      var $460=(($12+268)|0);
      var $461=HEAPF32[(($460)>>2)];
      var $462=$459*$461;
      var $463=$wD;
      var $464=$463-$462;
      $wD=$464;
      __label__ = 13; break;
    case 12: 
      var $466=(($12+156)|0);
      HEAPF32[(($466)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $468=(($12+160)|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=$2;
      var $471=(($470+28)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=(($472+$469*12)|0);
      var $474=(($473)|0);
      var $475=$474;
      var $476=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($475)>>2)]=HEAP32[(($476)>>2)];HEAP32[(($475+4)>>2)]=HEAP32[(($476+4)>>2)];
      var $477=$wA;
      var $478=(($12+160)|0);
      var $479=HEAP32[(($478)>>2)];
      var $480=$2;
      var $481=(($480+28)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=(($482+$479*12)|0);
      var $484=(($483+8)|0);
      HEAPF32[(($484)>>2)]=$477;
      var $485=(($12+164)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=$2;
      var $488=(($487+28)|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=(($489+$486*12)|0);
      var $491=(($490)|0);
      var $492=$491;
      var $493=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($492)>>2)]=HEAP32[(($493)>>2)];HEAP32[(($492+4)>>2)]=HEAP32[(($493+4)>>2)];
      var $494=$wB;
      var $495=(($12+164)|0);
      var $496=HEAP32[(($495)>>2)];
      var $497=$2;
      var $498=(($497+28)|0);
      var $499=HEAP32[(($498)>>2)];
      var $500=(($499+$496*12)|0);
      var $501=(($500+8)|0);
      HEAPF32[(($501)>>2)]=$494;
      var $502=(($12+168)|0);
      var $503=HEAP32[(($502)>>2)];
      var $504=$2;
      var $505=(($504+28)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=(($506+$503*12)|0);
      var $508=(($507)|0);
      var $509=$508;
      var $510=$vC;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($509)>>2)]=HEAP32[(($510)>>2)];HEAP32[(($509+4)>>2)]=HEAP32[(($510+4)>>2)];
      var $511=$wC;
      var $512=(($12+168)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=$2;
      var $515=(($514+28)|0);
      var $516=HEAP32[(($515)>>2)];
      var $517=(($516+$513*12)|0);
      var $518=(($517+8)|0);
      HEAPF32[(($518)>>2)]=$511;
      var $519=(($12+172)|0);
      var $520=HEAP32[(($519)>>2)];
      var $521=$2;
      var $522=(($521+28)|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=(($523+$520*12)|0);
      var $525=(($524)|0);
      var $526=$525;
      var $527=$vD;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($526)>>2)]=HEAP32[(($527)>>2)];HEAP32[(($526+4)>>2)]=HEAP32[(($527+4)>>2)];
      var $528=$wD;
      var $529=(($12+172)|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=$2;
      var $532=(($531+28)|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=(($533+$530*12)|0);
      var $535=(($534+8)|0);
      HEAPF32[(($535)>>2)]=$528;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $vA=__stackBase__;
  var $wA;
  var $vB=__stackBase__+8;
  var $wB;
  var $vC=__stackBase__+16;
  var $wC;
  var $vD=__stackBase__+24;
  var $wD;
  var $Cdot;
  var $3=__stackBase__+32;
  var $4=__stackBase__+40;
  var $impulse;
  var $5=__stackBase__+48;
  var $6=__stackBase__+56;
  var $7=__stackBase__+64;
  var $8=__stackBase__+72;
  $1=$this;
  $2=$data;
  var $9=$1;
  var $10=(($9+160)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$2;
  var $13=(($12+28)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14+$11*12)|0);
  var $16=(($15)|0);
  var $17=$vA;
  var $18=$16;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[(($17+4)>>2)]=HEAP32[(($18+4)>>2)];
  var $19=(($9+160)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=$2;
  var $22=(($21+28)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=(($23+$20*12)|0);
  var $25=(($24+8)|0);
  var $26=HEAPF32[(($25)>>2)];
  $wA=$26;
  var $27=(($9+164)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+28)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+$28*12)|0);
  var $33=(($32)|0);
  var $34=$vB;
  var $35=$33;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
  var $36=(($9+164)|0);
  var $37=HEAP32[(($36)>>2)];
  var $38=$2;
  var $39=(($38+28)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=(($40+$37*12)|0);
  var $42=(($41+8)|0);
  var $43=HEAPF32[(($42)>>2)];
  $wB=$43;
  var $44=(($9+168)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$2;
  var $47=(($46+28)|0);
  var $48=HEAP32[(($47)>>2)];
  var $49=(($48+$45*12)|0);
  var $50=(($49)|0);
  var $51=$vC;
  var $52=$50;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[(($51+4)>>2)]=HEAP32[(($52+4)>>2)];
  var $53=(($9+168)|0);
  var $54=HEAP32[(($53)>>2)];
  var $55=$2;
  var $56=(($55+28)|0);
  var $57=HEAP32[(($56)>>2)];
  var $58=(($57+$54*12)|0);
  var $59=(($58+8)|0);
  var $60=HEAPF32[(($59)>>2)];
  $wC=$60;
  var $61=(($9+172)|0);
  var $62=HEAP32[(($61)>>2)];
  var $63=$2;
  var $64=(($63+28)|0);
  var $65=HEAP32[(($64)>>2)];
  var $66=(($65+$62*12)|0);
  var $67=(($66)|0);
  var $68=$vD;
  var $69=$67;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($68)>>2)]=HEAP32[(($69)>>2)];HEAP32[(($68+4)>>2)]=HEAP32[(($69+4)>>2)];
  var $70=(($9+172)|0);
  var $71=HEAP32[(($70)>>2)];
  var $72=$2;
  var $73=(($72+28)|0);
  var $74=HEAP32[(($73)>>2)];
  var $75=(($74+$71*12)|0);
  var $76=(($75+8)|0);
  var $77=HEAPF32[(($76)>>2)];
  $wD=$77;
  var $78=(($9+240)|0);
  __ZmiRK6b2Vec2S1_($3, $vA, $vC);
  var $79=__Z5b2DotRK6b2Vec2S1_($78, $3);
  var $80=(($9+248)|0);
  __ZmiRK6b2Vec2S1_($4, $vB, $vD);
  var $81=__Z5b2DotRK6b2Vec2S1_($80, $4);
  var $82=$79+$81;
  $Cdot=$82;
  var $83=(($9+256)|0);
  var $84=HEAPF32[(($83)>>2)];
  var $85=$wA;
  var $86=$84*$85;
  var $87=(($9+264)|0);
  var $88=HEAPF32[(($87)>>2)];
  var $89=$wC;
  var $90=$88*$89;
  var $91=$86-$90;
  var $92=(($9+260)|0);
  var $93=HEAPF32[(($92)>>2)];
  var $94=$wB;
  var $95=$93*$94;
  var $96=(($9+268)|0);
  var $97=HEAPF32[(($96)>>2)];
  var $98=$wD;
  var $99=$97*$98;
  var $100=$95-$99;
  var $101=$91+$100;
  var $102=$Cdot;
  var $103=$102+$101;
  $Cdot=$103;
  var $104=(($9+272)|0);
  var $105=HEAPF32[(($104)>>2)];
  var $106=(-$105);
  var $107=$Cdot;
  var $108=$106*$107;
  $impulse=$108;
  var $109=$impulse;
  var $110=(($9+156)|0);
  var $111=HEAPF32[(($110)>>2)];
  var $112=$111+$109;
  HEAPF32[(($110)>>2)]=$112;
  var $113=(($9+208)|0);
  var $114=HEAPF32[(($113)>>2)];
  var $115=$impulse;
  var $116=$114*$115;
  var $117=(($9+240)|0);
  __ZmlfRK6b2Vec2($5, $116, $117);
  __ZN6b2Vec2pLERKS_($vA, $5);
  var $118=(($9+224)|0);
  var $119=HEAPF32[(($118)>>2)];
  var $120=$impulse;
  var $121=$119*$120;
  var $122=(($9+256)|0);
  var $123=HEAPF32[(($122)>>2)];
  var $124=$121*$123;
  var $125=$wA;
  var $126=$125+$124;
  $wA=$126;
  var $127=(($9+212)|0);
  var $128=HEAPF32[(($127)>>2)];
  var $129=$impulse;
  var $130=$128*$129;
  var $131=(($9+248)|0);
  __ZmlfRK6b2Vec2($6, $130, $131);
  __ZN6b2Vec2pLERKS_($vB, $6);
  var $132=(($9+228)|0);
  var $133=HEAPF32[(($132)>>2)];
  var $134=$impulse;
  var $135=$133*$134;
  var $136=(($9+260)|0);
  var $137=HEAPF32[(($136)>>2)];
  var $138=$135*$137;
  var $139=$wB;
  var $140=$139+$138;
  $wB=$140;
  var $141=(($9+216)|0);
  var $142=HEAPF32[(($141)>>2)];
  var $143=$impulse;
  var $144=$142*$143;
  var $145=(($9+240)|0);
  __ZmlfRK6b2Vec2($7, $144, $145);
  __ZN6b2Vec2mIERKS_($vC, $7);
  var $146=(($9+232)|0);
  var $147=HEAPF32[(($146)>>2)];
  var $148=$impulse;
  var $149=$147*$148;
  var $150=(($9+264)|0);
  var $151=HEAPF32[(($150)>>2)];
  var $152=$149*$151;
  var $153=$wC;
  var $154=$153-$152;
  $wC=$154;
  var $155=(($9+220)|0);
  var $156=HEAPF32[(($155)>>2)];
  var $157=$impulse;
  var $158=$156*$157;
  var $159=(($9+248)|0);
  __ZmlfRK6b2Vec2($8, $158, $159);
  __ZN6b2Vec2mIERKS_($vD, $8);
  var $160=(($9+236)|0);
  var $161=HEAPF32[(($160)>>2)];
  var $162=$impulse;
  var $163=$161*$162;
  var $164=(($9+268)|0);
  var $165=HEAPF32[(($164)>>2)];
  var $166=$163*$165;
  var $167=$wD;
  var $168=$167-$166;
  $wD=$168;
  var $169=(($9+160)|0);
  var $170=HEAP32[(($169)>>2)];
  var $171=$2;
  var $172=(($171+28)|0);
  var $173=HEAP32[(($172)>>2)];
  var $174=(($173+$170*12)|0);
  var $175=(($174)|0);
  var $176=$175;
  var $177=$vA;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[(($176+4)>>2)]=HEAP32[(($177+4)>>2)];
  var $178=$wA;
  var $179=(($9+160)|0);
  var $180=HEAP32[(($179)>>2)];
  var $181=$2;
  var $182=(($181+28)|0);
  var $183=HEAP32[(($182)>>2)];
  var $184=(($183+$180*12)|0);
  var $185=(($184+8)|0);
  HEAPF32[(($185)>>2)]=$178;
  var $186=(($9+164)|0);
  var $187=HEAP32[(($186)>>2)];
  var $188=$2;
  var $189=(($188+28)|0);
  var $190=HEAP32[(($189)>>2)];
  var $191=(($190+$187*12)|0);
  var $192=(($191)|0);
  var $193=$192;
  var $194=$vB;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($193)>>2)]=HEAP32[(($194)>>2)];HEAP32[(($193+4)>>2)]=HEAP32[(($194+4)>>2)];
  var $195=$wB;
  var $196=(($9+164)|0);
  var $197=HEAP32[(($196)>>2)];
  var $198=$2;
  var $199=(($198+28)|0);
  var $200=HEAP32[(($199)>>2)];
  var $201=(($200+$197*12)|0);
  var $202=(($201+8)|0);
  HEAPF32[(($202)>>2)]=$195;
  var $203=(($9+168)|0);
  var $204=HEAP32[(($203)>>2)];
  var $205=$2;
  var $206=(($205+28)|0);
  var $207=HEAP32[(($206)>>2)];
  var $208=(($207+$204*12)|0);
  var $209=(($208)|0);
  var $210=$209;
  var $211=$vC;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($210)>>2)]=HEAP32[(($211)>>2)];HEAP32[(($210+4)>>2)]=HEAP32[(($211+4)>>2)];
  var $212=$wC;
  var $213=(($9+168)|0);
  var $214=HEAP32[(($213)>>2)];
  var $215=$2;
  var $216=(($215+28)|0);
  var $217=HEAP32[(($216)>>2)];
  var $218=(($217+$214*12)|0);
  var $219=(($218+8)|0);
  HEAPF32[(($219)>>2)]=$212;
  var $220=(($9+172)|0);
  var $221=HEAP32[(($220)>>2)];
  var $222=$2;
  var $223=(($222+28)|0);
  var $224=HEAP32[(($223)>>2)];
  var $225=(($224+$221*12)|0);
  var $226=(($225)|0);
  var $227=$226;
  var $228=$vD;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($227)>>2)]=HEAP32[(($228)>>2)];HEAP32[(($227+4)>>2)]=HEAP32[(($228+4)>>2)];
  var $229=$wD;
  var $230=(($9+172)|0);
  var $231=HEAP32[(($230)>>2)];
  var $232=$2;
  var $233=(($232+28)|0);
  var $234=HEAP32[(($233)>>2)];
  var $235=(($234+$231*12)|0);
  var $236=(($235+8)|0);
  HEAPF32[(($236)>>2)]=$229;
  STACKTOP = __stackBase__;
  return;
}


function __ZNK11b2GearJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  var $L;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+156)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3+256)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=$5*$7;
  $L=$8;
  var $9=$2;
  var $10=$L;
  var $11=$9*$10;
  ;
  return $11;
}


function __ZNK11b2GearJoint8GetRatioEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+152)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 280; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=__stackBase__+8;
      var $aB;
      var $cC=__stackBase__+16;
      var $aC;
      var $cD=__stackBase__+24;
      var $aD;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $qC=__stackBase__+48;
      var $qD=__stackBase__+56;
      var $linearError;
      var $coordinateA;
      var $coordinateB;
      var $JvAC=__stackBase__+64;
      var $JvBD=__stackBase__+72;
      var $JwA;
      var $JwB;
      var $JwC;
      var $JwD;
      var $mass;
      var $u=__stackBase__+80;
      var $rC=__stackBase__+88;
      var $3=__stackBase__+96;
      var $rA=__stackBase__+104;
      var $4=__stackBase__+112;
      var $pC=__stackBase__+120;
      var $pA=__stackBase__+128;
      var $5=__stackBase__+136;
      var $6=__stackBase__+144;
      var $7=__stackBase__+152;
      var $u1=__stackBase__+160;
      var $rD=__stackBase__+168;
      var $8=__stackBase__+176;
      var $rB=__stackBase__+184;
      var $9=__stackBase__+192;
      var $10=__stackBase__+200;
      var $pD=__stackBase__+208;
      var $pB=__stackBase__+216;
      var $11=__stackBase__+224;
      var $12=__stackBase__+232;
      var $13=__stackBase__+240;
      var $C;
      var $impulse;
      var $14=__stackBase__+248;
      var $15=__stackBase__+256;
      var $16=__stackBase__+264;
      var $17=__stackBase__+272;
      $1=$this;
      $2=$data;
      var $18=$1;
      var $19=(($18+160)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+$20*12)|0);
      var $25=(($24)|0);
      var $26=$cA;
      var $27=$25;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[(($26+4)>>2)]=HEAP32[(($27+4)>>2)];
      var $28=(($18+160)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29*12)|0);
      var $34=(($33+8)|0);
      var $35=HEAPF32[(($34)>>2)];
      $aA=$35;
      var $36=(($18+164)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$2;
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$37*12)|0);
      var $42=(($41)|0);
      var $43=$cB;
      var $44=$42;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[(($43+4)>>2)]=HEAP32[(($44+4)>>2)];
      var $45=(($18+164)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$2;
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+$46*12)|0);
      var $51=(($50+8)|0);
      var $52=HEAPF32[(($51)>>2)];
      $aB=$52;
      var $53=(($18+168)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$2;
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+$54*12)|0);
      var $59=(($58)|0);
      var $60=$cC;
      var $61=$59;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[(($60+4)>>2)]=HEAP32[(($61+4)>>2)];
      var $62=(($18+168)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+$63*12)|0);
      var $68=(($67+8)|0);
      var $69=HEAPF32[(($68)>>2)];
      $aC=$69;
      var $70=(($18+172)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$2;
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+$71*12)|0);
      var $76=(($75)|0);
      var $77=$cD;
      var $78=$76;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[(($77+4)>>2)]=HEAP32[(($78+4)>>2)];
      var $79=(($18+172)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+$80*12)|0);
      var $85=(($84+8)|0);
      var $86=HEAPF32[(($85)>>2)];
      $aD=$86;
      var $87=$aA;
      __ZN5b2RotC1Ef($qA, $87);
      var $88=$aB;
      __ZN5b2RotC1Ef($qB, $88);
      var $89=$aC;
      __ZN5b2RotC1Ef($qC, $89);
      var $90=$aD;
      __ZN5b2RotC1Ef($qD, $90);
      $linearError=0;
      __ZN6b2Vec2C1Ev($JvAC);
      __ZN6b2Vec2C1Ev($JvBD);
      $mass=0;
      var $91=(($18+76)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0)==1;
      if ($93) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __ZN6b2Vec27SetZeroEv($JvAC);
      $JwA=1;
      $JwC=1;
      var $95=(($18+224)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=(($18+232)|0);
      var $98=HEAPF32[(($97)>>2)];
      var $99=$96+$98;
      var $100=$mass;
      var $101=$100+$99;
      $mass=$101;
      var $102=$aA;
      var $103=$aC;
      var $104=$102-$103;
      var $105=(($18+140)|0);
      var $106=HEAPF32[(($105)>>2)];
      var $107=$104-$106;
      $coordinateA=$107;
      __label__ = 4; break;
    case 3: 
      var $109=(($18+124)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u, $qC, $109);
      var $110=(($18+108)|0);
      var $111=(($18+192)|0);
      __ZmiRK6b2Vec2S1_($3, $110, $111);
      __Z5b2MulRK5b2RotRK6b2Vec2($rC, $qC, $3);
      var $112=(($18+92)|0);
      var $113=(($18+176)|0);
      __ZmiRK6b2Vec2S1_($4, $112, $113);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $4);
      var $114=$JvAC;
      var $115=$u;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[(($114+4)>>2)]=HEAP32[(($115+4)>>2)];
      var $116=__Z7b2CrossRK6b2Vec2S1_($rC, $u);
      $JwC=$116;
      var $117=__Z7b2CrossRK6b2Vec2S1_($rA, $u);
      $JwA=$117;
      var $118=(($18+216)|0);
      var $119=HEAPF32[(($118)>>2)];
      var $120=(($18+208)|0);
      var $121=HEAPF32[(($120)>>2)];
      var $122=$119+$121;
      var $123=(($18+232)|0);
      var $124=HEAPF32[(($123)>>2)];
      var $125=$JwC;
      var $126=$124*$125;
      var $127=$JwC;
      var $128=$126*$127;
      var $129=$122+$128;
      var $130=(($18+224)|0);
      var $131=HEAPF32[(($130)>>2)];
      var $132=$JwA;
      var $133=$131*$132;
      var $134=$JwA;
      var $135=$133*$134;
      var $136=$129+$135;
      var $137=$mass;
      var $138=$137+$136;
      $mass=$138;
      var $139=(($18+108)|0);
      var $140=(($18+192)|0);
      __ZmiRK6b2Vec2S1_($pC, $139, $140);
      __ZmiRK6b2Vec2S1_($6, $cA, $cC);
      __ZplRK6b2Vec2S1_($5, $rA, $6);
      __Z6b2MulTRK5b2RotRK6b2Vec2($pA, $qC, $5);
      __ZmiRK6b2Vec2S1_($7, $pA, $pC);
      var $141=(($18+124)|0);
      var $142=__Z5b2DotRK6b2Vec2S1_($7, $141);
      $coordinateA=$142;
      __label__ = 4; break;
    case 4: 
      var $144=(($18+80)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145)|0)==1;
      if ($146) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __ZN6b2Vec27SetZeroEv($JvBD);
      var $148=(($18+152)|0);
      var $149=HEAPF32[(($148)>>2)];
      $JwB=$149;
      var $150=(($18+152)|0);
      var $151=HEAPF32[(($150)>>2)];
      $JwD=$151;
      var $152=(($18+152)|0);
      var $153=HEAPF32[(($152)>>2)];
      var $154=(($18+152)|0);
      var $155=HEAPF32[(($154)>>2)];
      var $156=$153*$155;
      var $157=(($18+228)|0);
      var $158=HEAPF32[(($157)>>2)];
      var $159=(($18+236)|0);
      var $160=HEAPF32[(($159)>>2)];
      var $161=$158+$160;
      var $162=$156*$161;
      var $163=$mass;
      var $164=$163+$162;
      $mass=$164;
      var $165=$aB;
      var $166=$aD;
      var $167=$165-$166;
      var $168=(($18+144)|0);
      var $169=HEAPF32[(($168)>>2)];
      var $170=$167-$169;
      $coordinateB=$170;
      __label__ = 7; break;
    case 6: 
      var $172=(($18+132)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u1, $qD, $172);
      var $173=(($18+116)|0);
      var $174=(($18+200)|0);
      __ZmiRK6b2Vec2S1_($8, $173, $174);
      __Z5b2MulRK5b2RotRK6b2Vec2($rD, $qD, $8);
      var $175=(($18+100)|0);
      var $176=(($18+184)|0);
      __ZmiRK6b2Vec2S1_($9, $175, $176);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $9);
      var $177=(($18+152)|0);
      var $178=HEAPF32[(($177)>>2)];
      __ZmlfRK6b2Vec2($10, $178, $u1);
      var $179=$JvBD;
      var $180=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[(($179+4)>>2)]=HEAP32[(($180+4)>>2)];
      var $181=(($18+152)|0);
      var $182=HEAPF32[(($181)>>2)];
      var $183=__Z7b2CrossRK6b2Vec2S1_($rD, $u1);
      var $184=$182*$183;
      $JwD=$184;
      var $185=(($18+152)|0);
      var $186=HEAPF32[(($185)>>2)];
      var $187=__Z7b2CrossRK6b2Vec2S1_($rB, $u1);
      var $188=$186*$187;
      $JwB=$188;
      var $189=(($18+152)|0);
      var $190=HEAPF32[(($189)>>2)];
      var $191=(($18+152)|0);
      var $192=HEAPF32[(($191)>>2)];
      var $193=$190*$192;
      var $194=(($18+220)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=(($18+212)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=$195+$197;
      var $199=$193*$198;
      var $200=(($18+236)|0);
      var $201=HEAPF32[(($200)>>2)];
      var $202=$JwD;
      var $203=$201*$202;
      var $204=$JwD;
      var $205=$203*$204;
      var $206=$199+$205;
      var $207=(($18+228)|0);
      var $208=HEAPF32[(($207)>>2)];
      var $209=$JwB;
      var $210=$208*$209;
      var $211=$JwB;
      var $212=$210*$211;
      var $213=$206+$212;
      var $214=$mass;
      var $215=$214+$213;
      $mass=$215;
      var $216=(($18+116)|0);
      var $217=(($18+200)|0);
      __ZmiRK6b2Vec2S1_($pD, $216, $217);
      __ZmiRK6b2Vec2S1_($12, $cB, $cD);
      __ZplRK6b2Vec2S1_($11, $rB, $12);
      __Z6b2MulTRK5b2RotRK6b2Vec2($pB, $qD, $11);
      __ZmiRK6b2Vec2S1_($13, $pB, $pD);
      var $218=(($18+132)|0);
      var $219=__Z5b2DotRK6b2Vec2S1_($13, $218);
      $coordinateB=$219;
      __label__ = 7; break;
    case 7: 
      var $221=$coordinateA;
      var $222=(($18+152)|0);
      var $223=HEAPF32[(($222)>>2)];
      var $224=$coordinateB;
      var $225=$223*$224;
      var $226=$221+$225;
      var $227=(($18+148)|0);
      var $228=HEAPF32[(($227)>>2)];
      var $229=$226-$228;
      $C=$229;
      $impulse=0;
      var $230=$mass;
      var $231=$230 > 0;
      if ($231) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $233=$C;
      var $234=(-$233);
      var $235=$mass;
      var $236=$234/$235;
      $impulse=$236;
      __label__ = 9; break;
    case 9: 
      var $238=(($18+208)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=$impulse;
      var $241=$239*$240;
      __ZmlfRK6b2Vec2($14, $241, $JvAC);
      __ZN6b2Vec2pLERKS_($cA, $14);
      var $242=(($18+224)|0);
      var $243=HEAPF32[(($242)>>2)];
      var $244=$impulse;
      var $245=$243*$244;
      var $246=$JwA;
      var $247=$245*$246;
      var $248=$aA;
      var $249=$248+$247;
      $aA=$249;
      var $250=(($18+212)|0);
      var $251=HEAPF32[(($250)>>2)];
      var $252=$impulse;
      var $253=$251*$252;
      __ZmlfRK6b2Vec2($15, $253, $JvBD);
      __ZN6b2Vec2pLERKS_($cB, $15);
      var $254=(($18+228)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=$impulse;
      var $257=$255*$256;
      var $258=$JwB;
      var $259=$257*$258;
      var $260=$aB;
      var $261=$260+$259;
      $aB=$261;
      var $262=(($18+216)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=$impulse;
      var $265=$263*$264;
      __ZmlfRK6b2Vec2($16, $265, $JvAC);
      __ZN6b2Vec2mIERKS_($cC, $16);
      var $266=(($18+232)|0);
      var $267=HEAPF32[(($266)>>2)];
      var $268=$impulse;
      var $269=$267*$268;
      var $270=$JwC;
      var $271=$269*$270;
      var $272=$aC;
      var $273=$272-$271;
      $aC=$273;
      var $274=(($18+220)|0);
      var $275=HEAPF32[(($274)>>2)];
      var $276=$impulse;
      var $277=$275*$276;
      __ZmlfRK6b2Vec2($17, $277, $JvBD);
      __ZN6b2Vec2mIERKS_($cD, $17);
      var $278=(($18+236)|0);
      var $279=HEAPF32[(($278)>>2)];
      var $280=$impulse;
      var $281=$279*$280;
      var $282=$JwD;
      var $283=$281*$282;
      var $284=$aD;
      var $285=$284-$283;
      $aD=$285;
      var $286=(($18+160)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$2;
      var $289=(($288+24)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=(($290+$287*12)|0);
      var $292=(($291)|0);
      var $293=$292;
      var $294=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($293)>>2)]=HEAP32[(($294)>>2)];HEAP32[(($293+4)>>2)]=HEAP32[(($294+4)>>2)];
      var $295=$aA;
      var $296=(($18+160)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$2;
      var $299=(($298+24)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=(($300+$297*12)|0);
      var $302=(($301+8)|0);
      HEAPF32[(($302)>>2)]=$295;
      var $303=(($18+164)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=$2;
      var $306=(($305+24)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($307+$304*12)|0);
      var $309=(($308)|0);
      var $310=$309;
      var $311=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($310)>>2)]=HEAP32[(($311)>>2)];HEAP32[(($310+4)>>2)]=HEAP32[(($311+4)>>2)];
      var $312=$aB;
      var $313=(($18+164)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$2;
      var $316=(($315+24)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317+$314*12)|0);
      var $319=(($318+8)|0);
      HEAPF32[(($319)>>2)]=$312;
      var $320=(($18+168)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=$2;
      var $323=(($322+24)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324+$321*12)|0);
      var $326=(($325)|0);
      var $327=$326;
      var $328=$cC;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($327)>>2)]=HEAP32[(($328)>>2)];HEAP32[(($327+4)>>2)]=HEAP32[(($328+4)>>2)];
      var $329=$aC;
      var $330=(($18+168)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=$2;
      var $333=(($332+24)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=(($334+$331*12)|0);
      var $336=(($335+8)|0);
      HEAPF32[(($336)>>2)]=$329;
      var $337=(($18+172)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=$2;
      var $340=(($339+24)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341+$338*12)|0);
      var $343=(($342)|0);
      var $344=$343;
      var $345=$cD;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($344)>>2)]=HEAP32[(($345)>>2)];HEAP32[(($344+4)>>2)]=HEAP32[(($345+4)>>2)];
      var $346=$aD;
      var $347=(($18+172)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=$2;
      var $350=(($349+24)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=(($351+$348*12)|0);
      var $353=(($352+8)|0);
      HEAPF32[(($353)>>2)]=$346;
      var $354=$linearError;
      var $355=$354 < 0.004999999888241291;
      STACKTOP = __stackBase__;
      return $355;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK11b2GearJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+92)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK11b2GearJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+100)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK11b2GearJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+156)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3+240)|0);
  __ZmlfRK6b2Vec2($P, $5, $6);
  var $7=$2;
  __ZmlfRK6b2Vec2($agg_result, $7, $P);
  STACKTOP = __stackBase__;
  return;
}


function __ZN11b2GearJoint8SetRatioEf($this, $ratio) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$ratio;
      var $3=$1;
      var $4=$2;
      var $5=__Z9b2IsValidf($4);
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str303)|0), 398, ((STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJoint8SetRatioEf)|0), ((STRING_TABLE.__str3306)|0));
      __label__ = 4; break;
    case 4: 
      var $9=$2;
      var $10=(($3+152)|0);
      HEAPF32[(($10)>>2)]=$9;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2GearJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  var $index1;
  var $index2;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  var $13=(($2+68)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14+56)|0);
  var $16=HEAP32[(($15)>>2)];
  $index1=$16;
  var $17=(($2+72)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=(($18+56)|0);
  var $20=HEAP32[(($19)>>2)];
  $index2=$20;
  __Z5b2LogPKcz(((STRING_TABLE.__str4307)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $21=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str5308)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$21,tempInt));
  var $22=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str6309)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$22,tempInt));
  var $23=$2;
  var $24=(($23+61)|0);
  var $25=HEAP8[($24)];
  var $26=(($25) & 1);
  var $27=(($26)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str7310)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$27,tempInt));
  var $28=$index1;
  __Z5b2LogPKcz(((STRING_TABLE.__str8311)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$28,tempInt));
  var $29=$index2;
  __Z5b2LogPKcz(((STRING_TABLE.__str9312)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$29,tempInt));
  var $30=(($2+152)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$31;
  __Z5b2LogPKcz(((STRING_TABLE.__str10313)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$32,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $33=$2;
  var $34=(($33+56)|0);
  var $35=HEAP32[(($34)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str11314)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$35,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN11b2GearJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2GearJointD2Ev($2);
  ;
  return;
}


function __ZN11b2GearJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN11b2GearJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2GearJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($def, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $joint;
      var $mem;
      var $mem1;
      var $mem2;
      var $mem3;
      var $mem4;
      var $mem5;
      var $mem6;
      var $mem7;
      var $mem8;
      var $mem9;
      $1=$def;
      $2=$allocator;
      $joint=0;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      if ((($5)|0) == 3) {
        __label__ = 2; break;
      }
      else if ((($5)|0) == 5) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 2) {
        __label__ = 8; break;
      }
      else if ((($5)|0) == 1) {
        __label__ = 11; break;
      }
      else if ((($5)|0) == 4) {
        __label__ = 14; break;
      }
      else if ((($5)|0) == 6) {
        __label__ = 17; break;
      }
      else if ((($5)|0) == 7) {
        __label__ = 20; break;
      }
      else if ((($5)|0) == 8) {
        __label__ = 23; break;
      }
      else if ((($5)|0) == 9) {
        __label__ = 26; break;
      }
      else if ((($5)|0) == 10) {
        __label__ = 29; break;
      }
      else {
      __label__ = 32; break;
      }
      
    case 2: 
      var $7=$2;
      var $8=__ZN16b2BlockAllocator8AllocateEi($7, 176);
      $mem=$8;
      var $9=$mem;
      var $10=(($9)|0)==0;
      if ($10) { var $16 = 0;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $12=$9;
      var $13=$1;
      var $14=$13;
      FUNCTION_TABLE[__ZN15b2DistanceJointC1EPK18b2DistanceJointDef]($12, $14);
      var $16 = $12;__label__ = 4; break;
    case 4: 
      var $16;
      var $17=$16;
      $joint=$17;
      __label__ = 33; break;
    case 5: 
      var $19=$2;
      var $20=__ZN16b2BlockAllocator8AllocateEi($19, 168);
      $mem1=$20;
      var $21=$mem1;
      var $22=(($21)|0)==0;
      if ($22) { var $28 = 0;__label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $24=$21;
      var $25=$1;
      var $26=$25;
      FUNCTION_TABLE[__ZN12b2MouseJointC1EPK15b2MouseJointDef]($24, $26);
      var $28 = $24;__label__ = 7; break;
    case 7: 
      var $28;
      var $29=$28;
      $joint=$29;
      __label__ = 33; break;
    case 8: 
      var $31=$2;
      var $32=__ZN16b2BlockAllocator8AllocateEi($31, 256);
      $mem2=$32;
      var $33=$mem2;
      var $34=(($33)|0)==0;
      if ($34) { var $40 = 0;__label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $36=$33;
      var $37=$1;
      var $38=$37;
      FUNCTION_TABLE[__ZN16b2PrismaticJointC1EPK19b2PrismaticJointDef]($36, $38);
      var $40 = $36;__label__ = 10; break;
    case 10: 
      var $40;
      var $41=$40;
      $joint=$41;
      __label__ = 33; break;
    case 11: 
      var $43=$2;
      var $44=__ZN16b2BlockAllocator8AllocateEi($43, 228);
      $mem3=$44;
      var $45=$mem3;
      var $46=(($45)|0)==0;
      if ($46) { var $52 = 0;__label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $48=$45;
      var $49=$1;
      var $50=$49;
      FUNCTION_TABLE[__ZN15b2RevoluteJointC1EPK18b2RevoluteJointDef]($48, $50);
      var $52 = $48;__label__ = 13; break;
    case 13: 
      var $52;
      var $53=$52;
      $joint=$53;
      __label__ = 33; break;
    case 14: 
      var $55=$2;
      var $56=__ZN16b2BlockAllocator8AllocateEi($55, 196);
      $mem4=$56;
      var $57=$mem4;
      var $58=(($57)|0)==0;
      if ($58) { var $64 = 0;__label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $60=$57;
      var $61=$1;
      var $62=$61;
      FUNCTION_TABLE[__ZN13b2PulleyJointC1EPK16b2PulleyJointDef]($60, $62);
      var $64 = $60;__label__ = 16; break;
    case 16: 
      var $64;
      var $65=$64;
      $joint=$65;
      __label__ = 33; break;
    case 17: 
      var $67=$2;
      var $68=__ZN16b2BlockAllocator8AllocateEi($67, 276);
      $mem5=$68;
      var $69=$mem5;
      var $70=(($69)|0)==0;
      if ($70) { var $76 = 0;__label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $72=$69;
      var $73=$1;
      var $74=$73;
      FUNCTION_TABLE[__ZN11b2GearJointC1EPK14b2GearJointDef]($72, $74);
      var $76 = $72;__label__ = 19; break;
    case 19: 
      var $76;
      var $77=$76;
      $joint=$77;
      __label__ = 33; break;
    case 20: 
      var $79=$2;
      var $80=__ZN16b2BlockAllocator8AllocateEi($79, 224);
      $mem6=$80;
      var $81=$mem6;
      var $82=(($81)|0)==0;
      if ($82) { var $88 = 0;__label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $84=$81;
      var $85=$1;
      var $86=$85;
      FUNCTION_TABLE[__ZN12b2WheelJointC1EPK15b2WheelJointDef]($84, $86);
      var $88 = $84;__label__ = 22; break;
    case 22: 
      var $88;
      var $89=$88;
      $joint=$89;
      __label__ = 33; break;
    case 23: 
      var $91=$2;
      var $92=__ZN16b2BlockAllocator8AllocateEi($91, 208);
      $mem7=$92;
      var $93=$mem7;
      var $94=(($93)|0)==0;
      if ($94) { var $100 = 0;__label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $96=$93;
      var $97=$1;
      var $98=$97;
      FUNCTION_TABLE[__ZN11b2WeldJointC1EPK14b2WeldJointDef]($96, $98);
      var $100 = $96;__label__ = 25; break;
    case 25: 
      var $100;
      var $101=$100;
      $joint=$101;
      __label__ = 33; break;
    case 26: 
      var $103=$2;
      var $104=__ZN16b2BlockAllocator8AllocateEi($103, 180);
      $mem8=$104;
      var $105=$mem8;
      var $106=(($105)|0)==0;
      if ($106) { var $112 = 0;__label__ = 28; break; } else { __label__ = 27; break; }
    case 27: 
      var $108=$105;
      var $109=$1;
      var $110=$109;
      FUNCTION_TABLE[__ZN15b2FrictionJointC1EPK18b2FrictionJointDef]($108, $110);
      var $112 = $108;__label__ = 28; break;
    case 28: 
      var $112;
      var $113=$112;
      $joint=$113;
      __label__ = 33; break;
    case 29: 
      var $115=$2;
      var $116=__ZN16b2BlockAllocator8AllocateEi($115, 168);
      $mem9=$116;
      var $117=$mem9;
      var $118=(($117)|0)==0;
      if ($118) { var $124 = 0;__label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $120=$117;
      var $121=$1;
      var $122=$121;
      FUNCTION_TABLE[__ZN11b2RopeJointC1EPK14b2RopeJointDef]($120, $122);
      var $124 = $120;__label__ = 31; break;
    case 31: 
      var $124;
      var $125=$124;
      $joint=$125;
      __label__ = 33; break;
    case 32: 
      ___assert_func(((STRING_TABLE.__str315)|0), 113, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator)|0), ((STRING_TABLE.__str1316)|0));
      __label__ = 33; break;
    case 33: 
      var $128=$joint;
      ;
      return $128;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2MouseJoint9GetTargetEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  ;
  return $3;
}


function __ZN12b2MouseJoint11SetMaxForceEf($this, $force) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$force;
  var $3=$1;
  var $4=$2;
  var $5=(($3+104)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK12b2MouseJoint11GetMaxForceEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+104)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN12b2MouseJoint12SetFrequencyEf($this, $hz) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$hz;
  var $3=$1;
  var $4=$2;
  var $5=(($3+84)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK12b2MouseJoint12GetFrequencyEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+84)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN12b2MouseJoint15SetDampingRatioEf($this, $ratio) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$ratio;
  var $3=$1;
  var $4=$2;
  var $5=(($3+88)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK12b2MouseJoint15GetDampingRatioEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+88)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body7GetMassEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+116)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($joint, $allocator) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$joint;
      $2=$allocator;
      var $3=$1;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      FUNCTION_TABLE[$7]($3);
      var $8=$1;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      if ((($10)|0) == 3) {
        __label__ = 2; break;
      }
      else if ((($10)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($10)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($10)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($10)|0) == 4) {
        __label__ = 6; break;
      }
      else if ((($10)|0) == 6) {
        __label__ = 7; break;
      }
      else if ((($10)|0) == 7) {
        __label__ = 8; break;
      }
      else if ((($10)|0) == 8) {
        __label__ = 9; break;
      }
      else if ((($10)|0) == 9) {
        __label__ = 10; break;
      }
      else if ((($10)|0) == 10) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 2: 
      var $12=$2;
      var $13=$1;
      var $14=$13;
      __ZN16b2BlockAllocator4FreeEPvi($12, $14, 176);
      __label__ = 13; break;
    case 3: 
      var $16=$2;
      var $17=$1;
      var $18=$17;
      __ZN16b2BlockAllocator4FreeEPvi($16, $18, 168);
      __label__ = 13; break;
    case 4: 
      var $20=$2;
      var $21=$1;
      var $22=$21;
      __ZN16b2BlockAllocator4FreeEPvi($20, $22, 256);
      __label__ = 13; break;
    case 5: 
      var $24=$2;
      var $25=$1;
      var $26=$25;
      __ZN16b2BlockAllocator4FreeEPvi($24, $26, 228);
      __label__ = 13; break;
    case 6: 
      var $28=$2;
      var $29=$1;
      var $30=$29;
      __ZN16b2BlockAllocator4FreeEPvi($28, $30, 196);
      __label__ = 13; break;
    case 7: 
      var $32=$2;
      var $33=$1;
      var $34=$33;
      __ZN16b2BlockAllocator4FreeEPvi($32, $34, 276);
      __label__ = 13; break;
    case 8: 
      var $36=$2;
      var $37=$1;
      var $38=$37;
      __ZN16b2BlockAllocator4FreeEPvi($36, $38, 224);
      __label__ = 13; break;
    case 9: 
      var $40=$2;
      var $41=$1;
      var $42=$41;
      __ZN16b2BlockAllocator4FreeEPvi($40, $42, 208);
      __label__ = 13; break;
    case 10: 
      var $44=$2;
      var $45=$1;
      var $46=$45;
      __ZN16b2BlockAllocator4FreeEPvi($44, $46, 180);
      __label__ = 13; break;
    case 11: 
      var $48=$2;
      var $49=$1;
      var $50=$49;
      __ZN16b2BlockAllocator4FreeEPvi($48, $50, 168);
      __label__ = 13; break;
    case 12: 
      ___assert_func(((STRING_TABLE.__str315)|0), 166, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint7DestroyEPS_P16b2BlockAllocator)|0), ((STRING_TABLE.__str1316)|0));
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2JointC2EPK10b2JointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$def;
      var $3=$1;
      var $4=$3;
      HEAP32[(($4)>>2)]=((__ZTV7b2Joint+8)|0);
      var $5=(($3+16)|0);
      var $6=(($3+32)|0);
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)|0)!=(($12)|0);
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str315)|0), 173, ((STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef)|0), ((STRING_TABLE.__str2317)|0));
      __label__ = 4; break;
    case 4: 
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($3+4)|0);
      HEAP32[(($20)>>2)]=$19;
      var $21=(($3+8)|0);
      HEAP32[(($21)>>2)]=0;
      var $22=(($3+12)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$2;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($3+48)|0);
      HEAP32[(($26)>>2)]=$25;
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($3+52)|0);
      HEAP32[(($30)>>2)]=$29;
      var $31=(($3+56)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=$2;
      var $33=(($32+16)|0);
      var $34=HEAP8[($33)];
      var $35=(($34) & 1);
      var $36=(($3+61)|0);
      var $37=(($35)&1);
      HEAP8[($36)]=$37;
      var $38=(($3+60)|0);
      HEAP8[($38)]=0;
      var $39=$2;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($3+64)|0);
      HEAP32[(($42)>>2)]=$41;
      var $43=(($3+16)|0);
      var $44=(($43+4)|0);
      HEAP32[(($44)>>2)]=0;
      var $45=(($3+16)|0);
      var $46=(($45)|0);
      HEAP32[(($46)>>2)]=0;
      var $47=(($3+16)|0);
      var $48=(($47+8)|0);
      HEAP32[(($48)>>2)]=0;
      var $49=(($3+16)|0);
      var $50=(($49+12)|0);
      HEAP32[(($50)>>2)]=0;
      var $51=(($3+32)|0);
      var $52=(($51+4)|0);
      HEAP32[(($52)>>2)]=0;
      var $53=(($3+32)|0);
      var $54=(($53)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=(($3+32)|0);
      var $56=(($55+8)|0);
      HEAP32[(($56)>>2)]=0;
      var $57=(($3+32)|0);
      var $58=(($57+12)|0);
      HEAP32[(($58)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK7b2Joint8IsActiveEv($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2+48)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=__ZNK6b2Body8IsActiveEv($4);
      if ($5) { __label__ = 2; break; } else { var $11 = 0;__label__ = 3; break; }
    case 2: 
      var $7=(($2+52)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=__ZNK6b2Body8IsActiveEv($8);
      var $11 = $9;__label__ = 3; break;
    case 3: 
      var $11;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2Joint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __Z5b2LogPKcz(((STRING_TABLE.__str3318)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN7b2JointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2JointD2Ev($2);
  ;
  return;
}


function __ZN7b2JointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN7b2JointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2MouseJoint9SetTargetERK6b2Vec2($this, $target) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$target;
      var $3=$1;
      var $4=$3;
      var $5=(($4+52)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=__ZNK6b2Body7IsAwakeEv($6);
      var $8=(($7)&1);
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$3;
      var $12=(($11+52)|0);
      var $13=HEAP32[(($12)>>2)];
      __ZN6b2Body8SetAwakeEb($13, 1);
      __label__ = 3; break;
    case 3: 
      var $15=(($3+76)|0);
      var $16=$2;
      var $17=$15;
      var $18=$16;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[(($17+4)>>2)]=HEAP32[(($18+4)>>2)];
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 96; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cB=__stackBase__;
      var $aB;
      var $vB=__stackBase__+8;
      var $wB;
      var $qB=__stackBase__+16;
      var $mass;
      var $omega;
      var $d;
      var $k;
      var $h;
      var $3=__stackBase__+24;
      var $4=__stackBase__+32;
      var $K=__stackBase__+40;
      var $5=__stackBase__+56;
      var $6=__stackBase__+72;
      var $7=__stackBase__+80;
      var $8=__stackBase__+88;
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=$9;
      var $11=(($10+52)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($9+116)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=(($9+128)|0);
      var $17=$9;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+28)|0);
      var $21=(($20)|0);
      var $22=$16;
      var $23=$21;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[(($22+4)>>2)]=HEAP32[(($23+4)>>2)];
      var $24=$9;
      var $25=(($24+52)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+120)|0);
      var $28=HEAPF32[(($27)>>2)];
      var $29=(($9+136)|0);
      HEAPF32[(($29)>>2)]=$28;
      var $30=$9;
      var $31=(($30+52)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+128)|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=(($9+140)|0);
      HEAPF32[(($35)>>2)]=$34;
      var $36=(($9+116)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$2;
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$37*12)|0);
      var $42=(($41)|0);
      var $43=$cB;
      var $44=$42;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[(($43+4)>>2)]=HEAP32[(($44+4)>>2)];
      var $45=(($9+116)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$2;
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+$46*12)|0);
      var $51=(($50+8)|0);
      var $52=HEAPF32[(($51)>>2)];
      $aB=$52;
      var $53=(($9+116)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$2;
      var $56=(($55+28)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+$54*12)|0);
      var $59=(($58)|0);
      var $60=$vB;
      var $61=$59;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[(($60+4)>>2)]=HEAP32[(($61+4)>>2)];
      var $62=(($9+116)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+28)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+$63*12)|0);
      var $68=(($67+8)|0);
      var $69=HEAPF32[(($68)>>2)];
      $wB=$69;
      var $70=$aB;
      __ZN5b2RotC1Ef($qB, $70);
      var $71=$9;
      var $72=(($71+52)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=__ZNK6b2Body7GetMassEv($73);
      $mass=$74;
      var $75=(($9+84)|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=$76*6.2831854820251465;
      $omega=$77;
      var $78=$mass;
      var $79=$78*2;
      var $80=(($9+88)|0);
      var $81=HEAPF32[(($80)>>2)];
      var $82=$79*$81;
      var $83=$omega;
      var $84=$82*$83;
      $d=$84;
      var $85=$mass;
      var $86=$omega;
      var $87=$omega;
      var $88=$86*$87;
      var $89=$85*$88;
      $k=$89;
      var $90=$2;
      var $91=(($90)|0);
      var $92=(($91)|0);
      var $93=HEAPF32[(($92)>>2)];
      $h=$93;
      var $94=$d;
      var $95=$h;
      var $96=$k;
      var $97=$95*$96;
      var $98=$94+$97;
      var $99=$98 > 1.1920928955078125e-7;
      if ($99) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str325)|0), 125, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData)|0), ((STRING_TABLE.__str5330)|0));
      __label__ = 4; break;
    case 4: 
      var $103=$h;
      var $104=$d;
      var $105=$h;
      var $106=$k;
      var $107=$105*$106;
      var $108=$104+$107;
      var $109=$103*$108;
      var $110=(($9+108)|0);
      HEAPF32[(($110)>>2)]=$109;
      var $111=(($9+108)|0);
      var $112=HEAPF32[(($111)>>2)];
      var $113=$112 != 0;
      if ($113) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $115=(($9+108)|0);
      var $116=HEAPF32[(($115)>>2)];
      var $117=1/$116;
      var $118=(($9+108)|0);
      HEAPF32[(($118)>>2)]=$117;
      __label__ = 6; break;
    case 6: 
      var $120=$h;
      var $121=$k;
      var $122=$120*$121;
      var $123=(($9+108)|0);
      var $124=HEAPF32[(($123)>>2)];
      var $125=$122*$124;
      var $126=(($9+92)|0);
      HEAPF32[(($126)>>2)]=$125;
      var $127=(($9+120)|0);
      var $128=(($9+68)|0);
      var $129=(($9+128)|0);
      __ZmiRK6b2Vec2S1_($4, $128, $129);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qB, $4);
      var $130=$127;
      var $131=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[(($130+4)>>2)]=HEAP32[(($131+4)>>2)];
      __ZN7b2Mat22C1Ev($K);
      var $132=(($9+136)|0);
      var $133=HEAPF32[(($132)>>2)];
      var $134=(($9+140)|0);
      var $135=HEAPF32[(($134)>>2)];
      var $136=(($9+120)|0);
      var $137=(($136+4)|0);
      var $138=HEAPF32[(($137)>>2)];
      var $139=$135*$138;
      var $140=(($9+120)|0);
      var $141=(($140+4)|0);
      var $142=HEAPF32[(($141)>>2)];
      var $143=$139*$142;
      var $144=$133+$143;
      var $145=(($9+108)|0);
      var $146=HEAPF32[(($145)>>2)];
      var $147=$144+$146;
      var $148=(($K)|0);
      var $149=(($148)|0);
      HEAPF32[(($149)>>2)]=$147;
      var $150=(($9+140)|0);
      var $151=HEAPF32[(($150)>>2)];
      var $152=(-$151);
      var $153=(($9+120)|0);
      var $154=(($153)|0);
      var $155=HEAPF32[(($154)>>2)];
      var $156=$152*$155;
      var $157=(($9+120)|0);
      var $158=(($157+4)|0);
      var $159=HEAPF32[(($158)>>2)];
      var $160=$156*$159;
      var $161=(($K)|0);
      var $162=(($161+4)|0);
      HEAPF32[(($162)>>2)]=$160;
      var $163=(($K)|0);
      var $164=(($163+4)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=(($K+8)|0);
      var $167=(($166)|0);
      HEAPF32[(($167)>>2)]=$165;
      var $168=(($9+136)|0);
      var $169=HEAPF32[(($168)>>2)];
      var $170=(($9+140)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=(($9+120)|0);
      var $173=(($172)|0);
      var $174=HEAPF32[(($173)>>2)];
      var $175=$171*$174;
      var $176=(($9+120)|0);
      var $177=(($176)|0);
      var $178=HEAPF32[(($177)>>2)];
      var $179=$175*$178;
      var $180=$169+$179;
      var $181=(($9+108)|0);
      var $182=HEAPF32[(($181)>>2)];
      var $183=$180+$182;
      var $184=(($K+8)|0);
      var $185=(($184+4)|0);
      HEAPF32[(($185)>>2)]=$183;
      var $186=(($9+144)|0);
      __ZNK7b2Mat2210GetInverseEv($5, $K);
      var $187=$186;
      var $188=$5;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($187)>>2)]=HEAP32[(($188)>>2)];HEAP32[(($187+4)>>2)]=HEAP32[(($188+4)>>2)];HEAP32[(($187+8)>>2)]=HEAP32[(($188+8)>>2)];HEAP32[(($187+12)>>2)]=HEAP32[(($188+12)>>2)];
      var $189=(($9+160)|0);
      var $190=(($9+120)|0);
      __ZplRK6b2Vec2S1_($7, $cB, $190);
      var $191=(($9+76)|0);
      __ZmiRK6b2Vec2S1_($6, $7, $191);
      var $192=$189;
      var $193=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($192)>>2)]=HEAP32[(($193)>>2)];HEAP32[(($192+4)>>2)]=HEAP32[(($193+4)>>2)];
      var $194=(($9+160)|0);
      var $195=(($9+92)|0);
      var $196=HEAPF32[(($195)>>2)];
      __ZN6b2Vec2mLEf($194, $196);
      var $197=$wB;
      var $198=$197*0.9800000190734863;
      $wB=$198;
      var $199=$2;
      var $200=(($199)|0);
      var $201=(($200+20)|0);
      var $202=HEAP8[($201)];
      var $203=(($202) & 1);
      if ($203) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $205=(($9+96)|0);
      var $206=$2;
      var $207=(($206)|0);
      var $208=(($207+8)|0);
      var $209=HEAPF32[(($208)>>2)];
      __ZN6b2Vec2mLEf($205, $209);
      var $210=(($9+136)|0);
      var $211=HEAPF32[(($210)>>2)];
      var $212=(($9+96)|0);
      __ZmlfRK6b2Vec2($8, $211, $212);
      __ZN6b2Vec2pLERKS_($vB, $8);
      var $213=(($9+140)|0);
      var $214=HEAPF32[(($213)>>2)];
      var $215=(($9+120)|0);
      var $216=(($9+96)|0);
      var $217=__Z7b2CrossRK6b2Vec2S1_($215, $216);
      var $218=$214*$217;
      var $219=$wB;
      var $220=$219+$218;
      $wB=$220;
      __label__ = 9; break;
    case 8: 
      var $222=(($9+96)|0);
      __ZN6b2Vec27SetZeroEv($222);
      __label__ = 9; break;
    case 9: 
      var $224=(($9+116)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=$2;
      var $227=(($226+28)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=(($228+$225*12)|0);
      var $230=(($229)|0);
      var $231=$230;
      var $232=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($231)>>2)]=HEAP32[(($232)>>2)];HEAP32[(($231+4)>>2)]=HEAP32[(($232+4)>>2)];
      var $233=$wB;
      var $234=(($9+116)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=$2;
      var $237=(($236+28)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($238+$235*12)|0);
      var $240=(($239+8)|0);
      HEAPF32[(($240)>>2)]=$233;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2MouseJointC2EPK15b2MouseJointDef($this, $def) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$this;
      $2=$def;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$8;
      __ZN7b2JointC2EPK10b2JointDef($7, $9);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV12b2MouseJoint+8)|0);
      var $11=(($6+68)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 35; break; }
    case 2: 
      var $13=(($6+76)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 35; break; }
    case 3: 
      var $15=(($6+96)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 35; break; }
    case 4: 
      var $17=(($6+120)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 35; break; }
    case 5: 
      var $19=(($6+128)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 35; break; }
    case 6: 
      var $21=(($6+144)|0);
      (function() { try { __THREW__ = false; return __ZN7b2Mat22C1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 35; break; }
    case 7: 
      var $23=(($6+160)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 35; break; }
    case 8: 
      var $25=$2;
      var $26=(($25+20)|0);
      var $27 = (function() { try { __THREW__ = false; return __ZNK6b2Vec27IsValidEv($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 35; break; }
    case 9: 
      if ($27) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 13; break;
    case 11: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str325)|0), 34, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef)|0), ((STRING_TABLE.__str1326)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 35; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $33=$2;
      var $34=(($33+28)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36 = (function() { try { __THREW__ = false; return __Z9b2IsValidf($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 35; break; }
    case 14: 
      if ($36) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $39=$2;
      var $40=(($39+28)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42=$41 >= 0;
      if ($42) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 19; break;
    case 17: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str325)|0), 35, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef)|0), ((STRING_TABLE.__str2327)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 18; break; } else { __label__ = 35; break; }
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $47=$2;
      var $48=(($47+32)|0);
      var $49=HEAPF32[(($48)>>2)];
      var $50 = (function() { try { __THREW__ = false; return __Z9b2IsValidf($49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 20; break; } else { __label__ = 35; break; }
    case 20: 
      if ($50) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $53=$2;
      var $54=(($53+32)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=$55 >= 0;
      if ($56) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 25; break;
    case 23: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str325)|0), 36, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef)|0), ((STRING_TABLE.__str3328)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 24; break; } else { __label__ = 35; break; }
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $61=$2;
      var $62=(($61+36)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64 = (function() { try { __THREW__ = false; return __Z9b2IsValidf($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 26; break; } else { __label__ = 35; break; }
    case 26: 
      if ($64) { __label__ = 27; break; } else { __label__ = 29; break; }
    case 27: 
      var $67=$2;
      var $68=(($67+36)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=$69 >= 0;
      if ($70) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 31; break;
    case 29: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str325)|0), 37, ((STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef)|0), ((STRING_TABLE.__str4329)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 30; break; } else { __label__ = 35; break; }
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $75=(($6+76)|0);
      var $76=$2;
      var $77=(($76+20)|0);
      var $78=$75;
      var $79=$77;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)];
      var $80=(($6+68)|0);
      var $81=$6;
      var $82=(($81+52)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84 = (function() { try { __THREW__ = false; return __ZNK6b2Body12GetTransformEv($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $86=(($6+76)|0);
      (function() { try { __THREW__ = false; return __Z6b2MulTRK11b2TransformRK6b2Vec2($5, $84, $86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: 
      var $88=$80;
      var $89=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($88)>>2)]=HEAP32[(($89)>>2)];HEAP32[(($88+4)>>2)]=HEAP32[(($89+4)>>2)];
      var $90=$2;
      var $91=(($90+28)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=(($6+104)|0);
      HEAPF32[(($93)>>2)]=$92;
      var $94=(($6+96)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($94) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $96=$2;
      var $97=(($96+32)|0);
      var $98=HEAPF32[(($97)>>2)];
      var $99=(($6+84)|0);
      HEAPF32[(($99)>>2)]=$98;
      var $100=$2;
      var $101=(($100+36)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=(($6+88)|0);
      HEAPF32[(($103)>>2)]=$102;
      var $104=(($6+92)|0);
      HEAPF32[(($104)>>2)]=0;
      var $105=(($6+108)|0);
      HEAPF32[(($105)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    case 35: 
      var $107=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $108=$107.f0;
      $3=$108;
      var $109=$107.f1;
      $4=$109;
      var $110=$6;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 36; break; } else { __label__ = 38; break; }
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $113=$3;
      var $114=$3;
      var $115=$4;
      var $116=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $114, tempValue);
      var $117=($116.f1 = $115, $116);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 38: 
      var $119=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  ;
  return 1;
}


function __ZNK12b2MouseJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=0;
  ;
  return $5;
}


function __ZNK6b2Body8GetAngleEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=(($3+28)|0);
  var $5=HEAPF32[(($4)>>2)];
  ;
  return $5;
}


function __ZN6b2Vec37SetZeroEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAPF32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAPF32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  HEAPF32[(($5)>>2)]=0;
  ;
  return;
}


function __ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 88; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $vB=__stackBase__;
      var $wB;
      var $Cdot=__stackBase__+8;
      var $3=__stackBase__+16;
      var $impulse=__stackBase__+24;
      var $4=__stackBase__+32;
      var $5=__stackBase__+40;
      var $6=__stackBase__+48;
      var $7=__stackBase__+56;
      var $oldImpulse=__stackBase__+64;
      var $maxImpulse;
      var $8=__stackBase__+72;
      var $9=__stackBase__+80;
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=(($10+116)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+28)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+$12*12)|0);
      var $17=(($16)|0);
      var $18=$vB;
      var $19=$17;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[(($18+4)>>2)]=HEAP32[(($19+4)>>2)];
      var $20=(($10+116)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+$21*12)|0);
      var $26=(($25+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      $wB=$27;
      var $28=$wB;
      var $29=(($10+120)|0);
      __Z7b2CrossfRK6b2Vec2($3, $28, $29);
      __ZplRK6b2Vec2S1_($Cdot, $vB, $3);
      var $30=(($10+144)|0);
      var $31=(($10+160)|0);
      __ZplRK6b2Vec2S1_($5, $Cdot, $31);
      var $32=(($10+108)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=(($10+96)|0);
      __ZmlfRK6b2Vec2($6, $33, $34);
      __ZplRK6b2Vec2S1_($7, $5, $6);
      __ZNK6b2Vec2ngEv($4, $7);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($impulse, $30, $4);
      var $35=(($10+96)|0);
      var $36=$oldImpulse;
      var $37=$35;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[(($36+4)>>2)]=HEAP32[(($37+4)>>2)];
      var $38=(($10+96)|0);
      __ZN6b2Vec2pLERKS_($38, $impulse);
      var $39=$2;
      var $40=(($39)|0);
      var $41=(($40)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($10+104)|0);
      var $44=HEAPF32[(($43)>>2)];
      var $45=$42*$44;
      $maxImpulse=$45;
      var $46=(($10+96)|0);
      var $47=__ZNK6b2Vec213LengthSquaredEv($46);
      var $48=$maxImpulse;
      var $49=$maxImpulse;
      var $50=$48*$49;
      var $51=$47 > $50;
      if ($51) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $53=(($10+96)|0);
      var $54=$maxImpulse;
      var $55=(($10+96)|0);
      var $56=__ZNK6b2Vec26LengthEv($55);
      var $57=$54/$56;
      __ZN6b2Vec2mLEf($53, $57);
      __label__ = 3; break;
    case 3: 
      var $59=(($10+96)|0);
      __ZmiRK6b2Vec2S1_($8, $59, $oldImpulse);
      var $60=$impulse;
      var $61=$8;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[(($60+4)>>2)]=HEAP32[(($61+4)>>2)];
      var $62=(($10+136)|0);
      var $63=HEAPF32[(($62)>>2)];
      __ZmlfRK6b2Vec2($9, $63, $impulse);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $64=(($10+140)|0);
      var $65=HEAPF32[(($64)>>2)];
      var $66=(($10+120)|0);
      var $67=__Z7b2CrossRK6b2Vec2S1_($66, $impulse);
      var $68=$65*$67;
      var $69=$wB;
      var $70=$69+$68;
      $wB=$70;
      var $71=(($10+116)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+28)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+$72*12)|0);
      var $77=(($76)|0);
      var $78=$77;
      var $79=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)];
      var $80=$wB;
      var $81=(($10+116)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$2;
      var $84=(($83+28)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+$82*12)|0);
      var $87=(($86+8)|0);
      HEAPF32[(($87)>>2)]=$80;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2MouseJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[(($4+4)>>2)]=HEAP32[(($5+4)>>2)];
  ;
  return;
}


function __ZNK12b2MouseJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK12b2MouseJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+96)|0);
  __ZmlfRK6b2Vec2($agg_result, $4, $5);
  ;
  return;
}


function __ZN12b2MouseJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __Z5b2LogPKcz(((STRING_TABLE.__str6331)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN12b2MouseJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2MouseJointD2Ev($2);
  ;
  return;
}


function __ZN12b2MouseJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN12b2MouseJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2MouseJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN19b2PrismaticJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $bA, $bB, $anchor, $axis) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6=__stackBase__;
  var $7=__stackBase__+8;
  var $8=__stackBase__+16;
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  $5=$axis;
  var $9=$1;
  var $10=$2;
  var $11=$9;
  var $12=(($11+8)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$3;
  var $14=$9;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=(($9+20)|0);
  var $17=$9;
  var $18=(($17+8)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $19, $20);
  var $21=$16;
  var $22=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[(($21+4)>>2)]=HEAP32[(($22+4)>>2)];
  var $23=(($9+28)|0);
  var $24=$9;
  var $25=(($24+12)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($7, $26, $27);
  var $28=$23;
  var $29=$7;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[(($28+4)>>2)]=HEAP32[(($29+4)>>2)];
  var $30=(($9+36)|0);
  var $31=$9;
  var $32=(($31+8)|0);
  var $33=HEAP32[(($32)>>2)];
  var $34=$5;
  __ZNK6b2Body14GetLocalVectorERK6b2Vec2($8, $33, $34);
  var $35=$30;
  var $36=$8;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[(($35+4)>>2)]=HEAP32[(($36+4)>>2)];
  var $37=$9;
  var $38=(($37+12)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=__ZNK6b2Body8GetAngleEv($39);
  var $41=$9;
  var $42=(($41+8)|0);
  var $43=HEAP32[(($42)>>2)];
  var $44=__ZNK6b2Body8GetAngleEv($43);
  var $45=$40-$44;
  var $46=(($9+44)|0);
  HEAPF32[(($46)>>2)]=$45;
  STACKTOP = __stackBase__;
  return;
}


function __ZNK6b2Body14GetLocalVectorERK6b2Vec2($agg_result, $this, $worldVector) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$worldVector;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=(($4+8)|0);
  var $6=$2;
  __Z6b2MulTRK5b2RotRK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZN7b2Mat33C1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2Mat33C2Ev($2);
  ;
  return;
}


function __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($this, $def) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$this;
      $2=$def;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$8;
      __ZN7b2JointC2EPK10b2JointDef($7, $9);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV16b2PrismaticJoint+8)|0);
      var $11=(($6+68)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 17; break; }
    case 2: 
      var $13=(($6+76)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 17; break; }
    case 3: 
      var $15=(($6+84)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 17; break; }
    case 4: 
      var $17=(($6+92)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 17; break; }
    case 5: 
      var $19=(($6+104)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec3C1Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 17; break; }
    case 6: 
      var $21=(($6+152)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 17; break; }
    case 7: 
      var $23=(($6+160)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 17; break; }
    case 8: 
      var $25=(($6+184)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 17; break; }
    case 9: 
      var $27=(($6+192)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 17; break; }
    case 10: 
      var $29=(($6+216)|0);
      (function() { try { __THREW__ = false; return __ZN7b2Mat33C1Ev($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 11; break; } else { __label__ = 17; break; }
    case 11: 
      var $31=(($6+68)|0);
      var $32=$2;
      var $33=(($32+20)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=(($6+76)|0);
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=$36;
      var $40=$38;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[(($39+4)>>2)]=HEAP32[(($40+4)>>2)];
      var $41=(($6+84)|0);
      var $42=$2;
      var $43=(($42+36)|0);
      var $44=$41;
      var $45=$43;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[(($44+4)>>2)]=HEAP32[(($45+4)>>2)];
      var $46=(($6+84)|0);
      var $47 = (function() { try { __THREW__ = false; return __ZN6b2Vec29NormalizeEv($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: 
      var $49=(($6+92)|0);
      var $50=(($6+84)|0);
      (function() { try { __THREW__ = false; return __Z7b2CrossfRK6b2Vec2($5, 1, $50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $52=$49;
      var $53=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[(($52+4)>>2)]=HEAP32[(($53+4)>>2)];
      var $54=$2;
      var $55=(($54+44)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=(($6+100)|0);
      HEAPF32[(($57)>>2)]=$56;
      var $58=(($6+104)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec37SetZeroEv($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $60=(($6+252)|0);
      HEAPF32[(($60)>>2)]=0;
      var $61=(($6+116)|0);
      HEAPF32[(($61)>>2)]=0;
      var $62=$2;
      var $63=(($62+52)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=(($6+120)|0);
      HEAPF32[(($65)>>2)]=$64;
      var $66=$2;
      var $67=(($66+56)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=(($6+124)|0);
      HEAPF32[(($69)>>2)]=$68;
      var $70=$2;
      var $71=(($70+64)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=(($6+128)|0);
      HEAPF32[(($73)>>2)]=$72;
      var $74=$2;
      var $75=(($74+68)|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=(($6+132)|0);
      HEAPF32[(($77)>>2)]=$76;
      var $78=$2;
      var $79=(($78+48)|0);
      var $80=HEAP8[($79)];
      var $81=(($80) & 1);
      var $82=(($6+136)|0);
      var $83=(($81)&1);
      HEAP8[($82)]=$83;
      var $84=$2;
      var $85=(($84+60)|0);
      var $86=HEAP8[($85)];
      var $87=(($86) & 1);
      var $88=(($6+137)|0);
      var $89=(($87)&1);
      HEAP8[($88)]=$89;
      var $90=(($6+140)|0);
      HEAP32[(($90)>>2)]=0;
      var $91=(($6+184)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($91) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $93=(($6+192)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      STACKTOP = __stackBase__;
      return;
    case 17: 
      var $96=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $97=$96.f0;
      $3=$97;
      var $98=$96.f1;
      $4=$98;
      var $99=$6;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $102=$3;
      var $103=$3;
      var $104=$4;
      var $105=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $103, tempValue);
      var $106=($105.f1 = $104, $105);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 20: 
      var $108=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Vec33SetEfff($this, $x_, $y_, $z_) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$x_;
  $3=$y_;
  $4=$z_;
  var $5=$1;
  var $6=$2;
  var $7=(($5)|0);
  HEAPF32[(($7)>>2)]=$6;
  var $8=$3;
  var $9=(($5+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  var $10=$4;
  var $11=(($5+8)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function __ZN6b2Vec3mLEf($this, $s) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$s;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$6*$4;
  HEAPF32[(($5)>>2)]=$7;
  var $8=$2;
  var $9=(($3+4)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=$10*$8;
  HEAPF32[(($9)>>2)]=$11;
  var $12=$2;
  var $13=(($3+8)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$14*$12;
  HEAPF32[(($13)>>2)]=$15;
  ;
  return;
}


function __ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 176; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $rA=__stackBase__+48;
      var $3=__stackBase__+56;
      var $rB=__stackBase__+64;
      var $4=__stackBase__+72;
      var $d=__stackBase__+80;
      var $5=__stackBase__+88;
      var $6=__stackBase__+96;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $7=__stackBase__+104;
      var $8=__stackBase__+112;
      var $9=__stackBase__+120;
      var $10=__stackBase__+128;
      var $k11;
      var $k12;
      var $k13;
      var $k22;
      var $k23;
      var $k33;
      var $jointTranslation;
      var $P=__stackBase__+136;
      var $11=__stackBase__+144;
      var $12=__stackBase__+152;
      var $LA;
      var $LB;
      var $13=__stackBase__+160;
      var $14=__stackBase__+168;
      $1=$this;
      $2=$data;
      var $15=$1;
      var $16=$15;
      var $17=(($16+48)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($15+144)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=$15;
      var $23=(($22+52)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($15+148)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($15+152)|0);
      var $29=$15;
      var $30=(($29+48)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+28)|0);
      var $33=(($32)|0);
      var $34=$28;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=(($15+160)|0);
      var $37=$15;
      var $38=(($37+52)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+28)|0);
      var $41=(($40)|0);
      var $42=$36;
      var $43=$41;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
      var $44=$15;
      var $45=(($44+48)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($15+168)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$15;
      var $51=(($50+52)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+120)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($15+172)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$15;
      var $57=(($56+48)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($15+176)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=$15;
      var $63=(($62+52)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+128)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=(($15+180)|0);
      HEAPF32[(($67)>>2)]=$66;
      var $68=(($15+144)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$2;
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+$69*12)|0);
      var $74=(($73)|0);
      var $75=$cA;
      var $76=$74;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[(($75+4)>>2)]=HEAP32[(($76+4)>>2)];
      var $77=(($15+144)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$2;
      var $80=(($79+24)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+$78*12)|0);
      var $83=(($82+8)|0);
      var $84=HEAPF32[(($83)>>2)];
      $aA=$84;
      var $85=(($15+144)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=(($87+28)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+$86*12)|0);
      var $91=(($90)|0);
      var $92=$vA;
      var $93=$91;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[(($92+4)>>2)]=HEAP32[(($93+4)>>2)];
      var $94=(($15+144)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$2;
      var $97=(($96+28)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+$95*12)|0);
      var $100=(($99+8)|0);
      var $101=HEAPF32[(($100)>>2)];
      $wA=$101;
      var $102=(($15+148)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+24)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+$103*12)|0);
      var $108=(($107)|0);
      var $109=$cB;
      var $110=$108;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($109)>>2)]=HEAP32[(($110)>>2)];HEAP32[(($109+4)>>2)]=HEAP32[(($110+4)>>2)];
      var $111=(($15+148)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$2;
      var $114=(($113+24)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+$112*12)|0);
      var $117=(($116+8)|0);
      var $118=HEAPF32[(($117)>>2)];
      $aB=$118;
      var $119=(($15+148)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$2;
      var $122=(($121+28)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+$120*12)|0);
      var $125=(($124)|0);
      var $126=$vB;
      var $127=$125;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[(($126+4)>>2)]=HEAP32[(($127+4)>>2)];
      var $128=(($15+148)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$2;
      var $131=(($130+28)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+$129*12)|0);
      var $134=(($133+8)|0);
      var $135=HEAPF32[(($134)>>2)];
      $wB=$135;
      var $136=$aA;
      __ZN5b2RotC1Ef($qA, $136);
      var $137=$aB;
      __ZN5b2RotC1Ef($qB, $137);
      var $138=(($15+68)|0);
      var $139=(($15+152)|0);
      __ZmiRK6b2Vec2S1_($3, $138, $139);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $140=(($15+76)|0);
      var $141=(($15+160)|0);
      __ZmiRK6b2Vec2S1_($4, $140, $141);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZmiRK6b2Vec2S1_($6, $cB, $cA);
      __ZplRK6b2Vec2S1_($5, $6, $rB);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $142=(($15+168)|0);
      var $143=HEAPF32[(($142)>>2)];
      $mA=$143;
      var $144=(($15+172)|0);
      var $145=HEAPF32[(($144)>>2)];
      $mB=$145;
      var $146=(($15+176)|0);
      var $147=HEAPF32[(($146)>>2)];
      $iA=$147;
      var $148=(($15+180)|0);
      var $149=HEAPF32[(($148)>>2)];
      $iB=$149;
      var $150=(($15+184)|0);
      var $151=(($15+84)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $qA, $151);
      var $152=$150;
      var $153=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[(($152+4)>>2)]=HEAP32[(($153+4)>>2)];
      __ZplRK6b2Vec2S1_($8, $d, $rA);
      var $154=(($15+184)|0);
      var $155=__Z7b2CrossRK6b2Vec2S1_($8, $154);
      var $156=(($15+208)|0);
      HEAPF32[(($156)>>2)]=$155;
      var $157=(($15+184)|0);
      var $158=__Z7b2CrossRK6b2Vec2S1_($rB, $157);
      var $159=(($15+212)|0);
      HEAPF32[(($159)>>2)]=$158;
      var $160=$mA;
      var $161=$mB;
      var $162=$160+$161;
      var $163=$iA;
      var $164=(($15+208)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=$163*$165;
      var $167=(($15+208)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=$166*$168;
      var $170=$162+$169;
      var $171=$iB;
      var $172=(($15+212)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=$171*$173;
      var $175=(($15+212)|0);
      var $176=HEAPF32[(($175)>>2)];
      var $177=$174*$176;
      var $178=$170+$177;
      var $179=(($15+252)|0);
      HEAPF32[(($179)>>2)]=$178;
      var $180=(($15+252)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=$181 > 0;
      if ($182) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $184=(($15+252)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=1/$185;
      var $187=(($15+252)|0);
      HEAPF32[(($187)>>2)]=$186;
      __label__ = 3; break;
    case 3: 
      var $189=(($15+192)|0);
      var $190=(($15+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($9, $qA, $190);
      var $191=$189;
      var $192=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($191)>>2)]=HEAP32[(($192)>>2)];HEAP32[(($191+4)>>2)]=HEAP32[(($192+4)>>2)];
      __ZplRK6b2Vec2S1_($10, $d, $rA);
      var $193=(($15+192)|0);
      var $194=__Z7b2CrossRK6b2Vec2S1_($10, $193);
      var $195=(($15+200)|0);
      HEAPF32[(($195)>>2)]=$194;
      var $196=(($15+192)|0);
      var $197=__Z7b2CrossRK6b2Vec2S1_($rB, $196);
      var $198=(($15+204)|0);
      HEAPF32[(($198)>>2)]=$197;
      var $199=$mA;
      var $200=$mB;
      var $201=$199+$200;
      var $202=$iA;
      var $203=(($15+200)|0);
      var $204=HEAPF32[(($203)>>2)];
      var $205=$202*$204;
      var $206=(($15+200)|0);
      var $207=HEAPF32[(($206)>>2)];
      var $208=$205*$207;
      var $209=$201+$208;
      var $210=$iB;
      var $211=(($15+204)|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=$210*$212;
      var $214=(($15+204)|0);
      var $215=HEAPF32[(($214)>>2)];
      var $216=$213*$215;
      var $217=$209+$216;
      $k11=$217;
      var $218=$iA;
      var $219=(($15+200)|0);
      var $220=HEAPF32[(($219)>>2)];
      var $221=$218*$220;
      var $222=$iB;
      var $223=(($15+204)|0);
      var $224=HEAPF32[(($223)>>2)];
      var $225=$222*$224;
      var $226=$221+$225;
      $k12=$226;
      var $227=$iA;
      var $228=(($15+200)|0);
      var $229=HEAPF32[(($228)>>2)];
      var $230=$227*$229;
      var $231=(($15+208)|0);
      var $232=HEAPF32[(($231)>>2)];
      var $233=$230*$232;
      var $234=$iB;
      var $235=(($15+204)|0);
      var $236=HEAPF32[(($235)>>2)];
      var $237=$234*$236;
      var $238=(($15+212)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=$237*$239;
      var $241=$233+$240;
      $k13=$241;
      var $242=$iA;
      var $243=$iB;
      var $244=$242+$243;
      $k22=$244;
      var $245=$k22;
      var $246=$245 == 0;
      if ($246) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $k22=1;
      __label__ = 5; break;
    case 5: 
      var $249=$iA;
      var $250=(($15+208)|0);
      var $251=HEAPF32[(($250)>>2)];
      var $252=$249*$251;
      var $253=$iB;
      var $254=(($15+212)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=$253*$255;
      var $257=$252+$256;
      $k23=$257;
      var $258=$mA;
      var $259=$mB;
      var $260=$258+$259;
      var $261=$iA;
      var $262=(($15+208)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=$261*$263;
      var $265=(($15+208)|0);
      var $266=HEAPF32[(($265)>>2)];
      var $267=$264*$266;
      var $268=$260+$267;
      var $269=$iB;
      var $270=(($15+212)|0);
      var $271=HEAPF32[(($270)>>2)];
      var $272=$269*$271;
      var $273=(($15+212)|0);
      var $274=HEAPF32[(($273)>>2)];
      var $275=$272*$274;
      var $276=$268+$275;
      $k33=$276;
      var $277=(($15+216)|0);
      var $278=(($277)|0);
      var $279=$k11;
      var $280=$k12;
      var $281=$k13;
      __ZN6b2Vec33SetEfff($278, $279, $280, $281);
      var $282=(($15+216)|0);
      var $283=(($282+12)|0);
      var $284=$k12;
      var $285=$k22;
      var $286=$k23;
      __ZN6b2Vec33SetEfff($283, $284, $285, $286);
      var $287=(($15+216)|0);
      var $288=(($287+24)|0);
      var $289=$k13;
      var $290=$k23;
      var $291=$k33;
      __ZN6b2Vec33SetEfff($288, $289, $290, $291);
      var $292=(($15+136)|0);
      var $293=HEAP8[($292)];
      var $294=(($293) & 1);
      if ($294) { __label__ = 6; break; } else { __label__ = 20; break; }
    case 6: 
      var $296=(($15+184)|0);
      var $297=__Z5b2DotRK6b2Vec2S1_($296, $d);
      $jointTranslation=$297;
      var $298=(($15+124)|0);
      var $299=HEAPF32[(($298)>>2)];
      var $300=(($15+120)|0);
      var $301=HEAPF32[(($300)>>2)];
      var $302=$299-$301;
      var $303=__Z5b2AbsIfET_S0_($302);
      var $304=$303 < 0.009999999776482582;
      if ($304) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $306=(($15+140)|0);
      HEAP32[(($306)>>2)]=3;
      __label__ = 19; break;
    case 8: 
      var $308=$jointTranslation;
      var $309=(($15+120)|0);
      var $310=HEAPF32[(($309)>>2)];
      var $311=$308 <= $310;
      if ($311) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $313=(($15+140)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=(($314)|0)!=1;
      if ($315) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $317=(($15+140)|0);
      HEAP32[(($317)>>2)]=1;
      var $318=(($15+104)|0);
      var $319=(($318+8)|0);
      HEAPF32[(($319)>>2)]=0;
      __label__ = 11; break;
    case 11: 
      __label__ = 18; break;
    case 12: 
      var $322=$jointTranslation;
      var $323=(($15+124)|0);
      var $324=HEAPF32[(($323)>>2)];
      var $325=$322 >= $324;
      if ($325) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $327=(($15+140)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|0)!=2;
      if ($329) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $331=(($15+140)|0);
      HEAP32[(($331)>>2)]=2;
      var $332=(($15+104)|0);
      var $333=(($332+8)|0);
      HEAPF32[(($333)>>2)]=0;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $336=(($15+140)|0);
      HEAP32[(($336)>>2)]=0;
      var $337=(($15+104)|0);
      var $338=(($337+8)|0);
      HEAPF32[(($338)>>2)]=0;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 21; break;
    case 20: 
      var $343=(($15+140)|0);
      HEAP32[(($343)>>2)]=0;
      var $344=(($15+104)|0);
      var $345=(($344+8)|0);
      HEAPF32[(($345)>>2)]=0;
      __label__ = 21; break;
    case 21: 
      var $347=(($15+137)|0);
      var $348=HEAP8[($347)];
      var $349=(($348) & 1);
      var $350=(($349)&1);
      var $351=(($350)|0)==0;
      if ($351) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $353=(($15+116)|0);
      HEAPF32[(($353)>>2)]=0;
      __label__ = 23; break;
    case 23: 
      var $355=$2;
      var $356=(($355)|0);
      var $357=(($356+20)|0);
      var $358=HEAP8[($357)];
      var $359=(($358) & 1);
      if ($359) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $361=(($15+104)|0);
      var $362=$2;
      var $363=(($362)|0);
      var $364=(($363+8)|0);
      var $365=HEAPF32[(($364)>>2)];
      __ZN6b2Vec3mLEf($361, $365);
      var $366=$2;
      var $367=(($366)|0);
      var $368=(($367+8)|0);
      var $369=HEAPF32[(($368)>>2)];
      var $370=(($15+116)|0);
      var $371=HEAPF32[(($370)>>2)];
      var $372=$371*$369;
      HEAPF32[(($370)>>2)]=$372;
      var $373=(($15+104)|0);
      var $374=(($373)|0);
      var $375=HEAPF32[(($374)>>2)];
      var $376=(($15+192)|0);
      __ZmlfRK6b2Vec2($11, $375, $376);
      var $377=(($15+116)|0);
      var $378=HEAPF32[(($377)>>2)];
      var $379=(($15+104)|0);
      var $380=(($379+8)|0);
      var $381=HEAPF32[(($380)>>2)];
      var $382=$378+$381;
      var $383=(($15+184)|0);
      __ZmlfRK6b2Vec2($12, $382, $383);
      __ZplRK6b2Vec2S1_($P, $11, $12);
      var $384=(($15+104)|0);
      var $385=(($384)|0);
      var $386=HEAPF32[(($385)>>2)];
      var $387=(($15+200)|0);
      var $388=HEAPF32[(($387)>>2)];
      var $389=$386*$388;
      var $390=(($15+104)|0);
      var $391=(($390+4)|0);
      var $392=HEAPF32[(($391)>>2)];
      var $393=$389+$392;
      var $394=(($15+116)|0);
      var $395=HEAPF32[(($394)>>2)];
      var $396=(($15+104)|0);
      var $397=(($396+8)|0);
      var $398=HEAPF32[(($397)>>2)];
      var $399=$395+$398;
      var $400=(($15+208)|0);
      var $401=HEAPF32[(($400)>>2)];
      var $402=$399*$401;
      var $403=$393+$402;
      $LA=$403;
      var $404=(($15+104)|0);
      var $405=(($404)|0);
      var $406=HEAPF32[(($405)>>2)];
      var $407=(($15+204)|0);
      var $408=HEAPF32[(($407)>>2)];
      var $409=$406*$408;
      var $410=(($15+104)|0);
      var $411=(($410+4)|0);
      var $412=HEAPF32[(($411)>>2)];
      var $413=$409+$412;
      var $414=(($15+116)|0);
      var $415=HEAPF32[(($414)>>2)];
      var $416=(($15+104)|0);
      var $417=(($416+8)|0);
      var $418=HEAPF32[(($417)>>2)];
      var $419=$415+$418;
      var $420=(($15+212)|0);
      var $421=HEAPF32[(($420)>>2)];
      var $422=$419*$421;
      var $423=$413+$422;
      $LB=$423;
      var $424=$mA;
      __ZmlfRK6b2Vec2($13, $424, $P);
      __ZN6b2Vec2mIERKS_($vA, $13);
      var $425=$iA;
      var $426=$LA;
      var $427=$425*$426;
      var $428=$wA;
      var $429=$428-$427;
      $wA=$429;
      var $430=$mB;
      __ZmlfRK6b2Vec2($14, $430, $P);
      __ZN6b2Vec2pLERKS_($vB, $14);
      var $431=$iB;
      var $432=$LB;
      var $433=$431*$432;
      var $434=$wB;
      var $435=$434+$433;
      $wB=$435;
      __label__ = 26; break;
    case 25: 
      var $437=(($15+104)|0);
      __ZN6b2Vec37SetZeroEv($437);
      var $438=(($15+116)|0);
      HEAPF32[(($438)>>2)]=0;
      __label__ = 26; break;
    case 26: 
      var $440=(($15+144)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442=$2;
      var $443=(($442+28)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=(($444+$441*12)|0);
      var $446=(($445)|0);
      var $447=$446;
      var $448=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($447)>>2)]=HEAP32[(($448)>>2)];HEAP32[(($447+4)>>2)]=HEAP32[(($448+4)>>2)];
      var $449=$wA;
      var $450=(($15+144)|0);
      var $451=HEAP32[(($450)>>2)];
      var $452=$2;
      var $453=(($452+28)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=(($454+$451*12)|0);
      var $456=(($455+8)|0);
      HEAPF32[(($456)>>2)]=$449;
      var $457=(($15+148)|0);
      var $458=HEAP32[(($457)>>2)];
      var $459=$2;
      var $460=(($459+28)|0);
      var $461=HEAP32[(($460)>>2)];
      var $462=(($461+$458*12)|0);
      var $463=(($462)|0);
      var $464=$463;
      var $465=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($464)>>2)]=HEAP32[(($465)>>2)];HEAP32[(($464+4)>>2)]=HEAP32[(($465+4)>>2)];
      var $466=$wB;
      var $467=(($15+148)|0);
      var $468=HEAP32[(($467)>>2)];
      var $469=$2;
      var $470=(($469+28)|0);
      var $471=HEAP32[(($470)>>2)];
      var $472=(($471+$468*12)|0);
      var $473=(($472+8)|0);
      HEAPF32[(($473)>>2)]=$466;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Vec3pLERKS_($this, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$v;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$8+$6;
  HEAPF32[(($7)>>2)]=$9;
  var $10=$2;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($3+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$14+$12;
  HEAPF32[(($13)>>2)]=$15;
  var $16=$2;
  var $17=(($16+8)|0);
  var $18=HEAPF32[(($17)>>2)];
  var $19=(($3+8)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=$20+$18;
  HEAPF32[(($19)>>2)]=$21;
  ;
  return;
}


function __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 292; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=__stackBase__+8;
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $Cdot;
      var $3=__stackBase__+16;
      var $impulse;
      var $oldImpulse;
      var $maxImpulse;
      var $P=__stackBase__+24;
      var $LA;
      var $LB;
      var $4=__stackBase__+32;
      var $5=__stackBase__+40;
      var $Cdot1=__stackBase__+48;
      var $6=__stackBase__+56;
      var $Cdot2;
      var $7=__stackBase__+64;
      var $Cdot3=__stackBase__+72;
      var $f1=__stackBase__+84;
      var $df=__stackBase__+96;
      var $8=__stackBase__+108;
      var $b=__stackBase__+120;
      var $9=__stackBase__+128;
      var $10=__stackBase__+136;
      var $11=__stackBase__+144;
      var $f2r=__stackBase__+152;
      var $12=__stackBase__+160;
      var $13=__stackBase__+168;
      var $14=__stackBase__+176;
      var $P4=__stackBase__+188;
      var $15=__stackBase__+196;
      var $16=__stackBase__+204;
      var $LA5;
      var $LB6;
      var $17=__stackBase__+212;
      var $18=__stackBase__+220;
      var $df7=__stackBase__+228;
      var $19=__stackBase__+236;
      var $P8=__stackBase__+244;
      var $LA9;
      var $LB10;
      var $20=__stackBase__+252;
      var $21=__stackBase__+260;
      var $Cdot10=__stackBase__+268;
      var $22=__stackBase__+276;
      var $test=__stackBase__+284;
      $1=$this;
      $2=$data;
      var $23=$1;
      var $24=(($23+144)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=(($26+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+$25*12)|0);
      var $30=(($29)|0);
      var $31=$vA;
      var $32=$30;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[(($31+4)>>2)]=HEAP32[(($32+4)>>2)];
      var $33=(($23+144)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+28)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+$34*12)|0);
      var $39=(($38+8)|0);
      var $40=HEAPF32[(($39)>>2)];
      $wA=$40;
      var $41=(($23+148)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=(($43+28)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+$42*12)|0);
      var $47=(($46)|0);
      var $48=$vB;
      var $49=$47;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[(($48+4)>>2)]=HEAP32[(($49+4)>>2)];
      var $50=(($23+148)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+$51*12)|0);
      var $56=(($55+8)|0);
      var $57=HEAPF32[(($56)>>2)];
      $wB=$57;
      var $58=(($23+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $mA=$59;
      var $60=(($23+172)|0);
      var $61=HEAPF32[(($60)>>2)];
      $mB=$61;
      var $62=(($23+176)|0);
      var $63=HEAPF32[(($62)>>2)];
      $iA=$63;
      var $64=(($23+180)|0);
      var $65=HEAPF32[(($64)>>2)];
      $iB=$65;
      var $66=(($23+137)|0);
      var $67=HEAP8[($66)];
      var $68=(($67) & 1);
      if ($68) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $70=(($23+140)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|0)!=3;
      if ($72) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $74=(($23+184)|0);
      __ZmiRK6b2Vec2S1_($3, $vB, $vA);
      var $75=__Z5b2DotRK6b2Vec2S1_($74, $3);
      var $76=(($23+212)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=$wB;
      var $79=$77*$78;
      var $80=$75+$79;
      var $81=(($23+208)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$wA;
      var $84=$82*$83;
      var $85=$80-$84;
      $Cdot=$85;
      var $86=(($23+252)|0);
      var $87=HEAPF32[(($86)>>2)];
      var $88=(($23+132)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=$Cdot;
      var $91=$89-$90;
      var $92=$87*$91;
      $impulse=$92;
      var $93=(($23+116)|0);
      var $94=HEAPF32[(($93)>>2)];
      $oldImpulse=$94;
      var $95=$2;
      var $96=(($95)|0);
      var $97=(($96)|0);
      var $98=HEAPF32[(($97)>>2)];
      var $99=(($23+128)|0);
      var $100=HEAPF32[(($99)>>2)];
      var $101=$98*$100;
      $maxImpulse=$101;
      var $102=(($23+116)|0);
      var $103=HEAPF32[(($102)>>2)];
      var $104=$impulse;
      var $105=$103+$104;
      var $106=$maxImpulse;
      var $107=(-$106);
      var $108=$maxImpulse;
      var $109=__Z7b2ClampIfET_S0_S0_S0_($105, $107, $108);
      var $110=(($23+116)|0);
      HEAPF32[(($110)>>2)]=$109;
      var $111=(($23+116)|0);
      var $112=HEAPF32[(($111)>>2)];
      var $113=$oldImpulse;
      var $114=$112-$113;
      $impulse=$114;
      var $115=$impulse;
      var $116=(($23+184)|0);
      __ZmlfRK6b2Vec2($P, $115, $116);
      var $117=$impulse;
      var $118=(($23+208)|0);
      var $119=HEAPF32[(($118)>>2)];
      var $120=$117*$119;
      $LA=$120;
      var $121=$impulse;
      var $122=(($23+212)|0);
      var $123=HEAPF32[(($122)>>2)];
      var $124=$121*$123;
      $LB=$124;
      var $125=$mA;
      __ZmlfRK6b2Vec2($4, $125, $P);
      __ZN6b2Vec2mIERKS_($vA, $4);
      var $126=$iA;
      var $127=$LA;
      var $128=$126*$127;
      var $129=$wA;
      var $130=$129-$128;
      $wA=$130;
      var $131=$mB;
      __ZmlfRK6b2Vec2($5, $131, $P);
      __ZN6b2Vec2pLERKS_($vB, $5);
      var $132=$iB;
      var $133=$LB;
      var $134=$132*$133;
      var $135=$wB;
      var $136=$135+$134;
      $wB=$136;
      __label__ = 4; break;
    case 4: 
      __ZN6b2Vec2C1Ev($Cdot1);
      var $138=(($23+192)|0);
      __ZmiRK6b2Vec2S1_($6, $vB, $vA);
      var $139=__Z5b2DotRK6b2Vec2S1_($138, $6);
      var $140=(($23+204)|0);
      var $141=HEAPF32[(($140)>>2)];
      var $142=$wB;
      var $143=$141*$142;
      var $144=$139+$143;
      var $145=(($23+200)|0);
      var $146=HEAPF32[(($145)>>2)];
      var $147=$wA;
      var $148=$146*$147;
      var $149=$144-$148;
      var $150=(($Cdot1)|0);
      HEAPF32[(($150)>>2)]=$149;
      var $151=$wB;
      var $152=$wA;
      var $153=$151-$152;
      var $154=(($Cdot1+4)|0);
      HEAPF32[(($154)>>2)]=$153;
      var $155=(($23+136)|0);
      var $156=HEAP8[($155)];
      var $157=(($156) & 1);
      if ($157) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      var $159=(($23+140)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160)|0)!=0;
      if ($161) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $163=(($23+184)|0);
      __ZmiRK6b2Vec2S1_($7, $vB, $vA);
      var $164=__Z5b2DotRK6b2Vec2S1_($163, $7);
      var $165=(($23+212)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=$wB;
      var $168=$166*$167;
      var $169=$164+$168;
      var $170=(($23+208)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=$wA;
      var $173=$171*$172;
      var $174=$169-$173;
      $Cdot2=$174;
      var $175=(($Cdot1)|0);
      var $176=HEAPF32[(($175)>>2)];
      var $177=(($Cdot1+4)|0);
      var $178=HEAPF32[(($177)>>2)];
      var $179=$Cdot2;
      __ZN6b2Vec3C1Efff($Cdot3, $176, $178, $179);
      var $180=(($23+104)|0);
      var $181=$f1;
      var $182=$180;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($181)>>2)]=HEAP32[(($182)>>2)];HEAP32[(($181+4)>>2)]=HEAP32[(($182+4)>>2)];HEAP32[(($181+8)>>2)]=HEAP32[(($182+8)>>2)];
      var $183=(($23+216)|0);
      __ZNK6b2Vec3ngEv($8, $Cdot3);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($df, $183, $8);
      var $184=(($23+104)|0);
      __ZN6b2Vec3pLERKS_($184, $df);
      var $185=(($23+140)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186)|0)==1;
      if ($187) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $189=(($23+104)|0);
      var $190=(($189+8)|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=__Z5b2MaxIfET_S0_S0_($191, 0);
      var $193=(($23+104)|0);
      var $194=(($193+8)|0);
      HEAPF32[(($194)>>2)]=$192;
      __label__ = 11; break;
    case 8: 
      var $196=(($23+140)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($197)|0)==2;
      if ($198) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $200=(($23+104)|0);
      var $201=(($200+8)|0);
      var $202=HEAPF32[(($201)>>2)];
      var $203=__Z5b2MinIfET_S0_S0_($202, 0);
      var $204=(($23+104)|0);
      var $205=(($204+8)|0);
      HEAPF32[(($205)>>2)]=$203;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __ZNK6b2Vec2ngEv($9, $Cdot1);
      var $208=(($23+104)|0);
      var $209=(($208+8)|0);
      var $210=HEAPF32[(($209)>>2)];
      var $211=(($f1+8)|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=$210-$212;
      var $214=(($23+216)|0);
      var $215=(($214+24)|0);
      var $216=(($215)|0);
      var $217=HEAPF32[(($216)>>2)];
      var $218=(($23+216)|0);
      var $219=(($218+24)|0);
      var $220=(($219+4)|0);
      var $221=HEAPF32[(($220)>>2)];
      __ZN6b2Vec2C1Eff($11, $217, $221);
      __ZmlfRK6b2Vec2($10, $213, $11);
      __ZmiRK6b2Vec2S1_($b, $9, $10);
      var $222=(($23+216)|0);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($12, $222, $b);
      var $223=(($f1)|0);
      var $224=HEAPF32[(($223)>>2)];
      var $225=(($f1+4)|0);
      var $226=HEAPF32[(($225)>>2)];
      __ZN6b2Vec2C1Eff($13, $224, $226);
      __ZplRK6b2Vec2S1_($f2r, $12, $13);
      var $227=(($f2r)|0);
      var $228=HEAPF32[(($227)>>2)];
      var $229=(($23+104)|0);
      var $230=(($229)|0);
      HEAPF32[(($230)>>2)]=$228;
      var $231=(($f2r+4)|0);
      var $232=HEAPF32[(($231)>>2)];
      var $233=(($23+104)|0);
      var $234=(($233+4)|0);
      HEAPF32[(($234)>>2)]=$232;
      var $235=(($23+104)|0);
      __ZmiRK6b2Vec3S1_($14, $235, $f1);
      var $236=$df;
      var $237=$14;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($236)>>2)]=HEAP32[(($237)>>2)];HEAP32[(($236+4)>>2)]=HEAP32[(($237+4)>>2)];HEAP32[(($236+8)>>2)]=HEAP32[(($237+8)>>2)];
      var $238=(($df)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=(($23+192)|0);
      __ZmlfRK6b2Vec2($15, $239, $240);
      var $241=(($df+8)|0);
      var $242=HEAPF32[(($241)>>2)];
      var $243=(($23+184)|0);
      __ZmlfRK6b2Vec2($16, $242, $243);
      __ZplRK6b2Vec2S1_($P4, $15, $16);
      var $244=(($df)|0);
      var $245=HEAPF32[(($244)>>2)];
      var $246=(($23+200)|0);
      var $247=HEAPF32[(($246)>>2)];
      var $248=$245*$247;
      var $249=(($df+4)|0);
      var $250=HEAPF32[(($249)>>2)];
      var $251=$248+$250;
      var $252=(($df+8)|0);
      var $253=HEAPF32[(($252)>>2)];
      var $254=(($23+208)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=$253*$255;
      var $257=$251+$256;
      $LA5=$257;
      var $258=(($df)|0);
      var $259=HEAPF32[(($258)>>2)];
      var $260=(($23+204)|0);
      var $261=HEAPF32[(($260)>>2)];
      var $262=$259*$261;
      var $263=(($df+4)|0);
      var $264=HEAPF32[(($263)>>2)];
      var $265=$262+$264;
      var $266=(($df+8)|0);
      var $267=HEAPF32[(($266)>>2)];
      var $268=(($23+212)|0);
      var $269=HEAPF32[(($268)>>2)];
      var $270=$267*$269;
      var $271=$265+$270;
      $LB6=$271;
      var $272=$mA;
      __ZmlfRK6b2Vec2($17, $272, $P4);
      __ZN6b2Vec2mIERKS_($vA, $17);
      var $273=$iA;
      var $274=$LA5;
      var $275=$273*$274;
      var $276=$wA;
      var $277=$276-$275;
      $wA=$277;
      var $278=$mB;
      __ZmlfRK6b2Vec2($18, $278, $P4);
      __ZN6b2Vec2pLERKS_($vB, $18);
      var $279=$iB;
      var $280=$LB6;
      var $281=$279*$280;
      var $282=$wB;
      var $283=$282+$281;
      $wB=$283;
      __label__ = 16; break;
    case 12: 
      var $285=(($23+216)|0);
      __ZNK6b2Vec2ngEv($19, $Cdot1);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($df7, $285, $19);
      var $286=(($df7)|0);
      var $287=HEAPF32[(($286)>>2)];
      var $288=(($23+104)|0);
      var $289=(($288)|0);
      var $290=HEAPF32[(($289)>>2)];
      var $291=$290+$287;
      HEAPF32[(($289)>>2)]=$291;
      var $292=(($df7+4)|0);
      var $293=HEAPF32[(($292)>>2)];
      var $294=(($23+104)|0);
      var $295=(($294+4)|0);
      var $296=HEAPF32[(($295)>>2)];
      var $297=$296+$293;
      HEAPF32[(($295)>>2)]=$297;
      var $298=(($df7)|0);
      var $299=HEAPF32[(($298)>>2)];
      var $300=(($23+192)|0);
      __ZmlfRK6b2Vec2($P8, $299, $300);
      var $301=(($df7)|0);
      var $302=HEAPF32[(($301)>>2)];
      var $303=(($23+200)|0);
      var $304=HEAPF32[(($303)>>2)];
      var $305=$302*$304;
      var $306=(($df7+4)|0);
      var $307=HEAPF32[(($306)>>2)];
      var $308=$305+$307;
      $LA9=$308;
      var $309=(($df7)|0);
      var $310=HEAPF32[(($309)>>2)];
      var $311=(($23+204)|0);
      var $312=HEAPF32[(($311)>>2)];
      var $313=$310*$312;
      var $314=(($df7+4)|0);
      var $315=HEAPF32[(($314)>>2)];
      var $316=$313+$315;
      $LB10=$316;
      var $317=$mA;
      __ZmlfRK6b2Vec2($20, $317, $P8);
      __ZN6b2Vec2mIERKS_($vA, $20);
      var $318=$iA;
      var $319=$LA9;
      var $320=$318*$319;
      var $321=$wA;
      var $322=$321-$320;
      $wA=$322;
      var $323=$mB;
      __ZmlfRK6b2Vec2($21, $323, $P8);
      __ZN6b2Vec2pLERKS_($vB, $21);
      var $324=$iB;
      var $325=$LB10;
      var $326=$324*$325;
      var $327=$wB;
      var $328=$327+$326;
      $wB=$328;
      var $329=$Cdot10;
      var $330=$Cdot1;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($329)>>2)]=HEAP32[(($330)>>2)];HEAP32[(($329+4)>>2)]=HEAP32[(($330+4)>>2)];
      var $331=(($23+192)|0);
      __ZmiRK6b2Vec2S1_($22, $vB, $vA);
      var $332=__Z5b2DotRK6b2Vec2S1_($331, $22);
      var $333=(($23+204)|0);
      var $334=HEAPF32[(($333)>>2)];
      var $335=$wB;
      var $336=$334*$335;
      var $337=$332+$336;
      var $338=(($23+200)|0);
      var $339=HEAPF32[(($338)>>2)];
      var $340=$wA;
      var $341=$339*$340;
      var $342=$337-$341;
      var $343=(($Cdot1)|0);
      HEAPF32[(($343)>>2)]=$342;
      var $344=$wB;
      var $345=$wA;
      var $346=$344-$345;
      var $347=(($Cdot1+4)|0);
      HEAPF32[(($347)>>2)]=$346;
      var $348=(($Cdot1)|0);
      var $349=HEAPF32[(($348)>>2)];
      var $350=__Z5b2AbsIfET_S0_($349);
      var $351=$350 > 0.009999999776482582;
      if ($351) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $353=(($Cdot1+4)|0);
      var $354=HEAPF32[(($353)>>2)];
      var $355=__Z5b2AbsIfET_S0_($354);
      var $356=$355 > 0.009999999776482582;
      if ($356) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $358=(($23+216)|0);
      __Z7b2Mul22RK7b2Mat33RK6b2Vec2($test, $358, $df7);
      var $359=(($Cdot1)|0);
      var $360=HEAPF32[(($359)>>2)];
      var $361=$360;
      HEAPF32[(($359)>>2)]=$361;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $364=(($23+144)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$2;
      var $367=(($366+28)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=(($368+$365*12)|0);
      var $370=(($369)|0);
      var $371=$370;
      var $372=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($371)>>2)]=HEAP32[(($372)>>2)];HEAP32[(($371+4)>>2)]=HEAP32[(($372+4)>>2)];
      var $373=$wA;
      var $374=(($23+144)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=$2;
      var $377=(($376+28)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=(($378+$375*12)|0);
      var $380=(($379+8)|0);
      HEAPF32[(($380)>>2)]=$373;
      var $381=(($23+148)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=$2;
      var $384=(($383+28)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=(($385+$382*12)|0);
      var $387=(($386)|0);
      var $388=$387;
      var $389=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($388)>>2)]=HEAP32[(($389)>>2)];HEAP32[(($388+4)>>2)]=HEAP32[(($389+4)>>2)];
      var $390=$wB;
      var $391=(($23+148)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=$2;
      var $394=(($393+28)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=(($395+$392*12)|0);
      var $397=(($396+8)|0);
      HEAPF32[(($397)>>2)]=$390;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Vec3ngEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec3C1Ev($agg_result);
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=(-$7);
  var $9=(($2+8)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=(-$10);
  __ZN6b2Vec33SetEfff($agg_result, $5, $8, $11);
  ;
  return;
}


function __ZmiRK6b2Vec3S1_($agg_result, $a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5-$8;
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12-$15;
  var $17=$1;
  var $18=(($17+8)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+8)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$19-$22;
  __ZN6b2Vec3C1Efff($agg_result, $9, $16, $23);
  ;
  return;
}


function __Z7b2Mul22RK7b2Mat33RK6b2Vec2($agg_result, $A, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$A;
  $2=$v;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=$6*$9;
  var $11=$1;
  var $12=(($11+12)|0);
  var $13=(($12)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$2;
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=$14*$17;
  var $19=$10+$18;
  var $20=$1;
  var $21=(($20)|0);
  var $22=(($21+4)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$2;
  var $25=(($24)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$23*$26;
  var $28=$1;
  var $29=(($28+12)|0);
  var $30=(($29+4)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$2;
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$31*$34;
  var $36=$27+$35;
  __ZN6b2Vec2C1Eff($agg_result, $19, $36);
  ;
  return;
}


function __ZNK16b2PrismaticJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+104)|0);
  var $6=(($5+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=$4*$7;
  ;
  return $8;
}


function __ZNK16b2PrismaticJoint14IsLimitEnabledEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+136)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZNK16b2PrismaticJoint13GetLowerLimitEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+120)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK16b2PrismaticJoint13GetUpperLimitEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+124)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK16b2PrismaticJoint14IsMotorEnabledEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+137)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 284; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=__stackBase__+8;
      var $aB;
      var $qA=__stackBase__+16;
      var $qB=__stackBase__+24;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $rA=__stackBase__+32;
      var $3=__stackBase__+40;
      var $rB=__stackBase__+48;
      var $4=__stackBase__+56;
      var $d=__stackBase__+64;
      var $5=__stackBase__+72;
      var $6=__stackBase__+80;
      var $axis=__stackBase__+88;
      var $a1;
      var $7=__stackBase__+96;
      var $a2;
      var $perp=__stackBase__+104;
      var $s1;
      var $8=__stackBase__+112;
      var $s2;
      var $impulse=__stackBase__+120;
      var $C1=__stackBase__+132;
      var $linearError;
      var $angularError;
      var $active;
      var $C2;
      var $translation;
      var $k11;
      var $k12;
      var $k13;
      var $k22;
      var $k23;
      var $k33;
      var $K=__stackBase__+140;
      var $C=__stackBase__+176;
      var $9=__stackBase__+188;
      var $10=__stackBase__+200;
      var $k111;
      var $k122;
      var $k223;
      var $K4=__stackBase__+212;
      var $impulse1=__stackBase__+228;
      var $11=__stackBase__+236;
      var $P=__stackBase__+244;
      var $12=__stackBase__+252;
      var $13=__stackBase__+260;
      var $LA;
      var $LB;
      var $14=__stackBase__+268;
      var $15=__stackBase__+276;
      $1=$this;
      $2=$data;
      var $16=$1;
      var $17=(($16+144)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+$18*12)|0);
      var $23=(($22)|0);
      var $24=$cA;
      var $25=$23;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[(($24+4)>>2)]=HEAP32[(($25+4)>>2)];
      var $26=(($16+144)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+$27*12)|0);
      var $32=(($31+8)|0);
      var $33=HEAPF32[(($32)>>2)];
      $aA=$33;
      var $34=(($16+148)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+$35*12)|0);
      var $40=(($39)|0);
      var $41=$cB;
      var $42=$40;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[(($41+4)>>2)]=HEAP32[(($42+4)>>2)];
      var $43=(($16+148)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+$44*12)|0);
      var $49=(($48+8)|0);
      var $50=HEAPF32[(($49)>>2)];
      $aB=$50;
      var $51=$aA;
      __ZN5b2RotC1Ef($qA, $51);
      var $52=$aB;
      __ZN5b2RotC1Ef($qB, $52);
      var $53=(($16+168)|0);
      var $54=HEAPF32[(($53)>>2)];
      $mA=$54;
      var $55=(($16+172)|0);
      var $56=HEAPF32[(($55)>>2)];
      $mB=$56;
      var $57=(($16+176)|0);
      var $58=HEAPF32[(($57)>>2)];
      $iA=$58;
      var $59=(($16+180)|0);
      var $60=HEAPF32[(($59)>>2)];
      $iB=$60;
      var $61=(($16+68)|0);
      var $62=(($16+152)|0);
      __ZmiRK6b2Vec2S1_($3, $61, $62);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $63=(($16+76)|0);
      var $64=(($16+160)|0);
      __ZmiRK6b2Vec2S1_($4, $63, $64);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $65=(($16+84)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($axis, $qA, $65);
      __ZplRK6b2Vec2S1_($7, $d, $rA);
      var $66=__Z7b2CrossRK6b2Vec2S1_($7, $axis);
      $a1=$66;
      var $67=__Z7b2CrossRK6b2Vec2S1_($rB, $axis);
      $a2=$67;
      var $68=(($16+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($perp, $qA, $68);
      __ZplRK6b2Vec2S1_($8, $d, $rA);
      var $69=__Z7b2CrossRK6b2Vec2S1_($8, $perp);
      $s1=$69;
      var $70=__Z7b2CrossRK6b2Vec2S1_($rB, $perp);
      $s2=$70;
      __ZN6b2Vec3C1Ev($impulse);
      __ZN6b2Vec2C1Ev($C1);
      var $71=__Z5b2DotRK6b2Vec2S1_($perp, $d);
      var $72=(($C1)|0);
      HEAPF32[(($72)>>2)]=$71;
      var $73=$aB;
      var $74=$aA;
      var $75=$73-$74;
      var $76=(($16+100)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=$75-$77;
      var $79=(($C1+4)|0);
      HEAPF32[(($79)>>2)]=$78;
      var $80=(($C1)|0);
      var $81=HEAPF32[(($80)>>2)];
      var $82=__Z5b2AbsIfET_S0_($81);
      $linearError=$82;
      var $83=(($C1+4)|0);
      var $84=HEAPF32[(($83)>>2)];
      var $85=__Z5b2AbsIfET_S0_($84);
      $angularError=$85;
      $active=0;
      $C2=0;
      var $86=(($16+136)|0);
      var $87=HEAP8[($86)];
      var $88=(($87) & 1);
      if ($88) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $90=__Z5b2DotRK6b2Vec2S1_($axis, $d);
      $translation=$90;
      var $91=(($16+124)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=(($16+120)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=$92-$94;
      var $96=__Z5b2AbsIfET_S0_($95);
      var $97=$96 < 0.009999999776482582;
      if ($97) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $99=$translation;
      var $100=__Z7b2ClampIfET_S0_S0_S0_($99, -0.20000000298023224, 0.20000000298023224);
      $C2=$100;
      var $101=$linearError;
      var $102=$translation;
      var $103=__Z5b2AbsIfET_S0_($102);
      var $104=__Z5b2MaxIfET_S0_S0_($101, $103);
      $linearError=$104;
      $active=1;
      __label__ = 10; break;
    case 4: 
      var $106=$translation;
      var $107=(($16+120)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=$106 <= $108;
      if ($109) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $111=$translation;
      var $112=(($16+120)|0);
      var $113=HEAPF32[(($112)>>2)];
      var $114=$111-$113;
      var $115=$114+0.004999999888241291;
      var $116=__Z7b2ClampIfET_S0_S0_S0_($115, -0.20000000298023224, 0);
      $C2=$116;
      var $117=$linearError;
      var $118=(($16+120)|0);
      var $119=HEAPF32[(($118)>>2)];
      var $120=$translation;
      var $121=$119-$120;
      var $122=__Z5b2MaxIfET_S0_S0_($117, $121);
      $linearError=$122;
      $active=1;
      __label__ = 9; break;
    case 6: 
      var $124=$translation;
      var $125=(($16+124)|0);
      var $126=HEAPF32[(($125)>>2)];
      var $127=$124 >= $126;
      if ($127) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $129=$translation;
      var $130=(($16+124)|0);
      var $131=HEAPF32[(($130)>>2)];
      var $132=$129-$131;
      var $133=$132-0.004999999888241291;
      var $134=__Z7b2ClampIfET_S0_S0_S0_($133, 0, 0.20000000298023224);
      $C2=$134;
      var $135=$linearError;
      var $136=$translation;
      var $137=(($16+124)|0);
      var $138=HEAPF32[(($137)>>2)];
      var $139=$136-$138;
      var $140=__Z5b2MaxIfET_S0_S0_($135, $139);
      $linearError=$140;
      $active=1;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $145=$active;
      var $146=(($145) & 1);
      if ($146) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $148=$mA;
      var $149=$mB;
      var $150=$148+$149;
      var $151=$iA;
      var $152=$s1;
      var $153=$151*$152;
      var $154=$s1;
      var $155=$153*$154;
      var $156=$150+$155;
      var $157=$iB;
      var $158=$s2;
      var $159=$157*$158;
      var $160=$s2;
      var $161=$159*$160;
      var $162=$156+$161;
      $k11=$162;
      var $163=$iA;
      var $164=$s1;
      var $165=$163*$164;
      var $166=$iB;
      var $167=$s2;
      var $168=$166*$167;
      var $169=$165+$168;
      $k12=$169;
      var $170=$iA;
      var $171=$s1;
      var $172=$170*$171;
      var $173=$a1;
      var $174=$172*$173;
      var $175=$iB;
      var $176=$s2;
      var $177=$175*$176;
      var $178=$a2;
      var $179=$177*$178;
      var $180=$174+$179;
      $k13=$180;
      var $181=$iA;
      var $182=$iB;
      var $183=$181+$182;
      $k22=$183;
      var $184=$k22;
      var $185=$184 == 0;
      if ($185) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $k22=1;
      __label__ = 14; break;
    case 14: 
      var $188=$iA;
      var $189=$a1;
      var $190=$188*$189;
      var $191=$iB;
      var $192=$a2;
      var $193=$191*$192;
      var $194=$190+$193;
      $k23=$194;
      var $195=$mA;
      var $196=$mB;
      var $197=$195+$196;
      var $198=$iA;
      var $199=$a1;
      var $200=$198*$199;
      var $201=$a1;
      var $202=$200*$201;
      var $203=$197+$202;
      var $204=$iB;
      var $205=$a2;
      var $206=$204*$205;
      var $207=$a2;
      var $208=$206*$207;
      var $209=$203+$208;
      $k33=$209;
      __ZN7b2Mat33C1Ev($K);
      var $210=(($K)|0);
      var $211=$k11;
      var $212=$k12;
      var $213=$k13;
      __ZN6b2Vec33SetEfff($210, $211, $212, $213);
      var $214=(($K+12)|0);
      var $215=$k12;
      var $216=$k22;
      var $217=$k23;
      __ZN6b2Vec33SetEfff($214, $215, $216, $217);
      var $218=(($K+24)|0);
      var $219=$k13;
      var $220=$k23;
      var $221=$k33;
      __ZN6b2Vec33SetEfff($218, $219, $220, $221);
      __ZN6b2Vec3C1Ev($C);
      var $222=(($C1)|0);
      var $223=HEAPF32[(($222)>>2)];
      var $224=(($C)|0);
      HEAPF32[(($224)>>2)]=$223;
      var $225=(($C1+4)|0);
      var $226=HEAPF32[(($225)>>2)];
      var $227=(($C+4)|0);
      HEAPF32[(($227)>>2)]=$226;
      var $228=$C2;
      var $229=(($C+8)|0);
      HEAPF32[(($229)>>2)]=$228;
      __ZNK6b2Vec3ngEv($10, $C);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($9, $K, $10);
      var $230=$impulse;
      var $231=$9;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($230)>>2)]=HEAP32[(($231)>>2)];HEAP32[(($230+4)>>2)]=HEAP32[(($231+4)>>2)];HEAP32[(($230+8)>>2)]=HEAP32[(($231+8)>>2)];
      __label__ = 18; break;
    case 15: 
      var $233=$mA;
      var $234=$mB;
      var $235=$233+$234;
      var $236=$iA;
      var $237=$s1;
      var $238=$236*$237;
      var $239=$s1;
      var $240=$238*$239;
      var $241=$235+$240;
      var $242=$iB;
      var $243=$s2;
      var $244=$242*$243;
      var $245=$s2;
      var $246=$244*$245;
      var $247=$241+$246;
      $k111=$247;
      var $248=$iA;
      var $249=$s1;
      var $250=$248*$249;
      var $251=$iB;
      var $252=$s2;
      var $253=$251*$252;
      var $254=$250+$253;
      $k122=$254;
      var $255=$iA;
      var $256=$iB;
      var $257=$255+$256;
      $k223=$257;
      var $258=$k223;
      var $259=$258 == 0;
      if ($259) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $k223=1;
      __label__ = 17; break;
    case 17: 
      __ZN7b2Mat22C1Ev($K4);
      var $262=(($K4)|0);
      var $263=$k111;
      var $264=$k122;
      __ZN6b2Vec23SetEff($262, $263, $264);
      var $265=(($K4+8)|0);
      var $266=$k122;
      var $267=$k223;
      __ZN6b2Vec23SetEff($265, $266, $267);
      __ZNK6b2Vec2ngEv($11, $C1);
      __ZNK7b2Mat225SolveERK6b2Vec2($impulse1, $K4, $11);
      var $268=(($impulse1)|0);
      var $269=HEAPF32[(($268)>>2)];
      var $270=(($impulse)|0);
      HEAPF32[(($270)>>2)]=$269;
      var $271=(($impulse1+4)|0);
      var $272=HEAPF32[(($271)>>2)];
      var $273=(($impulse+4)|0);
      HEAPF32[(($273)>>2)]=$272;
      var $274=(($impulse+8)|0);
      HEAPF32[(($274)>>2)]=0;
      __label__ = 18; break;
    case 18: 
      var $276=(($impulse)|0);
      var $277=HEAPF32[(($276)>>2)];
      __ZmlfRK6b2Vec2($12, $277, $perp);
      var $278=(($impulse+8)|0);
      var $279=HEAPF32[(($278)>>2)];
      __ZmlfRK6b2Vec2($13, $279, $axis);
      __ZplRK6b2Vec2S1_($P, $12, $13);
      var $280=(($impulse)|0);
      var $281=HEAPF32[(($280)>>2)];
      var $282=$s1;
      var $283=$281*$282;
      var $284=(($impulse+4)|0);
      var $285=HEAPF32[(($284)>>2)];
      var $286=$283+$285;
      var $287=(($impulse+8)|0);
      var $288=HEAPF32[(($287)>>2)];
      var $289=$a1;
      var $290=$288*$289;
      var $291=$286+$290;
      $LA=$291;
      var $292=(($impulse)|0);
      var $293=HEAPF32[(($292)>>2)];
      var $294=$s2;
      var $295=$293*$294;
      var $296=(($impulse+4)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=$295+$297;
      var $299=(($impulse+8)|0);
      var $300=HEAPF32[(($299)>>2)];
      var $301=$a2;
      var $302=$300*$301;
      var $303=$298+$302;
      $LB=$303;
      var $304=$mA;
      __ZmlfRK6b2Vec2($14, $304, $P);
      __ZN6b2Vec2mIERKS_($cA, $14);
      var $305=$iA;
      var $306=$LA;
      var $307=$305*$306;
      var $308=$aA;
      var $309=$308-$307;
      $aA=$309;
      var $310=$mB;
      __ZmlfRK6b2Vec2($15, $310, $P);
      __ZN6b2Vec2pLERKS_($cB, $15);
      var $311=$iB;
      var $312=$LB;
      var $313=$311*$312;
      var $314=$aB;
      var $315=$314+$313;
      $aB=$315;
      var $316=(($16+144)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=$2;
      var $319=(($318+24)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+$317*12)|0);
      var $322=(($321)|0);
      var $323=$322;
      var $324=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($323)>>2)]=HEAP32[(($324)>>2)];HEAP32[(($323+4)>>2)]=HEAP32[(($324+4)>>2)];
      var $325=$aA;
      var $326=(($16+144)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=$2;
      var $329=(($328+24)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=(($330+$327*12)|0);
      var $332=(($331+8)|0);
      HEAPF32[(($332)>>2)]=$325;
      var $333=(($16+148)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=$2;
      var $336=(($335+24)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337+$334*12)|0);
      var $339=(($338)|0);
      var $340=$339;
      var $341=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($340)>>2)]=HEAP32[(($341)>>2)];HEAP32[(($340+4)>>2)]=HEAP32[(($341+4)>>2)];
      var $342=$aB;
      var $343=(($16+148)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=$2;
      var $346=(($345+24)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=(($347+$344*12)|0);
      var $349=(($348+8)|0);
      HEAPF32[(($349)>>2)]=$342;
      var $350=$linearError;
      var $351=$350 <= 0.004999999888241291;
      if ($351) { __label__ = 19; break; } else { var $356 = 0;__label__ = 20; break; }
    case 19: 
      var $353=$angularError;
      var $354=$353 <= 0.03490658849477768;
      var $356 = $354;__label__ = 20; break;
    case 20: 
      var $356;
      STACKTOP = __stackBase__;
      return $356;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK7b2Mat225SolveERK6b2Vec2($agg_result, $this, $b) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $a11;
      var $a12;
      var $a21;
      var $a22;
      var $det;
      $1=$this;
      $2=$b;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAPF32[(($5)>>2)];
      $a11=$6;
      var $7=(($3+8)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      $a12=$9;
      var $10=(($3)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      $a21=$12;
      var $13=(($3+8)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      $a22=$15;
      var $16=$a11;
      var $17=$a22;
      var $18=$16*$17;
      var $19=$a12;
      var $20=$a21;
      var $21=$19*$20;
      var $22=$18-$21;
      $det=$22;
      var $23=$det;
      var $24=$23 != 0;
      if ($24) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $26=$det;
      var $27=1/$26;
      $det=$27;
      __label__ = 3; break;
    case 3: 
      __ZN6b2Vec2C1Ev($agg_result);
      var $29=$det;
      var $30=$a22;
      var $31=$2;
      var $32=(($31)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=$30*$33;
      var $35=$a12;
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=$35*$38;
      var $40=$34-$39;
      var $41=$29*$40;
      var $42=(($agg_result)|0);
      HEAPF32[(($42)>>2)]=$41;
      var $43=$det;
      var $44=$a11;
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=$44*$47;
      var $49=$a21;
      var $50=$2;
      var $51=(($50)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=$49*$52;
      var $54=$48-$53;
      var $55=$43*$54;
      var $56=(($agg_result+4)|0);
      HEAPF32[(($56)>>2)]=$55;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK16b2PrismaticJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK16b2PrismaticJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK16b2PrismaticJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=__stackBase__+8;
  var $5=__stackBase__+16;
  $1=$this;
  $2=$inv_dt;
  var $6=$1;
  var $7=$2;
  var $8=(($6+104)|0);
  var $9=(($8)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=(($6+192)|0);
  __ZmlfRK6b2Vec2($4, $10, $11);
  var $12=(($6+116)|0);
  var $13=HEAPF32[(($12)>>2)];
  var $14=(($6+104)|0);
  var $15=(($14+8)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=$13+$16;
  var $18=(($6+184)|0);
  __ZmlfRK6b2Vec2($5, $17, $18);
  __ZplRK6b2Vec2S1_($3, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, $7, $3);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK16b2PrismaticJoint19GetJointTranslationEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $pA=__stackBase__;
  var $pB=__stackBase__+8;
  var $d=__stackBase__+16;
  var $axis=__stackBase__+24;
  var $translation;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pA, $5, $6);
  var $7=$2;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pB, $9, $10);
  __ZmiRK6b2Vec2S1_($d, $pB, $pA);
  var $11=$2;
  var $12=(($11+48)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($2+84)|0);
  __ZNK6b2Body14GetWorldVectorERK6b2Vec2($axis, $13, $14);
  var $15=__Z5b2DotRK6b2Vec2S1_($d, $axis);
  $translation=$15;
  var $16=$translation;
  STACKTOP = __stackBase__;
  return $16;
}


function __ZNK6b2Body14GetWorldVectorERK6b2Vec2($agg_result, $this, $localVector) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$localVector;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=(($4+8)|0);
  var $6=$2;
  __Z5b2MulRK5b2RotRK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK16b2PrismaticJoint13GetJointSpeedEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $bA;
  var $bB;
  var $rA=__stackBase__;
  var $2=__stackBase__+8;
  var $rB=__stackBase__+16;
  var $3=__stackBase__+24;
  var $p1=__stackBase__+32;
  var $p2=__stackBase__+40;
  var $d=__stackBase__+48;
  var $axis=__stackBase__+56;
  var $vA=__stackBase__+64;
  var $vB=__stackBase__+72;
  var $wA;
  var $wB;
  var $speed;
  var $4=__stackBase__+80;
  var $5=__stackBase__+88;
  var $6=__stackBase__+96;
  var $7=__stackBase__+104;
  var $8=__stackBase__+112;
  var $9=__stackBase__+120;
  $1=$this;
  var $10=$1;
  var $11=$10;
  var $12=(($11+48)|0);
  var $13=HEAP32[(($12)>>2)];
  $bA=$13;
  var $14=$10;
  var $15=(($14+52)|0);
  var $16=HEAP32[(($15)>>2)];
  $bB=$16;
  var $17=$bA;
  var $18=(($17+12)|0);
  var $19=(($18+8)|0);
  var $20=(($10+68)|0);
  var $21=$bA;
  var $22=(($21+28)|0);
  var $23=(($22)|0);
  __ZmiRK6b2Vec2S1_($2, $20, $23);
  __Z5b2MulRK5b2RotRK6b2Vec2($rA, $19, $2);
  var $24=$bB;
  var $25=(($24+12)|0);
  var $26=(($25+8)|0);
  var $27=(($10+76)|0);
  var $28=$bB;
  var $29=(($28+28)|0);
  var $30=(($29)|0);
  __ZmiRK6b2Vec2S1_($3, $27, $30);
  __Z5b2MulRK5b2RotRK6b2Vec2($rB, $26, $3);
  var $31=$bA;
  var $32=(($31+28)|0);
  var $33=(($32+16)|0);
  __ZplRK6b2Vec2S1_($p1, $33, $rA);
  var $34=$bB;
  var $35=(($34+28)|0);
  var $36=(($35+16)|0);
  __ZplRK6b2Vec2S1_($p2, $36, $rB);
  __ZmiRK6b2Vec2S1_($d, $p2, $p1);
  var $37=$bA;
  var $38=(($37+12)|0);
  var $39=(($38+8)|0);
  var $40=(($10+84)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($axis, $39, $40);
  var $41=$bA;
  var $42=(($41+64)|0);
  var $43=$vA;
  var $44=$42;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[(($43+4)>>2)]=HEAP32[(($44+4)>>2)];
  var $45=$bB;
  var $46=(($45+64)|0);
  var $47=$vB;
  var $48=$46;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[(($47+4)>>2)]=HEAP32[(($48+4)>>2)];
  var $49=$bA;
  var $50=(($49+72)|0);
  var $51=HEAPF32[(($50)>>2)];
  $wA=$51;
  var $52=$bB;
  var $53=(($52+72)|0);
  var $54=HEAPF32[(($53)>>2)];
  $wB=$54;
  var $55=$wA;
  __Z7b2CrossfRK6b2Vec2($4, $55, $axis);
  var $56=__Z5b2DotRK6b2Vec2S1_($d, $4);
  var $57=$wB;
  __Z7b2CrossfRK6b2Vec2($8, $57, $rB);
  __ZplRK6b2Vec2S1_($7, $vB, $8);
  __ZmiRK6b2Vec2S1_($6, $7, $vA);
  var $58=$wA;
  __Z7b2CrossfRK6b2Vec2($9, $58, $rA);
  __ZmiRK6b2Vec2S1_($5, $6, $9);
  var $59=__Z5b2DotRK6b2Vec2S1_($axis, $5);
  var $60=$56+$59;
  $speed=$60;
  var $61=$speed;
  STACKTOP = __stackBase__;
  return $61;
}


function __ZN16b2PrismaticJoint11EnableLimitEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&1);
      var $8=(($4+136)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&1);
      var $12=(($7)|0)!=(($11)|0);
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $14=$4;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      __ZN6b2Body8SetAwakeEb($16, 1);
      var $17=$4;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      __ZN6b2Body8SetAwakeEb($19, 1);
      var $20=$2;
      var $21=(($20) & 1);
      var $22=(($4+136)|0);
      var $23=(($21)&1);
      HEAP8[($22)]=$23;
      var $24=(($4+104)|0);
      var $25=(($24+8)|0);
      HEAPF32[(($25)>>2)]=0;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2PrismaticJoint9SetLimitsEff($this, $lower, $upper) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$lower;
      $3=$upper;
      var $4=$1;
      var $5=$2;
      var $6=$3;
      var $7=$5 <= $6;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str334)|0), 575, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PrismaticJoint9SetLimitsEff)|0), ((STRING_TABLE.__str1335)|0));
      __label__ = 4; break;
    case 4: 
      var $11=$2;
      var $12=(($4+120)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=$11 != $13;
      if ($14) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $16=$3;
      var $17=(($4+124)|0);
      var $18=HEAPF32[(($17)>>2)];
      var $19=$16 != $18;
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $21=$4;
      var $22=(($21+48)|0);
      var $23=HEAP32[(($22)>>2)];
      __ZN6b2Body8SetAwakeEb($23, 1);
      var $24=$4;
      var $25=(($24+52)|0);
      var $26=HEAP32[(($25)>>2)];
      __ZN6b2Body8SetAwakeEb($26, 1);
      var $27=$2;
      var $28=(($4+120)|0);
      HEAPF32[(($28)>>2)]=$27;
      var $29=$3;
      var $30=(($4+124)|0);
      HEAPF32[(($30)>>2)]=$29;
      var $31=(($4+104)|0);
      var $32=(($31+8)|0);
      HEAPF32[(($32)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2PrismaticJoint11EnableMotorEb($this, $flag) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&1);
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+48)|0);
  var $7=HEAP32[(($6)>>2)];
  __ZN6b2Body8SetAwakeEb($7, 1);
  var $8=$4;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  __ZN6b2Body8SetAwakeEb($10, 1);
  var $11=$2;
  var $12=(($11) & 1);
  var $13=(($4+137)|0);
  var $14=(($12)&1);
  HEAP8[($13)]=$14;
  ;
  return;
}


function __ZN16b2PrismaticJoint13SetMotorSpeedEf($this, $speed) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$speed;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+132)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function __ZNK16b2PrismaticJoint13GetMotorForceEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+116)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  ;
  return $7;
}


function __ZN16b2PrismaticJoint16SetMaxMotorForceEf($this, $force) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$force;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+128)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function __ZN16b2PrismaticJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str2336)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str3337)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str4338)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str5339)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str6340)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str7341)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+84)|0);
  var $37=(($36)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$38;
  var $40=(($2+84)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$42;
  __Z5b2LogPKcz(((STRING_TABLE.__str8342)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$39,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$43,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $44=(($2+100)|0);
  var $45=HEAPF32[(($44)>>2)];
  var $46=$45;
  __Z5b2LogPKcz(((STRING_TABLE.__str9343)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$46,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $47=(($2+136)|0);
  var $48=HEAP8[($47)];
  var $49=(($48) & 1);
  var $50=(($49)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str10344)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$50,tempInt));
  var $51=(($2+120)|0);
  var $52=HEAPF32[(($51)>>2)];
  var $53=$52;
  __Z5b2LogPKcz(((STRING_TABLE.__str11345)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$53,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $54=(($2+124)|0);
  var $55=HEAPF32[(($54)>>2)];
  var $56=$55;
  __Z5b2LogPKcz(((STRING_TABLE.__str12346)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$56,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $57=(($2+137)|0);
  var $58=HEAP8[($57)];
  var $59=(($58) & 1);
  var $60=(($59)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str13347)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$60,tempInt));
  var $61=(($2+132)|0);
  var $62=HEAPF32[(($61)>>2)];
  var $63=$62;
  __Z5b2LogPKcz(((STRING_TABLE.__str14348)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$63,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $64=(($2+128)|0);
  var $65=HEAPF32[(($64)>>2)];
  var $66=$65;
  __Z5b2LogPKcz(((STRING_TABLE.__str15349)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$66,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $67=$2;
  var $68=(($67+56)|0);
  var $69=HEAP32[(($68)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str16350)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$69,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN16b2PrismaticJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2PrismaticJointD2Ev($2);
  ;
  return;
}


function __ZN16b2PrismaticJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN16b2PrismaticJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2PrismaticJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN7b2Mat33C2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec3C1Ev($3);
  var $4=(($2+12)|0);
  __ZN6b2Vec3C1Ev($4);
  var $5=(($2+24)|0);
  __ZN6b2Vec3C1Ev($5);
  ;
  return;
}


function __ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f($this, $bA, $bB, $groundA, $groundB, $anchorA, $anchorB, $r) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9=__stackBase__;
      var $10=__stackBase__+8;
      var $dA=__stackBase__+16;
      var $dB=__stackBase__+24;
      $1=$this;
      $2=$bA;
      $3=$bB;
      $4=$groundA;
      $5=$groundB;
      $6=$anchorA;
      $7=$anchorB;
      $8=$r;
      var $11=$1;
      var $12=$2;
      var $13=$11;
      var $14=(($13+8)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$3;
      var $16=$11;
      var $17=(($16+12)|0);
      HEAP32[(($17)>>2)]=$15;
      var $18=(($11+20)|0);
      var $19=$4;
      var $20=$18;
      var $21=$19;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[(($20+4)>>2)]=HEAP32[(($21+4)>>2)];
      var $22=(($11+28)|0);
      var $23=$5;
      var $24=$22;
      var $25=$23;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[(($24+4)>>2)]=HEAP32[(($25+4)>>2)];
      var $26=(($11+36)|0);
      var $27=$11;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$6;
      __ZNK6b2Body13GetLocalPointERK6b2Vec2($9, $29, $30);
      var $31=$26;
      var $32=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[(($31+4)>>2)]=HEAP32[(($32+4)>>2)];
      var $33=(($11+44)|0);
      var $34=$11;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$7;
      __ZNK6b2Body13GetLocalPointERK6b2Vec2($10, $36, $37);
      var $38=$33;
      var $39=$10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[(($38+4)>>2)]=HEAP32[(($39+4)>>2)];
      var $40=$6;
      var $41=$4;
      __ZmiRK6b2Vec2S1_($dA, $40, $41);
      var $42=__ZNK6b2Vec26LengthEv($dA);
      var $43=(($11+52)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$7;
      var $45=$5;
      __ZmiRK6b2Vec2S1_($dB, $44, $45);
      var $46=__ZNK6b2Vec26LengthEv($dB);
      var $47=(($11+56)|0);
      HEAPF32[(($47)>>2)]=$46;
      var $48=$8;
      var $49=(($11+60)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=(($11+60)|0);
      var $51=HEAPF32[(($50)>>2)];
      var $52=$51 > 1.1920928955078125e-7;
      if ($52) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str353)|0), 51, ((STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f)|0), ((STRING_TABLE.__str1354)|0));
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 144; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      var $6=__stackBase__+72;
      var $7=__stackBase__+80;
      var $8=__stackBase__+88;
      var $9=__stackBase__+96;
      var $10=__stackBase__+104;
      var $lengthA;
      var $lengthB;
      var $ruA;
      var $ruB;
      var $mA;
      var $mB;
      var $PA=__stackBase__+112;
      var $PB=__stackBase__+120;
      var $11=__stackBase__+128;
      var $12=__stackBase__+136;
      $1=$this;
      $2=$data;
      var $13=$1;
      var $14=$13;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($13+120)|0);
      HEAP32[(($19)>>2)]=$18;
      var $20=$13;
      var $21=(($20+52)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($13+124)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=(($13+160)|0);
      var $27=$13;
      var $28=(($27+48)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+28)|0);
      var $31=(($30)|0);
      var $32=$26;
      var $33=$31;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
      var $34=(($13+168)|0);
      var $35=$13;
      var $36=(($35+52)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+28)|0);
      var $39=(($38)|0);
      var $40=$34;
      var $41=$39;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      var $42=$13;
      var $43=(($42+48)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+120)|0);
      var $46=HEAPF32[(($45)>>2)];
      var $47=(($13+176)|0);
      HEAPF32[(($47)>>2)]=$46;
      var $48=$13;
      var $49=(($48+52)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+120)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($13+180)|0);
      HEAPF32[(($53)>>2)]=$52;
      var $54=$13;
      var $55=(($54+48)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+128)|0);
      var $58=HEAPF32[(($57)>>2)];
      var $59=(($13+184)|0);
      HEAPF32[(($59)>>2)]=$58;
      var $60=$13;
      var $61=(($60+52)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+128)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=(($13+188)|0);
      HEAPF32[(($65)>>2)]=$64;
      var $66=(($13+120)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$2;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+$67*12)|0);
      var $72=(($71)|0);
      var $73=$cA;
      var $74=$72;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[(($73+4)>>2)]=HEAP32[(($74+4)>>2)];
      var $75=(($13+120)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$2;
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+$76*12)|0);
      var $81=(($80+8)|0);
      var $82=HEAPF32[(($81)>>2)];
      $aA=$82;
      var $83=(($13+120)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+28)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+$84*12)|0);
      var $89=(($88)|0);
      var $90=$vA;
      var $91=$89;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[(($90+4)>>2)]=HEAP32[(($91+4)>>2)];
      var $92=(($13+120)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$2;
      var $95=(($94+28)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+$93*12)|0);
      var $98=(($97+8)|0);
      var $99=HEAPF32[(($98)>>2)];
      $wA=$99;
      var $100=(($13+124)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$2;
      var $103=(($102+24)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+$101*12)|0);
      var $106=(($105)|0);
      var $107=$cB;
      var $108=$106;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($107)>>2)]=HEAP32[(($108)>>2)];HEAP32[(($107+4)>>2)]=HEAP32[(($108+4)>>2)];
      var $109=(($13+124)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$2;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+$110*12)|0);
      var $115=(($114+8)|0);
      var $116=HEAPF32[(($115)>>2)];
      $aB=$116;
      var $117=(($13+124)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$2;
      var $120=(($119+28)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+$118*12)|0);
      var $123=(($122)|0);
      var $124=$vB;
      var $125=$123;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[(($124+4)>>2)]=HEAP32[(($125+4)>>2)];
      var $126=(($13+124)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$2;
      var $129=(($128+28)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+$127*12)|0);
      var $132=(($131+8)|0);
      var $133=HEAPF32[(($132)>>2)];
      $wB=$133;
      var $134=$aA;
      __ZN5b2RotC1Ef($qA, $134);
      var $135=$aB;
      __ZN5b2RotC1Ef($qB, $135);
      var $136=(($13+144)|0);
      var $137=(($13+92)|0);
      var $138=(($13+160)|0);
      __ZmiRK6b2Vec2S1_($4, $137, $138);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $139=$136;
      var $140=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];HEAP32[(($139+4)>>2)]=HEAP32[(($140+4)>>2)];
      var $141=(($13+152)|0);
      var $142=(($13+100)|0);
      var $143=(($13+168)|0);
      __ZmiRK6b2Vec2S1_($6, $142, $143);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $144=$141;
      var $145=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[(($144+4)>>2)]=HEAP32[(($145+4)>>2)];
      var $146=(($13+128)|0);
      var $147=(($13+144)|0);
      __ZplRK6b2Vec2S1_($8, $cA, $147);
      var $148=(($13+68)|0);
      __ZmiRK6b2Vec2S1_($7, $8, $148);
      var $149=$146;
      var $150=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($149)>>2)]=HEAP32[(($150)>>2)];HEAP32[(($149+4)>>2)]=HEAP32[(($150+4)>>2)];
      var $151=(($13+136)|0);
      var $152=(($13+152)|0);
      __ZplRK6b2Vec2S1_($10, $cB, $152);
      var $153=(($13+76)|0);
      __ZmiRK6b2Vec2S1_($9, $10, $153);
      var $154=$151;
      var $155=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($154)>>2)]=HEAP32[(($155)>>2)];HEAP32[(($154+4)>>2)]=HEAP32[(($155+4)>>2)];
      var $156=(($13+128)|0);
      var $157=__ZNK6b2Vec26LengthEv($156);
      $lengthA=$157;
      var $158=(($13+136)|0);
      var $159=__ZNK6b2Vec26LengthEv($158);
      $lengthB=$159;
      var $160=$lengthA;
      var $161=$160 > 0.04999999701976776;
      if ($161) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $163=(($13+128)|0);
      var $164=$lengthA;
      var $165=1/$164;
      __ZN6b2Vec2mLEf($163, $165);
      __label__ = 4; break;
    case 3: 
      var $167=(($13+128)|0);
      __ZN6b2Vec27SetZeroEv($167);
      __label__ = 4; break;
    case 4: 
      var $169=$lengthB;
      var $170=$169 > 0.04999999701976776;
      if ($170) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $172=(($13+136)|0);
      var $173=$lengthB;
      var $174=1/$173;
      __ZN6b2Vec2mLEf($172, $174);
      __label__ = 7; break;
    case 6: 
      var $176=(($13+136)|0);
      __ZN6b2Vec27SetZeroEv($176);
      __label__ = 7; break;
    case 7: 
      var $178=(($13+144)|0);
      var $179=(($13+128)|0);
      var $180=__Z7b2CrossRK6b2Vec2S1_($178, $179);
      $ruA=$180;
      var $181=(($13+152)|0);
      var $182=(($13+136)|0);
      var $183=__Z7b2CrossRK6b2Vec2S1_($181, $182);
      $ruB=$183;
      var $184=(($13+176)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(($13+184)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=$ruA;
      var $189=$187*$188;
      var $190=$ruA;
      var $191=$189*$190;
      var $192=$185+$191;
      $mA=$192;
      var $193=(($13+180)|0);
      var $194=HEAPF32[(($193)>>2)];
      var $195=(($13+188)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=$ruB;
      var $198=$196*$197;
      var $199=$ruB;
      var $200=$198*$199;
      var $201=$194+$200;
      $mB=$201;
      var $202=$mA;
      var $203=(($13+112)|0);
      var $204=HEAPF32[(($203)>>2)];
      var $205=(($13+112)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=$204*$206;
      var $208=$mB;
      var $209=$207*$208;
      var $210=$202+$209;
      var $211=(($13+192)|0);
      HEAPF32[(($211)>>2)]=$210;
      var $212=(($13+192)|0);
      var $213=HEAPF32[(($212)>>2)];
      var $214=$213 > 0;
      if ($214) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $216=(($13+192)|0);
      var $217=HEAPF32[(($216)>>2)];
      var $218=1/$217;
      var $219=(($13+192)|0);
      HEAPF32[(($219)>>2)]=$218;
      __label__ = 9; break;
    case 9: 
      var $221=$2;
      var $222=(($221)|0);
      var $223=(($222+20)|0);
      var $224=HEAP8[($223)];
      var $225=(($224) & 1);
      if ($225) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $227=$2;
      var $228=(($227)|0);
      var $229=(($228+8)|0);
      var $230=HEAPF32[(($229)>>2)];
      var $231=(($13+116)|0);
      var $232=HEAPF32[(($231)>>2)];
      var $233=$232*$230;
      HEAPF32[(($231)>>2)]=$233;
      var $234=(($13+116)|0);
      var $235=HEAPF32[(($234)>>2)];
      var $236=(-$235);
      var $237=(($13+128)|0);
      __ZmlfRK6b2Vec2($PA, $236, $237);
      var $238=(($13+112)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=(-$239);
      var $241=(($13+116)|0);
      var $242=HEAPF32[(($241)>>2)];
      var $243=$240*$242;
      var $244=(($13+136)|0);
      __ZmlfRK6b2Vec2($PB, $243, $244);
      var $245=(($13+176)|0);
      var $246=HEAPF32[(($245)>>2)];
      __ZmlfRK6b2Vec2($11, $246, $PA);
      __ZN6b2Vec2pLERKS_($vA, $11);
      var $247=(($13+184)|0);
      var $248=HEAPF32[(($247)>>2)];
      var $249=(($13+144)|0);
      var $250=__Z7b2CrossRK6b2Vec2S1_($249, $PA);
      var $251=$248*$250;
      var $252=$wA;
      var $253=$252+$251;
      $wA=$253;
      var $254=(($13+180)|0);
      var $255=HEAPF32[(($254)>>2)];
      __ZmlfRK6b2Vec2($12, $255, $PB);
      __ZN6b2Vec2pLERKS_($vB, $12);
      var $256=(($13+188)|0);
      var $257=HEAPF32[(($256)>>2)];
      var $258=(($13+152)|0);
      var $259=__Z7b2CrossRK6b2Vec2S1_($258, $PB);
      var $260=$257*$259;
      var $261=$wB;
      var $262=$261+$260;
      $wB=$262;
      __label__ = 12; break;
    case 11: 
      var $264=(($13+116)|0);
      HEAPF32[(($264)>>2)]=0;
      __label__ = 12; break;
    case 12: 
      var $266=(($13+120)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=$2;
      var $269=(($268+28)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270+$267*12)|0);
      var $272=(($271)|0);
      var $273=$272;
      var $274=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];HEAP32[(($273+4)>>2)]=HEAP32[(($274+4)>>2)];
      var $275=$wA;
      var $276=(($13+120)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$2;
      var $279=(($278+28)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+$277*12)|0);
      var $282=(($281+8)|0);
      HEAPF32[(($282)>>2)]=$275;
      var $283=(($13+124)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$2;
      var $286=(($285+28)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=(($287+$284*12)|0);
      var $289=(($288)|0);
      var $290=$289;
      var $291=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($290)>>2)]=HEAP32[(($291)>>2)];HEAP32[(($290+4)>>2)]=HEAP32[(($291+4)>>2)];
      var $292=$wB;
      var $293=(($13+124)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=$2;
      var $296=(($295+28)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=(($297+$294*12)|0);
      var $299=(($298+8)|0);
      HEAPF32[(($299)>>2)]=$292;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $vA=__stackBase__;
  var $wA;
  var $vB=__stackBase__+8;
  var $wB;
  var $vpA=__stackBase__+16;
  var $3=__stackBase__+24;
  var $vpB=__stackBase__+32;
  var $4=__stackBase__+40;
  var $Cdot;
  var $impulse;
  var $PA=__stackBase__+48;
  var $PB=__stackBase__+56;
  var $5=__stackBase__+64;
  var $6=__stackBase__+72;
  $1=$this;
  $2=$data;
  var $7=$1;
  var $8=(($7+120)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=(($10+28)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+$9*12)|0);
  var $14=(($13)|0);
  var $15=$vA;
  var $16=$14;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[(($15+4)>>2)]=HEAP32[(($16+4)>>2)];
  var $17=(($7+120)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$2;
  var $20=(($19+28)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=(($21+$18*12)|0);
  var $23=(($22+8)|0);
  var $24=HEAPF32[(($23)>>2)];
  $wA=$24;
  var $25=(($7+124)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$2;
  var $28=(($27+28)|0);
  var $29=HEAP32[(($28)>>2)];
  var $30=(($29+$26*12)|0);
  var $31=(($30)|0);
  var $32=$vB;
  var $33=$31;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
  var $34=(($7+124)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=$2;
  var $37=(($36+28)|0);
  var $38=HEAP32[(($37)>>2)];
  var $39=(($38+$35*12)|0);
  var $40=(($39+8)|0);
  var $41=HEAPF32[(($40)>>2)];
  $wB=$41;
  var $42=$wA;
  var $43=(($7+144)|0);
  __Z7b2CrossfRK6b2Vec2($3, $42, $43);
  __ZplRK6b2Vec2S1_($vpA, $vA, $3);
  var $44=$wB;
  var $45=(($7+152)|0);
  __Z7b2CrossfRK6b2Vec2($4, $44, $45);
  __ZplRK6b2Vec2S1_($vpB, $vB, $4);
  var $46=(($7+128)|0);
  var $47=__Z5b2DotRK6b2Vec2S1_($46, $vpA);
  var $48=(-$47);
  var $49=(($7+112)|0);
  var $50=HEAPF32[(($49)>>2)];
  var $51=(($7+136)|0);
  var $52=__Z5b2DotRK6b2Vec2S1_($51, $vpB);
  var $53=$50*$52;
  var $54=$48-$53;
  $Cdot=$54;
  var $55=(($7+192)|0);
  var $56=HEAPF32[(($55)>>2)];
  var $57=(-$56);
  var $58=$Cdot;
  var $59=$57*$58;
  $impulse=$59;
  var $60=$impulse;
  var $61=(($7+116)|0);
  var $62=HEAPF32[(($61)>>2)];
  var $63=$62+$60;
  HEAPF32[(($61)>>2)]=$63;
  var $64=$impulse;
  var $65=(-$64);
  var $66=(($7+128)|0);
  __ZmlfRK6b2Vec2($PA, $65, $66);
  var $67=(($7+112)|0);
  var $68=HEAPF32[(($67)>>2)];
  var $69=(-$68);
  var $70=$impulse;
  var $71=$69*$70;
  var $72=(($7+136)|0);
  __ZmlfRK6b2Vec2($PB, $71, $72);
  var $73=(($7+176)|0);
  var $74=HEAPF32[(($73)>>2)];
  __ZmlfRK6b2Vec2($5, $74, $PA);
  __ZN6b2Vec2pLERKS_($vA, $5);
  var $75=(($7+184)|0);
  var $76=HEAPF32[(($75)>>2)];
  var $77=(($7+144)|0);
  var $78=__Z7b2CrossRK6b2Vec2S1_($77, $PA);
  var $79=$76*$78;
  var $80=$wA;
  var $81=$80+$79;
  $wA=$81;
  var $82=(($7+180)|0);
  var $83=HEAPF32[(($82)>>2)];
  __ZmlfRK6b2Vec2($6, $83, $PB);
  __ZN6b2Vec2pLERKS_($vB, $6);
  var $84=(($7+188)|0);
  var $85=HEAPF32[(($84)>>2)];
  var $86=(($7+152)|0);
  var $87=__Z7b2CrossRK6b2Vec2S1_($86, $PB);
  var $88=$85*$87;
  var $89=$wB;
  var $90=$89+$88;
  $wB=$90;
  var $91=(($7+120)|0);
  var $92=HEAP32[(($91)>>2)];
  var $93=$2;
  var $94=(($93+28)|0);
  var $95=HEAP32[(($94)>>2)];
  var $96=(($95+$92*12)|0);
  var $97=(($96)|0);
  var $98=$97;
  var $99=$vA;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[(($98+4)>>2)]=HEAP32[(($99+4)>>2)];
  var $100=$wA;
  var $101=(($7+120)|0);
  var $102=HEAP32[(($101)>>2)];
  var $103=$2;
  var $104=(($103+28)|0);
  var $105=HEAP32[(($104)>>2)];
  var $106=(($105+$102*12)|0);
  var $107=(($106+8)|0);
  HEAPF32[(($107)>>2)]=$100;
  var $108=(($7+124)|0);
  var $109=HEAP32[(($108)>>2)];
  var $110=$2;
  var $111=(($110+28)|0);
  var $112=HEAP32[(($111)>>2)];
  var $113=(($112+$109*12)|0);
  var $114=(($113)|0);
  var $115=$114;
  var $116=$vB;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[(($115+4)>>2)]=HEAP32[(($116+4)>>2)];
  var $117=$wB;
  var $118=(($7+124)|0);
  var $119=HEAP32[(($118)>>2)];
  var $120=$2;
  var $121=(($120+28)|0);
  var $122=HEAP32[(($121)>>2)];
  var $123=(($122+$119*12)|0);
  var $124=(($123+8)|0);
  HEAPF32[(($124)>>2)]=$117;
  STACKTOP = __stackBase__;
  return;
}


function __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((__ZTV13b2PulleyJoint+8)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 16; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 16; break; }
    case 3: 
      var $14=(($5+92)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 16; break; }
    case 4: 
      var $16=(($5+100)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 16; break; }
    case 5: 
      var $18=(($5+128)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 16; break; }
    case 6: 
      var $20=(($5+136)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 16; break; }
    case 7: 
      var $22=(($5+144)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 8: 
      var $24=(($5+152)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: 
      var $26=(($5+160)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      var $28=(($5+168)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      var $30=(($5+68)|0);
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=$30;
      var $34=$32;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[(($33+4)>>2)]=HEAP32[(($34+4)>>2)];
      var $35=(($5+76)|0);
      var $36=$2;
      var $37=(($36+28)|0);
      var $38=$35;
      var $39=$37;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[(($38+4)>>2)]=HEAP32[(($39+4)>>2)];
      var $40=(($5+92)|0);
      var $41=$2;
      var $42=(($41+36)|0);
      var $43=$40;
      var $44=$42;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[(($43+4)>>2)]=HEAP32[(($44+4)>>2)];
      var $45=(($5+100)|0);
      var $46=$2;
      var $47=(($46+44)|0);
      var $48=$45;
      var $49=$47;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[(($48+4)>>2)]=HEAP32[(($49+4)>>2)];
      var $50=$2;
      var $51=(($50+52)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($5+84)|0);
      HEAPF32[(($53)>>2)]=$52;
      var $54=$2;
      var $55=(($54+56)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=(($5+88)|0);
      HEAPF32[(($57)>>2)]=$56;
      var $58=$2;
      var $59=(($58+60)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=$60 != 0;
      if ($61) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 15; break;
    case 13: 
      (function() { try { __THREW__ = false; return ___assert_func(((STRING_TABLE.__str353)|0), 65, ((STRING_TABLE.___PRETTY_FUNCTION____ZN13b2PulleyJointC2EPK16b2PulleyJointDef)|0), ((STRING_TABLE.__str2355)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $66=$2;
      var $67=(($66+60)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=(($5+112)|0);
      HEAPF32[(($69)>>2)]=$68;
      var $70=$2;
      var $71=(($70+52)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=(($5+112)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$2;
      var $76=(($75+56)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=$74*$77;
      var $79=$72+$78;
      var $80=(($5+108)|0);
      HEAPF32[(($80)>>2)]=$79;
      var $81=(($5+116)|0);
      HEAPF32[(($81)>>2)]=0;
      ;
      return;
    case 16: 
      var $83=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $84=$83.f0;
      $3=$84;
      var $85=$83.f1;
      $4=$85;
      var $86=$5;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $89=$3;
      var $90=$3;
      var $91=$4;
      var $92=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $90, tempValue);
      var $93=($92.f1 = $91, $92);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 19: 
      var $95=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2PulleyJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  ;
  return 0;
}


function __ZNK13b2PulleyJoint8GetRatioEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+112)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=__stackBase__+8;
      var $aB;
      var $qA=__stackBase__+16;
      var $qB=__stackBase__+24;
      var $rA=__stackBase__+32;
      var $3=__stackBase__+40;
      var $rB=__stackBase__+48;
      var $4=__stackBase__+56;
      var $uA=__stackBase__+64;
      var $5=__stackBase__+72;
      var $uB=__stackBase__+80;
      var $6=__stackBase__+88;
      var $lengthA;
      var $lengthB;
      var $ruA;
      var $ruB;
      var $mA;
      var $mB;
      var $mass;
      var $C;
      var $linearError;
      var $impulse;
      var $PA=__stackBase__+96;
      var $PB=__stackBase__+104;
      var $7=__stackBase__+112;
      var $8=__stackBase__+120;
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=(($9+120)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+$11*12)|0);
      var $16=(($15)|0);
      var $17=$cA;
      var $18=$16;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[(($17+4)>>2)]=HEAP32[(($18+4)>>2)];
      var $19=(($9+120)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+$20*12)|0);
      var $25=(($24+8)|0);
      var $26=HEAPF32[(($25)>>2)];
      $aA=$26;
      var $27=(($9+124)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+$28*12)|0);
      var $33=(($32)|0);
      var $34=$cB;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=(($9+124)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$2;
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$37*12)|0);
      var $42=(($41+8)|0);
      var $43=HEAPF32[(($42)>>2)];
      $aB=$43;
      var $44=$aA;
      __ZN5b2RotC1Ef($qA, $44);
      var $45=$aB;
      __ZN5b2RotC1Ef($qB, $45);
      var $46=(($9+92)|0);
      var $47=(($9+160)|0);
      __ZmiRK6b2Vec2S1_($3, $46, $47);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $48=(($9+100)|0);
      var $49=(($9+168)|0);
      __ZmiRK6b2Vec2S1_($4, $48, $49);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($5, $cA, $rA);
      var $50=(($9+68)|0);
      __ZmiRK6b2Vec2S1_($uA, $5, $50);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      var $51=(($9+76)|0);
      __ZmiRK6b2Vec2S1_($uB, $6, $51);
      var $52=__ZNK6b2Vec26LengthEv($uA);
      $lengthA=$52;
      var $53=__ZNK6b2Vec26LengthEv($uB);
      $lengthB=$53;
      var $54=$lengthA;
      var $55=$54 > 0.04999999701976776;
      if ($55) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $57=$lengthA;
      var $58=1/$57;
      __ZN6b2Vec2mLEf($uA, $58);
      __label__ = 4; break;
    case 3: 
      __ZN6b2Vec27SetZeroEv($uA);
      __label__ = 4; break;
    case 4: 
      var $61=$lengthB;
      var $62=$61 > 0.04999999701976776;
      if ($62) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $64=$lengthB;
      var $65=1/$64;
      __ZN6b2Vec2mLEf($uB, $65);
      __label__ = 7; break;
    case 6: 
      __ZN6b2Vec27SetZeroEv($uB);
      __label__ = 7; break;
    case 7: 
      var $68=__Z7b2CrossRK6b2Vec2S1_($rA, $uA);
      $ruA=$68;
      var $69=__Z7b2CrossRK6b2Vec2S1_($rB, $uB);
      $ruB=$69;
      var $70=(($9+176)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=(($9+184)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$ruA;
      var $75=$73*$74;
      var $76=$ruA;
      var $77=$75*$76;
      var $78=$71+$77;
      $mA=$78;
      var $79=(($9+180)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=(($9+188)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$ruB;
      var $84=$82*$83;
      var $85=$ruB;
      var $86=$84*$85;
      var $87=$80+$86;
      $mB=$87;
      var $88=$mA;
      var $89=(($9+112)|0);
      var $90=HEAPF32[(($89)>>2)];
      var $91=(($9+112)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=$90*$92;
      var $94=$mB;
      var $95=$93*$94;
      var $96=$88+$95;
      $mass=$96;
      var $97=$mass;
      var $98=$97 > 0;
      if ($98) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $100=$mass;
      var $101=1/$100;
      $mass=$101;
      __label__ = 9; break;
    case 9: 
      var $103=(($9+108)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=$lengthA;
      var $106=$104-$105;
      var $107=(($9+112)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=$lengthB;
      var $110=$108*$109;
      var $111=$106-$110;
      $C=$111;
      var $112=$C;
      var $113=__Z5b2AbsIfET_S0_($112);
      $linearError=$113;
      var $114=$mass;
      var $115=(-$114);
      var $116=$C;
      var $117=$115*$116;
      $impulse=$117;
      var $118=$impulse;
      var $119=(-$118);
      __ZmlfRK6b2Vec2($PA, $119, $uA);
      var $120=(($9+112)|0);
      var $121=HEAPF32[(($120)>>2)];
      var $122=(-$121);
      var $123=$impulse;
      var $124=$122*$123;
      __ZmlfRK6b2Vec2($PB, $124, $uB);
      var $125=(($9+176)|0);
      var $126=HEAPF32[(($125)>>2)];
      __ZmlfRK6b2Vec2($7, $126, $PA);
      __ZN6b2Vec2pLERKS_($cA, $7);
      var $127=(($9+184)|0);
      var $128=HEAPF32[(($127)>>2)];
      var $129=__Z7b2CrossRK6b2Vec2S1_($rA, $PA);
      var $130=$128*$129;
      var $131=$aA;
      var $132=$131+$130;
      $aA=$132;
      var $133=(($9+180)|0);
      var $134=HEAPF32[(($133)>>2)];
      __ZmlfRK6b2Vec2($8, $134, $PB);
      __ZN6b2Vec2pLERKS_($cB, $8);
      var $135=(($9+188)|0);
      var $136=HEAPF32[(($135)>>2)];
      var $137=__Z7b2CrossRK6b2Vec2S1_($rB, $PB);
      var $138=$136*$137;
      var $139=$aB;
      var $140=$139+$138;
      $aB=$140;
      var $141=(($9+120)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$2;
      var $144=(($143+24)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+$142*12)|0);
      var $147=(($146)|0);
      var $148=$147;
      var $149=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($148)>>2)]=HEAP32[(($149)>>2)];HEAP32[(($148+4)>>2)]=HEAP32[(($149+4)>>2)];
      var $150=$aA;
      var $151=(($9+120)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$2;
      var $154=(($153+24)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155+$152*12)|0);
      var $157=(($156+8)|0);
      HEAPF32[(($157)>>2)]=$150;
      var $158=(($9+124)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$2;
      var $161=(($160+24)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+$159*12)|0);
      var $164=(($163)|0);
      var $165=$164;
      var $166=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[(($165+4)>>2)]=HEAP32[(($166+4)>>2)];
      var $167=$aB;
      var $168=(($9+124)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$2;
      var $171=(($170+24)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172+$169*12)|0);
      var $174=(($173+8)|0);
      HEAPF32[(($174)>>2)]=$167;
      var $175=$linearError;
      var $176=$175 < 0.004999999888241291;
      STACKTOP = __stackBase__;
      return $176;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK13b2PulleyJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+92)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK13b2PulleyJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+100)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK13b2PulleyJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+116)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3+136)|0);
  __ZmlfRK6b2Vec2($P, $5, $6);
  var $7=$2;
  __ZmlfRK6b2Vec2($agg_result, $7, $P);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK13b2PulleyJoint16GetGroundAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[(($4+4)>>2)]=HEAP32[(($5+4)>>2)];
  ;
  return;
}


function __ZNK13b2PulleyJoint16GetGroundAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[(($4+4)>>2)]=HEAP32[(($5+4)>>2)];
  ;
  return;
}


function __ZNK13b2PulleyJoint10GetLengthAEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $p=__stackBase__;
  var $s=__stackBase__+8;
  var $d=__stackBase__+16;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+92)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($p, $5, $6);
  var $7=(($2+68)|0);
  var $8=$s;
  var $9=$7;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[(($8+4)>>2)]=HEAP32[(($9+4)>>2)];
  __ZmiRK6b2Vec2S1_($d, $p, $s);
  var $10=__ZNK6b2Vec26LengthEv($d);
  STACKTOP = __stackBase__;
  return $10;
}


function __ZNK13b2PulleyJoint10GetLengthBEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $p=__stackBase__;
  var $s=__stackBase__+8;
  var $d=__stackBase__+16;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+100)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($p, $5, $6);
  var $7=(($2+76)|0);
  var $8=$s;
  var $9=$7;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[(($8+4)>>2)]=HEAP32[(($9+4)>>2)];
  __ZmiRK6b2Vec2S1_($d, $p, $s);
  var $10=__ZNK6b2Vec26LengthEv($d);
  STACKTOP = __stackBase__;
  return $10;
}


function __ZN13b2PulleyJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str3356)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str4357)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str5358)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str6359)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str7360)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str8361)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+92)|0);
  var $37=(($36)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$38;
  var $40=(($2+92)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$42;
  __Z5b2LogPKcz(((STRING_TABLE.__str9362)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$39,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$43,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $44=(($2+100)|0);
  var $45=(($44)|0);
  var $46=HEAPF32[(($45)>>2)];
  var $47=$46;
  var $48=(($2+100)|0);
  var $49=(($48+4)|0);
  var $50=HEAPF32[(($49)>>2)];
  var $51=$50;
  __Z5b2LogPKcz(((STRING_TABLE.__str10363)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$47,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$51,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $52=(($2+84)|0);
  var $53=HEAPF32[(($52)>>2)];
  var $54=$53;
  __Z5b2LogPKcz(((STRING_TABLE.__str11364)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$54,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $55=(($2+88)|0);
  var $56=HEAPF32[(($55)>>2)];
  var $57=$56;
  __Z5b2LogPKcz(((STRING_TABLE.__str12365)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$57,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $58=(($2+112)|0);
  var $59=HEAPF32[(($58)>>2)];
  var $60=$59;
  __Z5b2LogPKcz(((STRING_TABLE.__str13366)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$60,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $61=$2;
  var $62=(($61+56)|0);
  var $63=HEAP32[(($62)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str14367)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$63,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN13b2PulleyJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2PulleyJointD2Ev($2);
  ;
  return;
}


function __ZN13b2PulleyJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN13b2PulleyJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN13b2PulleyJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN18b2RevoluteJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  var $6=__stackBase__+8;
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  var $7=$1;
  var $8=$2;
  var $9=$7;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$3;
  var $12=$7;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=(($7+20)|0);
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $17, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[(($19+4)>>2)]=HEAP32[(($20+4)>>2)];
  var $21=(($7+28)|0);
  var $22=$7;
  var $23=(($22+12)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $24, $25);
  var $26=$21;
  var $27=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[(($26+4)>>2)]=HEAP32[(($27+4)>>2)];
  var $28=$7;
  var $29=(($28+12)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=__ZNK6b2Body8GetAngleEv($30);
  var $32=$7;
  var $33=(($32+8)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=__ZNK6b2Body8GetAngleEv($34);
  var $36=$31-$35;
  var $37=(($7+36)|0);
  HEAPF32[(($37)>>2)]=$36;
  STACKTOP = __stackBase__;
  return;
}


function __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((__ZTV15b2RevoluteJoint+8)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $14=(($5+84)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec3C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $16=(($5+136)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      var $18=(($5+144)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $20=(($5+152)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $22=(($5+160)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $24=(($5+184)|0);
      (function() { try { __THREW__ = false; return __ZN7b2Mat33C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $26=(($5+68)|0);
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=$26;
      var $30=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[(($29+4)>>2)]=HEAP32[(($30+4)>>2)];
      var $31=(($5+76)|0);
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=(($5+116)|0);
      HEAPF32[(($39)>>2)]=$38;
      var $40=(($5+84)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec37SetZeroEv($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $42=(($5+96)|0);
      HEAPF32[(($42)>>2)]=0;
      var $43=$2;
      var $44=(($43+44)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($5+120)|0);
      HEAPF32[(($46)>>2)]=$45;
      var $47=$2;
      var $48=(($47+48)|0);
      var $49=HEAPF32[(($48)>>2)];
      var $50=(($5+124)|0);
      HEAPF32[(($50)>>2)]=$49;
      var $51=$2;
      var $52=(($51+60)|0);
      var $53=HEAPF32[(($52)>>2)];
      var $54=(($5+104)|0);
      HEAPF32[(($54)>>2)]=$53;
      var $55=$2;
      var $56=(($55+56)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=(($5+108)|0);
      HEAPF32[(($58)>>2)]=$57;
      var $59=$2;
      var $60=(($59+40)|0);
      var $61=HEAP8[($60)];
      var $62=(($61) & 1);
      var $63=(($5+112)|0);
      var $64=(($62)&1);
      HEAP8[($63)]=$64;
      var $65=$2;
      var $66=(($65+52)|0);
      var $67=HEAP8[($66)];
      var $68=(($67) & 1);
      var $69=(($5+100)|0);
      var $70=(($68)&1);
      HEAP8[($69)]=$70;
      var $71=(($5+224)|0);
      HEAP32[(($71)>>2)]=0;
      ;
      return;
    case 11: 
      var $73=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $74=$73.f0;
      $3=$74;
      var $75=$73.f1;
      $4=$75;
      var $76=$5;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $79=$3;
      var $80=$3;
      var $81=$4;
      var $82=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $80, tempValue);
      var $83=($82.f1 = $81, $82);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 14: 
      var $85=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 104; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      var $6=__stackBase__+72;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $fixedRotation;
      var $jointAngle;
      var $P=__stackBase__+80;
      var $7=__stackBase__+88;
      var $8=__stackBase__+96;
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=$9;
      var $11=(($10+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($9+128)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=$9;
      var $17=(($16+52)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($9+132)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=(($9+152)|0);
      var $23=$9;
      var $24=(($23+48)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+28)|0);
      var $27=(($26)|0);
      var $28=$22;
      var $29=$27;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[(($28+4)>>2)]=HEAP32[(($29+4)>>2)];
      var $30=(($9+160)|0);
      var $31=$9;
      var $32=(($31+52)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+28)|0);
      var $35=(($34)|0);
      var $36=$30;
      var $37=$35;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[(($36+4)>>2)]=HEAP32[(($37+4)>>2)];
      var $38=$9;
      var $39=(($38+48)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+120)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($9+168)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$9;
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($9+172)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$9;
      var $51=(($50+48)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+128)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($9+176)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$9;
      var $57=(($56+52)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($9+180)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=(($9+128)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+$63*12)|0);
      var $68=(($67)|0);
      var $69=$cA;
      var $70=$68;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[(($69+4)>>2)]=HEAP32[(($70+4)>>2)];
      var $71=(($9+128)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+$72*12)|0);
      var $77=(($76+8)|0);
      var $78=HEAPF32[(($77)>>2)];
      $aA=$78;
      var $79=(($9+128)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+28)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+$80*12)|0);
      var $85=(($84)|0);
      var $86=$vA;
      var $87=$85;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[(($86+4)>>2)]=HEAP32[(($87+4)>>2)];
      var $88=(($9+128)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$2;
      var $91=(($90+28)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+$89*12)|0);
      var $94=(($93+8)|0);
      var $95=HEAPF32[(($94)>>2)];
      $wA=$95;
      var $96=(($9+132)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$2;
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+$97*12)|0);
      var $102=(($101)|0);
      var $103=$cB;
      var $104=$102;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[(($103+4)>>2)]=HEAP32[(($104+4)>>2)];
      var $105=(($9+132)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+$106*12)|0);
      var $111=(($110+8)|0);
      var $112=HEAPF32[(($111)>>2)];
      $aB=$112;
      var $113=(($9+132)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+$114*12)|0);
      var $119=(($118)|0);
      var $120=$vB;
      var $121=$119;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[(($120+4)>>2)]=HEAP32[(($121+4)>>2)];
      var $122=(($9+132)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$2;
      var $125=(($124+28)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+$123*12)|0);
      var $128=(($127+8)|0);
      var $129=HEAPF32[(($128)>>2)];
      $wB=$129;
      var $130=$aA;
      __ZN5b2RotC1Ef($qA, $130);
      var $131=$aB;
      __ZN5b2RotC1Ef($qB, $131);
      var $132=(($9+136)|0);
      var $133=(($9+68)|0);
      var $134=(($9+152)|0);
      __ZmiRK6b2Vec2S1_($4, $133, $134);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $135=$132;
      var $136=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[(($135+4)>>2)]=HEAP32[(($136+4)>>2)];
      var $137=(($9+144)|0);
      var $138=(($9+76)|0);
      var $139=(($9+160)|0);
      __ZmiRK6b2Vec2S1_($6, $138, $139);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $140=$137;
      var $141=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[(($140+4)>>2)]=HEAP32[(($141+4)>>2)];
      var $142=(($9+168)|0);
      var $143=HEAPF32[(($142)>>2)];
      $mA=$143;
      var $144=(($9+172)|0);
      var $145=HEAPF32[(($144)>>2)];
      $mB=$145;
      var $146=(($9+176)|0);
      var $147=HEAPF32[(($146)>>2)];
      $iA=$147;
      var $148=(($9+180)|0);
      var $149=HEAPF32[(($148)>>2)];
      $iB=$149;
      var $150=$iA;
      var $151=$iB;
      var $152=$150+$151;
      var $153=$152 == 0;
      var $154=(($153)&1);
      $fixedRotation=$154;
      var $155=$mA;
      var $156=$mB;
      var $157=$155+$156;
      var $158=(($9+136)|0);
      var $159=(($158+4)|0);
      var $160=HEAPF32[(($159)>>2)];
      var $161=(($9+136)|0);
      var $162=(($161+4)|0);
      var $163=HEAPF32[(($162)>>2)];
      var $164=$160*$163;
      var $165=$iA;
      var $166=$164*$165;
      var $167=$157+$166;
      var $168=(($9+144)|0);
      var $169=(($168+4)|0);
      var $170=HEAPF32[(($169)>>2)];
      var $171=(($9+144)|0);
      var $172=(($171+4)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=$170*$173;
      var $175=$iB;
      var $176=$174*$175;
      var $177=$167+$176;
      var $178=(($9+184)|0);
      var $179=(($178)|0);
      var $180=(($179)|0);
      HEAPF32[(($180)>>2)]=$177;
      var $181=(($9+136)|0);
      var $182=(($181+4)|0);
      var $183=HEAPF32[(($182)>>2)];
      var $184=(-$183);
      var $185=(($9+136)|0);
      var $186=(($185)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=$184*$187;
      var $189=$iA;
      var $190=$188*$189;
      var $191=(($9+144)|0);
      var $192=(($191+4)|0);
      var $193=HEAPF32[(($192)>>2)];
      var $194=(($9+144)|0);
      var $195=(($194)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=$193*$196;
      var $198=$iB;
      var $199=$197*$198;
      var $200=$190-$199;
      var $201=(($9+184)|0);
      var $202=(($201+12)|0);
      var $203=(($202)|0);
      HEAPF32[(($203)>>2)]=$200;
      var $204=(($9+136)|0);
      var $205=(($204+4)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=(-$206);
      var $208=$iA;
      var $209=$207*$208;
      var $210=(($9+144)|0);
      var $211=(($210+4)|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=$iB;
      var $214=$212*$213;
      var $215=$209-$214;
      var $216=(($9+184)|0);
      var $217=(($216+24)|0);
      var $218=(($217)|0);
      HEAPF32[(($218)>>2)]=$215;
      var $219=(($9+184)|0);
      var $220=(($219+12)|0);
      var $221=(($220)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=(($9+184)|0);
      var $224=(($223)|0);
      var $225=(($224+4)|0);
      HEAPF32[(($225)>>2)]=$222;
      var $226=$mA;
      var $227=$mB;
      var $228=$226+$227;
      var $229=(($9+136)|0);
      var $230=(($229)|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=(($9+136)|0);
      var $233=(($232)|0);
      var $234=HEAPF32[(($233)>>2)];
      var $235=$231*$234;
      var $236=$iA;
      var $237=$235*$236;
      var $238=$228+$237;
      var $239=(($9+144)|0);
      var $240=(($239)|0);
      var $241=HEAPF32[(($240)>>2)];
      var $242=(($9+144)|0);
      var $243=(($242)|0);
      var $244=HEAPF32[(($243)>>2)];
      var $245=$241*$244;
      var $246=$iB;
      var $247=$245*$246;
      var $248=$238+$247;
      var $249=(($9+184)|0);
      var $250=(($249+12)|0);
      var $251=(($250+4)|0);
      HEAPF32[(($251)>>2)]=$248;
      var $252=(($9+136)|0);
      var $253=(($252)|0);
      var $254=HEAPF32[(($253)>>2)];
      var $255=$iA;
      var $256=$254*$255;
      var $257=(($9+144)|0);
      var $258=(($257)|0);
      var $259=HEAPF32[(($258)>>2)];
      var $260=$iB;
      var $261=$259*$260;
      var $262=$256+$261;
      var $263=(($9+184)|0);
      var $264=(($263+24)|0);
      var $265=(($264+4)|0);
      HEAPF32[(($265)>>2)]=$262;
      var $266=(($9+184)|0);
      var $267=(($266+24)|0);
      var $268=(($267)|0);
      var $269=HEAPF32[(($268)>>2)];
      var $270=(($9+184)|0);
      var $271=(($270)|0);
      var $272=(($271+8)|0);
      HEAPF32[(($272)>>2)]=$269;
      var $273=(($9+184)|0);
      var $274=(($273+24)|0);
      var $275=(($274+4)|0);
      var $276=HEAPF32[(($275)>>2)];
      var $277=(($9+184)|0);
      var $278=(($277+12)|0);
      var $279=(($278+8)|0);
      HEAPF32[(($279)>>2)]=$276;
      var $280=$iA;
      var $281=$iB;
      var $282=$280+$281;
      var $283=(($9+184)|0);
      var $284=(($283+24)|0);
      var $285=(($284+8)|0);
      HEAPF32[(($285)>>2)]=$282;
      var $286=$iA;
      var $287=$iB;
      var $288=$286+$287;
      var $289=(($9+220)|0);
      HEAPF32[(($289)>>2)]=$288;
      var $290=(($9+220)|0);
      var $291=HEAPF32[(($290)>>2)];
      var $292=$291 > 0;
      if ($292) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $294=(($9+220)|0);
      var $295=HEAPF32[(($294)>>2)];
      var $296=1/$295;
      var $297=(($9+220)|0);
      HEAPF32[(($297)>>2)]=$296;
      __label__ = 3; break;
    case 3: 
      var $299=(($9+100)|0);
      var $300=HEAP8[($299)];
      var $301=(($300) & 1);
      var $302=(($301)&1);
      var $303=(($302)|0)==0;
      if ($303) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $305=$fixedRotation;
      var $306=(($305) & 1);
      if ($306) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $308=(($9+96)|0);
      HEAPF32[(($308)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      var $310=(($9+112)|0);
      var $311=HEAP8[($310)];
      var $312=(($311) & 1);
      if ($312) { __label__ = 7; break; } else { __label__ = 22; break; }
    case 7: 
      var $314=$fixedRotation;
      var $315=(($314) & 1);
      var $316=(($315)&1);
      var $317=(($316)|0)==0;
      if ($317) { __label__ = 8; break; } else { __label__ = 22; break; }
    case 8: 
      var $319=$aB;
      var $320=$aA;
      var $321=$319-$320;
      var $322=(($9+116)|0);
      var $323=HEAPF32[(($322)>>2)];
      var $324=$321-$323;
      $jointAngle=$324;
      var $325=(($9+124)|0);
      var $326=HEAPF32[(($325)>>2)];
      var $327=(($9+120)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=$326-$328;
      var $330=__Z5b2AbsIfET_S0_($329);
      var $331=$330 < 0.06981317698955536;
      if ($331) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $333=(($9+224)|0);
      HEAP32[(($333)>>2)]=3;
      __label__ = 21; break;
    case 10: 
      var $335=$jointAngle;
      var $336=(($9+120)|0);
      var $337=HEAPF32[(($336)>>2)];
      var $338=$335 <= $337;
      if ($338) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $340=(($9+224)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341)|0)!=1;
      if ($342) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $344=(($9+84)|0);
      var $345=(($344+8)|0);
      HEAPF32[(($345)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $347=(($9+224)|0);
      HEAP32[(($347)>>2)]=1;
      __label__ = 20; break;
    case 14: 
      var $349=$jointAngle;
      var $350=(($9+124)|0);
      var $351=HEAPF32[(($350)>>2)];
      var $352=$349 >= $351;
      if ($352) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $354=(($9+224)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=(($355)|0)!=2;
      if ($356) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $358=(($9+84)|0);
      var $359=(($358+8)|0);
      HEAPF32[(($359)>>2)]=0;
      __label__ = 17; break;
    case 17: 
      var $361=(($9+224)|0);
      HEAP32[(($361)>>2)]=2;
      __label__ = 19; break;
    case 18: 
      var $363=(($9+224)|0);
      HEAP32[(($363)>>2)]=0;
      var $364=(($9+84)|0);
      var $365=(($364+8)|0);
      HEAPF32[(($365)>>2)]=0;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 23; break;
    case 22: 
      var $370=(($9+224)|0);
      HEAP32[(($370)>>2)]=0;
      __label__ = 23; break;
    case 23: 
      var $372=$2;
      var $373=(($372)|0);
      var $374=(($373+20)|0);
      var $375=HEAP8[($374)];
      var $376=(($375) & 1);
      if ($376) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $378=(($9+84)|0);
      var $379=$2;
      var $380=(($379)|0);
      var $381=(($380+8)|0);
      var $382=HEAPF32[(($381)>>2)];
      __ZN6b2Vec3mLEf($378, $382);
      var $383=$2;
      var $384=(($383)|0);
      var $385=(($384+8)|0);
      var $386=HEAPF32[(($385)>>2)];
      var $387=(($9+96)|0);
      var $388=HEAPF32[(($387)>>2)];
      var $389=$388*$386;
      HEAPF32[(($387)>>2)]=$389;
      var $390=(($9+84)|0);
      var $391=(($390)|0);
      var $392=HEAPF32[(($391)>>2)];
      var $393=(($9+84)|0);
      var $394=(($393+4)|0);
      var $395=HEAPF32[(($394)>>2)];
      __ZN6b2Vec2C1Eff($P, $392, $395);
      var $396=$mA;
      __ZmlfRK6b2Vec2($7, $396, $P);
      __ZN6b2Vec2mIERKS_($vA, $7);
      var $397=$iA;
      var $398=(($9+136)|0);
      var $399=__Z7b2CrossRK6b2Vec2S1_($398, $P);
      var $400=(($9+96)|0);
      var $401=HEAPF32[(($400)>>2)];
      var $402=$399+$401;
      var $403=(($9+84)|0);
      var $404=(($403+8)|0);
      var $405=HEAPF32[(($404)>>2)];
      var $406=$402+$405;
      var $407=$397*$406;
      var $408=$wA;
      var $409=$408-$407;
      $wA=$409;
      var $410=$mB;
      __ZmlfRK6b2Vec2($8, $410, $P);
      __ZN6b2Vec2pLERKS_($vB, $8);
      var $411=$iB;
      var $412=(($9+144)|0);
      var $413=__Z7b2CrossRK6b2Vec2S1_($412, $P);
      var $414=(($9+96)|0);
      var $415=HEAPF32[(($414)>>2)];
      var $416=$413+$415;
      var $417=(($9+84)|0);
      var $418=(($417+8)|0);
      var $419=HEAPF32[(($418)>>2)];
      var $420=$416+$419;
      var $421=$411*$420;
      var $422=$wB;
      var $423=$422+$421;
      $wB=$423;
      __label__ = 26; break;
    case 25: 
      var $425=(($9+84)|0);
      __ZN6b2Vec37SetZeroEv($425);
      var $426=(($9+96)|0);
      HEAPF32[(($426)>>2)]=0;
      __label__ = 26; break;
    case 26: 
      var $428=(($9+128)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=$2;
      var $431=(($430+28)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($432+$429*12)|0);
      var $434=(($433)|0);
      var $435=$434;
      var $436=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($435)>>2)]=HEAP32[(($436)>>2)];HEAP32[(($435+4)>>2)]=HEAP32[(($436+4)>>2)];
      var $437=$wA;
      var $438=(($9+128)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=$2;
      var $441=(($440+28)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=(($442+$439*12)|0);
      var $444=(($443+8)|0);
      HEAPF32[(($444)>>2)]=$437;
      var $445=(($9+132)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=$2;
      var $448=(($447+28)|0);
      var $449=HEAP32[(($448)>>2)];
      var $450=(($449+$446*12)|0);
      var $451=(($450)|0);
      var $452=$451;
      var $453=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($452)>>2)]=HEAP32[(($453)>>2)];HEAP32[(($452+4)>>2)]=HEAP32[(($453+4)>>2)];
      var $454=$wB;
      var $455=(($9+132)|0);
      var $456=HEAP32[(($455)>>2)];
      var $457=$2;
      var $458=(($457+28)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=(($459+$456*12)|0);
      var $461=(($460+8)|0);
      HEAPF32[(($461)>>2)]=$454;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK15b2RevoluteJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+84)|0);
  var $6=(($5+8)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=$4*$7;
  ;
  return $8;
}


function __ZNK15b2RevoluteJoint13GetJointAngleEv($this) {
  ;
  var __label__;

  var $1;
  var $bA;
  var $bB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  $bA=$5;
  var $6=$2;
  var $7=(($6+52)|0);
  var $8=HEAP32[(($7)>>2)];
  $bB=$8;
  var $9=$bB;
  var $10=(($9+28)|0);
  var $11=(($10+28)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$bA;
  var $14=(($13+28)|0);
  var $15=(($14+28)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=$12-$16;
  var $18=(($2+116)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=$17-$19;
  ;
  return $20;
}


function __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 268; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=__stackBase__+8;
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $fixedRotation;
      var $Cdot;
      var $impulse;
      var $oldImpulse;
      var $maxImpulse;
      var $Cdot1=__stackBase__+16;
      var $3=__stackBase__+24;
      var $4=__stackBase__+32;
      var $5=__stackBase__+40;
      var $6=__stackBase__+48;
      var $Cdot2;
      var $Cdot3=__stackBase__+56;
      var $impulse4=__stackBase__+68;
      var $7=__stackBase__+80;
      var $newImpulse;
      var $rhs=__stackBase__+92;
      var $8=__stackBase__+100;
      var $9=__stackBase__+108;
      var $10=__stackBase__+116;
      var $reduced=__stackBase__+124;
      var $newImpulse5;
      var $rhs6=__stackBase__+132;
      var $11=__stackBase__+140;
      var $12=__stackBase__+148;
      var $13=__stackBase__+156;
      var $reduced7=__stackBase__+164;
      var $P=__stackBase__+172;
      var $14=__stackBase__+180;
      var $15=__stackBase__+188;
      var $Cdot8=__stackBase__+196;
      var $16=__stackBase__+204;
      var $17=__stackBase__+212;
      var $18=__stackBase__+220;
      var $19=__stackBase__+228;
      var $impulse9=__stackBase__+236;
      var $20=__stackBase__+244;
      var $21=__stackBase__+252;
      var $22=__stackBase__+260;
      $1=$this;
      $2=$data;
      var $23=$1;
      var $24=(($23+128)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=(($26+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+$25*12)|0);
      var $30=(($29)|0);
      var $31=$vA;
      var $32=$30;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[(($31+4)>>2)]=HEAP32[(($32+4)>>2)];
      var $33=(($23+128)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+28)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+$34*12)|0);
      var $39=(($38+8)|0);
      var $40=HEAPF32[(($39)>>2)];
      $wA=$40;
      var $41=(($23+132)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=(($43+28)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+$42*12)|0);
      var $47=(($46)|0);
      var $48=$vB;
      var $49=$47;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[(($48+4)>>2)]=HEAP32[(($49+4)>>2)];
      var $50=(($23+132)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+$51*12)|0);
      var $56=(($55+8)|0);
      var $57=HEAPF32[(($56)>>2)];
      $wB=$57;
      var $58=(($23+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $mA=$59;
      var $60=(($23+172)|0);
      var $61=HEAPF32[(($60)>>2)];
      $mB=$61;
      var $62=(($23+176)|0);
      var $63=HEAPF32[(($62)>>2)];
      $iA=$63;
      var $64=(($23+180)|0);
      var $65=HEAPF32[(($64)>>2)];
      $iB=$65;
      var $66=$iA;
      var $67=$iB;
      var $68=$66+$67;
      var $69=$68 == 0;
      var $70=(($69)&1);
      $fixedRotation=$70;
      var $71=(($23+100)|0);
      var $72=HEAP8[($71)];
      var $73=(($72) & 1);
      if ($73) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $75=(($23+224)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|0)!=3;
      if ($77) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $79=$fixedRotation;
      var $80=(($79) & 1);
      var $81=(($80)&1);
      var $82=(($81)|0)==0;
      if ($82) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $84=$wB;
      var $85=$wA;
      var $86=$84-$85;
      var $87=(($23+108)|0);
      var $88=HEAPF32[(($87)>>2)];
      var $89=$86-$88;
      $Cdot=$89;
      var $90=(($23+220)|0);
      var $91=HEAPF32[(($90)>>2)];
      var $92=(-$91);
      var $93=$Cdot;
      var $94=$92*$93;
      $impulse=$94;
      var $95=(($23+96)|0);
      var $96=HEAPF32[(($95)>>2)];
      $oldImpulse=$96;
      var $97=$2;
      var $98=(($97)|0);
      var $99=(($98)|0);
      var $100=HEAPF32[(($99)>>2)];
      var $101=(($23+104)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=$100*$102;
      $maxImpulse=$103;
      var $104=(($23+96)|0);
      var $105=HEAPF32[(($104)>>2)];
      var $106=$impulse;
      var $107=$105+$106;
      var $108=$maxImpulse;
      var $109=(-$108);
      var $110=$maxImpulse;
      var $111=__Z7b2ClampIfET_S0_S0_S0_($107, $109, $110);
      var $112=(($23+96)|0);
      HEAPF32[(($112)>>2)]=$111;
      var $113=(($23+96)|0);
      var $114=HEAPF32[(($113)>>2)];
      var $115=$oldImpulse;
      var $116=$114-$115;
      $impulse=$116;
      var $117=$iA;
      var $118=$impulse;
      var $119=$117*$118;
      var $120=$wA;
      var $121=$120-$119;
      $wA=$121;
      var $122=$iB;
      var $123=$impulse;
      var $124=$122*$123;
      var $125=$wB;
      var $126=$125+$124;
      $wB=$126;
      __label__ = 5; break;
    case 5: 
      var $128=(($23+112)|0);
      var $129=HEAP8[($128)];
      var $130=(($129) & 1);
      if ($130) { __label__ = 6; break; } else { __label__ = 23; break; }
    case 6: 
      var $132=(($23+224)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|0)!=0;
      if ($134) { __label__ = 7; break; } else { __label__ = 23; break; }
    case 7: 
      var $136=$fixedRotation;
      var $137=(($136) & 1);
      var $138=(($137)&1);
      var $139=(($138)|0)==0;
      if ($139) { __label__ = 8; break; } else { __label__ = 23; break; }
    case 8: 
      var $141=$wB;
      var $142=(($23+144)|0);
      __Z7b2CrossfRK6b2Vec2($5, $141, $142);
      __ZplRK6b2Vec2S1_($4, $vB, $5);
      __ZmiRK6b2Vec2S1_($3, $4, $vA);
      var $143=$wA;
      var $144=(($23+136)|0);
      __Z7b2CrossfRK6b2Vec2($6, $143, $144);
      __ZmiRK6b2Vec2S1_($Cdot1, $3, $6);
      var $145=$wB;
      var $146=$wA;
      var $147=$145-$146;
      $Cdot2=$147;
      var $148=(($Cdot1)|0);
      var $149=HEAPF32[(($148)>>2)];
      var $150=(($Cdot1+4)|0);
      var $151=HEAPF32[(($150)>>2)];
      var $152=$Cdot2;
      __ZN6b2Vec3C1Efff($Cdot3, $149, $151, $152);
      var $153=(($23+184)|0);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($7, $153, $Cdot3);
      __ZNK6b2Vec3ngEv($impulse4, $7);
      var $154=(($23+224)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|0)==3;
      if ($156) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $158=(($23+84)|0);
      __ZN6b2Vec3pLERKS_($158, $impulse4);
      __label__ = 22; break;
    case 10: 
      var $160=(($23+224)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=(($161)|0)==1;
      if ($162) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $164=(($23+84)|0);
      var $165=(($164+8)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=(($impulse4+8)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=$166+$168;
      $newImpulse=$169;
      var $170=$newImpulse;
      var $171=$170 < 0;
      if ($171) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __ZNK6b2Vec2ngEv($8, $Cdot1);
      var $173=(($23+84)|0);
      var $174=(($173+8)|0);
      var $175=HEAPF32[(($174)>>2)];
      var $176=(($23+184)|0);
      var $177=(($176+24)|0);
      var $178=(($177)|0);
      var $179=HEAPF32[(($178)>>2)];
      var $180=(($23+184)|0);
      var $181=(($180+24)|0);
      var $182=(($181+4)|0);
      var $183=HEAPF32[(($182)>>2)];
      __ZN6b2Vec2C1Eff($10, $179, $183);
      __ZmlfRK6b2Vec2($9, $175, $10);
      __ZplRK6b2Vec2S1_($rhs, $8, $9);
      var $184=(($23+184)|0);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced, $184, $rhs);
      var $185=(($reduced)|0);
      var $186=HEAPF32[(($185)>>2)];
      var $187=(($impulse4)|0);
      HEAPF32[(($187)>>2)]=$186;
      var $188=(($reduced+4)|0);
      var $189=HEAPF32[(($188)>>2)];
      var $190=(($impulse4+4)|0);
      HEAPF32[(($190)>>2)]=$189;
      var $191=(($23+84)|0);
      var $192=(($191+8)|0);
      var $193=HEAPF32[(($192)>>2)];
      var $194=(-$193);
      var $195=(($impulse4+8)|0);
      HEAPF32[(($195)>>2)]=$194;
      var $196=(($reduced)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=(($23+84)|0);
      var $199=(($198)|0);
      var $200=HEAPF32[(($199)>>2)];
      var $201=$200+$197;
      HEAPF32[(($199)>>2)]=$201;
      var $202=(($reduced+4)|0);
      var $203=HEAPF32[(($202)>>2)];
      var $204=(($23+84)|0);
      var $205=(($204+4)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=$206+$203;
      HEAPF32[(($205)>>2)]=$207;
      var $208=(($23+84)|0);
      var $209=(($208+8)|0);
      HEAPF32[(($209)>>2)]=0;
      __label__ = 14; break;
    case 13: 
      var $211=(($23+84)|0);
      __ZN6b2Vec3pLERKS_($211, $impulse4);
      __label__ = 14; break;
    case 14: 
      __label__ = 21; break;
    case 15: 
      var $214=(($23+224)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($215)|0)==2;
      if ($216) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $218=(($23+84)|0);
      var $219=(($218+8)|0);
      var $220=HEAPF32[(($219)>>2)];
      var $221=(($impulse4+8)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=$220+$222;
      $newImpulse5=$223;
      var $224=$newImpulse5;
      var $225=$224 > 0;
      if ($225) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __ZNK6b2Vec2ngEv($11, $Cdot1);
      var $227=(($23+84)|0);
      var $228=(($227+8)|0);
      var $229=HEAPF32[(($228)>>2)];
      var $230=(($23+184)|0);
      var $231=(($230+24)|0);
      var $232=(($231)|0);
      var $233=HEAPF32[(($232)>>2)];
      var $234=(($23+184)|0);
      var $235=(($234+24)|0);
      var $236=(($235+4)|0);
      var $237=HEAPF32[(($236)>>2)];
      __ZN6b2Vec2C1Eff($13, $233, $237);
      __ZmlfRK6b2Vec2($12, $229, $13);
      __ZplRK6b2Vec2S1_($rhs6, $11, $12);
      var $238=(($23+184)|0);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced7, $238, $rhs6);
      var $239=(($reduced7)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=(($impulse4)|0);
      HEAPF32[(($241)>>2)]=$240;
      var $242=(($reduced7+4)|0);
      var $243=HEAPF32[(($242)>>2)];
      var $244=(($impulse4+4)|0);
      HEAPF32[(($244)>>2)]=$243;
      var $245=(($23+84)|0);
      var $246=(($245+8)|0);
      var $247=HEAPF32[(($246)>>2)];
      var $248=(-$247);
      var $249=(($impulse4+8)|0);
      HEAPF32[(($249)>>2)]=$248;
      var $250=(($reduced7)|0);
      var $251=HEAPF32[(($250)>>2)];
      var $252=(($23+84)|0);
      var $253=(($252)|0);
      var $254=HEAPF32[(($253)>>2)];
      var $255=$254+$251;
      HEAPF32[(($253)>>2)]=$255;
      var $256=(($reduced7+4)|0);
      var $257=HEAPF32[(($256)>>2)];
      var $258=(($23+84)|0);
      var $259=(($258+4)|0);
      var $260=HEAPF32[(($259)>>2)];
      var $261=$260+$257;
      HEAPF32[(($259)>>2)]=$261;
      var $262=(($23+84)|0);
      var $263=(($262+8)|0);
      HEAPF32[(($263)>>2)]=0;
      __label__ = 19; break;
    case 18: 
      var $265=(($23+84)|0);
      __ZN6b2Vec3pLERKS_($265, $impulse4);
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $270=(($impulse4)|0);
      var $271=HEAPF32[(($270)>>2)];
      var $272=(($impulse4+4)|0);
      var $273=HEAPF32[(($272)>>2)];
      __ZN6b2Vec2C1Eff($P, $271, $273);
      var $274=$mA;
      __ZmlfRK6b2Vec2($14, $274, $P);
      __ZN6b2Vec2mIERKS_($vA, $14);
      var $275=$iA;
      var $276=(($23+136)|0);
      var $277=__Z7b2CrossRK6b2Vec2S1_($276, $P);
      var $278=(($impulse4+8)|0);
      var $279=HEAPF32[(($278)>>2)];
      var $280=$277+$279;
      var $281=$275*$280;
      var $282=$wA;
      var $283=$282-$281;
      $wA=$283;
      var $284=$mB;
      __ZmlfRK6b2Vec2($15, $284, $P);
      __ZN6b2Vec2pLERKS_($vB, $15);
      var $285=$iB;
      var $286=(($23+144)|0);
      var $287=__Z7b2CrossRK6b2Vec2S1_($286, $P);
      var $288=(($impulse4+8)|0);
      var $289=HEAPF32[(($288)>>2)];
      var $290=$287+$289;
      var $291=$285*$290;
      var $292=$wB;
      var $293=$292+$291;
      $wB=$293;
      __label__ = 24; break;
    case 23: 
      var $295=$wB;
      var $296=(($23+144)|0);
      __Z7b2CrossfRK6b2Vec2($18, $295, $296);
      __ZplRK6b2Vec2S1_($17, $vB, $18);
      __ZmiRK6b2Vec2S1_($16, $17, $vA);
      var $297=$wA;
      var $298=(($23+136)|0);
      __Z7b2CrossfRK6b2Vec2($19, $297, $298);
      __ZmiRK6b2Vec2S1_($Cdot8, $16, $19);
      var $299=(($23+184)|0);
      __ZNK6b2Vec2ngEv($20, $Cdot8);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($impulse9, $299, $20);
      var $300=(($impulse9)|0);
      var $301=HEAPF32[(($300)>>2)];
      var $302=(($23+84)|0);
      var $303=(($302)|0);
      var $304=HEAPF32[(($303)>>2)];
      var $305=$304+$301;
      HEAPF32[(($303)>>2)]=$305;
      var $306=(($impulse9+4)|0);
      var $307=HEAPF32[(($306)>>2)];
      var $308=(($23+84)|0);
      var $309=(($308+4)|0);
      var $310=HEAPF32[(($309)>>2)];
      var $311=$310+$307;
      HEAPF32[(($309)>>2)]=$311;
      var $312=$mA;
      __ZmlfRK6b2Vec2($21, $312, $impulse9);
      __ZN6b2Vec2mIERKS_($vA, $21);
      var $313=$iA;
      var $314=(($23+136)|0);
      var $315=__Z7b2CrossRK6b2Vec2S1_($314, $impulse9);
      var $316=$313*$315;
      var $317=$wA;
      var $318=$317-$316;
      $wA=$318;
      var $319=$mB;
      __ZmlfRK6b2Vec2($22, $319, $impulse9);
      __ZN6b2Vec2pLERKS_($vB, $22);
      var $320=$iB;
      var $321=(($23+144)|0);
      var $322=__Z7b2CrossRK6b2Vec2S1_($321, $impulse9);
      var $323=$320*$322;
      var $324=$wB;
      var $325=$324+$323;
      $wB=$325;
      __label__ = 24; break;
    case 24: 
      var $327=(($23+128)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=$2;
      var $330=(($329+28)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=(($331+$328*12)|0);
      var $333=(($332)|0);
      var $334=$333;
      var $335=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($334)>>2)]=HEAP32[(($335)>>2)];HEAP32[(($334+4)>>2)]=HEAP32[(($335+4)>>2)];
      var $336=$wA;
      var $337=(($23+128)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=$2;
      var $340=(($339+28)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341+$338*12)|0);
      var $343=(($342+8)|0);
      HEAPF32[(($343)>>2)]=$336;
      var $344=(($23+132)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=$2;
      var $347=(($346+28)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=(($348+$345*12)|0);
      var $350=(($349)|0);
      var $351=$350;
      var $352=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($351)>>2)]=HEAP32[(($352)>>2)];HEAP32[(($351+4)>>2)]=HEAP32[(($352+4)>>2)];
      var $353=$wB;
      var $354=(($23+132)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=$2;
      var $357=(($356+28)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=(($358+$355*12)|0);
      var $360=(($359+8)|0);
      HEAPF32[(($360)>>2)]=$353;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 136; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=__stackBase__+8;
      var $aB;
      var $qA=__stackBase__+16;
      var $qB=__stackBase__+24;
      var $angularError;
      var $positionError;
      var $fixedRotation;
      var $angle;
      var $limitImpulse;
      var $C;
      var $C1;
      var $C2;
      var $rA=__stackBase__+32;
      var $3=__stackBase__+40;
      var $rB=__stackBase__+48;
      var $4=__stackBase__+56;
      var $C3=__stackBase__+64;
      var $5=__stackBase__+72;
      var $6=__stackBase__+80;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $K=__stackBase__+88;
      var $impulse=__stackBase__+104;
      var $7=__stackBase__+112;
      var $8=__stackBase__+120;
      var $9=__stackBase__+128;
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=(($10+128)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+$12*12)|0);
      var $17=(($16)|0);
      var $18=$cA;
      var $19=$17;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[(($18+4)>>2)]=HEAP32[(($19+4)>>2)];
      var $20=(($10+128)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+24)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+$21*12)|0);
      var $26=(($25+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      $aA=$27;
      var $28=(($10+132)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29*12)|0);
      var $34=(($33)|0);
      var $35=$cB;
      var $36=$34;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[(($35+4)>>2)]=HEAP32[(($36+4)>>2)];
      var $37=(($10+132)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+$38*12)|0);
      var $43=(($42+8)|0);
      var $44=HEAPF32[(($43)>>2)];
      $aB=$44;
      var $45=$aA;
      __ZN5b2RotC1Ef($qA, $45);
      var $46=$aB;
      __ZN5b2RotC1Ef($qB, $46);
      $angularError=0;
      $positionError=0;
      var $47=(($10+176)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($10+180)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=$48+$50;
      var $52=$51 == 0;
      var $53=(($52)&1);
      $fixedRotation=$53;
      var $54=(($10+112)|0);
      var $55=HEAP8[($54)];
      var $56=(($55) & 1);
      if ($56) { __label__ = 2; break; } else { __label__ = 13; break; }
    case 2: 
      var $58=(($10+224)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      var $62=$fixedRotation;
      var $63=(($62) & 1);
      var $64=(($63)&1);
      var $65=(($64)|0)==0;
      if ($65) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: 
      var $67=$aB;
      var $68=$aA;
      var $69=$67-$68;
      var $70=(($10+116)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=$69-$71;
      $angle=$72;
      $limitImpulse=0;
      var $73=(($10+224)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|0)==3;
      if ($75) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $77=$angle;
      var $78=(($10+120)|0);
      var $79=HEAPF32[(($78)>>2)];
      var $80=$77-$79;
      var $81=__Z7b2ClampIfET_S0_S0_S0_($80, -0.13962635397911072, 0.13962635397911072);
      $C=$81;
      var $82=(($10+220)|0);
      var $83=HEAPF32[(($82)>>2)];
      var $84=(-$83);
      var $85=$C;
      var $86=$84*$85;
      $limitImpulse=$86;
      var $87=$C;
      var $88=__Z5b2AbsIfET_S0_($87);
      $angularError=$88;
      __label__ = 12; break;
    case 6: 
      var $90=(($10+224)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)|0)==1;
      if ($92) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $94=$angle;
      var $95=(($10+120)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=$94-$96;
      $C1=$97;
      var $98=$C1;
      var $99=(-$98);
      $angularError=$99;
      var $100=$C1;
      var $101=$100+0.03490658849477768;
      var $102=__Z7b2ClampIfET_S0_S0_S0_($101, -0.13962635397911072, 0);
      $C1=$102;
      var $103=(($10+220)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=(-$104);
      var $106=$C1;
      var $107=$105*$106;
      $limitImpulse=$107;
      __label__ = 11; break;
    case 8: 
      var $109=(($10+224)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|0)==2;
      if ($111) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $113=$angle;
      var $114=(($10+124)|0);
      var $115=HEAPF32[(($114)>>2)];
      var $116=$113-$115;
      $C2=$116;
      var $117=$C2;
      $angularError=$117;
      var $118=$C2;
      var $119=$118-0.03490658849477768;
      var $120=__Z7b2ClampIfET_S0_S0_S0_($119, 0, 0.13962635397911072);
      $C2=$120;
      var $121=(($10+220)|0);
      var $122=HEAPF32[(($121)>>2)];
      var $123=(-$122);
      var $124=$C2;
      var $125=$123*$124;
      $limitImpulse=$125;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $129=(($10+176)|0);
      var $130=HEAPF32[(($129)>>2)];
      var $131=$limitImpulse;
      var $132=$130*$131;
      var $133=$aA;
      var $134=$133-$132;
      $aA=$134;
      var $135=(($10+180)|0);
      var $136=HEAPF32[(($135)>>2)];
      var $137=$limitImpulse;
      var $138=$136*$137;
      var $139=$aB;
      var $140=$139+$138;
      $aB=$140;
      __label__ = 13; break;
    case 13: 
      var $142=$aA;
      __ZN5b2Rot3SetEf($qA, $142);
      var $143=$aB;
      __ZN5b2Rot3SetEf($qB, $143);
      var $144=(($10+68)|0);
      var $145=(($10+152)|0);
      __ZmiRK6b2Vec2S1_($3, $144, $145);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $146=(($10+76)|0);
      var $147=(($10+160)|0);
      __ZmiRK6b2Vec2S1_($4, $146, $147);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($C3, $5, $rA);
      var $148=__ZNK6b2Vec26LengthEv($C3);
      $positionError=$148;
      var $149=(($10+168)|0);
      var $150=HEAPF32[(($149)>>2)];
      $mA=$150;
      var $151=(($10+172)|0);
      var $152=HEAPF32[(($151)>>2)];
      $mB=$152;
      var $153=(($10+176)|0);
      var $154=HEAPF32[(($153)>>2)];
      $iA=$154;
      var $155=(($10+180)|0);
      var $156=HEAPF32[(($155)>>2)];
      $iB=$156;
      __ZN7b2Mat22C1Ev($K);
      var $157=$mA;
      var $158=$mB;
      var $159=$157+$158;
      var $160=$iA;
      var $161=(($rA+4)|0);
      var $162=HEAPF32[(($161)>>2)];
      var $163=$160*$162;
      var $164=(($rA+4)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=$163*$165;
      var $167=$159+$166;
      var $168=$iB;
      var $169=(($rB+4)|0);
      var $170=HEAPF32[(($169)>>2)];
      var $171=$168*$170;
      var $172=(($rB+4)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=$171*$173;
      var $175=$167+$174;
      var $176=(($K)|0);
      var $177=(($176)|0);
      HEAPF32[(($177)>>2)]=$175;
      var $178=$iA;
      var $179=(-$178);
      var $180=(($rA)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=$179*$181;
      var $183=(($rA+4)|0);
      var $184=HEAPF32[(($183)>>2)];
      var $185=$182*$184;
      var $186=$iB;
      var $187=(($rB)|0);
      var $188=HEAPF32[(($187)>>2)];
      var $189=$186*$188;
      var $190=(($rB+4)|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=$189*$191;
      var $193=$185-$192;
      var $194=(($K)|0);
      var $195=(($194+4)|0);
      HEAPF32[(($195)>>2)]=$193;
      var $196=(($K)|0);
      var $197=(($196+4)|0);
      var $198=HEAPF32[(($197)>>2)];
      var $199=(($K+8)|0);
      var $200=(($199)|0);
      HEAPF32[(($200)>>2)]=$198;
      var $201=$mA;
      var $202=$mB;
      var $203=$201+$202;
      var $204=$iA;
      var $205=(($rA)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=$204*$206;
      var $208=(($rA)|0);
      var $209=HEAPF32[(($208)>>2)];
      var $210=$207*$209;
      var $211=$203+$210;
      var $212=$iB;
      var $213=(($rB)|0);
      var $214=HEAPF32[(($213)>>2)];
      var $215=$212*$214;
      var $216=(($rB)|0);
      var $217=HEAPF32[(($216)>>2)];
      var $218=$215*$217;
      var $219=$211+$218;
      var $220=(($K+8)|0);
      var $221=(($220+4)|0);
      HEAPF32[(($221)>>2)]=$219;
      __ZNK7b2Mat225SolveERK6b2Vec2($7, $K, $C3);
      __ZNK6b2Vec2ngEv($impulse, $7);
      var $222=$mA;
      __ZmlfRK6b2Vec2($8, $222, $impulse);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $223=$iA;
      var $224=__Z7b2CrossRK6b2Vec2S1_($rA, $impulse);
      var $225=$223*$224;
      var $226=$aA;
      var $227=$226-$225;
      $aA=$227;
      var $228=$mB;
      __ZmlfRK6b2Vec2($9, $228, $impulse);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $229=$iB;
      var $230=__Z7b2CrossRK6b2Vec2S1_($rB, $impulse);
      var $231=$229*$230;
      var $232=$aB;
      var $233=$232+$231;
      $aB=$233;
      var $234=(($10+128)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=$2;
      var $237=(($236+24)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($238+$235*12)|0);
      var $240=(($239)|0);
      var $241=$240;
      var $242=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($241)>>2)]=HEAP32[(($242)>>2)];HEAP32[(($241+4)>>2)]=HEAP32[(($242+4)>>2)];
      var $243=$aA;
      var $244=(($10+128)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$2;
      var $247=(($246+24)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=(($248+$245*12)|0);
      var $250=(($249+8)|0);
      HEAPF32[(($250)>>2)]=$243;
      var $251=(($10+132)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$2;
      var $254=(($253+24)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=(($255+$252*12)|0);
      var $257=(($256)|0);
      var $258=$257;
      var $259=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($258)>>2)]=HEAP32[(($259)>>2)];HEAP32[(($258+4)>>2)]=HEAP32[(($259+4)>>2)];
      var $260=$aB;
      var $261=(($10+132)|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=$2;
      var $264=(($263+24)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265+$262*12)|0);
      var $267=(($266+8)|0);
      HEAPF32[(($267)>>2)]=$260;
      var $268=$positionError;
      var $269=$268 <= 0.004999999888241291;
      if ($269) { __label__ = 14; break; } else { var $274 = 0;__label__ = 15; break; }
    case 14: 
      var $271=$angularError;
      var $272=$271 <= 0.03490658849477768;
      var $274 = $272;__label__ = 15; break;
    case 15: 
      var $274;
      STACKTOP = __stackBase__;
      return $274;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK15b2RevoluteJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK15b2RevoluteJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK15b2RevoluteJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+84)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3+84)|0);
  var $8=(($7+4)|0);
  var $9=HEAPF32[(($8)>>2)];
  __ZN6b2Vec2C1Eff($P, $6, $9);
  var $10=$2;
  __ZmlfRK6b2Vec2($agg_result, $10, $P);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK15b2RevoluteJoint13GetJointSpeedEv($this) {
  ;
  var __label__;

  var $1;
  var $bA;
  var $bB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  $bA=$5;
  var $6=$2;
  var $7=(($6+52)|0);
  var $8=HEAP32[(($7)>>2)];
  $bB=$8;
  var $9=$bB;
  var $10=(($9+72)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=$bA;
  var $13=(($12+72)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$11-$14;
  ;
  return $15;
}


function __ZNK15b2RevoluteJoint14IsMotorEnabledEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+100)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZNK15b2RevoluteJoint14GetMotorTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+96)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  ;
  return $7;
}


function __ZNK15b2RevoluteJoint14IsLimitEnabledEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+112)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZNK15b2RevoluteJoint13GetLowerLimitEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+120)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK15b2RevoluteJoint13GetUpperLimitEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+124)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN15b2RevoluteJoint11EnableMotorEb($this, $flag) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&1);
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+48)|0);
  var $7=HEAP32[(($6)>>2)];
  __ZN6b2Body8SetAwakeEb($7, 1);
  var $8=$4;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  __ZN6b2Body8SetAwakeEb($10, 1);
  var $11=$2;
  var $12=(($11) & 1);
  var $13=(($4+100)|0);
  var $14=(($12)&1);
  HEAP8[($13)]=$14;
  ;
  return;
}


function __ZN15b2RevoluteJoint13SetMotorSpeedEf($this, $speed) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$speed;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+108)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function __ZN15b2RevoluteJoint17SetMaxMotorTorqueEf($this, $torque) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$torque;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+104)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function __ZN15b2RevoluteJoint11EnableLimitEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&1);
      var $8=(($4+112)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&1);
      var $12=(($7)|0)!=(($11)|0);
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $14=$4;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      __ZN6b2Body8SetAwakeEb($16, 1);
      var $17=$4;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      __ZN6b2Body8SetAwakeEb($19, 1);
      var $20=$2;
      var $21=(($20) & 1);
      var $22=(($4+112)|0);
      var $23=(($21)&1);
      HEAP8[($22)]=$23;
      var $24=(($4+84)|0);
      var $25=(($24+8)|0);
      HEAPF32[(($25)>>2)]=0;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2RevoluteJoint9SetLimitsEff($this, $lower, $upper) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$lower;
      $3=$upper;
      var $4=$1;
      var $5=$2;
      var $6=$3;
      var $7=$5 <= $6;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str374)|0), 473, ((STRING_TABLE.___PRETTY_FUNCTION____ZN15b2RevoluteJoint9SetLimitsEff)|0), ((STRING_TABLE.__str1375)|0));
      __label__ = 4; break;
    case 4: 
      var $11=$2;
      var $12=(($4+120)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=$11 != $13;
      if ($14) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $16=$3;
      var $17=(($4+124)|0);
      var $18=HEAPF32[(($17)>>2)];
      var $19=$16 != $18;
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $21=$4;
      var $22=(($21+48)|0);
      var $23=HEAP32[(($22)>>2)];
      __ZN6b2Body8SetAwakeEb($23, 1);
      var $24=$4;
      var $25=(($24+52)|0);
      var $26=HEAP32[(($25)>>2)];
      __ZN6b2Body8SetAwakeEb($26, 1);
      var $27=(($4+84)|0);
      var $28=(($27+8)|0);
      HEAPF32[(($28)>>2)]=0;
      var $29=$2;
      var $30=(($4+120)|0);
      HEAPF32[(($30)>>2)]=$29;
      var $31=$3;
      var $32=(($4+124)|0);
      HEAPF32[(($32)>>2)]=$31;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2RevoluteJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str2376)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str3377)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str4378)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str5379)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str6380)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str7381)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+116)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((STRING_TABLE.__str8382)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$38,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $39=(($2+112)|0);
  var $40=HEAP8[($39)];
  var $41=(($40) & 1);
  var $42=(($41)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str9383)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$42,tempInt));
  var $43=(($2+120)|0);
  var $44=HEAPF32[(($43)>>2)];
  var $45=$44;
  __Z5b2LogPKcz(((STRING_TABLE.__str10384)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$45,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $46=(($2+124)|0);
  var $47=HEAPF32[(($46)>>2)];
  var $48=$47;
  __Z5b2LogPKcz(((STRING_TABLE.__str11385)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$48,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $49=(($2+100)|0);
  var $50=HEAP8[($49)];
  var $51=(($50) & 1);
  var $52=(($51)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str12386)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$52,tempInt));
  var $53=(($2+108)|0);
  var $54=HEAPF32[(($53)>>2)];
  var $55=$54;
  __Z5b2LogPKcz(((STRING_TABLE.__str13387)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$55,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $56=(($2+104)|0);
  var $57=HEAPF32[(($56)>>2)];
  var $58=$57;
  __Z5b2LogPKcz(((STRING_TABLE.__str14388)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$58,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $59=$2;
  var $60=(($59+56)|0);
  var $61=HEAP32[(($60)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str15389)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$61,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN15b2RevoluteJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2RevoluteJointD2Ev($2);
  ;
  return;
}


function __ZN15b2RevoluteJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN15b2RevoluteJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2RevoluteJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      var $6=__stackBase__+72;
      var $7=__stackBase__+80;
      var $8=__stackBase__+88;
      var $9=__stackBase__+96;
      var $C;
      var $crA;
      var $crB;
      var $invMass;
      var $P=__stackBase__+104;
      var $10=__stackBase__+112;
      var $11=__stackBase__+120;
      $1=$this;
      $2=$data;
      var $12=$1;
      var $13=$12;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12+96)|0);
      HEAP32[(($18)>>2)]=$17;
      var $19=$12;
      var $20=(($19+52)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($12+100)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($12+128)|0);
      var $26=$12;
      var $27=(($26+48)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+28)|0);
      var $30=(($29)|0);
      var $31=$25;
      var $32=$30;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[(($31+4)>>2)]=HEAP32[(($32+4)>>2)];
      var $33=(($12+136)|0);
      var $34=$12;
      var $35=(($34+52)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+28)|0);
      var $38=(($37)|0);
      var $39=$33;
      var $40=$38;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[(($39+4)>>2)]=HEAP32[(($40+4)>>2)];
      var $41=$12;
      var $42=(($41+48)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+120)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($12+144)|0);
      HEAPF32[(($46)>>2)]=$45;
      var $47=$12;
      var $48=(($47+52)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+120)|0);
      var $51=HEAPF32[(($50)>>2)];
      var $52=(($12+148)|0);
      HEAPF32[(($52)>>2)]=$51;
      var $53=$12;
      var $54=(($53+48)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+128)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=(($12+152)|0);
      HEAPF32[(($58)>>2)]=$57;
      var $59=$12;
      var $60=(($59+52)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+128)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=(($12+156)|0);
      HEAPF32[(($64)>>2)]=$63;
      var $65=(($12+96)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+$66*12)|0);
      var $71=(($70)|0);
      var $72=$cA;
      var $73=$71;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[(($72+4)>>2)]=HEAP32[(($73+4)>>2)];
      var $74=(($12+96)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$2;
      var $77=(($76+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+$75*12)|0);
      var $80=(($79+8)|0);
      var $81=HEAPF32[(($80)>>2)];
      $aA=$81;
      var $82=(($12+96)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$2;
      var $85=(($84+28)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+$83*12)|0);
      var $88=(($87)|0);
      var $89=$vA;
      var $90=$88;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[(($89+4)>>2)]=HEAP32[(($90+4)>>2)];
      var $91=(($12+96)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$2;
      var $94=(($93+28)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+$92*12)|0);
      var $97=(($96+8)|0);
      var $98=HEAPF32[(($97)>>2)];
      $wA=$98;
      var $99=(($12+100)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$2;
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+$100*12)|0);
      var $105=(($104)|0);
      var $106=$cB;
      var $107=$105;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[(($106+4)>>2)]=HEAP32[(($107+4)>>2)];
      var $108=(($12+100)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$2;
      var $111=(($110+24)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+$109*12)|0);
      var $114=(($113+8)|0);
      var $115=HEAPF32[(($114)>>2)];
      $aB=$115;
      var $116=(($12+100)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$2;
      var $119=(($118+28)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+$117*12)|0);
      var $122=(($121)|0);
      var $123=$vB;
      var $124=$122;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[(($123+4)>>2)]=HEAP32[(($124+4)>>2)];
      var $125=(($12+100)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$2;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+$126*12)|0);
      var $131=(($130+8)|0);
      var $132=HEAPF32[(($131)>>2)];
      $wB=$132;
      var $133=$aA;
      __ZN5b2RotC1Ef($qA, $133);
      var $134=$aB;
      __ZN5b2RotC1Ef($qB, $134);
      var $135=(($12+112)|0);
      var $136=(($12+68)|0);
      var $137=(($12+128)|0);
      __ZmiRK6b2Vec2S1_($4, $136, $137);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $138=$135;
      var $139=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[(($138+4)>>2)]=HEAP32[(($139+4)>>2)];
      var $140=(($12+120)|0);
      var $141=(($12+76)|0);
      var $142=(($12+136)|0);
      __ZmiRK6b2Vec2S1_($6, $141, $142);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $143=$140;
      var $144=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($143)>>2)]=HEAP32[(($144)>>2)];HEAP32[(($143+4)>>2)]=HEAP32[(($144+4)>>2)];
      var $145=(($12+104)|0);
      var $146=(($12+120)|0);
      __ZplRK6b2Vec2S1_($9, $cB, $146);
      __ZmiRK6b2Vec2S1_($8, $9, $cA);
      var $147=(($12+112)|0);
      __ZmiRK6b2Vec2S1_($7, $8, $147);
      var $148=$145;
      var $149=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($148)>>2)]=HEAP32[(($149)>>2)];HEAP32[(($148+4)>>2)]=HEAP32[(($149+4)>>2)];
      var $150=(($12+104)|0);
      var $151=__ZNK6b2Vec26LengthEv($150);
      var $152=(($12+88)|0);
      HEAPF32[(($152)>>2)]=$151;
      var $153=(($12+88)|0);
      var $154=HEAPF32[(($153)>>2)];
      var $155=(($12+84)|0);
      var $156=HEAPF32[(($155)>>2)];
      var $157=$154-$156;
      $C=$157;
      var $158=$C;
      var $159=$158 > 0;
      if ($159) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $161=(($12+164)|0);
      HEAP32[(($161)>>2)]=2;
      __label__ = 4; break;
    case 3: 
      var $163=(($12+164)|0);
      HEAP32[(($163)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      var $165=(($12+88)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=$166 > 0.004999999888241291;
      if ($167) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $169=(($12+104)|0);
      var $170=(($12+88)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=1/$171;
      __ZN6b2Vec2mLEf($169, $172);
      __label__ = 7; break;
    case 6: 
      var $174=(($12+104)|0);
      __ZN6b2Vec27SetZeroEv($174);
      var $175=(($12+160)|0);
      HEAPF32[(($175)>>2)]=0;
      var $176=(($12+92)|0);
      HEAPF32[(($176)>>2)]=0;
      __label__ = 14; break;
    case 7: 
      var $178=(($12+112)|0);
      var $179=(($12+104)|0);
      var $180=__Z7b2CrossRK6b2Vec2S1_($178, $179);
      $crA=$180;
      var $181=(($12+120)|0);
      var $182=(($12+104)|0);
      var $183=__Z7b2CrossRK6b2Vec2S1_($181, $182);
      $crB=$183;
      var $184=(($12+144)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(($12+152)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=$crA;
      var $189=$187*$188;
      var $190=$crA;
      var $191=$189*$190;
      var $192=$185+$191;
      var $193=(($12+148)|0);
      var $194=HEAPF32[(($193)>>2)];
      var $195=$192+$194;
      var $196=(($12+156)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=$crB;
      var $199=$197*$198;
      var $200=$crB;
      var $201=$199*$200;
      var $202=$195+$201;
      $invMass=$202;
      var $203=$invMass;
      var $204=$203 != 0;
      if ($204) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $206=$invMass;
      var $207=1/$206;
      var $210 = $207;__label__ = 10; break;
    case 9: 
      var $210 = 0;__label__ = 10; break;
    case 10: 
      var $210;
      var $211=(($12+160)|0);
      HEAPF32[(($211)>>2)]=$210;
      var $212=$2;
      var $213=(($212)|0);
      var $214=(($213+20)|0);
      var $215=HEAP8[($214)];
      var $216=(($215) & 1);
      if ($216) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $218=$2;
      var $219=(($218)|0);
      var $220=(($219+8)|0);
      var $221=HEAPF32[(($220)>>2)];
      var $222=(($12+92)|0);
      var $223=HEAPF32[(($222)>>2)];
      var $224=$223*$221;
      HEAPF32[(($222)>>2)]=$224;
      var $225=(($12+92)|0);
      var $226=HEAPF32[(($225)>>2)];
      var $227=(($12+104)|0);
      __ZmlfRK6b2Vec2($P, $226, $227);
      var $228=(($12+144)|0);
      var $229=HEAPF32[(($228)>>2)];
      __ZmlfRK6b2Vec2($10, $229, $P);
      __ZN6b2Vec2mIERKS_($vA, $10);
      var $230=(($12+152)|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=(($12+112)|0);
      var $233=__Z7b2CrossRK6b2Vec2S1_($232, $P);
      var $234=$231*$233;
      var $235=$wA;
      var $236=$235-$234;
      $wA=$236;
      var $237=(($12+148)|0);
      var $238=HEAPF32[(($237)>>2)];
      __ZmlfRK6b2Vec2($11, $238, $P);
      __ZN6b2Vec2pLERKS_($vB, $11);
      var $239=(($12+156)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=(($12+120)|0);
      var $242=__Z7b2CrossRK6b2Vec2S1_($241, $P);
      var $243=$240*$242;
      var $244=$wB;
      var $245=$244+$243;
      $wB=$245;
      __label__ = 13; break;
    case 12: 
      var $247=(($12+92)|0);
      HEAPF32[(($247)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $249=(($12+96)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=$2;
      var $252=(($251+28)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+$250*12)|0);
      var $255=(($254)|0);
      var $256=$255;
      var $257=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($256)>>2)]=HEAP32[(($257)>>2)];HEAP32[(($256+4)>>2)]=HEAP32[(($257+4)>>2)];
      var $258=$wA;
      var $259=(($12+96)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$2;
      var $262=(($261+28)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=(($263+$260*12)|0);
      var $265=(($264+8)|0);
      HEAPF32[(($265)>>2)]=$258;
      var $266=(($12+100)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=$2;
      var $269=(($268+28)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270+$267*12)|0);
      var $272=(($271)|0);
      var $273=$272;
      var $274=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];HEAP32[(($273+4)>>2)]=HEAP32[(($274+4)>>2)];
      var $275=$wB;
      var $276=(($12+100)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$2;
      var $279=(($278+28)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+$277*12)|0);
      var $282=(($281+8)|0);
      HEAPF32[(($282)>>2)]=$275;
      __label__ = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2RopeJointC2EPK14b2RopeJointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((__ZTV11b2RopeJoint+8)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $14=(($5+104)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $16=(($5+112)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $18=(($5+120)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $20=(($5+128)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $22=(($5+136)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $24=(($5+68)|0);
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=$24;
      var $28=$26;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[(($27+4)>>2)]=HEAP32[(($28+4)>>2)];
      var $29=(($5+76)|0);
      var $30=$2;
      var $31=(($30+28)|0);
      var $32=$29;
      var $33=$31;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[(($32+4)>>2)]=HEAP32[(($33+4)>>2)];
      var $34=$2;
      var $35=(($34+36)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=(($5+84)|0);
      HEAPF32[(($37)>>2)]=$36;
      var $38=(($5+160)|0);
      HEAPF32[(($38)>>2)]=0;
      var $39=(($5+92)|0);
      HEAPF32[(($39)>>2)]=0;
      var $40=(($5+164)|0);
      HEAP32[(($40)>>2)]=0;
      var $41=(($5+88)|0);
      HEAPF32[(($41)>>2)]=0;
      ;
      return;
    case 9: 
      var $43=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $44=$43.f0;
      $3=$44;
      var $45=$43.f1;
      $4=$45;
      var $46=$5;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $49=$3;
      var $50=$3;
      var $51=$4;
      var $52=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $50, tempValue);
      var $53=($52.f1 = $51, $52);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 12: 
      var $55=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK11b2RopeJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  ;
  return 0;
}


function __ZNK11b2RopeJoint12GetMaxLengthEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+84)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK11b2RopeJoint13GetLimitStateEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+164)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=__stackBase__+8;
      var $wB;
      var $vpA=__stackBase__+16;
      var $3=__stackBase__+24;
      var $vpB=__stackBase__+32;
      var $4=__stackBase__+40;
      var $C;
      var $Cdot;
      var $5=__stackBase__+48;
      var $impulse;
      var $oldImpulse;
      var $P=__stackBase__+56;
      var $6=__stackBase__+64;
      var $7=__stackBase__+72;
      $1=$this;
      $2=$data;
      var $8=$1;
      var $9=(($8+96)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+$10*12)|0);
      var $15=(($14)|0);
      var $16=$vA;
      var $17=$15;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[(($16+4)>>2)]=HEAP32[(($17+4)>>2)];
      var $18=(($8+96)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+$19*12)|0);
      var $24=(($23+8)|0);
      var $25=HEAPF32[(($24)>>2)];
      $wA=$25;
      var $26=(($8+100)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+$27*12)|0);
      var $32=(($31)|0);
      var $33=$vB;
      var $34=$32;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[(($33+4)>>2)]=HEAP32[(($34+4)>>2)];
      var $35=(($8+100)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+$36*12)|0);
      var $41=(($40+8)|0);
      var $42=HEAPF32[(($41)>>2)];
      $wB=$42;
      var $43=$wA;
      var $44=(($8+112)|0);
      __Z7b2CrossfRK6b2Vec2($3, $43, $44);
      __ZplRK6b2Vec2S1_($vpA, $vA, $3);
      var $45=$wB;
      var $46=(($8+120)|0);
      __Z7b2CrossfRK6b2Vec2($4, $45, $46);
      __ZplRK6b2Vec2S1_($vpB, $vB, $4);
      var $47=(($8+88)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($8+84)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=$48-$50;
      $C=$51;
      var $52=(($8+104)|0);
      __ZmiRK6b2Vec2S1_($5, $vpB, $vpA);
      var $53=__Z5b2DotRK6b2Vec2S1_($52, $5);
      $Cdot=$53;
      var $54=$C;
      var $55=$54 < 0;
      if ($55) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $57=$2;
      var $58=(($57)|0);
      var $59=(($58+4)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=$C;
      var $62=$60*$61;
      var $63=$Cdot;
      var $64=$63+$62;
      $Cdot=$64;
      __label__ = 3; break;
    case 3: 
      var $66=(($8+160)|0);
      var $67=HEAPF32[(($66)>>2)];
      var $68=(-$67);
      var $69=$Cdot;
      var $70=$68*$69;
      $impulse=$70;
      var $71=(($8+92)|0);
      var $72=HEAPF32[(($71)>>2)];
      $oldImpulse=$72;
      var $73=(($8+92)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$impulse;
      var $76=$74+$75;
      var $77=__Z5b2MinIfET_S0_S0_(0, $76);
      var $78=(($8+92)|0);
      HEAPF32[(($78)>>2)]=$77;
      var $79=(($8+92)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=$oldImpulse;
      var $82=$80-$81;
      $impulse=$82;
      var $83=$impulse;
      var $84=(($8+104)|0);
      __ZmlfRK6b2Vec2($P, $83, $84);
      var $85=(($8+144)|0);
      var $86=HEAPF32[(($85)>>2)];
      __ZmlfRK6b2Vec2($6, $86, $P);
      __ZN6b2Vec2mIERKS_($vA, $6);
      var $87=(($8+152)|0);
      var $88=HEAPF32[(($87)>>2)];
      var $89=(($8+112)|0);
      var $90=__Z7b2CrossRK6b2Vec2S1_($89, $P);
      var $91=$88*$90;
      var $92=$wA;
      var $93=$92-$91;
      $wA=$93;
      var $94=(($8+148)|0);
      var $95=HEAPF32[(($94)>>2)];
      __ZmlfRK6b2Vec2($7, $95, $P);
      __ZN6b2Vec2pLERKS_($vB, $7);
      var $96=(($8+156)|0);
      var $97=HEAPF32[(($96)>>2)];
      var $98=(($8+120)|0);
      var $99=__Z7b2CrossRK6b2Vec2S1_($98, $P);
      var $100=$97*$99;
      var $101=$wB;
      var $102=$101+$100;
      $wB=$102;
      var $103=(($8+96)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$2;
      var $106=(($105+28)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+$104*12)|0);
      var $109=(($108)|0);
      var $110=$109;
      var $111=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($110)>>2)]=HEAP32[(($111)>>2)];HEAP32[(($110+4)>>2)]=HEAP32[(($111+4)>>2)];
      var $112=$wA;
      var $113=(($8+96)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+$114*12)|0);
      var $119=(($118+8)|0);
      HEAPF32[(($119)>>2)]=$112;
      var $120=(($8+100)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$2;
      var $123=(($122+28)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+$121*12)|0);
      var $126=(($125)|0);
      var $127=$126;
      var $128=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($127)>>2)]=HEAP32[(($128)>>2)];HEAP32[(($127+4)>>2)]=HEAP32[(($128+4)>>2)];
      var $129=$wB;
      var $130=(($8+100)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$2;
      var $133=(($132+28)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+$131*12)|0);
      var $136=(($135+8)|0);
      HEAPF32[(($136)>>2)]=$129;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $cA=__stackBase__;
  var $aA;
  var $cB=__stackBase__+8;
  var $aB;
  var $qA=__stackBase__+16;
  var $qB=__stackBase__+24;
  var $rA=__stackBase__+32;
  var $3=__stackBase__+40;
  var $rB=__stackBase__+48;
  var $4=__stackBase__+56;
  var $u=__stackBase__+64;
  var $5=__stackBase__+72;
  var $6=__stackBase__+80;
  var $length;
  var $C;
  var $impulse;
  var $P=__stackBase__+88;
  var $7=__stackBase__+96;
  var $8=__stackBase__+104;
  $1=$this;
  $2=$data;
  var $9=$1;
  var $10=(($9+96)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$2;
  var $13=(($12+24)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14+$11*12)|0);
  var $16=(($15)|0);
  var $17=$cA;
  var $18=$16;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[(($17+4)>>2)]=HEAP32[(($18+4)>>2)];
  var $19=(($9+96)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=$2;
  var $22=(($21+24)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=(($23+$20*12)|0);
  var $25=(($24+8)|0);
  var $26=HEAPF32[(($25)>>2)];
  $aA=$26;
  var $27=(($9+100)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+24)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+$28*12)|0);
  var $33=(($32)|0);
  var $34=$cB;
  var $35=$33;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
  var $36=(($9+100)|0);
  var $37=HEAP32[(($36)>>2)];
  var $38=$2;
  var $39=(($38+24)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=(($40+$37*12)|0);
  var $42=(($41+8)|0);
  var $43=HEAPF32[(($42)>>2)];
  $aB=$43;
  var $44=$aA;
  __ZN5b2RotC1Ef($qA, $44);
  var $45=$aB;
  __ZN5b2RotC1Ef($qB, $45);
  var $46=(($9+68)|0);
  var $47=(($9+128)|0);
  __ZmiRK6b2Vec2S1_($3, $46, $47);
  __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
  var $48=(($9+76)|0);
  var $49=(($9+136)|0);
  __ZmiRK6b2Vec2S1_($4, $48, $49);
  __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
  __ZplRK6b2Vec2S1_($6, $cB, $rB);
  __ZmiRK6b2Vec2S1_($5, $6, $cA);
  __ZmiRK6b2Vec2S1_($u, $5, $rA);
  var $50=__ZN6b2Vec29NormalizeEv($u);
  $length=$50;
  var $51=$length;
  var $52=(($9+84)|0);
  var $53=HEAPF32[(($52)>>2)];
  var $54=$51-$53;
  $C=$54;
  var $55=$C;
  var $56=__Z7b2ClampIfET_S0_S0_S0_($55, 0, 0.20000000298023224);
  $C=$56;
  var $57=(($9+160)|0);
  var $58=HEAPF32[(($57)>>2)];
  var $59=(-$58);
  var $60=$C;
  var $61=$59*$60;
  $impulse=$61;
  var $62=$impulse;
  __ZmlfRK6b2Vec2($P, $62, $u);
  var $63=(($9+144)|0);
  var $64=HEAPF32[(($63)>>2)];
  __ZmlfRK6b2Vec2($7, $64, $P);
  __ZN6b2Vec2mIERKS_($cA, $7);
  var $65=(($9+152)|0);
  var $66=HEAPF32[(($65)>>2)];
  var $67=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
  var $68=$66*$67;
  var $69=$aA;
  var $70=$69-$68;
  $aA=$70;
  var $71=(($9+148)|0);
  var $72=HEAPF32[(($71)>>2)];
  __ZmlfRK6b2Vec2($8, $72, $P);
  __ZN6b2Vec2pLERKS_($cB, $8);
  var $73=(($9+156)|0);
  var $74=HEAPF32[(($73)>>2)];
  var $75=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
  var $76=$74*$75;
  var $77=$aB;
  var $78=$77+$76;
  $aB=$78;
  var $79=(($9+96)|0);
  var $80=HEAP32[(($79)>>2)];
  var $81=$2;
  var $82=(($81+24)|0);
  var $83=HEAP32[(($82)>>2)];
  var $84=(($83+$80*12)|0);
  var $85=(($84)|0);
  var $86=$85;
  var $87=$cA;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[(($86+4)>>2)]=HEAP32[(($87+4)>>2)];
  var $88=$aA;
  var $89=(($9+96)|0);
  var $90=HEAP32[(($89)>>2)];
  var $91=$2;
  var $92=(($91+24)|0);
  var $93=HEAP32[(($92)>>2)];
  var $94=(($93+$90*12)|0);
  var $95=(($94+8)|0);
  HEAPF32[(($95)>>2)]=$88;
  var $96=(($9+100)|0);
  var $97=HEAP32[(($96)>>2)];
  var $98=$2;
  var $99=(($98+24)|0);
  var $100=HEAP32[(($99)>>2)];
  var $101=(($100+$97*12)|0);
  var $102=(($101)|0);
  var $103=$102;
  var $104=$cB;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[(($103+4)>>2)]=HEAP32[(($104+4)>>2)];
  var $105=$aB;
  var $106=(($9+100)|0);
  var $107=HEAP32[(($106)>>2)];
  var $108=$2;
  var $109=(($108+24)|0);
  var $110=HEAP32[(($109)>>2)];
  var $111=(($110+$107*12)|0);
  var $112=(($111+8)|0);
  HEAPF32[(($112)>>2)]=$105;
  var $113=$length;
  var $114=(($9+84)|0);
  var $115=HEAPF32[(($114)>>2)];
  var $116=$113-$115;
  var $117=$116 < 0.004999999888241291;
  STACKTOP = __stackBase__;
  return $117;
}


function __ZNK11b2RopeJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK11b2RopeJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK11b2RopeJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+92)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  var $8=(($3+104)|0);
  __ZmlfRK6b2Vec2($agg_result, $7, $8);
  ;
  return;
}


function __ZN11b2RopeJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str392)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str1393)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str2394)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str3395)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str4396)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str5397)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+84)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((STRING_TABLE.__str6398)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$38,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $39=$2;
  var $40=(($39+56)|0);
  var $41=HEAP32[(($40)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str7399)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$41,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN11b2RopeJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2RopeJointD2Ev($2);
  ;
  return;
}


function __ZN11b2RopeJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN11b2RopeJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2RopeJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN14b2WeldJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  var $6=__stackBase__+8;
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  var $7=$1;
  var $8=$2;
  var $9=$7;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$3;
  var $12=$7;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=(($7+20)|0);
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $17, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[(($19+4)>>2)]=HEAP32[(($20+4)>>2)];
  var $21=(($7+28)|0);
  var $22=$7;
  var $23=(($22+12)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $24, $25);
  var $26=$21;
  var $27=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[(($26+4)>>2)]=HEAP32[(($27+4)>>2)];
  var $28=$7;
  var $29=(($28+12)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=__ZNK6b2Body8GetAngleEv($30);
  var $32=$7;
  var $33=(($32+8)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=__ZNK6b2Body8GetAngleEv($34);
  var $36=$31-$35;
  var $37=(($7+36)|0);
  HEAPF32[(($37)>>2)]=$36;
  STACKTOP = __stackBase__;
  return;
}


function __ZN11b2WeldJointC2EPK14b2WeldJointDef($this, $def) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((__ZTV11b2WeldJoint+8)|0);
      var $10=(($5+80)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $12=(($5+88)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $14=(($5+104)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec3C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $16=(($5+124)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      var $18=(($5+132)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $20=(($5+140)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $22=(($5+148)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $24=(($5+172)|0);
      (function() { try { __THREW__ = false; return __ZN7b2Mat33C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $26=(($5+80)|0);
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=$26;
      var $30=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[(($29+4)>>2)]=HEAP32[(($30+4)>>2)];
      var $31=(($5+88)|0);
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=(($5+96)|0);
      HEAPF32[(($39)>>2)]=$38;
      var $40=$2;
      var $41=(($40+40)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($5+68)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$2;
      var $45=(($44+44)|0);
      var $46=HEAPF32[(($45)>>2)];
      var $47=(($5+72)|0);
      HEAPF32[(($47)>>2)]=$46;
      var $48=(($5+104)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec37SetZeroEv($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      ;
      return;
    case 11: 
      var $51=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $52=$51.f0;
      $3=$52;
      var $53=$51.f1;
      $4=$53;
      var $54=$5;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $57=$3;
      var $58=$3;
      var $59=$4;
      var $60=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $58, tempValue);
      var $61=($60.f1 = $59, $60);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 14: 
      var $63=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 140; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $3=__stackBase__+48;
      var $4=__stackBase__+56;
      var $5=__stackBase__+64;
      var $6=__stackBase__+72;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $K=__stackBase__+80;
      var $invM;
      var $m;
      var $C;
      var $omega;
      var $d;
      var $k;
      var $h;
      var $P=__stackBase__+116;
      var $7=__stackBase__+124;
      var $8=__stackBase__+132;
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=$9;
      var $11=(($10+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($9+116)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=$9;
      var $17=(($16+52)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($9+120)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=(($9+140)|0);
      var $23=$9;
      var $24=(($23+48)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+28)|0);
      var $27=(($26)|0);
      var $28=$22;
      var $29=$27;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[(($28+4)>>2)]=HEAP32[(($29+4)>>2)];
      var $30=(($9+148)|0);
      var $31=$9;
      var $32=(($31+52)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+28)|0);
      var $35=(($34)|0);
      var $36=$30;
      var $37=$35;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[(($36+4)>>2)]=HEAP32[(($37+4)>>2)];
      var $38=$9;
      var $39=(($38+48)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+120)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($9+156)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$9;
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($9+160)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$9;
      var $51=(($50+48)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+128)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($9+164)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$9;
      var $57=(($56+52)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($9+168)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=(($9+116)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+$63*12)|0);
      var $68=(($67)|0);
      var $69=$cA;
      var $70=$68;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[(($69+4)>>2)]=HEAP32[(($70+4)>>2)];
      var $71=(($9+116)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+$72*12)|0);
      var $77=(($76+8)|0);
      var $78=HEAPF32[(($77)>>2)];
      $aA=$78;
      var $79=(($9+116)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+28)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+$80*12)|0);
      var $85=(($84)|0);
      var $86=$vA;
      var $87=$85;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[(($86+4)>>2)]=HEAP32[(($87+4)>>2)];
      var $88=(($9+116)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$2;
      var $91=(($90+28)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+$89*12)|0);
      var $94=(($93+8)|0);
      var $95=HEAPF32[(($94)>>2)];
      $wA=$95;
      var $96=(($9+120)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$2;
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+$97*12)|0);
      var $102=(($101)|0);
      var $103=$cB;
      var $104=$102;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[(($103+4)>>2)]=HEAP32[(($104+4)>>2)];
      var $105=(($9+120)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+$106*12)|0);
      var $111=(($110+8)|0);
      var $112=HEAPF32[(($111)>>2)];
      $aB=$112;
      var $113=(($9+120)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+$114*12)|0);
      var $119=(($118)|0);
      var $120=$vB;
      var $121=$119;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[(($120+4)>>2)]=HEAP32[(($121+4)>>2)];
      var $122=(($9+120)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$2;
      var $125=(($124+28)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+$123*12)|0);
      var $128=(($127+8)|0);
      var $129=HEAPF32[(($128)>>2)];
      $wB=$129;
      var $130=$aA;
      __ZN5b2RotC1Ef($qA, $130);
      var $131=$aB;
      __ZN5b2RotC1Ef($qB, $131);
      var $132=(($9+124)|0);
      var $133=(($9+80)|0);
      var $134=(($9+140)|0);
      __ZmiRK6b2Vec2S1_($4, $133, $134);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $135=$132;
      var $136=$3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[(($135+4)>>2)]=HEAP32[(($136+4)>>2)];
      var $137=(($9+132)|0);
      var $138=(($9+88)|0);
      var $139=(($9+148)|0);
      __ZmiRK6b2Vec2S1_($6, $138, $139);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $140=$137;
      var $141=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[(($140+4)>>2)]=HEAP32[(($141+4)>>2)];
      var $142=(($9+156)|0);
      var $143=HEAPF32[(($142)>>2)];
      $mA=$143;
      var $144=(($9+160)|0);
      var $145=HEAPF32[(($144)>>2)];
      $mB=$145;
      var $146=(($9+164)|0);
      var $147=HEAPF32[(($146)>>2)];
      $iA=$147;
      var $148=(($9+168)|0);
      var $149=HEAPF32[(($148)>>2)];
      $iB=$149;
      __ZN7b2Mat33C1Ev($K);
      var $150=$mA;
      var $151=$mB;
      var $152=$150+$151;
      var $153=(($9+124)|0);
      var $154=(($153+4)|0);
      var $155=HEAPF32[(($154)>>2)];
      var $156=(($9+124)|0);
      var $157=(($156+4)|0);
      var $158=HEAPF32[(($157)>>2)];
      var $159=$155*$158;
      var $160=$iA;
      var $161=$159*$160;
      var $162=$152+$161;
      var $163=(($9+132)|0);
      var $164=(($163+4)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=(($9+132)|0);
      var $167=(($166+4)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=$165*$168;
      var $170=$iB;
      var $171=$169*$170;
      var $172=$162+$171;
      var $173=(($K)|0);
      var $174=(($173)|0);
      HEAPF32[(($174)>>2)]=$172;
      var $175=(($9+124)|0);
      var $176=(($175+4)|0);
      var $177=HEAPF32[(($176)>>2)];
      var $178=(-$177);
      var $179=(($9+124)|0);
      var $180=(($179)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=$178*$181;
      var $183=$iA;
      var $184=$182*$183;
      var $185=(($9+132)|0);
      var $186=(($185+4)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=(($9+132)|0);
      var $189=(($188)|0);
      var $190=HEAPF32[(($189)>>2)];
      var $191=$187*$190;
      var $192=$iB;
      var $193=$191*$192;
      var $194=$184-$193;
      var $195=(($K+12)|0);
      var $196=(($195)|0);
      HEAPF32[(($196)>>2)]=$194;
      var $197=(($9+124)|0);
      var $198=(($197+4)|0);
      var $199=HEAPF32[(($198)>>2)];
      var $200=(-$199);
      var $201=$iA;
      var $202=$200*$201;
      var $203=(($9+132)|0);
      var $204=(($203+4)|0);
      var $205=HEAPF32[(($204)>>2)];
      var $206=$iB;
      var $207=$205*$206;
      var $208=$202-$207;
      var $209=(($K+24)|0);
      var $210=(($209)|0);
      HEAPF32[(($210)>>2)]=$208;
      var $211=(($K+12)|0);
      var $212=(($211)|0);
      var $213=HEAPF32[(($212)>>2)];
      var $214=(($K)|0);
      var $215=(($214+4)|0);
      HEAPF32[(($215)>>2)]=$213;
      var $216=$mA;
      var $217=$mB;
      var $218=$216+$217;
      var $219=(($9+124)|0);
      var $220=(($219)|0);
      var $221=HEAPF32[(($220)>>2)];
      var $222=(($9+124)|0);
      var $223=(($222)|0);
      var $224=HEAPF32[(($223)>>2)];
      var $225=$221*$224;
      var $226=$iA;
      var $227=$225*$226;
      var $228=$218+$227;
      var $229=(($9+132)|0);
      var $230=(($229)|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=(($9+132)|0);
      var $233=(($232)|0);
      var $234=HEAPF32[(($233)>>2)];
      var $235=$231*$234;
      var $236=$iB;
      var $237=$235*$236;
      var $238=$228+$237;
      var $239=(($K+12)|0);
      var $240=(($239+4)|0);
      HEAPF32[(($240)>>2)]=$238;
      var $241=(($9+124)|0);
      var $242=(($241)|0);
      var $243=HEAPF32[(($242)>>2)];
      var $244=$iA;
      var $245=$243*$244;
      var $246=(($9+132)|0);
      var $247=(($246)|0);
      var $248=HEAPF32[(($247)>>2)];
      var $249=$iB;
      var $250=$248*$249;
      var $251=$245+$250;
      var $252=(($K+24)|0);
      var $253=(($252+4)|0);
      HEAPF32[(($253)>>2)]=$251;
      var $254=(($K+24)|0);
      var $255=(($254)|0);
      var $256=HEAPF32[(($255)>>2)];
      var $257=(($K)|0);
      var $258=(($257+8)|0);
      HEAPF32[(($258)>>2)]=$256;
      var $259=(($K+24)|0);
      var $260=(($259+4)|0);
      var $261=HEAPF32[(($260)>>2)];
      var $262=(($K+12)|0);
      var $263=(($262+8)|0);
      HEAPF32[(($263)>>2)]=$261;
      var $264=$iA;
      var $265=$iB;
      var $266=$264+$265;
      var $267=(($K+24)|0);
      var $268=(($267+8)|0);
      HEAPF32[(($268)>>2)]=$266;
      var $269=(($9+68)|0);
      var $270=HEAPF32[(($269)>>2)];
      var $271=$270 > 0;
      if ($271) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $273=(($9+172)|0);
      __ZNK7b2Mat3312GetInverse22EPS_($K, $273);
      var $274=$iA;
      var $275=$iB;
      var $276=$274+$275;
      $invM=$276;
      var $277=$invM;
      var $278=$277 > 0;
      if ($278) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $280=$invM;
      var $281=1/$280;
      var $284 = $281;__label__ = 5; break;
    case 4: 
      var $284 = 0;__label__ = 5; break;
    case 5: 
      var $284;
      $m=$284;
      var $285=$aB;
      var $286=$aA;
      var $287=$285-$286;
      var $288=(($9+96)|0);
      var $289=HEAPF32[(($288)>>2)];
      var $290=$287-$289;
      $C=$290;
      var $291=(($9+68)|0);
      var $292=HEAPF32[(($291)>>2)];
      var $293=$292*6.2831854820251465;
      $omega=$293;
      var $294=$m;
      var $295=$294*2;
      var $296=(($9+72)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=$295*$297;
      var $299=$omega;
      var $300=$298*$299;
      $d=$300;
      var $301=$m;
      var $302=$omega;
      var $303=$301*$302;
      var $304=$omega;
      var $305=$303*$304;
      $k=$305;
      var $306=$2;
      var $307=(($306)|0);
      var $308=(($307)|0);
      var $309=HEAPF32[(($308)>>2)];
      $h=$309;
      var $310=$h;
      var $311=$d;
      var $312=$h;
      var $313=$k;
      var $314=$312*$313;
      var $315=$311+$314;
      var $316=$310*$315;
      var $317=(($9+100)|0);
      HEAPF32[(($317)>>2)]=$316;
      var $318=(($9+100)|0);
      var $319=HEAPF32[(($318)>>2)];
      var $320=$319 != 0;
      if ($320) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $322=(($9+100)|0);
      var $323=HEAPF32[(($322)>>2)];
      var $324=1/$323;
      var $327 = $324;__label__ = 8; break;
    case 7: 
      var $327 = 0;__label__ = 8; break;
    case 8: 
      var $327;
      var $328=(($9+100)|0);
      HEAPF32[(($328)>>2)]=$327;
      var $329=$C;
      var $330=$h;
      var $331=$329*$330;
      var $332=$k;
      var $333=$331*$332;
      var $334=(($9+100)|0);
      var $335=HEAPF32[(($334)>>2)];
      var $336=$333*$335;
      var $337=(($9+76)|0);
      HEAPF32[(($337)>>2)]=$336;
      var $338=(($9+100)|0);
      var $339=HEAPF32[(($338)>>2)];
      var $340=$invM;
      var $341=$340+$339;
      $invM=$341;
      var $342=$invM;
      var $343=$342 != 0;
      if ($343) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $345=$invM;
      var $346=1/$345;
      var $349 = $346;__label__ = 11; break;
    case 10: 
      var $349 = 0;__label__ = 11; break;
    case 11: 
      var $349;
      var $350=(($9+172)|0);
      var $351=(($350+24)|0);
      var $352=(($351+8)|0);
      HEAPF32[(($352)>>2)]=$349;
      __label__ = 13; break;
    case 12: 
      var $354=(($9+172)|0);
      __ZNK7b2Mat3315GetSymInverse33EPS_($K, $354);
      var $355=(($9+100)|0);
      HEAPF32[(($355)>>2)]=0;
      var $356=(($9+76)|0);
      HEAPF32[(($356)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $358=$2;
      var $359=(($358)|0);
      var $360=(($359+20)|0);
      var $361=HEAP8[($360)];
      var $362=(($361) & 1);
      if ($362) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $364=(($9+104)|0);
      var $365=$2;
      var $366=(($365)|0);
      var $367=(($366+8)|0);
      var $368=HEAPF32[(($367)>>2)];
      __ZN6b2Vec3mLEf($364, $368);
      var $369=(($9+104)|0);
      var $370=(($369)|0);
      var $371=HEAPF32[(($370)>>2)];
      var $372=(($9+104)|0);
      var $373=(($372+4)|0);
      var $374=HEAPF32[(($373)>>2)];
      __ZN6b2Vec2C1Eff($P, $371, $374);
      var $375=$mA;
      __ZmlfRK6b2Vec2($7, $375, $P);
      __ZN6b2Vec2mIERKS_($vA, $7);
      var $376=$iA;
      var $377=(($9+124)|0);
      var $378=__Z7b2CrossRK6b2Vec2S1_($377, $P);
      var $379=(($9+104)|0);
      var $380=(($379+8)|0);
      var $381=HEAPF32[(($380)>>2)];
      var $382=$378+$381;
      var $383=$376*$382;
      var $384=$wA;
      var $385=$384-$383;
      $wA=$385;
      var $386=$mB;
      __ZmlfRK6b2Vec2($8, $386, $P);
      __ZN6b2Vec2pLERKS_($vB, $8);
      var $387=$iB;
      var $388=(($9+132)|0);
      var $389=__Z7b2CrossRK6b2Vec2S1_($388, $P);
      var $390=(($9+104)|0);
      var $391=(($390+8)|0);
      var $392=HEAPF32[(($391)>>2)];
      var $393=$389+$392;
      var $394=$387*$393;
      var $395=$wB;
      var $396=$395+$394;
      $wB=$396;
      __label__ = 16; break;
    case 15: 
      var $398=(($9+104)|0);
      __ZN6b2Vec37SetZeroEv($398);
      __label__ = 16; break;
    case 16: 
      var $400=(($9+116)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=$2;
      var $403=(($402+28)|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=(($404+$401*12)|0);
      var $406=(($405)|0);
      var $407=$406;
      var $408=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($407)>>2)]=HEAP32[(($408)>>2)];HEAP32[(($407+4)>>2)]=HEAP32[(($408+4)>>2)];
      var $409=$wA;
      var $410=(($9+116)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=$2;
      var $413=(($412+28)|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=(($414+$411*12)|0);
      var $416=(($415+8)|0);
      HEAPF32[(($416)>>2)]=$409;
      var $417=(($9+120)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=$2;
      var $420=(($419+28)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=(($421+$418*12)|0);
      var $423=(($422)|0);
      var $424=$423;
      var $425=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($424)>>2)]=HEAP32[(($425)>>2)];HEAP32[(($424+4)>>2)]=HEAP32[(($425+4)>>2)];
      var $426=$wB;
      var $427=(($9+120)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=$2;
      var $430=(($429+28)|0);
      var $431=HEAP32[(($430)>>2)];
      var $432=(($431+$428*12)|0);
      var $433=(($432+8)|0);
      HEAPF32[(($433)>>2)]=$426;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 196; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=__stackBase__+8;
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $Cdot2;
      var $impulse2;
      var $Cdot1=__stackBase__+16;
      var $3=__stackBase__+24;
      var $4=__stackBase__+32;
      var $5=__stackBase__+40;
      var $6=__stackBase__+48;
      var $impulse1=__stackBase__+56;
      var $7=__stackBase__+64;
      var $P=__stackBase__+72;
      var $8=__stackBase__+80;
      var $9=__stackBase__+88;
      var $Cdot11=__stackBase__+96;
      var $10=__stackBase__+104;
      var $11=__stackBase__+112;
      var $12=__stackBase__+120;
      var $13=__stackBase__+128;
      var $Cdot22;
      var $Cdot=__stackBase__+136;
      var $impulse=__stackBase__+148;
      var $14=__stackBase__+160;
      var $P3=__stackBase__+172;
      var $15=__stackBase__+180;
      var $16=__stackBase__+188;
      $1=$this;
      $2=$data;
      var $17=$1;
      var $18=(($17+116)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+$19*12)|0);
      var $24=(($23)|0);
      var $25=$vA;
      var $26=$24;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[(($25+4)>>2)]=HEAP32[(($26+4)>>2)];
      var $27=(($17+116)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+$28*12)|0);
      var $33=(($32+8)|0);
      var $34=HEAPF32[(($33)>>2)];
      $wA=$34;
      var $35=(($17+120)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+$36*12)|0);
      var $41=(($40)|0);
      var $42=$vB;
      var $43=$41;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
      var $44=(($17+120)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$2;
      var $47=(($46+28)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+$45*12)|0);
      var $50=(($49+8)|0);
      var $51=HEAPF32[(($50)>>2)];
      $wB=$51;
      var $52=(($17+156)|0);
      var $53=HEAPF32[(($52)>>2)];
      $mA=$53;
      var $54=(($17+160)|0);
      var $55=HEAPF32[(($54)>>2)];
      $mB=$55;
      var $56=(($17+164)|0);
      var $57=HEAPF32[(($56)>>2)];
      $iA=$57;
      var $58=(($17+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $iB=$59;
      var $60=(($17+68)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=$61 > 0;
      if ($62) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $64=$wB;
      var $65=$wA;
      var $66=$64-$65;
      $Cdot2=$66;
      var $67=(($17+172)|0);
      var $68=(($67+24)|0);
      var $69=(($68+8)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=(-$70);
      var $72=$Cdot2;
      var $73=(($17+76)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$72+$74;
      var $76=(($17+100)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=(($17+104)|0);
      var $79=(($78+8)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=$77*$80;
      var $82=$75+$81;
      var $83=$71*$82;
      $impulse2=$83;
      var $84=$impulse2;
      var $85=(($17+104)|0);
      var $86=(($85+8)|0);
      var $87=HEAPF32[(($86)>>2)];
      var $88=$87+$84;
      HEAPF32[(($86)>>2)]=$88;
      var $89=$iA;
      var $90=$impulse2;
      var $91=$89*$90;
      var $92=$wA;
      var $93=$92-$91;
      $wA=$93;
      var $94=$iB;
      var $95=$impulse2;
      var $96=$94*$95;
      var $97=$wB;
      var $98=$97+$96;
      $wB=$98;
      var $99=$wB;
      var $100=(($17+132)|0);
      __Z7b2CrossfRK6b2Vec2($5, $99, $100);
      __ZplRK6b2Vec2S1_($4, $vB, $5);
      __ZmiRK6b2Vec2S1_($3, $4, $vA);
      var $101=$wA;
      var $102=(($17+124)|0);
      __Z7b2CrossfRK6b2Vec2($6, $101, $102);
      __ZmiRK6b2Vec2S1_($Cdot1, $3, $6);
      var $103=(($17+172)|0);
      __Z7b2Mul22RK7b2Mat33RK6b2Vec2($7, $103, $Cdot1);
      __ZNK6b2Vec2ngEv($impulse1, $7);
      var $104=(($impulse1)|0);
      var $105=HEAPF32[(($104)>>2)];
      var $106=(($17+104)|0);
      var $107=(($106)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=$108+$105;
      HEAPF32[(($107)>>2)]=$109;
      var $110=(($impulse1+4)|0);
      var $111=HEAPF32[(($110)>>2)];
      var $112=(($17+104)|0);
      var $113=(($112+4)|0);
      var $114=HEAPF32[(($113)>>2)];
      var $115=$114+$111;
      HEAPF32[(($113)>>2)]=$115;
      var $116=$P;
      var $117=$impulse1;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[(($116+4)>>2)]=HEAP32[(($117+4)>>2)];
      var $118=$mA;
      __ZmlfRK6b2Vec2($8, $118, $P);
      __ZN6b2Vec2mIERKS_($vA, $8);
      var $119=$iA;
      var $120=(($17+124)|0);
      var $121=__Z7b2CrossRK6b2Vec2S1_($120, $P);
      var $122=$119*$121;
      var $123=$wA;
      var $124=$123-$122;
      $wA=$124;
      var $125=$mB;
      __ZmlfRK6b2Vec2($9, $125, $P);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $126=$iB;
      var $127=(($17+132)|0);
      var $128=__Z7b2CrossRK6b2Vec2S1_($127, $P);
      var $129=$126*$128;
      var $130=$wB;
      var $131=$130+$129;
      $wB=$131;
      __label__ = 4; break;
    case 3: 
      var $133=$wB;
      var $134=(($17+132)|0);
      __Z7b2CrossfRK6b2Vec2($12, $133, $134);
      __ZplRK6b2Vec2S1_($11, $vB, $12);
      __ZmiRK6b2Vec2S1_($10, $11, $vA);
      var $135=$wA;
      var $136=(($17+124)|0);
      __Z7b2CrossfRK6b2Vec2($13, $135, $136);
      __ZmiRK6b2Vec2S1_($Cdot11, $10, $13);
      var $137=$wB;
      var $138=$wA;
      var $139=$137-$138;
      $Cdot22=$139;
      var $140=(($Cdot11)|0);
      var $141=HEAPF32[(($140)>>2)];
      var $142=(($Cdot11+4)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=$Cdot22;
      __ZN6b2Vec3C1Efff($Cdot, $141, $143, $144);
      var $145=(($17+172)|0);
      __Z5b2MulRK7b2Mat33RK6b2Vec3($14, $145, $Cdot);
      __ZNK6b2Vec3ngEv($impulse, $14);
      var $146=(($17+104)|0);
      __ZN6b2Vec3pLERKS_($146, $impulse);
      var $147=(($impulse)|0);
      var $148=HEAPF32[(($147)>>2)];
      var $149=(($impulse+4)|0);
      var $150=HEAPF32[(($149)>>2)];
      __ZN6b2Vec2C1Eff($P3, $148, $150);
      var $151=$mA;
      __ZmlfRK6b2Vec2($15, $151, $P3);
      __ZN6b2Vec2mIERKS_($vA, $15);
      var $152=$iA;
      var $153=(($17+124)|0);
      var $154=__Z7b2CrossRK6b2Vec2S1_($153, $P3);
      var $155=(($impulse+8)|0);
      var $156=HEAPF32[(($155)>>2)];
      var $157=$154+$156;
      var $158=$152*$157;
      var $159=$wA;
      var $160=$159-$158;
      $wA=$160;
      var $161=$mB;
      __ZmlfRK6b2Vec2($16, $161, $P3);
      __ZN6b2Vec2pLERKS_($vB, $16);
      var $162=$iB;
      var $163=(($17+132)|0);
      var $164=__Z7b2CrossRK6b2Vec2S1_($163, $P3);
      var $165=(($impulse+8)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=$164+$166;
      var $168=$162*$167;
      var $169=$wB;
      var $170=$169+$168;
      $wB=$170;
      __label__ = 4; break;
    case 4: 
      var $172=(($17+116)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=$2;
      var $175=(($174+28)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+$173*12)|0);
      var $178=(($177)|0);
      var $179=$178;
      var $180=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[(($179+4)>>2)]=HEAP32[(($180+4)>>2)];
      var $181=$wA;
      var $182=(($17+116)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$2;
      var $185=(($184+28)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+$183*12)|0);
      var $188=(($187+8)|0);
      HEAPF32[(($188)>>2)]=$181;
      var $189=(($17+120)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$2;
      var $192=(($191+28)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+$190*12)|0);
      var $195=(($194)|0);
      var $196=$195;
      var $197=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($196)>>2)]=HEAP32[(($197)>>2)];HEAP32[(($196+4)>>2)]=HEAP32[(($197+4)>>2)];
      var $198=$wB;
      var $199=(($17+120)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=$2;
      var $202=(($201+28)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($203+$200*12)|0);
      var $205=(($204+8)|0);
      HEAPF32[(($205)>>2)]=$198;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5b2MulRK7b2Mat33RK6b2Vec3($agg_result, $A, $v) {
  var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=__stackBase__+12;
  var $5=__stackBase__+24;
  var $6=__stackBase__+36;
  $1=$A;
  $2=$v;
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=$1;
  var $11=(($10)|0);
  __ZmlfRK6b2Vec3($4, $9, $11);
  var $12=$2;
  var $13=(($12+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$1;
  var $16=(($15+12)|0);
  __ZmlfRK6b2Vec3($5, $14, $16);
  __ZplRK6b2Vec3S1_($3, $4, $5);
  var $17=$2;
  var $18=(($17+8)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=$1;
  var $21=(($20+24)|0);
  __ZmlfRK6b2Vec3($6, $19, $21);
  __ZplRK6b2Vec3S1_($agg_result, $3, $6);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK11b2WeldJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+104)|0);
  var $6=(($5+8)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=$4*$7;
  ;
  return $8;
}


function __ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 240; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=__stackBase__+8;
      var $aB;
      var $qA=__stackBase__+16;
      var $qB=__stackBase__+24;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $rA=__stackBase__+32;
      var $3=__stackBase__+40;
      var $rB=__stackBase__+48;
      var $4=__stackBase__+56;
      var $positionError;
      var $angularError;
      var $K=__stackBase__+64;
      var $C1=__stackBase__+100;
      var $5=__stackBase__+108;
      var $6=__stackBase__+116;
      var $P=__stackBase__+124;
      var $7=__stackBase__+132;
      var $8=__stackBase__+140;
      var $9=__stackBase__+148;
      var $C11=__stackBase__+156;
      var $10=__stackBase__+164;
      var $11=__stackBase__+172;
      var $C2;
      var $C=__stackBase__+180;
      var $impulse=__stackBase__+192;
      var $12=__stackBase__+204;
      var $P2=__stackBase__+216;
      var $13=__stackBase__+224;
      var $14=__stackBase__+232;
      $1=$this;
      $2=$data;
      var $15=$1;
      var $16=(($15+116)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$2;
      var $19=(($18+24)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+$17*12)|0);
      var $22=(($21)|0);
      var $23=$cA;
      var $24=$22;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[(($23+4)>>2)]=HEAP32[(($24+4)>>2)];
      var $25=(($15+116)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+$26*12)|0);
      var $31=(($30+8)|0);
      var $32=HEAPF32[(($31)>>2)];
      $aA=$32;
      var $33=(($15+120)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+$34*12)|0);
      var $39=(($38)|0);
      var $40=$cB;
      var $41=$39;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      var $42=(($15+120)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$2;
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+$43*12)|0);
      var $48=(($47+8)|0);
      var $49=HEAPF32[(($48)>>2)];
      $aB=$49;
      var $50=$aA;
      __ZN5b2RotC1Ef($qA, $50);
      var $51=$aB;
      __ZN5b2RotC1Ef($qB, $51);
      var $52=(($15+156)|0);
      var $53=HEAPF32[(($52)>>2)];
      $mA=$53;
      var $54=(($15+160)|0);
      var $55=HEAPF32[(($54)>>2)];
      $mB=$55;
      var $56=(($15+164)|0);
      var $57=HEAPF32[(($56)>>2)];
      $iA=$57;
      var $58=(($15+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $iB=$59;
      var $60=(($15+80)|0);
      var $61=(($15+140)|0);
      __ZmiRK6b2Vec2S1_($3, $60, $61);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $62=(($15+88)|0);
      var $63=(($15+148)|0);
      __ZmiRK6b2Vec2S1_($4, $62, $63);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZN7b2Mat33C1Ev($K);
      var $64=$mA;
      var $65=$mB;
      var $66=$64+$65;
      var $67=(($rA+4)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=(($rA+4)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=$68*$70;
      var $72=$iA;
      var $73=$71*$72;
      var $74=$66+$73;
      var $75=(($rB+4)|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=(($rB+4)|0);
      var $78=HEAPF32[(($77)>>2)];
      var $79=$76*$78;
      var $80=$iB;
      var $81=$79*$80;
      var $82=$74+$81;
      var $83=(($K)|0);
      var $84=(($83)|0);
      HEAPF32[(($84)>>2)]=$82;
      var $85=(($rA+4)|0);
      var $86=HEAPF32[(($85)>>2)];
      var $87=(-$86);
      var $88=(($rA)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=$87*$89;
      var $91=$iA;
      var $92=$90*$91;
      var $93=(($rB+4)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=(($rB)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=$94*$96;
      var $98=$iB;
      var $99=$97*$98;
      var $100=$92-$99;
      var $101=(($K+12)|0);
      var $102=(($101)|0);
      HEAPF32[(($102)>>2)]=$100;
      var $103=(($rA+4)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=(-$104);
      var $106=$iA;
      var $107=$105*$106;
      var $108=(($rB+4)|0);
      var $109=HEAPF32[(($108)>>2)];
      var $110=$iB;
      var $111=$109*$110;
      var $112=$107-$111;
      var $113=(($K+24)|0);
      var $114=(($113)|0);
      HEAPF32[(($114)>>2)]=$112;
      var $115=(($K+12)|0);
      var $116=(($115)|0);
      var $117=HEAPF32[(($116)>>2)];
      var $118=(($K)|0);
      var $119=(($118+4)|0);
      HEAPF32[(($119)>>2)]=$117;
      var $120=$mA;
      var $121=$mB;
      var $122=$120+$121;
      var $123=(($rA)|0);
      var $124=HEAPF32[(($123)>>2)];
      var $125=(($rA)|0);
      var $126=HEAPF32[(($125)>>2)];
      var $127=$124*$126;
      var $128=$iA;
      var $129=$127*$128;
      var $130=$122+$129;
      var $131=(($rB)|0);
      var $132=HEAPF32[(($131)>>2)];
      var $133=(($rB)|0);
      var $134=HEAPF32[(($133)>>2)];
      var $135=$132*$134;
      var $136=$iB;
      var $137=$135*$136;
      var $138=$130+$137;
      var $139=(($K+12)|0);
      var $140=(($139+4)|0);
      HEAPF32[(($140)>>2)]=$138;
      var $141=(($rA)|0);
      var $142=HEAPF32[(($141)>>2)];
      var $143=$iA;
      var $144=$142*$143;
      var $145=(($rB)|0);
      var $146=HEAPF32[(($145)>>2)];
      var $147=$iB;
      var $148=$146*$147;
      var $149=$144+$148;
      var $150=(($K+24)|0);
      var $151=(($150+4)|0);
      HEAPF32[(($151)>>2)]=$149;
      var $152=(($K+24)|0);
      var $153=(($152)|0);
      var $154=HEAPF32[(($153)>>2)];
      var $155=(($K)|0);
      var $156=(($155+8)|0);
      HEAPF32[(($156)>>2)]=$154;
      var $157=(($K+24)|0);
      var $158=(($157+4)|0);
      var $159=HEAPF32[(($158)>>2)];
      var $160=(($K+12)|0);
      var $161=(($160+8)|0);
      HEAPF32[(($161)>>2)]=$159;
      var $162=$iA;
      var $163=$iB;
      var $164=$162+$163;
      var $165=(($K+24)|0);
      var $166=(($165+8)|0);
      HEAPF32[(($166)>>2)]=$164;
      var $167=(($15+68)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=$168 > 0;
      if ($169) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($C1, $5, $rA);
      var $171=__ZNK6b2Vec26LengthEv($C1);
      $positionError=$171;
      $angularError=0;
      __ZNK7b2Mat337Solve22ERK6b2Vec2($7, $K, $C1);
      __ZNK6b2Vec2ngEv($P, $7);
      var $172=$mA;
      __ZmlfRK6b2Vec2($8, $172, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $173=$iA;
      var $174=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $175=$173*$174;
      var $176=$aA;
      var $177=$176-$175;
      $aA=$177;
      var $178=$mB;
      __ZmlfRK6b2Vec2($9, $178, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $179=$iB;
      var $180=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $181=$179*$180;
      var $182=$aB;
      var $183=$182+$181;
      $aB=$183;
      __label__ = 4; break;
    case 3: 
      __ZplRK6b2Vec2S1_($11, $cB, $rB);
      __ZmiRK6b2Vec2S1_($10, $11, $cA);
      __ZmiRK6b2Vec2S1_($C11, $10, $rA);
      var $185=$aB;
      var $186=$aA;
      var $187=$185-$186;
      var $188=(($15+96)|0);
      var $189=HEAPF32[(($188)>>2)];
      var $190=$187-$189;
      $C2=$190;
      var $191=__ZNK6b2Vec26LengthEv($C11);
      $positionError=$191;
      var $192=$C2;
      var $193=__Z5b2AbsIfET_S0_($192);
      $angularError=$193;
      var $194=(($C11)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=(($C11+4)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=$C2;
      __ZN6b2Vec3C1Efff($C, $195, $197, $198);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($12, $K, $C);
      __ZNK6b2Vec3ngEv($impulse, $12);
      var $199=(($impulse)|0);
      var $200=HEAPF32[(($199)>>2)];
      var $201=(($impulse+4)|0);
      var $202=HEAPF32[(($201)>>2)];
      __ZN6b2Vec2C1Eff($P2, $200, $202);
      var $203=$mA;
      __ZmlfRK6b2Vec2($13, $203, $P2);
      __ZN6b2Vec2mIERKS_($cA, $13);
      var $204=$iA;
      var $205=__Z7b2CrossRK6b2Vec2S1_($rA, $P2);
      var $206=(($impulse+8)|0);
      var $207=HEAPF32[(($206)>>2)];
      var $208=$205+$207;
      var $209=$204*$208;
      var $210=$aA;
      var $211=$210-$209;
      $aA=$211;
      var $212=$mB;
      __ZmlfRK6b2Vec2($14, $212, $P2);
      __ZN6b2Vec2pLERKS_($cB, $14);
      var $213=$iB;
      var $214=__Z7b2CrossRK6b2Vec2S1_($rB, $P2);
      var $215=(($impulse+8)|0);
      var $216=HEAPF32[(($215)>>2)];
      var $217=$214+$216;
      var $218=$213*$217;
      var $219=$aB;
      var $220=$219+$218;
      $aB=$220;
      __label__ = 4; break;
    case 4: 
      var $222=(($15+116)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=$2;
      var $225=(($224+24)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=(($226+$223*12)|0);
      var $228=(($227)|0);
      var $229=$228;
      var $230=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($229)>>2)]=HEAP32[(($230)>>2)];HEAP32[(($229+4)>>2)]=HEAP32[(($230+4)>>2)];
      var $231=$aA;
      var $232=(($15+116)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=$2;
      var $235=(($234+24)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236+$233*12)|0);
      var $238=(($237+8)|0);
      HEAPF32[(($238)>>2)]=$231;
      var $239=(($15+120)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=$2;
      var $242=(($241+24)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243+$240*12)|0);
      var $245=(($244)|0);
      var $246=$245;
      var $247=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($246)>>2)]=HEAP32[(($247)>>2)];HEAP32[(($246+4)>>2)]=HEAP32[(($247+4)>>2)];
      var $248=$aB;
      var $249=(($15+120)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=$2;
      var $252=(($251+24)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+$250*12)|0);
      var $255=(($254+8)|0);
      HEAPF32[(($255)>>2)]=$248;
      var $256=$positionError;
      var $257=$256 <= 0.004999999888241291;
      if ($257) { __label__ = 5; break; } else { var $262 = 0;__label__ = 6; break; }
    case 5: 
      var $259=$angularError;
      var $260=$259 <= 0.03490658849477768;
      var $262 = $260;__label__ = 6; break;
    case 6: 
      var $262;
      STACKTOP = __stackBase__;
      return $262;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK11b2WeldJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+80)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK11b2WeldJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+88)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK11b2WeldJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+104)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3+104)|0);
  var $8=(($7+4)|0);
  var $9=HEAPF32[(($8)>>2)];
  __ZN6b2Vec2C1Eff($P, $6, $9);
  var $10=$2;
  __ZmlfRK6b2Vec2($agg_result, $10, $P);
  STACKTOP = __stackBase__;
  return;
}


function __ZN11b2WeldJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str402)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str1403)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str2404)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str3405)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+80)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+80)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str4406)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+88)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+88)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str5407)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+96)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((STRING_TABLE.__str6408)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$38,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $39=(($2+68)|0);
  var $40=HEAPF32[(($39)>>2)];
  var $41=$40;
  __Z5b2LogPKcz(((STRING_TABLE.__str7409)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$41,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $42=(($2+72)|0);
  var $43=HEAPF32[(($42)>>2)];
  var $44=$43;
  __Z5b2LogPKcz(((STRING_TABLE.__str8410)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$44,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $45=$2;
  var $46=(($45+56)|0);
  var $47=HEAP32[(($46)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str9411)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$47,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN11b2WeldJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2WeldJointD2Ev($2);
  ;
  return;
}


function __ZN11b2WeldJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN11b2WeldJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2WeldJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZplRK6b2Vec3S1_($agg_result, $a, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$5+$8;
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$12+$15;
  var $17=$1;
  var $18=(($17+8)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+8)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$19+$22;
  __ZN6b2Vec3C1Efff($agg_result, $9, $16, $23);
  ;
  return;
}


function __ZmlfRK6b2Vec3($agg_result, $s, $a) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$s;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$3*$6;
  var $8=$1;
  var $9=$2;
  var $10=(($9+4)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=$8*$11;
  var $13=$1;
  var $14=$2;
  var $15=(($14+8)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=$13*$16;
  __ZN6b2Vec3C1Efff($agg_result, $7, $12, $17);
  ;
  return;
}


function __ZN15b2WheelJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $bA, $bB, $anchor, $axis) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6=__stackBase__;
  var $7=__stackBase__+8;
  var $8=__stackBase__+16;
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  $5=$axis;
  var $9=$1;
  var $10=$2;
  var $11=$9;
  var $12=(($11+8)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$3;
  var $14=$9;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=(($9+20)|0);
  var $17=$9;
  var $18=(($17+8)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $19, $20);
  var $21=$16;
  var $22=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[(($21+4)>>2)]=HEAP32[(($22+4)>>2)];
  var $23=(($9+28)|0);
  var $24=$9;
  var $25=(($24+12)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($7, $26, $27);
  var $28=$23;
  var $29=$7;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[(($28+4)>>2)]=HEAP32[(($29+4)>>2)];
  var $30=(($9+36)|0);
  var $31=$9;
  var $32=(($31+8)|0);
  var $33=HEAP32[(($32)>>2)];
  var $34=$5;
  __ZNK6b2Body14GetLocalVectorERK6b2Vec2($8, $33, $34);
  var $35=$30;
  var $36=$8;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[(($35+4)>>2)]=HEAP32[(($36+4)>>2)];
  STACKTOP = __stackBase__;
  return;
}


function __ZN12b2WheelJointC2EPK15b2WheelJointDef($this, $def) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$this;
      $2=$def;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$8;
      __ZN7b2JointC2EPK10b2JointDef($7, $9);
      var $10=$6;
      HEAP32[(($10)>>2)]=((__ZTV12b2WheelJoint+8)|0);
      var $11=(($6+76)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 13; break; }
    case 2: 
      var $13=(($6+84)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      var $15=(($6+92)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: 
      var $17=(($6+100)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 13; break; }
    case 5: 
      var $19=(($6+140)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 13; break; }
    case 6: 
      var $21=(($6+148)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 13; break; }
    case 7: 
      var $23=(($6+172)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $25=(($6+180)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $27=(($6+76)|0);
      var $28=$2;
      var $29=(($28+20)|0);
      var $30=$27;
      var $31=$29;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[(($30+4)>>2)]=HEAP32[(($31+4)>>2)];
      var $32=(($6+84)|0);
      var $33=$2;
      var $34=(($33+28)|0);
      var $35=$32;
      var $36=$34;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[(($35+4)>>2)]=HEAP32[(($36+4)>>2)];
      var $37=(($6+92)|0);
      var $38=$2;
      var $39=(($38+36)|0);
      var $40=$37;
      var $41=$39;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[(($40+4)>>2)]=HEAP32[(($41+4)>>2)];
      var $42=(($6+100)|0);
      var $43=(($6+92)|0);
      (function() { try { __THREW__ = false; return __Z7b2CrossfRK6b2Vec2($5, 1, $43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $45=$42;
      var $46=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[(($45+4)>>2)]=HEAP32[(($46+4)>>2)];
      var $47=(($6+204)|0);
      HEAPF32[(($47)>>2)]=0;
      var $48=(($6+108)|0);
      HEAPF32[(($48)>>2)]=0;
      var $49=(($6+208)|0);
      HEAPF32[(($49)>>2)]=0;
      var $50=(($6+112)|0);
      HEAPF32[(($50)>>2)]=0;
      var $51=(($6+212)|0);
      HEAPF32[(($51)>>2)]=0;
      var $52=(($6+116)|0);
      HEAPF32[(($52)>>2)]=0;
      var $53=$2;
      var $54=(($53+48)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=(($6+120)|0);
      HEAPF32[(($56)>>2)]=$55;
      var $57=$2;
      var $58=(($57+52)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=(($6+124)|0);
      HEAPF32[(($60)>>2)]=$59;
      var $61=$2;
      var $62=(($61+44)|0);
      var $63=HEAP8[($62)];
      var $64=(($63) & 1);
      var $65=(($6+128)|0);
      var $66=(($64)&1);
      HEAP8[($65)]=$66;
      var $67=$2;
      var $68=(($67+56)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=(($6+68)|0);
      HEAPF32[(($70)>>2)]=$69;
      var $71=$2;
      var $72=(($71+60)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=(($6+72)|0);
      HEAPF32[(($74)>>2)]=$73;
      var $75=(($6+216)|0);
      HEAPF32[(($75)>>2)]=0;
      var $76=(($6+220)|0);
      HEAPF32[(($76)>>2)]=0;
      var $77=(($6+172)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $79=(($6+180)|0);
      (function() { try { __THREW__ = false; return __ZN6b2Vec27SetZeroEv($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      STACKTOP = __stackBase__;
      return;
    case 13: 
      var $82=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $83=$82.f0;
      $3=$83;
      var $84=$82.f1;
      $4=$84;
      var $85=$6;
      (function() { try { __THREW__ = false; return __ZN7b2JointD2Ev($85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $88=$3;
      var $89=$3;
      var $90=$4;
      var $91=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $89, tempValue);
      var $92=($91.f1 = $90, $91);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    case 16: 
      var $94=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 176; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $cA=__stackBase__;
      var $aA;
      var $vA=__stackBase__+8;
      var $wA;
      var $cB=__stackBase__+16;
      var $aB;
      var $vB=__stackBase__+24;
      var $wB;
      var $qA=__stackBase__+32;
      var $qB=__stackBase__+40;
      var $rA=__stackBase__+48;
      var $3=__stackBase__+56;
      var $rB=__stackBase__+64;
      var $4=__stackBase__+72;
      var $d=__stackBase__+80;
      var $5=__stackBase__+88;
      var $6=__stackBase__+96;
      var $7=__stackBase__+104;
      var $8=__stackBase__+112;
      var $9=__stackBase__+120;
      var $10=__stackBase__+128;
      var $invMass;
      var $C;
      var $omega;
      var $d1;
      var $k;
      var $h;
      var $P=__stackBase__+136;
      var $11=__stackBase__+144;
      var $12=__stackBase__+152;
      var $LA;
      var $LB;
      var $13=__stackBase__+160;
      var $14=__stackBase__+168;
      $1=$this;
      $2=$data;
      var $15=$1;
      var $16=$15;
      var $17=(($16+48)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($15+132)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=$15;
      var $23=(($22+52)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($15+136)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($15+140)|0);
      var $29=$15;
      var $30=(($29+48)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+28)|0);
      var $33=(($32)|0);
      var $34=$28;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=(($15+148)|0);
      var $37=$15;
      var $38=(($37+52)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+28)|0);
      var $41=(($40)|0);
      var $42=$36;
      var $43=$41;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
      var $44=$15;
      var $45=(($44+48)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($15+156)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$15;
      var $51=(($50+52)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+120)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($15+160)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$15;
      var $57=(($56+48)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($15+164)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=$15;
      var $63=(($62+52)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+128)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=(($15+168)|0);
      HEAPF32[(($67)>>2)]=$66;
      var $68=(($15+156)|0);
      var $69=HEAPF32[(($68)>>2)];
      $mA=$69;
      var $70=(($15+160)|0);
      var $71=HEAPF32[(($70)>>2)];
      $mB=$71;
      var $72=(($15+164)|0);
      var $73=HEAPF32[(($72)>>2)];
      $iA=$73;
      var $74=(($15+168)|0);
      var $75=HEAPF32[(($74)>>2)];
      $iB=$75;
      var $76=(($15+132)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$2;
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+$77*12)|0);
      var $82=(($81)|0);
      var $83=$cA;
      var $84=$82;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[(($83+4)>>2)]=HEAP32[(($84+4)>>2)];
      var $85=(($15+132)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+$86*12)|0);
      var $91=(($90+8)|0);
      var $92=HEAPF32[(($91)>>2)];
      $aA=$92;
      var $93=(($15+132)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$2;
      var $96=(($95+28)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+$94*12)|0);
      var $99=(($98)|0);
      var $100=$vA;
      var $101=$99;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[(($100+4)>>2)]=HEAP32[(($101+4)>>2)];
      var $102=(($15+132)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+28)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+$103*12)|0);
      var $108=(($107+8)|0);
      var $109=HEAPF32[(($108)>>2)];
      $wA=$109;
      var $110=(($15+136)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$2;
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+$111*12)|0);
      var $116=(($115)|0);
      var $117=$cB;
      var $118=$116;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[(($117+4)>>2)]=HEAP32[(($118+4)>>2)];
      var $119=(($15+136)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$2;
      var $122=(($121+24)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+$120*12)|0);
      var $125=(($124+8)|0);
      var $126=HEAPF32[(($125)>>2)];
      $aB=$126;
      var $127=(($15+136)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=(($129+28)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+$128*12)|0);
      var $133=(($132)|0);
      var $134=$vB;
      var $135=$133;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[(($134+4)>>2)]=HEAP32[(($135+4)>>2)];
      var $136=(($15+136)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$2;
      var $139=(($138+28)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+$137*12)|0);
      var $142=(($141+8)|0);
      var $143=HEAPF32[(($142)>>2)];
      $wB=$143;
      var $144=$aA;
      __ZN5b2RotC1Ef($qA, $144);
      var $145=$aB;
      __ZN5b2RotC1Ef($qB, $145);
      var $146=(($15+76)|0);
      var $147=(($15+140)|0);
      __ZmiRK6b2Vec2S1_($3, $146, $147);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $148=(($15+84)|0);
      var $149=(($15+148)|0);
      __ZmiRK6b2Vec2S1_($4, $148, $149);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $150=(($15+180)|0);
      var $151=(($15+100)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $qA, $151);
      var $152=$150;
      var $153=$7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[(($152+4)>>2)]=HEAP32[(($153+4)>>2)];
      __ZplRK6b2Vec2S1_($8, $d, $rA);
      var $154=(($15+180)|0);
      var $155=__Z7b2CrossRK6b2Vec2S1_($8, $154);
      var $156=(($15+196)|0);
      HEAPF32[(($156)>>2)]=$155;
      var $157=(($15+180)|0);
      var $158=__Z7b2CrossRK6b2Vec2S1_($rB, $157);
      var $159=(($15+200)|0);
      HEAPF32[(($159)>>2)]=$158;
      var $160=$mA;
      var $161=$mB;
      var $162=$160+$161;
      var $163=$iA;
      var $164=(($15+196)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=$163*$165;
      var $167=(($15+196)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=$166*$168;
      var $170=$162+$169;
      var $171=$iB;
      var $172=(($15+200)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=$171*$173;
      var $175=(($15+200)|0);
      var $176=HEAPF32[(($175)>>2)];
      var $177=$174*$176;
      var $178=$170+$177;
      var $179=(($15+204)|0);
      HEAPF32[(($179)>>2)]=$178;
      var $180=(($15+204)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=$181 > 0;
      if ($182) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $184=(($15+204)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=1/$185;
      var $187=(($15+204)|0);
      HEAPF32[(($187)>>2)]=$186;
      __label__ = 3; break;
    case 3: 
      var $189=(($15+212)|0);
      HEAPF32[(($189)>>2)]=0;
      var $190=(($15+216)|0);
      HEAPF32[(($190)>>2)]=0;
      var $191=(($15+220)|0);
      HEAPF32[(($191)>>2)]=0;
      var $192=(($15+68)|0);
      var $193=HEAPF32[(($192)>>2)];
      var $194=$193 > 0;
      if ($194) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $196=(($15+172)|0);
      var $197=(($15+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($9, $qA, $197);
      var $198=$196;
      var $199=$9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($198)>>2)]=HEAP32[(($199)>>2)];HEAP32[(($198+4)>>2)]=HEAP32[(($199+4)>>2)];
      __ZplRK6b2Vec2S1_($10, $d, $rA);
      var $200=(($15+172)|0);
      var $201=__Z7b2CrossRK6b2Vec2S1_($10, $200);
      var $202=(($15+188)|0);
      HEAPF32[(($202)>>2)]=$201;
      var $203=(($15+172)|0);
      var $204=__Z7b2CrossRK6b2Vec2S1_($rB, $203);
      var $205=(($15+192)|0);
      HEAPF32[(($205)>>2)]=$204;
      var $206=$mA;
      var $207=$mB;
      var $208=$206+$207;
      var $209=$iA;
      var $210=(($15+188)|0);
      var $211=HEAPF32[(($210)>>2)];
      var $212=$209*$211;
      var $213=(($15+188)|0);
      var $214=HEAPF32[(($213)>>2)];
      var $215=$212*$214;
      var $216=$208+$215;
      var $217=$iB;
      var $218=(($15+192)|0);
      var $219=HEAPF32[(($218)>>2)];
      var $220=$217*$219;
      var $221=(($15+192)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=$220*$222;
      var $224=$216+$223;
      $invMass=$224;
      var $225=$invMass;
      var $226=$225 > 0;
      if ($226) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $228=$invMass;
      var $229=1/$228;
      var $230=(($15+212)|0);
      HEAPF32[(($230)>>2)]=$229;
      var $231=(($15+172)|0);
      var $232=__Z5b2DotRK6b2Vec2S1_($d, $231);
      $C=$232;
      var $233=(($15+68)|0);
      var $234=HEAPF32[(($233)>>2)];
      var $235=$234*6.2831854820251465;
      $omega=$235;
      var $236=(($15+212)|0);
      var $237=HEAPF32[(($236)>>2)];
      var $238=$237*2;
      var $239=(($15+72)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=$238*$240;
      var $242=$omega;
      var $243=$241*$242;
      $d1=$243;
      var $244=(($15+212)|0);
      var $245=HEAPF32[(($244)>>2)];
      var $246=$omega;
      var $247=$245*$246;
      var $248=$omega;
      var $249=$247*$248;
      $k=$249;
      var $250=$2;
      var $251=(($250)|0);
      var $252=(($251)|0);
      var $253=HEAPF32[(($252)>>2)];
      $h=$253;
      var $254=$h;
      var $255=$d1;
      var $256=$h;
      var $257=$k;
      var $258=$256*$257;
      var $259=$255+$258;
      var $260=$254*$259;
      var $261=(($15+220)|0);
      HEAPF32[(($261)>>2)]=$260;
      var $262=(($15+220)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=$263 > 0;
      if ($264) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $266=(($15+220)|0);
      var $267=HEAPF32[(($266)>>2)];
      var $268=1/$267;
      var $269=(($15+220)|0);
      HEAPF32[(($269)>>2)]=$268;
      __label__ = 7; break;
    case 7: 
      var $271=$C;
      var $272=$h;
      var $273=$271*$272;
      var $274=$k;
      var $275=$273*$274;
      var $276=(($15+220)|0);
      var $277=HEAPF32[(($276)>>2)];
      var $278=$275*$277;
      var $279=(($15+216)|0);
      HEAPF32[(($279)>>2)]=$278;
      var $280=$invMass;
      var $281=(($15+220)|0);
      var $282=HEAPF32[(($281)>>2)];
      var $283=$280+$282;
      var $284=(($15+212)|0);
      HEAPF32[(($284)>>2)]=$283;
      var $285=(($15+212)|0);
      var $286=HEAPF32[(($285)>>2)];
      var $287=$286 > 0;
      if ($287) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $289=(($15+212)|0);
      var $290=HEAPF32[(($289)>>2)];
      var $291=1/$290;
      var $292=(($15+212)|0);
      HEAPF32[(($292)>>2)]=$291;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $296=(($15+116)|0);
      HEAPF32[(($296)>>2)]=0;
      __label__ = 12; break;
    case 12: 
      var $298=(($15+128)|0);
      var $299=HEAP8[($298)];
      var $300=(($299) & 1);
      if ($300) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $302=$iA;
      var $303=$iB;
      var $304=$302+$303;
      var $305=(($15+208)|0);
      HEAPF32[(($305)>>2)]=$304;
      var $306=(($15+208)|0);
      var $307=HEAPF32[(($306)>>2)];
      var $308=$307 > 0;
      if ($308) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $310=(($15+208)|0);
      var $311=HEAPF32[(($310)>>2)];
      var $312=1/$311;
      var $313=(($15+208)|0);
      HEAPF32[(($313)>>2)]=$312;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $316=(($15+208)|0);
      HEAPF32[(($316)>>2)]=0;
      var $317=(($15+112)|0);
      HEAPF32[(($317)>>2)]=0;
      __label__ = 17; break;
    case 17: 
      var $319=$2;
      var $320=(($319)|0);
      var $321=(($320+20)|0);
      var $322=HEAP8[($321)];
      var $323=(($322) & 1);
      if ($323) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $325=$2;
      var $326=(($325)|0);
      var $327=(($326+8)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=(($15+108)|0);
      var $330=HEAPF32[(($329)>>2)];
      var $331=$330*$328;
      HEAPF32[(($329)>>2)]=$331;
      var $332=$2;
      var $333=(($332)|0);
      var $334=(($333+8)|0);
      var $335=HEAPF32[(($334)>>2)];
      var $336=(($15+116)|0);
      var $337=HEAPF32[(($336)>>2)];
      var $338=$337*$335;
      HEAPF32[(($336)>>2)]=$338;
      var $339=$2;
      var $340=(($339)|0);
      var $341=(($340+8)|0);
      var $342=HEAPF32[(($341)>>2)];
      var $343=(($15+112)|0);
      var $344=HEAPF32[(($343)>>2)];
      var $345=$344*$342;
      HEAPF32[(($343)>>2)]=$345;
      var $346=(($15+108)|0);
      var $347=HEAPF32[(($346)>>2)];
      var $348=(($15+180)|0);
      __ZmlfRK6b2Vec2($11, $347, $348);
      var $349=(($15+116)|0);
      var $350=HEAPF32[(($349)>>2)];
      var $351=(($15+172)|0);
      __ZmlfRK6b2Vec2($12, $350, $351);
      __ZplRK6b2Vec2S1_($P, $11, $12);
      var $352=(($15+108)|0);
      var $353=HEAPF32[(($352)>>2)];
      var $354=(($15+196)|0);
      var $355=HEAPF32[(($354)>>2)];
      var $356=$353*$355;
      var $357=(($15+116)|0);
      var $358=HEAPF32[(($357)>>2)];
      var $359=(($15+188)|0);
      var $360=HEAPF32[(($359)>>2)];
      var $361=$358*$360;
      var $362=$356+$361;
      var $363=(($15+112)|0);
      var $364=HEAPF32[(($363)>>2)];
      var $365=$362+$364;
      $LA=$365;
      var $366=(($15+108)|0);
      var $367=HEAPF32[(($366)>>2)];
      var $368=(($15+200)|0);
      var $369=HEAPF32[(($368)>>2)];
      var $370=$367*$369;
      var $371=(($15+116)|0);
      var $372=HEAPF32[(($371)>>2)];
      var $373=(($15+192)|0);
      var $374=HEAPF32[(($373)>>2)];
      var $375=$372*$374;
      var $376=$370+$375;
      var $377=(($15+112)|0);
      var $378=HEAPF32[(($377)>>2)];
      var $379=$376+$378;
      $LB=$379;
      var $380=(($15+156)|0);
      var $381=HEAPF32[(($380)>>2)];
      __ZmlfRK6b2Vec2($13, $381, $P);
      __ZN6b2Vec2mIERKS_($vA, $13);
      var $382=(($15+164)|0);
      var $383=HEAPF32[(($382)>>2)];
      var $384=$LA;
      var $385=$383*$384;
      var $386=$wA;
      var $387=$386-$385;
      $wA=$387;
      var $388=(($15+160)|0);
      var $389=HEAPF32[(($388)>>2)];
      __ZmlfRK6b2Vec2($14, $389, $P);
      __ZN6b2Vec2pLERKS_($vB, $14);
      var $390=(($15+168)|0);
      var $391=HEAPF32[(($390)>>2)];
      var $392=$LB;
      var $393=$391*$392;
      var $394=$wB;
      var $395=$394+$393;
      $wB=$395;
      __label__ = 20; break;
    case 19: 
      var $397=(($15+108)|0);
      HEAPF32[(($397)>>2)]=0;
      var $398=(($15+116)|0);
      HEAPF32[(($398)>>2)]=0;
      var $399=(($15+112)|0);
      HEAPF32[(($399)>>2)]=0;
      __label__ = 20; break;
    case 20: 
      var $401=(($15+132)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$2;
      var $404=(($403+28)|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=(($405+$402*12)|0);
      var $407=(($406)|0);
      var $408=$407;
      var $409=$vA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($408)>>2)]=HEAP32[(($409)>>2)];HEAP32[(($408+4)>>2)]=HEAP32[(($409+4)>>2)];
      var $410=$wA;
      var $411=(($15+132)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$2;
      var $414=(($413+28)|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=(($415+$412*12)|0);
      var $417=(($416+8)|0);
      HEAPF32[(($417)>>2)]=$410;
      var $418=(($15+136)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=$2;
      var $421=(($420+28)|0);
      var $422=HEAP32[(($421)>>2)];
      var $423=(($422+$419*12)|0);
      var $424=(($423)|0);
      var $425=$424;
      var $426=$vB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($425)>>2)]=HEAP32[(($426)>>2)];HEAP32[(($425+4)>>2)]=HEAP32[(($426+4)>>2)];
      var $427=$wB;
      var $428=(($15+136)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=$2;
      var $431=(($430+28)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($432+$429*12)|0);
      var $434=(($433+8)|0);
      HEAPF32[(($434)>>2)]=$427;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $mA;
  var $mB;
  var $iA;
  var $iB;
  var $vA=__stackBase__;
  var $wA;
  var $vB=__stackBase__+8;
  var $wB;
  var $Cdot;
  var $3=__stackBase__+16;
  var $impulse;
  var $P=__stackBase__+24;
  var $LA;
  var $LB;
  var $4=__stackBase__+32;
  var $5=__stackBase__+40;
  var $Cdot1;
  var $impulse2;
  var $oldImpulse;
  var $maxImpulse;
  var $Cdot3;
  var $6=__stackBase__+48;
  var $impulse4;
  var $P5=__stackBase__+56;
  var $LA6;
  var $LB7;
  var $7=__stackBase__+64;
  var $8=__stackBase__+72;
  $1=$this;
  $2=$data;
  var $9=$1;
  var $10=(($9+156)|0);
  var $11=HEAPF32[(($10)>>2)];
  $mA=$11;
  var $12=(($9+160)|0);
  var $13=HEAPF32[(($12)>>2)];
  $mB=$13;
  var $14=(($9+164)|0);
  var $15=HEAPF32[(($14)>>2)];
  $iA=$15;
  var $16=(($9+168)|0);
  var $17=HEAPF32[(($16)>>2)];
  $iB=$17;
  var $18=(($9+132)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+28)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=(($22+$19*12)|0);
  var $24=(($23)|0);
  var $25=$vA;
  var $26=$24;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[(($25+4)>>2)]=HEAP32[(($26+4)>>2)];
  var $27=(($9+132)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+28)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+$28*12)|0);
  var $33=(($32+8)|0);
  var $34=HEAPF32[(($33)>>2)];
  $wA=$34;
  var $35=(($9+136)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=$2;
  var $38=(($37+28)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=(($39+$36*12)|0);
  var $41=(($40)|0);
  var $42=$vB;
  var $43=$41;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[(($42+4)>>2)]=HEAP32[(($43+4)>>2)];
  var $44=(($9+136)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$2;
  var $47=(($46+28)|0);
  var $48=HEAP32[(($47)>>2)];
  var $49=(($48+$45*12)|0);
  var $50=(($49+8)|0);
  var $51=HEAPF32[(($50)>>2)];
  $wB=$51;
  var $52=(($9+172)|0);
  __ZmiRK6b2Vec2S1_($3, $vB, $vA);
  var $53=__Z5b2DotRK6b2Vec2S1_($52, $3);
  var $54=(($9+192)|0);
  var $55=HEAPF32[(($54)>>2)];
  var $56=$wB;
  var $57=$55*$56;
  var $58=$53+$57;
  var $59=(($9+188)|0);
  var $60=HEAPF32[(($59)>>2)];
  var $61=$wA;
  var $62=$60*$61;
  var $63=$58-$62;
  $Cdot=$63;
  var $64=(($9+212)|0);
  var $65=HEAPF32[(($64)>>2)];
  var $66=(-$65);
  var $67=$Cdot;
  var $68=(($9+216)|0);
  var $69=HEAPF32[(($68)>>2)];
  var $70=$67+$69;
  var $71=(($9+220)|0);
  var $72=HEAPF32[(($71)>>2)];
  var $73=(($9+116)|0);
  var $74=HEAPF32[(($73)>>2)];
  var $75=$72*$74;
  var $76=$70+$75;
  var $77=$66*$76;
  $impulse=$77;
  var $78=$impulse;
  var $79=(($9+116)|0);
  var $80=HEAPF32[(($79)>>2)];
  var $81=$80+$78;
  HEAPF32[(($79)>>2)]=$81;
  var $82=$impulse;
  var $83=(($9+172)|0);
  __ZmlfRK6b2Vec2($P, $82, $83);
  var $84=$impulse;
  var $85=(($9+188)|0);
  var $86=HEAPF32[(($85)>>2)];
  var $87=$84*$86;
  $LA=$87;
  var $88=$impulse;
  var $89=(($9+192)|0);
  var $90=HEAPF32[(($89)>>2)];
  var $91=$88*$90;
  $LB=$91;
  var $92=$mA;
  __ZmlfRK6b2Vec2($4, $92, $P);
  __ZN6b2Vec2mIERKS_($vA, $4);
  var $93=$iA;
  var $94=$LA;
  var $95=$93*$94;
  var $96=$wA;
  var $97=$96-$95;
  $wA=$97;
  var $98=$mB;
  __ZmlfRK6b2Vec2($5, $98, $P);
  __ZN6b2Vec2pLERKS_($vB, $5);
  var $99=$iB;
  var $100=$LB;
  var $101=$99*$100;
  var $102=$wB;
  var $103=$102+$101;
  $wB=$103;
  var $104=$wB;
  var $105=$wA;
  var $106=$104-$105;
  var $107=(($9+124)|0);
  var $108=HEAPF32[(($107)>>2)];
  var $109=$106-$108;
  $Cdot1=$109;
  var $110=(($9+208)|0);
  var $111=HEAPF32[(($110)>>2)];
  var $112=(-$111);
  var $113=$Cdot1;
  var $114=$112*$113;
  $impulse2=$114;
  var $115=(($9+112)|0);
  var $116=HEAPF32[(($115)>>2)];
  $oldImpulse=$116;
  var $117=$2;
  var $118=(($117)|0);
  var $119=(($118)|0);
  var $120=HEAPF32[(($119)>>2)];
  var $121=(($9+120)|0);
  var $122=HEAPF32[(($121)>>2)];
  var $123=$120*$122;
  $maxImpulse=$123;
  var $124=(($9+112)|0);
  var $125=HEAPF32[(($124)>>2)];
  var $126=$impulse2;
  var $127=$125+$126;
  var $128=$maxImpulse;
  var $129=(-$128);
  var $130=$maxImpulse;
  var $131=__Z7b2ClampIfET_S0_S0_S0_($127, $129, $130);
  var $132=(($9+112)|0);
  HEAPF32[(($132)>>2)]=$131;
  var $133=(($9+112)|0);
  var $134=HEAPF32[(($133)>>2)];
  var $135=$oldImpulse;
  var $136=$134-$135;
  $impulse2=$136;
  var $137=$iA;
  var $138=$impulse2;
  var $139=$137*$138;
  var $140=$wA;
  var $141=$140-$139;
  $wA=$141;
  var $142=$iB;
  var $143=$impulse2;
  var $144=$142*$143;
  var $145=$wB;
  var $146=$145+$144;
  $wB=$146;
  var $147=(($9+180)|0);
  __ZmiRK6b2Vec2S1_($6, $vB, $vA);
  var $148=__Z5b2DotRK6b2Vec2S1_($147, $6);
  var $149=(($9+200)|0);
  var $150=HEAPF32[(($149)>>2)];
  var $151=$wB;
  var $152=$150*$151;
  var $153=$148+$152;
  var $154=(($9+196)|0);
  var $155=HEAPF32[(($154)>>2)];
  var $156=$wA;
  var $157=$155*$156;
  var $158=$153-$157;
  $Cdot3=$158;
  var $159=(($9+204)|0);
  var $160=HEAPF32[(($159)>>2)];
  var $161=(-$160);
  var $162=$Cdot3;
  var $163=$161*$162;
  $impulse4=$163;
  var $164=$impulse4;
  var $165=(($9+108)|0);
  var $166=HEAPF32[(($165)>>2)];
  var $167=$166+$164;
  HEAPF32[(($165)>>2)]=$167;
  var $168=$impulse4;
  var $169=(($9+180)|0);
  __ZmlfRK6b2Vec2($P5, $168, $169);
  var $170=$impulse4;
  var $171=(($9+196)|0);
  var $172=HEAPF32[(($171)>>2)];
  var $173=$170*$172;
  $LA6=$173;
  var $174=$impulse4;
  var $175=(($9+200)|0);
  var $176=HEAPF32[(($175)>>2)];
  var $177=$174*$176;
  $LB7=$177;
  var $178=$mA;
  __ZmlfRK6b2Vec2($7, $178, $P5);
  __ZN6b2Vec2mIERKS_($vA, $7);
  var $179=$iA;
  var $180=$LA6;
  var $181=$179*$180;
  var $182=$wA;
  var $183=$182-$181;
  $wA=$183;
  var $184=$mB;
  __ZmlfRK6b2Vec2($8, $184, $P5);
  __ZN6b2Vec2pLERKS_($vB, $8);
  var $185=$iB;
  var $186=$LB7;
  var $187=$185*$186;
  var $188=$wB;
  var $189=$188+$187;
  $wB=$189;
  var $190=(($9+132)|0);
  var $191=HEAP32[(($190)>>2)];
  var $192=$2;
  var $193=(($192+28)|0);
  var $194=HEAP32[(($193)>>2)];
  var $195=(($194+$191*12)|0);
  var $196=(($195)|0);
  var $197=$196;
  var $198=$vA;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($197)>>2)]=HEAP32[(($198)>>2)];HEAP32[(($197+4)>>2)]=HEAP32[(($198+4)>>2)];
  var $199=$wA;
  var $200=(($9+132)|0);
  var $201=HEAP32[(($200)>>2)];
  var $202=$2;
  var $203=(($202+28)|0);
  var $204=HEAP32[(($203)>>2)];
  var $205=(($204+$201*12)|0);
  var $206=(($205+8)|0);
  HEAPF32[(($206)>>2)]=$199;
  var $207=(($9+136)|0);
  var $208=HEAP32[(($207)>>2)];
  var $209=$2;
  var $210=(($209+28)|0);
  var $211=HEAP32[(($210)>>2)];
  var $212=(($211+$208*12)|0);
  var $213=(($212)|0);
  var $214=$213;
  var $215=$vB;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($214)>>2)]=HEAP32[(($215)>>2)];HEAP32[(($214+4)>>2)]=HEAP32[(($215+4)>>2)];
  var $216=$wB;
  var $217=(($9+136)|0);
  var $218=HEAP32[(($217)>>2)];
  var $219=$2;
  var $220=(($219+28)|0);
  var $221=HEAP32[(($220)>>2)];
  var $222=(($221+$218*12)|0);
  var $223=(($222+8)|0);
  HEAPF32[(($223)>>2)]=$216;
  STACKTOP = __stackBase__;
  return;
}


function __ZNK12b2WheelJoint17GetReactionTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+112)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  ;
  return $7;
}


function __ZNK12b2WheelJoint13GetJointSpeedEv($this) {
  ;
  var __label__;

  var $1;
  var $wA;
  var $wB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+72)|0);
  var $7=HEAPF32[(($6)>>2)];
  $wA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+72)|0);
  var $12=HEAPF32[(($11)>>2)];
  $wB=$12;
  var $13=$wB;
  var $14=$wA;
  var $15=$13-$14;
  ;
  return $15;
}


function __ZNK12b2WheelJoint14IsMotorEnabledEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+128)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZNK12b2WheelJoint14GetMotorTorqueEf($this, $inv_dt) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+112)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$4*$6;
  ;
  return $7;
}


function __ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=__stackBase__+8;
      var $aB;
      var $qA=__stackBase__+16;
      var $qB=__stackBase__+24;
      var $rA=__stackBase__+32;
      var $3=__stackBase__+40;
      var $rB=__stackBase__+48;
      var $4=__stackBase__+56;
      var $d=__stackBase__+64;
      var $5=__stackBase__+72;
      var $6=__stackBase__+80;
      var $ay=__stackBase__+88;
      var $sAy;
      var $7=__stackBase__+96;
      var $sBy;
      var $C;
      var $k;
      var $impulse;
      var $P=__stackBase__+104;
      var $LA;
      var $LB;
      var $8=__stackBase__+112;
      var $9=__stackBase__+120;
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=(($10+132)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+$12*12)|0);
      var $17=(($16)|0);
      var $18=$cA;
      var $19=$17;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[(($18+4)>>2)]=HEAP32[(($19+4)>>2)];
      var $20=(($10+132)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+24)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+$21*12)|0);
      var $26=(($25+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      $aA=$27;
      var $28=(($10+136)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29*12)|0);
      var $34=(($33)|0);
      var $35=$cB;
      var $36=$34;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[(($35+4)>>2)]=HEAP32[(($36+4)>>2)];
      var $37=(($10+136)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+$38*12)|0);
      var $43=(($42+8)|0);
      var $44=HEAPF32[(($43)>>2)];
      $aB=$44;
      var $45=$aA;
      __ZN5b2RotC1Ef($qA, $45);
      var $46=$aB;
      __ZN5b2RotC1Ef($qB, $46);
      var $47=(($10+76)|0);
      var $48=(($10+140)|0);
      __ZmiRK6b2Vec2S1_($3, $47, $48);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $49=(($10+84)|0);
      var $50=(($10+148)|0);
      __ZmiRK6b2Vec2S1_($4, $49, $50);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZmiRK6b2Vec2S1_($6, $cB, $cA);
      __ZplRK6b2Vec2S1_($5, $6, $rB);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $51=(($10+100)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($ay, $qA, $51);
      __ZplRK6b2Vec2S1_($7, $d, $rA);
      var $52=__Z7b2CrossRK6b2Vec2S1_($7, $ay);
      $sAy=$52;
      var $53=__Z7b2CrossRK6b2Vec2S1_($rB, $ay);
      $sBy=$53;
      var $54=__Z5b2DotRK6b2Vec2S1_($d, $ay);
      $C=$54;
      var $55=(($10+156)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=(($10+160)|0);
      var $58=HEAPF32[(($57)>>2)];
      var $59=$56+$58;
      var $60=(($10+164)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($10+196)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=$61*$63;
      var $65=(($10+196)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=$64*$66;
      var $68=$59+$67;
      var $69=(($10+168)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=(($10+200)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=$70*$72;
      var $74=(($10+200)|0);
      var $75=HEAPF32[(($74)>>2)];
      var $76=$73*$75;
      var $77=$68+$76;
      $k=$77;
      var $78=$k;
      var $79=$78 != 0;
      if ($79) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $81=$C;
      var $82=(-$81);
      var $83=$k;
      var $84=$82/$83;
      $impulse=$84;
      __label__ = 4; break;
    case 3: 
      $impulse=0;
      __label__ = 4; break;
    case 4: 
      var $87=$impulse;
      __ZmlfRK6b2Vec2($P, $87, $ay);
      var $88=$impulse;
      var $89=$sAy;
      var $90=$88*$89;
      $LA=$90;
      var $91=$impulse;
      var $92=$sBy;
      var $93=$91*$92;
      $LB=$93;
      var $94=(($10+156)|0);
      var $95=HEAPF32[(($94)>>2)];
      __ZmlfRK6b2Vec2($8, $95, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $96=(($10+164)|0);
      var $97=HEAPF32[(($96)>>2)];
      var $98=$LA;
      var $99=$97*$98;
      var $100=$aA;
      var $101=$100-$99;
      $aA=$101;
      var $102=(($10+160)|0);
      var $103=HEAPF32[(($102)>>2)];
      __ZmlfRK6b2Vec2($9, $103, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $104=(($10+168)|0);
      var $105=HEAPF32[(($104)>>2)];
      var $106=$LB;
      var $107=$105*$106;
      var $108=$aB;
      var $109=$108+$107;
      $aB=$109;
      var $110=(($10+132)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$2;
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+$111*12)|0);
      var $116=(($115)|0);
      var $117=$116;
      var $118=$cA;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[(($117+4)>>2)]=HEAP32[(($118+4)>>2)];
      var $119=$aA;
      var $120=(($10+132)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$2;
      var $123=(($122+24)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+$121*12)|0);
      var $126=(($125+8)|0);
      HEAPF32[(($126)>>2)]=$119;
      var $127=(($10+136)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=(($129+24)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+$128*12)|0);
      var $133=(($132)|0);
      var $134=$133;
      var $135=$cB;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[(($134+4)>>2)]=HEAP32[(($135+4)>>2)];
      var $136=$aB;
      var $137=(($10+136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$2;
      var $140=(($139+24)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+$138*12)|0);
      var $143=(($142+8)|0);
      HEAPF32[(($143)>>2)]=$136;
      var $144=$C;
      var $145=__Z5b2AbsIfET_S0_($144);
      var $146=$145 <= 0.004999999888241291;
      STACKTOP = __stackBase__;
      return $146;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK12b2WheelJoint10GetAnchorAEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK12b2WheelJoint10GetAnchorBEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+84)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  ;
  return;
}


function __ZNK12b2WheelJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=__stackBase__+8;
  var $5=__stackBase__+16;
  $1=$this;
  $2=$inv_dt;
  var $6=$1;
  var $7=$2;
  var $8=(($6+108)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=(($6+180)|0);
  __ZmlfRK6b2Vec2($4, $9, $10);
  var $11=(($6+116)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($6+172)|0);
  __ZmlfRK6b2Vec2($5, $12, $13);
  __ZplRK6b2Vec2S1_($3, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, $7, $3);
  STACKTOP = __stackBase__;
  return;
}


function __ZNK12b2WheelJoint19GetJointTranslationEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $bA;
  var $bB;
  var $pA=__stackBase__;
  var $pB=__stackBase__+8;
  var $d=__stackBase__+16;
  var $axis=__stackBase__+24;
  var $translation;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  $bA=$5;
  var $6=$2;
  var $7=(($6+52)|0);
  var $8=HEAP32[(($7)>>2)];
  $bB=$8;
  var $9=$bA;
  var $10=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pA, $9, $10);
  var $11=$bB;
  var $12=(($2+84)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pB, $11, $12);
  __ZmiRK6b2Vec2S1_($d, $pB, $pA);
  var $13=$bA;
  var $14=(($2+92)|0);
  __ZNK6b2Body14GetWorldVectorERK6b2Vec2($axis, $13, $14);
  var $15=__Z5b2DotRK6b2Vec2S1_($d, $axis);
  $translation=$15;
  var $16=$translation;
  STACKTOP = __stackBase__;
  return $16;
}


function __ZN12b2WheelJoint11EnableMotorEb($this, $flag) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&1);
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+48)|0);
  var $7=HEAP32[(($6)>>2)];
  __ZN6b2Body8SetAwakeEb($7, 1);
  var $8=$4;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  __ZN6b2Body8SetAwakeEb($10, 1);
  var $11=$2;
  var $12=(($11) & 1);
  var $13=(($4+128)|0);
  var $14=(($12)&1);
  HEAP8[($13)]=$14;
  ;
  return;
}


function __ZN12b2WheelJoint13SetMotorSpeedEf($this, $speed) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$speed;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+124)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function __ZN12b2WheelJoint17SetMaxMotorTorqueEf($this, $torque) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$torque;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+120)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function __ZN12b2WheelJoint4DumpEv($this) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((STRING_TABLE.__str414)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((STRING_TABLE.__str1415)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((STRING_TABLE.__str2416)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str3417)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+76)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+76)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((STRING_TABLE.__str4418)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$27,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $28=(($2+84)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+84)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((STRING_TABLE.__str5419)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$35,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $36=(($2+92)|0);
  var $37=(($36)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$38;
  var $40=(($2+92)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$42;
  __Z5b2LogPKcz(((STRING_TABLE.__str6420)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$39,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$43,HEAP32[((tempInt+8)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+8+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $44=(($2+128)|0);
  var $45=HEAP8[($44)];
  var $46=(($45) & 1);
  var $47=(($46)&1);
  __Z5b2LogPKcz(((STRING_TABLE.__str7421)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$47,tempInt));
  var $48=(($2+124)|0);
  var $49=HEAPF32[(($48)>>2)];
  var $50=$49;
  __Z5b2LogPKcz(((STRING_TABLE.__str8422)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$50,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $51=(($2+120)|0);
  var $52=HEAPF32[(($51)>>2)];
  var $53=$52;
  __Z5b2LogPKcz(((STRING_TABLE.__str9423)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$53,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $54=(($2+68)|0);
  var $55=HEAPF32[(($54)>>2)];
  var $56=$55;
  __Z5b2LogPKcz(((STRING_TABLE.__str10424)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$56,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $57=(($2+72)|0);
  var $58=HEAPF32[(($57)>>2)];
  var $59=$58;
  __Z5b2LogPKcz(((STRING_TABLE.__str11425)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$59,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
  var $60=$2;
  var $61=(($60+56)|0);
  var $62=HEAP32[(($61)>>2)];
  __Z5b2LogPKcz(((STRING_TABLE.__str12426)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$62,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function __ZN12b2WheelJointD1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2WheelJointD2Ev($2);
  ;
  return;
}


function __ZN12b2WheelJointD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return __ZN12b2WheelJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN12b2WheelJointD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  ;
  return;
}


function __ZN6b2RopeC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+4)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+8)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+12)|0);
  HEAP32[(($7)>>2)]=0;
  var $8=(($2+16)|0);
  HEAP32[(($8)>>2)]=0;
  var $9=(($2+20)|0);
  HEAP32[(($9)>>2)]=0;
  var $10=(($2+24)|0);
  HEAP32[(($10)>>2)]=0;
  var $11=(($2+28)|0);
  __ZN6b2Vec27SetZeroEv($11);
  var $12=(($2+40)|0);
  HEAPF32[(($12)>>2)]=1;
  var $13=(($2+44)|0);
  HEAPF32[(($13)>>2)]=0.10000000149011612;
  ;
  return;
}


function __ZN6b2RopeD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  __Z6b2FreePv($5);
  var $6=(($2+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  __Z6b2FreePv($8);
  var $9=(($2+12)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$10;
  __Z6b2FreePv($11);
  var $12=(($2+16)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  __Z6b2FreePv($14);
  var $15=(($2+20)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  __Z6b2FreePv($17);
  var $18=(($2+24)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$19;
  __Z6b2FreePv($20);
  ;
  return;
}


function __ZN6b2Rope10InitializeEPK9b2RopeDef($this, $def) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3;
      var $4;
      var $i;
      var $m;
      var $count2;
      var $count3;
      var $i1;
      var $p1=__stackBase__+8;
      var $p2=__stackBase__+16;
      var $i2;
      var $p13=__stackBase__+24;
      var $p24=__stackBase__+32;
      var $p3=__stackBase__+40;
      var $d1=__stackBase__+48;
      var $d2=__stackBase__+56;
      var $a;
      var $b;
      $3=$this;
      $4=$def;
      var $5=$3;
      var $6=$4;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0) >= 3;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      ___assert_func(((STRING_TABLE.__str429)|0), 48, ((STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Rope10InitializeEPK9b2RopeDef)|0), ((STRING_TABLE.__str1430)|0));
      __label__ = 4; break;
    case 4: 
      var $13=$4;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($5)|0);
      HEAP32[(($16)>>2)]=$15;
      var $17=(($5)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($18<<3))|0);
      var $20=__Z7b2Alloci($19);
      var $21=$20;
      var $22=(($5+4)|0);
      HEAP32[(($22)>>2)]=$21;
      var $23=(($5)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24<<3))|0);
      var $26=__Z7b2Alloci($25);
      var $27=$26;
      var $28=(($5+8)|0);
      HEAP32[(($28)>>2)]=$27;
      var $29=(($5)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30<<3))|0);
      var $32=__Z7b2Alloci($31);
      var $33=$32;
      var $34=(($5+12)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=(($5)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36<<2))|0);
      var $38=__Z7b2Alloci($37);
      var $39=$38;
      var $40=(($5+16)|0);
      HEAP32[(($40)>>2)]=$39;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $42=$i;
      var $43=(($5)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($42)|0) < (($44)|0);
      if ($45) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $47=$i;
      var $48=(($5+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+($47<<3))|0);
      var $51=$i;
      var $52=$4;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($51<<3))|0);
      var $56=$50;
      var $57=$55;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[(($56+4)>>2)]=HEAP32[(($57+4)>>2)];
      var $58=$i;
      var $59=(($5+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+($58<<3))|0);
      var $62=$i;
      var $63=$4;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+($62<<3))|0);
      var $67=$61;
      var $68=$66;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($67)>>2)]=HEAP32[(($68)>>2)];HEAP32[(($67+4)>>2)]=HEAP32[(($68+4)>>2)];
      var $69=$i;
      var $70=(($5+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+($69<<3))|0);
      __ZN6b2Vec27SetZeroEv($72);
      var $73=$i;
      var $74=$4;
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+($73<<2))|0);
      var $78=HEAPF32[(($77)>>2)];
      $m=$78;
      var $79=$m;
      var $80=$79 > 0;
      if ($80) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $82=$m;
      var $83=1/$82;
      var $84=$i;
      var $85=(($5+16)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+($84<<2))|0);
      HEAPF32[(($87)>>2)]=$83;
      __label__ = 9; break;
    case 8: 
      var $89=$i;
      var $90=(($5+16)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+($89<<2))|0);
      HEAPF32[(($92)>>2)]=0;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $95=$i;
      var $96=(($95+1)|0);
      $i=$96;
      __label__ = 5; break;
    case 11: 
      var $98=(($5)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99-1)|0);
      $count2=$100;
      var $101=(($5)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102-2)|0);
      $count3=$103;
      var $104=$count2;
      var $105=((($104<<2))|0);
      var $106=__Z7b2Alloci($105);
      var $107=$106;
      var $108=(($5+20)|0);
      HEAP32[(($108)>>2)]=$107;
      var $109=$count3;
      var $110=((($109<<2))|0);
      var $111=__Z7b2Alloci($110);
      var $112=$111;
      var $113=(($5+24)|0);
      HEAP32[(($113)>>2)]=$112;
      $i1=0;
      __label__ = 12; break;
    case 12: 
      var $115=$i1;
      var $116=$count2;
      var $117=(($115)|0) < (($116)|0);
      if ($117) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $119=$i1;
      var $120=(($5+4)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+($119<<3))|0);
      var $123=$p1;
      var $124=$122;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[(($123+4)>>2)]=HEAP32[(($124+4)>>2)];
      var $125=$i1;
      var $126=(($125+1)|0);
      var $127=(($5+4)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+($126<<3))|0);
      var $130=$p2;
      var $131=$129;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[(($130+4)>>2)]=HEAP32[(($131+4)>>2)];
      var $132=__Z10b2DistanceRK6b2Vec2S1_($p1, $p2);
      var $133=$i1;
      var $134=(($5+20)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135+($133<<2))|0);
      HEAPF32[(($136)>>2)]=$132;
      __label__ = 14; break;
    case 14: 
      var $138=$i1;
      var $139=(($138+1)|0);
      $i1=$139;
      __label__ = 12; break;
    case 15: 
      $i2=0;
      __label__ = 16; break;
    case 16: 
      var $142=$i2;
      var $143=$count3;
      var $144=(($142)|0) < (($143)|0);
      if ($144) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $146=$i2;
      var $147=(($5+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+($146<<3))|0);
      var $150=$p13;
      var $151=$149;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];HEAP32[(($150+4)>>2)]=HEAP32[(($151+4)>>2)];
      var $152=$i2;
      var $153=(($152+1)|0);
      var $154=(($5+4)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155+($153<<3))|0);
      var $157=$p24;
      var $158=$156;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($157)>>2)]=HEAP32[(($158)>>2)];HEAP32[(($157+4)>>2)]=HEAP32[(($158+4)>>2)];
      var $159=$i2;
      var $160=(($159+2)|0);
      var $161=(($5+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+($160<<3))|0);
      var $164=$p3;
      var $165=$163;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($164)>>2)]=HEAP32[(($165)>>2)];HEAP32[(($164+4)>>2)]=HEAP32[(($165+4)>>2)];
      __ZmiRK6b2Vec2S1_($d1, $p24, $p13);
      __ZmiRK6b2Vec2S1_($d2, $p3, $p24);
      var $166=__Z7b2CrossRK6b2Vec2S1_($d1, $d2);
      $a=$166;
      var $167=__Z5b2DotRK6b2Vec2S1_($d1, $d2);
      $b=$167;
      var $168=$a;
      var $169=$b;
      var $170=$1;
      var $171=$2;
      HEAPF32[(($1)>>2)]=$168;
      HEAPF32[(($2)>>2)]=$169;
      var $172=HEAPF32[(($1)>>2)];
      var $173=HEAPF32[(($2)>>2)];
      var $174=_atan2f($172, $173);
      var $175=$1;
      var $176=$2;
      var $177=$i2;
      var $178=(($5+24)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179+($177<<2))|0);
      HEAPF32[(($180)>>2)]=$174;
      __label__ = 18; break;
    case 18: 
      var $182=$i2;
      var $183=(($182+1)|0);
      $i2=$183;
      __label__ = 16; break;
    case 19: 
      var $185=(($5+28)|0);
      var $186=$4;
      var $187=(($186+12)|0);
      var $188=$185;
      var $189=$187;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($188)>>2)]=HEAP32[(($189)>>2)];HEAP32[(($188+4)>>2)]=HEAP32[(($189+4)>>2)];
      var $190=$4;
      var $191=(($190+20)|0);
      var $192=HEAPF32[(($191)>>2)];
      var $193=(($5+36)|0);
      HEAPF32[(($193)>>2)]=$192;
      var $194=$4;
      var $195=(($194+24)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=(($5+40)|0);
      HEAPF32[(($197)>>2)]=$196;
      var $198=$4;
      var $199=(($198+28)|0);
      var $200=HEAPF32[(($199)>>2)];
      var $201=(($5+44)|0);
      HEAPF32[(($201)>>2)]=$200;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Rope8SetAngleEf($this, $angle) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $count3;
      var $i;
      $1=$this;
      $2=$angle;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5-2)|0);
      $count3=$6;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $8=$i;
      var $9=$count3;
      var $10=(($8)|0) < (($9)|0);
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $12=$2;
      var $13=$i;
      var $14=(($3+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($13<<2))|0);
      HEAPF32[(($16)>>2)]=$12;
      __label__ = 4; break;
    case 4: 
      var $18=$i;
      var $19=(($18+1)|0);
      $i=$19;
      __label__ = 2; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ContactManager__get_m_contactFilter_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2ContactManager__get_m_contactCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2ContactManager__set_m_contactFilter_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+68)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2ContactManager__set_m_allocator_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+76)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2ContactManager__set_m_contactCount_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+64)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2ContactManager__set_m_contactList_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2ContactManager__get_m_contactListener_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2ContactManager__set_m_contactListener_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+72)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2ContactManager__get_m_broadPhase_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  ;
  return $3;
}


function _emscripten_bind_b2ContactManager__get_m_contactList_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2ContactManager__get_m_allocator_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK9b2Fixture14GetRestitutionEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Fixture11SetFrictionEf($this, $friction) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$friction;
  var $3=$1;
  var $4=$2;
  var $5=(($3+16)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN9b2Fixture14SetRestitutionEf($this, $restitution) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$restitution;
  var $3=$1;
  var $4=$2;
  var $5=(($3+20)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN6b2Rope4StepEfi($this, $h, $iterations) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $d;
      var $i;
      var $4=__stackBase__;
      var $5=__stackBase__+8;
      var $i1;
      var $inv_h;
      var $i2;
      var $6=__stackBase__+16;
      var $7=__stackBase__+24;
      $1=$this;
      $2=$h;
      $3=$iterations;
      var $8=$1;
      var $9=$2;
      var $10=$9;
      var $11=$10 == 0;
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 17; break;
    case 3: 
      var $14=$2;
      var $15=(-$14);
      var $16=(($8+36)|0);
      var $17=HEAPF32[(($16)>>2)];
      var $18=$15*$17;
      var $19=_expf($18);
      $d=$19;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $21=$i;
      var $22=(($8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($21)|0) < (($23)|0);
      if ($24) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $26=$i;
      var $27=(($8+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+($26<<3))|0);
      var $30=$i;
      var $31=(($8+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+($30<<3))|0);
      var $34=$29;
      var $35=$33;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[(($34+4)>>2)]=HEAP32[(($35+4)>>2)];
      var $36=$i;
      var $37=(($8+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+($36<<2))|0);
      var $40=HEAPF32[(($39)>>2)];
      var $41=$40 > 0;
      if ($41) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $43=$i;
      var $44=(($8+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+($43<<3))|0);
      var $47=$2;
      var $48=(($8+28)|0);
      __ZmlfRK6b2Vec2($4, $47, $48);
      __ZN6b2Vec2pLERKS_($46, $4);
      __label__ = 7; break;
    case 7: 
      var $50=$i;
      var $51=(($8+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($50<<3))|0);
      var $54=$d;
      __ZN6b2Vec2mLEf($53, $54);
      var $55=$i;
      var $56=(($8+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+($55<<3))|0);
      var $59=$2;
      var $60=$i;
      var $61=(($8+12)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+($60<<3))|0);
      __ZmlfRK6b2Vec2($5, $59, $63);
      __ZN6b2Vec2pLERKS_($58, $5);
      __label__ = 8; break;
    case 8: 
      var $65=$i;
      var $66=(($65+1)|0);
      $i=$66;
      __label__ = 4; break;
    case 9: 
      $i1=0;
      __label__ = 10; break;
    case 10: 
      var $69=$i1;
      var $70=$3;
      var $71=(($69)|0) < (($70)|0);
      if ($71) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      __ZN6b2Rope7SolveC2Ev($8);
      __ZN6b2Rope7SolveC3Ev($8);
      __ZN6b2Rope7SolveC2Ev($8);
      __label__ = 12; break;
    case 12: 
      var $74=$i1;
      var $75=(($74+1)|0);
      $i1=$75;
      __label__ = 10; break;
    case 13: 
      var $77=$2;
      var $78=1/$77;
      $inv_h=$78;
      $i2=0;
      __label__ = 14; break;
    case 14: 
      var $80=$i2;
      var $81=(($8)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($80)|0) < (($82)|0);
      if ($83) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $85=$i2;
      var $86=(($8+12)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+($85<<3))|0);
      var $89=$inv_h;
      var $90=$i2;
      var $91=(($8+4)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+($90<<3))|0);
      var $94=$i2;
      var $95=(($8+8)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+($94<<3))|0);
      __ZmiRK6b2Vec2S1_($7, $93, $97);
      __ZmlfRK6b2Vec2($6, $89, $7);
      var $98=$88;
      var $99=$6;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[(($98+4)>>2)]=HEAP32[(($99+4)>>2)];
      __label__ = 16; break;
    case 16: 
      var $101=$i2;
      var $102=(($101+1)|0);
      $i2=$102;
      __label__ = 14; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Rope7SolveC2Ev($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $count2;
      var $i;
      var $p1=__stackBase__;
      var $p2=__stackBase__+8;
      var $d=__stackBase__+16;
      var $L;
      var $im1;
      var $im2;
      var $s1;
      var $s2;
      var $2=__stackBase__+24;
      var $3=__stackBase__+32;
      $1=$this;
      var $4=$1;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6-1)|0);
      $count2=$7;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $9=$i;
      var $10=$count2;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $13=$i;
      var $14=(($4+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($13<<3))|0);
      var $17=$p1;
      var $18=$16;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[(($17+4)>>2)]=HEAP32[(($18+4)>>2)];
      var $19=$i;
      var $20=(($19+1)|0);
      var $21=(($4+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+($20<<3))|0);
      var $24=$p2;
      var $25=$23;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[(($24+4)>>2)]=HEAP32[(($25+4)>>2)];
      __ZmiRK6b2Vec2S1_($d, $p2, $p1);
      var $26=__ZN6b2Vec29NormalizeEv($d);
      $L=$26;
      var $27=$i;
      var $28=(($4+16)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($27<<2))|0);
      var $31=HEAPF32[(($30)>>2)];
      $im1=$31;
      var $32=$i;
      var $33=(($32+1)|0);
      var $34=(($4+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+($33<<2))|0);
      var $37=HEAPF32[(($36)>>2)];
      $im2=$37;
      var $38=$im1;
      var $39=$im2;
      var $40=$38+$39;
      var $41=$40 == 0;
      if ($41) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      var $44=$im1;
      var $45=$im1;
      var $46=$im2;
      var $47=$45+$46;
      var $48=$44/$47;
      $s1=$48;
      var $49=$im2;
      var $50=$im1;
      var $51=$im2;
      var $52=$50+$51;
      var $53=$49/$52;
      $s2=$53;
      var $54=(($4+40)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=$s1;
      var $57=$55*$56;
      var $58=$i;
      var $59=(($4+20)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+($58<<2))|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=$L;
      var $64=$62-$63;
      var $65=$57*$64;
      __ZmlfRK6b2Vec2($2, $65, $d);
      __ZN6b2Vec2mIERKS_($p1, $2);
      var $66=(($4+40)|0);
      var $67=HEAPF32[(($66)>>2)];
      var $68=$s2;
      var $69=$67*$68;
      var $70=$i;
      var $71=(($4+20)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+($70<<2))|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$L;
      var $76=$74-$75;
      var $77=$69*$76;
      __ZmlfRK6b2Vec2($3, $77, $d);
      __ZN6b2Vec2pLERKS_($p2, $3);
      var $78=$i;
      var $79=(($4+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+($78<<3))|0);
      var $82=$81;
      var $83=$p1;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[(($82+4)>>2)]=HEAP32[(($83+4)>>2)];
      var $84=$i;
      var $85=(($84+1)|0);
      var $86=(($4+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+($85<<3))|0);
      var $89=$88;
      var $90=$p2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[(($89+4)>>2)]=HEAP32[(($90+4)>>2)];
      __label__ = 6; break;
    case 6: 
      var $92=$i;
      var $93=(($92+1)|0);
      $i=$93;
      __label__ = 2; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN6b2Rope7SolveC3Ev($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1=__stackBase__;
      var $2=__stackBase__+4;
      var $3;
      var $count3;
      var $i;
      var $p1=__stackBase__+8;
      var $p2=__stackBase__+16;
      var $p3=__stackBase__+24;
      var $m1;
      var $m2;
      var $m3;
      var $d1=__stackBase__+32;
      var $d2=__stackBase__+40;
      var $L1sqr;
      var $L2sqr;
      var $a;
      var $b;
      var $angle;
      var $Jd1=__stackBase__+48;
      var $4=__stackBase__+56;
      var $Jd2=__stackBase__+64;
      var $5=__stackBase__+72;
      var $J1=__stackBase__+80;
      var $J2=__stackBase__+88;
      var $J3=__stackBase__+96;
      var $mass;
      var $C;
      var $impulse;
      var $6=__stackBase__+104;
      var $7=__stackBase__+112;
      var $8=__stackBase__+120;
      $3=$this;
      var $9=$3;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11-2)|0);
      $count3=$12;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $14=$i;
      var $15=$count3;
      var $16=(($14)|0) < (($15)|0);
      if ($16) { __label__ = 3; break; } else { __label__ = 15; break; }
    case 3: 
      var $18=$i;
      var $19=(($9+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($18<<3))|0);
      var $22=$p1;
      var $23=$21;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[(($22+4)>>2)]=HEAP32[(($23+4)>>2)];
      var $24=$i;
      var $25=(($24+1)|0);
      var $26=(($9+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+($25<<3))|0);
      var $29=$p2;
      var $30=$28;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[(($29+4)>>2)]=HEAP32[(($30+4)>>2)];
      var $31=$i;
      var $32=(($31+2)|0);
      var $33=(($9+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+($32<<3))|0);
      var $36=$p3;
      var $37=$35;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[(($36+4)>>2)]=HEAP32[(($37+4)>>2)];
      var $38=$i;
      var $39=(($9+16)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+($38<<2))|0);
      var $42=HEAPF32[(($41)>>2)];
      $m1=$42;
      var $43=$i;
      var $44=(($43+1)|0);
      var $45=(($9+16)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+($44<<2))|0);
      var $48=HEAPF32[(($47)>>2)];
      $m2=$48;
      var $49=$i;
      var $50=(($49+2)|0);
      var $51=(($9+16)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($50<<2))|0);
      var $54=HEAPF32[(($53)>>2)];
      $m3=$54;
      __ZmiRK6b2Vec2S1_($d1, $p2, $p1);
      __ZmiRK6b2Vec2S1_($d2, $p3, $p2);
      var $55=__ZNK6b2Vec213LengthSquaredEv($d1);
      $L1sqr=$55;
      var $56=__ZNK6b2Vec213LengthSquaredEv($d2);
      $L2sqr=$56;
      var $57=$L1sqr;
      var $58=$L2sqr;
      var $59=$57*$58;
      var $60=$59 == 0;
      if ($60) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 14; break;
    case 5: 
      var $63=__Z7b2CrossRK6b2Vec2S1_($d1, $d2);
      $a=$63;
      var $64=__Z5b2DotRK6b2Vec2S1_($d1, $d2);
      $b=$64;
      var $65=$a;
      var $66=$b;
      var $67=$1;
      var $68=$2;
      HEAPF32[(($1)>>2)]=$65;
      HEAPF32[(($2)>>2)]=$66;
      var $69=HEAPF32[(($1)>>2)];
      var $70=HEAPF32[(($2)>>2)];
      var $71=_atan2f($69, $70);
      var $72=$1;
      var $73=$2;
      $angle=$71;
      var $74=$L1sqr;
      var $75=-1/$74;
      __ZNK6b2Vec24SkewEv($4, $d1);
      __ZmlfRK6b2Vec2($Jd1, $75, $4);
      var $76=$L2sqr;
      var $77=1/$76;
      __ZNK6b2Vec24SkewEv($5, $d2);
      __ZmlfRK6b2Vec2($Jd2, $77, $5);
      __ZNK6b2Vec2ngEv($J1, $Jd1);
      __ZmiRK6b2Vec2S1_($J2, $Jd1, $Jd2);
      var $78=$J3;
      var $79=$Jd2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)];
      var $80=$m1;
      var $81=__Z5b2DotRK6b2Vec2S1_($J1, $J1);
      var $82=$80*$81;
      var $83=$m2;
      var $84=__Z5b2DotRK6b2Vec2S1_($J2, $J2);
      var $85=$83*$84;
      var $86=$82+$85;
      var $87=$m3;
      var $88=__Z5b2DotRK6b2Vec2S1_($J3, $J3);
      var $89=$87*$88;
      var $90=$86+$89;
      $mass=$90;
      var $91=$mass;
      var $92=$91 == 0;
      if ($92) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 14; break;
    case 7: 
      var $95=$mass;
      var $96=1/$95;
      $mass=$96;
      var $97=$angle;
      var $98=$i;
      var $99=(($9+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+($98<<2))|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=$97-$102;
      $C=$103;
      __label__ = 8; break;
    case 8: 
      var $105=$C;
      var $106=$105 > 3.1415927410125732;
      if ($106) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $108=$angle;
      var $109=$108-6.2831854820251465;
      $angle=$109;
      var $110=$angle;
      var $111=$i;
      var $112=(($9+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+($111<<2))|0);
      var $115=HEAPF32[(($114)>>2)];
      var $116=$110-$115;
      $C=$116;
      __label__ = 8; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $119=$C;
      var $120=$119 < -3.1415927410125732;
      if ($120) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $122=$angle;
      var $123=$122+6.2831854820251465;
      $angle=$123;
      var $124=$angle;
      var $125=$i;
      var $126=(($9+24)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+($125<<2))|0);
      var $129=HEAPF32[(($128)>>2)];
      var $130=$124-$129;
      $C=$130;
      __label__ = 11; break;
    case 13: 
      var $132=(($9+44)|0);
      var $133=HEAPF32[(($132)>>2)];
      var $134=(-$133);
      var $135=$mass;
      var $136=$134*$135;
      var $137=$C;
      var $138=$136*$137;
      $impulse=$138;
      var $139=$m1;
      var $140=$impulse;
      var $141=$139*$140;
      __ZmlfRK6b2Vec2($6, $141, $J1);
      __ZN6b2Vec2pLERKS_($p1, $6);
      var $142=$m2;
      var $143=$impulse;
      var $144=$142*$143;
      __ZmlfRK6b2Vec2($7, $144, $J2);
      __ZN6b2Vec2pLERKS_($p2, $7);
      var $145=$m3;
      var $146=$impulse;
      var $147=$145*$146;
      __ZmlfRK6b2Vec2($8, $147, $J3);
      __ZN6b2Vec2pLERKS_($p3, $8);
      var $148=$i;
      var $149=(($9+4)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+($148<<3))|0);
      var $152=$151;
      var $153=$p1;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[(($152+4)>>2)]=HEAP32[(($153+4)>>2)];
      var $154=$i;
      var $155=(($154+1)|0);
      var $156=(($9+4)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+($155<<3))|0);
      var $159=$158;
      var $160=$p2;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($159)>>2)]=HEAP32[(($160)>>2)];HEAP32[(($159+4)>>2)]=HEAP32[(($160+4)>>2)];
      var $161=$i;
      var $162=(($161+2)|0);
      var $163=(($9+4)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+($162<<3))|0);
      var $166=$165;
      var $167=$p3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[(($166+4)>>2)]=HEAP32[(($167+4)>>2)];
      __label__ = 14; break;
    case 14: 
      var $169=$i;
      var $170=(($169+1)|0);
      $i=$170;
      __label__ = 2; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Vec24SkewEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2)|0);
  var $7=HEAPF32[(($6)>>2)];
  __ZN6b2Vec2C1Eff($agg_result, $5, $7);
  ;
  return;
}


function __ZNK6b2Rope4DrawEP6b2Draw($this, $draw) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $c=__stackBase__;
      var $i;
      $1=$this;
      $2=$draw;
      var $3=$1;
      __ZN7b2ColorC1Efff($c, 0.4000000059604645, 0.5, 0.699999988079071);
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $5=$i;
      var $6=(($3)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7-1)|0);
      var $9=(($5)|0) < (($8)|0);
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $11=$2;
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$i;
      var $17=(($3+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($16<<3))|0);
      var $20=$i;
      var $21=(($20+1)|0);
      var $22=(($3+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+($21<<3))|0);
      FUNCTION_TABLE[$15]($11, $19, $24, $c);
      __label__ = 4; break;
    case 4: 
      var $26=$i;
      var $27=(($26+1)|0);
      $i=$27;
      __label__ = 2; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ContactManager__b2ContactManager_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(80);
      var $4=$3;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2ContactManagerC1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ContactManager__AddPair_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN16b2ContactManager7AddPairEPvS0_($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2ContactManager__Collide_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN16b2ContactManager7CollideEv($2);
  ;
  return;
}


function _emscripten_bind_b2ContactManager__FindNewContacts_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN16b2ContactManager15FindNewContactsEv($2);
  ;
  return;
}


function _emscripten_bind_b2ContactManager____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      (function() { try { __THREW__ = false; return __ZN16b2ContactManagerD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    case 5: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $2=$12;
      var $13=$11.f1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      __label__ = 6; break;
    case 6: 
      var $16=$2;
      var $17=$2;
      var $18=$3;
      var $19=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $17, tempValue);
      var $20=($19.f1 = $18, $19);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ContactManager__Destroy_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2ContactManager7DestroyEP9b2Contact($3, $4);
  ;
  return;
}


function _emscripten_bind_b2ContactManager__set_m_broadPhase_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(60 % 1 === 0, 'memcpy given ' + 60 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $7>>2, $$dest = $6>>2, $$stop = $$src + 15; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src]
  };
  ;
  return;
}


function _emscripten_bind_b2Fixture__GetRestitution_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture14GetRestitutionEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__SetFilterData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture13SetFilterDataERK8b2Filter($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Fixture__SetFriction_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture11SetFrictionEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Fixture__b2Fixture_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(44);
      var $4=$3;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN9b2FixtureC1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Fixture__GetShape_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Fixture8GetShapeEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__SetRestitution_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture14SetRestitutionEf($3, $4);
  ;
  return;
}


function __ZNK9b2Fixture11GetFrictionEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK9b2Fixture11GetUserDataEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Fixture10SetDensityEf($this, $density) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$density;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK9b2Fixture7GetAABBEi($this, $childIndex) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$childIndex;
  var $3=$1;
  var $4=$2;
  var $5=(($3+24)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+$4*28)|0);
  var $8=(($7)|0);
  ;
  return $8;
}


function __ZN9b2Fixture11SetUserDataEPv($this, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  var $5=(($3+40)|0);
  HEAP32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK9b2Fixture10GetDensityEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2World14SetSubSteppingEb($this, $flag) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=(($4+102994)|0);
  var $8=(($6)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function __ZNK7b2World10GetProfileEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102996)|0);
  ;
  return $3;
}


function __ZNK7b2World14GetSubSteppingEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102994)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZNK7b2World17GetContactManagerEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  ;
  return $3;
}


function __ZN7b2World20SetContinuousPhysicsEb($this, $flag) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=(($4+102993)|0);
  var $8=(($6)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function __ZNK7b2World12GetBodyCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102960)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK7b2World18GetAutoClearForcesEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102868)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 4;
  var $6=(($5)|0)==4;
  ;
  return $6;
}


function __ZNK7b2World20GetContinuousPhysicsEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102993)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZN7b2World12GetJointListEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102956)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2World11GetBodyListEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102952)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK7b2World13GetJointCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102964)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK7b2World15GetWarmStartingEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102992)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZNK7b2World16GetAllowSleepingEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102976)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function __ZN7b2World14GetContactListEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3+60)|0);
  var $5=HEAP32[(($4)>>2)];
  ;
  return $5;
}


function __ZN7b2World18SetAutoClearForcesEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=(($4+102868)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 | 4;
      HEAP32[(($8)>>2)]=$10;
      __label__ = 4; break;
    case 3: 
      var $12=(($4+102868)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & -5;
      HEAP32[(($12)>>2)]=$14;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Fixture__GetBody_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Fixture7GetBodyEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__GetNext_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Fixture7GetNextEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__GetFriction_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture11GetFrictionEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__GetUserData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture11GetUserDataEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__SetDensity_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture10SetDensityEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Fixture__GetMassData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZNK9b2Fixture11GetMassDataEP10b2MassData($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Fixture__SetSensor_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN9b2Fixture9SetSensorEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2Fixture__GetAABB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK9b2Fixture7GetAABBEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2Fixture__TestPoint_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK9b2Fixture9TestPointERK6b2Vec2($3, $4);
  ;
  return $5;
}


function __ZNK9b2Fixture9TestPointERK6b2Vec2($this, $p) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$p;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+16)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($3+8)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=__ZNK6b2Body12GetTransformEv($11);
  var $13=$2;
  var $14=FUNCTION_TABLE[$9]($5, $12, $13);
  ;
  return $14;
}


function _emscripten_bind_b2Fixture__SetUserData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture11SetUserDataEPv($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Fixture____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Fixture__RayCast_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=__ZNK9b2Fixture7RayCastEP15b2RayCastOutputRK14b2RayCastInputi($5, $6, $7, $8);
  ;
  return $9;
}


function _emscripten_bind_b2Fixture__Refilter_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN9b2Fixture8RefilterEv($2);
  ;
  return;
}


function _emscripten_bind_b2Fixture__Dump_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture4DumpEi($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Fixture__GetFilterData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture13GetFilterDataEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__IsSensor_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture8IsSensorEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture7GetTypeEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Fixture__GetDensity_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture10GetDensityEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2BroadPhase__GetTreeQuality_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase14GetTreeQualityEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2BroadPhase__GetFatAABB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK12b2BroadPhase10GetFatAABBEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2BroadPhase__GetUserData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK12b2BroadPhase11GetUserDataEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2BroadPhase____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN12b2BroadPhaseD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    case 5: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $2=$12;
      var $13=$11.f1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      __label__ = 6; break;
    case 6: 
      var $16=$2;
      var $17=$2;
      var $18=$3;
      var $19=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $17, tempValue);
      var $20=($19.f1 = $18, $19);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2BroadPhase__GetTreeHeight_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase13GetTreeHeightEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2BroadPhase__b2BroadPhase_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(60);
      var $4=$3;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN12b2BroadPhaseC1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2BroadPhase__GetProxyCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase13GetProxyCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2BroadPhase__GetTreeBalance_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase14GetTreeBalanceEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2BroadPhase__TestOverlap_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZNK12b2BroadPhase11TestOverlapEii($4, $5, $6);
  ;
  return $7;
}


function _emscripten_bind_b2BroadPhase__TouchProxy_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase10TouchProxyEi($3, $4);
  ;
  return;
}


function _emscripten_bind_b2BroadPhase__CreateProxy_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($4, $5, $6);
  ;
  return $7;
}


function _emscripten_bind_b2BroadPhase__MoveProxy_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2BroadPhase__DestroyProxy_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase12DestroyProxyEi($3, $4);
  ;
  return;
}


function _emscripten_bind_b2World__QueryAABB_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2World__SetSubStepping_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World14SetSubSteppingEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2World__GetTreeQuality_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World14GetTreeQualityEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetTreeHeight_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World13GetTreeHeightEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetProfile_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World10GetProfileEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetTreeBalance_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World14GetTreeBalanceEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetSubStepping_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World14GetSubSteppingEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetContactManager_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World17GetContactManagerEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__SetContactListener_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World18SetContactListenerEP17b2ContactListener($3, $4);
  ;
  return;
}


function _emscripten_bind_b2World__DrawDebugData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2World13DrawDebugDataEv($2);
  ;
  return;
}


function _emscripten_bind_b2World__SetContinuousPhysics_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World20SetContinuousPhysicsEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2World__SetGravity_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World10SetGravityERK6b2Vec2($3, $4);
  ;
  return;
}


function __ZN7b2World10SetGravityERK6b2Vec2($this, $gravity) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$gravity;
  var $3=$1;
  var $4=(($3+102968)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2World__GetBodyCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World12GetBodyCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetAutoClearForces_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World18GetAutoClearForcesEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetContinuousPhysics_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World20GetContinuousPhysicsEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetJointList_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2World12GetJointListEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__CreateBody_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN7b2World10CreateBodyEPK9b2BodyDef($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2World__GetBodyList_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2World11GetBodyListEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__SetDestructionListener_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World22SetDestructionListenerEP21b2DestructionListener($3, $4);
  ;
  return;
}


function _emscripten_bind_b2World__DestroyJoint_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World12DestroyJointEP7b2Joint($3, $4);
  ;
  return;
}


function _emscripten_bind_b2World__b2World_p1($arg0) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(103028);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN7b2WorldC1ERK6b2Vec2]($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $5;
    case 3: 
      var $9=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $10=$9.f0;
      $2=$10;
      var $11=$9.f1;
      $3=$11;
      __ZdlPv($4);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2World__GetJointCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World13GetJointCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__Step_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN7b2World4StepEfii($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2World__ClearForces_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2World11ClearForcesEv($2);
  ;
  return;
}


function _emscripten_bind_b2World__GetWarmStarting_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World15GetWarmStartingEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__SetAllowSleeping_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World16SetAllowSleepingEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2World__DestroyBody_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World11DestroyBodyEP6b2Body($3, $4);
  ;
  return;
}


function _emscripten_bind_b2World__GetAllowSleeping_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World16GetAllowSleepingEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__CreateJoint_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN7b2World11CreateJointEPK10b2JointDef($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2World__GetProxyCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World13GetProxyCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__RayCast_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2World__IsLocked_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World8IsLockedEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__GetContactList_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2World14GetContactListEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__SetDebugDraw_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World12SetDebugDrawEP6b2Draw($3, $4);
  ;
  return;
}


function _emscripten_bind_b2World____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN7b2WorldD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    case 5: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $2=$12;
      var $13=$11.f1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      __label__ = 6; break;
    case 6: 
      var $16=$2;
      var $17=$2;
      var $18=$3;
      var $19=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $17, tempValue);
      var $20=($19.f1 = $18, $19);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2World__Dump_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2World4DumpEv($2);
  ;
  return;
}


function _emscripten_bind_b2World__SetAutoClearForces_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World18SetAutoClearForcesEb($4, $6);
  ;
  return;
}


function __ZNK13b2CircleShape14GetVertexCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return 1;
}


function __ZNK13b2CircleShape10GetSupportERK6b2Vec2($this, $d) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$d;
  var $3=$1;
  var $4=$2;
  ;
  return 0;
}


function __ZNK7b2World15GetContactCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3+64)|0);
  var $5=HEAP32[(($4)>>2)];
  ;
  return $5;
}


function __ZN7b2World15SetWarmStartingEb($this, $flag) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=(($4+102992)|0);
  var $8=(($6)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2CircleShape__set_m_radius_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2CircleShape__get_m_radius_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  ;
  return $5;
}


function __ZNK13b2CircleShape9GetVertexEi($this, $index) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$index;
  var $3=$1;
  var $4=(($3+12)|0);
  ;
  return $4;
}


function __ZNK13b2CircleShape16GetSupportVertexERK6b2Vec2($this, $d) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$d;
  var $3=$1;
  var $4=$2;
  var $5=(($3+12)|0);
  ;
  return $5;
}


function _emscripten_bind_b2CircleShape__get_m_p_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  ;
  return $3;
}


function __ZNK7b2Joint11GetUserDataEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZN7b2Joint11SetUserDataEPv($this, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  var $5=(($3+64)|0);
  HEAP32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK7b2Joint19GetCollideConnectedEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+61)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2World__GetGravity_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      __ZNK7b2World10GetGravityEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret)>>2)]=HEAP32[(($14)>>2)];HEAP32[((_ret+4)>>2)]=HEAP32[(($14+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret;
    case 6: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      ;
      __label__ = 7; break;
    case 7: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK7b2World10GetGravityEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102968)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[(($4+4)>>2)]=HEAP32[(($5+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2World__GetContactCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World15GetContactCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2World__SetWarmStarting_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World15SetWarmStartingEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2World__SetContactFilter_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World16SetContactFilterEP15b2ContactFilter($3, $4);
  ;
  return;
}


function _emscripten_bind_b2CircleShape____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2CircleShape__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  ;
  return $4;
}


function _emscripten_bind_b2CircleShape__ComputeMass_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2CircleShape__GetVertex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2CircleShape9GetVertexEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2CircleShape__Clone_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  ;
  return $9;
}


function _emscripten_bind_b2CircleShape__GetSupportVertex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2CircleShape16GetSupportVertexERK6b2Vec2($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2CircleShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  ;
  return $15;
}


function _emscripten_bind_b2CircleShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2CircleShape__GetVertexCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2CircleShape14GetVertexCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2CircleShape__GetChildCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  ;
  return $7;
}


function _emscripten_bind_b2CircleShape__TestPoint_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return $11;
}


function _emscripten_bind_b2CircleShape__b2CircleShape_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(20);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN13b2CircleShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2CircleShape__GetSupport_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2CircleShape10GetSupportERK6b2Vec2($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2CircleShape__set_m_p_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2Draw__AppendFlags_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Draw11AppendFlagsEj($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Draw__DrawTransform_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+28)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  ;
  return;
}


function _emscripten_bind_b2Draw__ClearFlags_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Draw10ClearFlagsEj($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Draw__DrawPolygon_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+8)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2Draw__DrawSolidCircle_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  ;
  return;
}


function _emscripten_bind_b2Draw__DrawSolidPolygon_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+12)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2Draw__DrawCircle_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+16)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2Draw__SetFlags_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Draw8SetFlagsEj($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Draw__DrawSegment_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2Draw__GetFlags_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Draw8GetFlagsEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Joint__GetNext_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2Joint7GetNextEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Joint__GetBodyA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2Joint8GetBodyAEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Joint__GetBodyB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2Joint8GetBodyBEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Joint__GetReactionTorque_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  ;
  return $9;
}


function _emscripten_bind_b2Joint__GetAnchorA_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret1)>>2)]=HEAP32[(($18)>>2)];HEAP32[((_ret1+4)>>2)]=HEAP32[(($18+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret1;
    case 6: 
      var $20=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $21=$20.f0;
      $2=$21;
      var $22=$20.f1;
      $3=$22;
      ;
      __label__ = 7; break;
    case 7: 
      var $24=$2;
      var $25=$2;
      var $26=$3;
      var $27=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $25, tempValue);
      var $28=($27.f1 = $26, $27);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Joint__GetUserData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint11GetUserDataEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Joint__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint7GetTypeEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Joint__SetUserData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2Joint11SetUserDataEPv($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Joint__GetCollideConnected_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint19GetCollideConnectedEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Joint__Dump_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  ;
  return;
}


function _emscripten_bind_b2Joint__GetAnchorB_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret2)>>2)]=HEAP32[(($18)>>2)];HEAP32[((_ret2+4)>>2)]=HEAP32[(($18+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret2;
    case 6: 
      var $20=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $21=$20.f0;
      $2=$21;
      var $22=$20.f1;
      $3=$22;
      ;
      __label__ = 7; break;
    case 7: 
      var $24=$2;
      var $25=$2;
      var $26=$3;
      var $27=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $25, tempValue);
      var $28=($27.f1 = $26, $27);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Joint__GetReactionForce_p1($self, $arg0) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(__ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(__ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret3)>>2)]=HEAP32[(($20)>>2)];HEAP32[((_ret3+4)>>2)]=HEAP32[(($20+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret3;
    case 6: 
      var $22=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $23=$22.f0;
      $3=$23;
      var $24=$22.f1;
      $4=$24;
      ;
      __label__ = 7; break;
    case 7: 
      var $26=$3;
      var $27=$3;
      var $28=$4;
      var $29=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $27, tempValue);
      var $30=($29.f1 = $28, $29);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Joint__IsActive_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint8IsActiveEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2RayCastCallback__ReportFixture_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  ;
  return $15;
}


function _emscripten_bind_b2DynamicTree____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN13b2DynamicTreeD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    case 5: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $2=$12;
      var $13=$11.f1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      __label__ = 6; break;
    case 6: 
      var $16=$2;
      var $17=$2;
      var $18=$3;
      var $19=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $17, tempValue);
      var $20=($19.f1 = $18, $19);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2DynamicTree__b2DynamicTree_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(28);
      var $4=$3;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN13b2DynamicTreeC1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2DynamicTree__GetFatAABB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2DynamicTree10GetFatAABBEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2DynamicTree__GetUserData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2DynamicTree11GetUserDataEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2DynamicTree__GetMaxBalance_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2DynamicTree13GetMaxBalanceEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2DynamicTree__GetHeight_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2DynamicTree9GetHeightEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2DynamicTree__GetAreaRatio_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2DynamicTree12GetAreaRatioEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN13b2DynamicTree15RebuildBottomUpEv($2);
  ;
  return;
}


function _emscripten_bind_b2DynamicTree__CreateProxy_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($4, $5, $6);
  ;
  return $7;
}


function _emscripten_bind_b2DynamicTree__MoveProxy_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($5, $6, $7, $8);
  ;
  return $9;
}


function _emscripten_bind_b2DynamicTree__Validate_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZNK13b2DynamicTree8ValidateEv($2);
  ;
  return;
}


function _emscripten_bind_b2DynamicTree__DestroyProxy_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN13b2DynamicTree12DestroyProxyEi($3, $4);
  ;
  return;
}


function _emscripten_bind_b2ChainShape__set_m_radius_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2ChainShape__get_m_radius_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  ;
  return $5;
}


function _emscripten_bind_b2ChainShape__get_m_vertices_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2ChainShape__get_m_count_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2ChainShape__set_m_vertices_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2ChainShape__set_m_count_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+16)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__set_m_radius_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__get_m_radius_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  ;
  return $5;
}


function __ZNK14b2PolygonShape9GetVertexEi($this, $index) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$index;
  var $3=$1;
  var $4=$2;
  var $5=(($3+20)|0);
  var $6=(($5+($4<<3))|0);
  ;
  return $6;
}


function _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+148)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function __ZNK14b2PolygonShape14GetVertexCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+148)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+148)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PolygonShape__get_m_centroid_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  ;
  return $3;
}


function _emscripten_bind_b2EdgeShape__set_m_radius_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2EdgeShape__get_m_radius_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  ;
  return $5;
}


function _emscripten_bind_b2Timer__b2Timer_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(8);
      var $4=$3;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN7b2TimerC1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Timer__Reset_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2Timer5ResetEv($2);
  ;
  return;
}


function _emscripten_bind_b2Timer____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Timer__GetMilliseconds_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Timer15GetMillisecondsEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2ContactListener____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ContactListener__b2ContactListener_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(4);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN17b2ContactListenerC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ContactListener__EndContact_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  ;
  return;
}


function _emscripten_bind_b2ContactListener__BeginContact_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  ;
  return;
}


function _emscripten_bind_b2ContactListener__PreSolve_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2ContactListener__PostSolve_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+20)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2ChainShape____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ChainShape__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  ;
  return $4;
}


function _emscripten_bind_b2ChainShape__CreateChain_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2ChainShape__ComputeMass_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2ChainShape__Clone_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  ;
  return $9;
}


function _emscripten_bind_b2ChainShape__GetChildEdge_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2ChainShape__b2ChainShape_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(40);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN12b2ChainShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2ChainShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2ChainShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  ;
  return $15;
}


function _emscripten_bind_b2ChainShape__GetChildCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  ;
  return $7;
}


function _emscripten_bind_b2ChainShape__TestPoint_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return $11;
}


function _emscripten_bind_b2ChainShape__SetPrevVertex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2ChainShape13SetPrevVertexERK6b2Vec2($3, $4);
  ;
  return;
}


function _emscripten_bind_b2ChainShape__CreateLoop_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN12b2ChainShape10CreateLoopEPK6b2Vec2i($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2ChainShape__SetNextVertex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2ChainShape13SetNextVertexERK6b2Vec2($3, $4);
  ;
  return;
}


function _emscripten_bind_b2QueryCallback__ReportFixture_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  ;
  return $9;
}


function _emscripten_bind_b2BlockAllocator____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2BlockAllocatorD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    case 5: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $2=$12;
      var $13=$11.f1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      __label__ = 6; break;
    case 6: 
      var $16=$2;
      var $17=$2;
      var $18=$3;
      var $19=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $17, tempValue);
      var $20=($19.f1 = $18, $19);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2BlockAllocator__Clear_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN16b2BlockAllocator5ClearEv($2);
  ;
  return;
}


function _emscripten_bind_b2BlockAllocator__Free_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN16b2BlockAllocator4FreeEPvi($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2BlockAllocator__Allocate_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN16b2BlockAllocator8AllocateEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(68);
      var $4=$3;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2BlockAllocatorC1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2PolygonShape____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2PolygonShape__Set_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN14b2PolygonShape3SetEPK6b2Vec2i($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__ComputeMass_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__Clone_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  ;
  return $9;
}


function _emscripten_bind_b2PolygonShape__GetVertex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK14b2PolygonShape9GetVertexEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2PolygonShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  ;
  return $15;
}


function _emscripten_bind_b2PolygonShape__SetAsBox_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN14b2PolygonShape8SetAsBoxEff($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__SetAsBox_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($6, $7, $8, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__set_m_centroid_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2PolygonShape__GetVertexCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK14b2PolygonShape14GetVertexCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2PolygonShape__GetChildCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  ;
  return $7;
}


function _emscripten_bind_b2PolygonShape__TestPoint_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return $11;
}


function _emscripten_bind_b2PolygonShape__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  ;
  return $4;
}


function _emscripten_bind_b2PolygonShape__b2PolygonShape_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(152);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN14b2PolygonShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2EdgeShape____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2EdgeShape__Set_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN11b2EdgeShape3SetERK6b2Vec2S2_($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2EdgeShape__ComputeMass_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2EdgeShape__Clone_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  ;
  return $9;
}


function _emscripten_bind_b2EdgeShape__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  ;
  return $4;
}


function _emscripten_bind_b2EdgeShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  ;
  return $15;
}


function _emscripten_bind_b2EdgeShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2EdgeShape__GetChildCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  ;
  return $7;
}


function __ZNK9b2Contact14GetRestitutionEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+140)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK9b2Contact11GetFrictionEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+136)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN9b2Contact11SetFrictionEf($this, $friction) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$friction;
  var $3=$1;
  var $4=$2;
  var $5=(($3+136)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN9b2Contact14SetRestitutionEf($this, $restitution) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$restitution;
  var $3=$1;
  var $4=$2;
  var $5=(($3+140)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function _emscripten_bind_b2Shape__get_m_radius_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2Shape__set_m_radius_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function __ZNK6b2Body11GetUserDataEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+148)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body17IsSleepingAllowedEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPU16[(($3)>>1)];
  var $5=(($4)&65535);
  var $6=$5 & 4;
  var $7=(($6)|0)==4;
  ;
  return $7;
}


function __ZN6b2Body17SetAngularDampingEf($this, $angularDamping) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$angularDamping;
  var $3=$1;
  var $4=$2;
  var $5=(($3+136)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN6b2Body15SetGravityScaleEf($this, $scale) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$scale;
  var $3=$1;
  var $4=$2;
  var $5=(($3+140)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN6b2Body11SetUserDataEPv($this, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  var $5=(($3+148)|0);
  HEAP32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZNK6b2Body18GetAngularVelocityEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN6b2Body12GetJointListEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+108)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2EdgeShape__TestPoint_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return $11;
}


function _emscripten_bind_b2EdgeShape__b2EdgeShape_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(48);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN11b2EdgeShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Contact__GetNext_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact7GetNextEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__SetEnabled_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN9b2Contact10SetEnabledEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2Contact__GetWorldManifold_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZNK9b2Contact16GetWorldManifoldEP15b2WorldManifold($3, $4);
  ;
  return;
}


function __ZNK9b2Contact16GetWorldManifoldEP15b2WorldManifold($this, $worldManifold) {
  ;
  var __label__;

  var $1;
  var $2;
  var $bodyA;
  var $bodyB;
  var $shapeA;
  var $shapeB;
  $1=$this;
  $2=$worldManifold;
  var $3=$1;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=__ZN9b2Fixture7GetBodyEv($5);
  $bodyA=$6;
  var $7=(($3+52)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=__ZN9b2Fixture7GetBodyEv($8);
  $bodyB=$9;
  var $10=(($3+48)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=__ZN9b2Fixture8GetShapeEv($11);
  $shapeA=$12;
  var $13=(($3+52)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=__ZN9b2Fixture8GetShapeEv($14);
  $shapeB=$15;
  var $16=$2;
  var $17=(($3+64)|0);
  var $18=$bodyA;
  var $19=__ZNK6b2Body12GetTransformEv($18);
  var $20=$shapeA;
  var $21=(($20+8)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$bodyB;
  var $24=__ZNK6b2Body12GetTransformEv($23);
  var $25=$shapeB;
  var $26=(($25+8)|0);
  var $27=HEAPF32[(($26)>>2)];
  __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($16, $17, $19, $22, $24, $27);
  ;
  return;
}


function _emscripten_bind_b2Contact__GetRestitution_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact14GetRestitutionEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__ResetFriction_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN9b2Contact13ResetFrictionEv($2);
  ;
  return;
}


function __ZN9b2Contact13ResetFrictionEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($2+52)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+16)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=__Z13b2MixFrictionff($6, $10);
  var $12=(($2+136)|0);
  HEAPF32[(($12)>>2)]=$11;
  ;
  return;
}


function _emscripten_bind_b2Contact__GetFriction_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact11GetFrictionEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__IsTouching_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact10IsTouchingEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__IsEnabled_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact9IsEnabledEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__GetFixtureB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact11GetFixtureBEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__SetFriction_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Contact11SetFrictionEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Contact__GetFixtureA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact11GetFixtureAEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__GetChildIndexA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact14GetChildIndexAEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__GetChildIndexB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact14GetChildIndexBEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__Evaluate_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2Contact__SetRestitution_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Contact14SetRestitutionEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Contact__GetManifold_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact11GetManifoldEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Contact__ResetRestitution_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN9b2Contact16ResetRestitutionEv($2);
  ;
  return;
}


function __ZN9b2Contact16ResetRestitutionEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+20)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($2+52)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=__Z16b2MixRestitutionff($6, $10);
  var $12=(($2+140)|0);
  HEAPF32[(($12)>>2)]=$11;
  ;
  return;
}


function _emscripten_bind_b2Shape__ComputeMass_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2Shape__Clone_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  ;
  return $9;
}


function _emscripten_bind_b2Shape__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Shape7GetTypeEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Shape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  ;
  return $15;
}


function _emscripten_bind_b2Shape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  ;
  return;
}


function _emscripten_bind_b2Shape__GetChildCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  ;
  return $7;
}


function _emscripten_bind_b2Shape__TestPoint_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  ;
  return $11;
}


function _emscripten_bind_b2Body__GetAngle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body8GetAngleEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetUserData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body11GetUserDataEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__IsSleepingAllowed_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body17IsSleepingAllowedEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__SetAngularDamping_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body17SetAngularDampingEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Body__SetActive_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body9SetActiveEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2Body__SetGravityScale_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body15SetGravityScaleEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Body__SetUserData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body11SetUserDataEPv($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Body__GetAngularVelocity_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body18GetAngularVelocityEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetFixtureList_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body14GetFixtureListEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__ApplyForce_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Body10ApplyForceERK6b2Vec2S2_($4, $5, $6);
  ;
  return;
}


function __ZN6b2Body10ApplyForceERK6b2Vec2S2_($this, $force, $point) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$this;
      $2=$force;
      $3=$point;
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)!=2;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $11=__ZNK6b2Body7IsAwakeEv($5);
      var $12=(($11)&1);
      var $13=(($12)|0)==0;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($5, 1);
      __label__ = 5; break;
    case 5: 
      var $16=(($5+76)|0);
      var $17=$2;
      __ZN6b2Vec2pLERKS_($16, $17);
      var $18=$3;
      var $19=(($5+28)|0);
      var $20=(($19+16)|0);
      __ZmiRK6b2Vec2S1_($4, $18, $20);
      var $21=$2;
      var $22=__Z7b2CrossRK6b2Vec2S1_($4, $21);
      var $23=(($5+84)|0);
      var $24=HEAPF32[(($23)>>2)];
      var $25=$24+$22;
      HEAPF32[(($23)>>2)]=$25;
      __label__ = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__GetLocalPoint_p1($self, $arg0) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(__ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(__ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret4)>>2)]=HEAP32[(($16)>>2)];HEAP32[((_ret4+4)>>2)]=HEAP32[(($16+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret4;
    case 6: 
      var $18=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $19=$18.f0;
      $3=$19;
      var $20=$18.f1;
      $4=$20;
      ;
      __label__ = 7; break;
    case 7: 
      var $22=$3;
      var $23=$3;
      var $24=$4;
      var $25=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $23, tempValue);
      var $26=($25.f1 = $24, $25);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__SetLinearVelocity_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body17SetLinearVelocityERK6b2Vec2($3, $4);
  ;
  return;
}


function __ZN6b2Body17SetLinearVelocityERK6b2Vec2($this, $v) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$v;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $9=$2;
      var $10=$2;
      var $11=__Z5b2DotRK6b2Vec2S1_($9, $10);
      var $12=$11 > 0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      __label__ = 5; break;
    case 5: 
      var $15=(($3+64)|0);
      var $16=$2;
      var $17=$15;
      var $18=$16;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[(($17+4)>>2)]=HEAP32[(($18+4)>>2)];
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__GetJointList_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body12GetJointListEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetLinearVelocity_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Body17GetLinearVelocityEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret5)>>2)]=HEAP32[(($14)>>2)];HEAP32[((_ret5+4)>>2)]=HEAP32[(($14+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret5;
    case 6: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      ;
      __label__ = 7; break;
    case 7: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Body17GetLinearVelocityEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[(($4+4)>>2)]=HEAP32[(($5+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2Body__GetNext_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body7GetNextEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__SetSleepingAllowed_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body18SetSleepingAllowedEb($4, $6);
  ;
  return;
}


function __ZN6b2Body18SetSleepingAllowedEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAPU16[(($8)>>1)];
      var $10=(($9)&65535);
      var $11=$10 | 4;
      var $12=(($11) & 65535);
      HEAP16[(($8)>>1)]=$12;
      __label__ = 4; break;
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAPU16[(($14)>>1)];
      var $16=(($15)&65535);
      var $17=$16 & -5;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      __ZN6b2Body8SetAwakeEb($4, 1);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__SetTransform_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Body12SetTransformERK6b2Vec2f($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2Body__GetMass_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body7GetMassEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__SetAngularVelocity_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body18SetAngularVelocityEf($3, $4);
  ;
  return;
}


function __ZN6b2Body18SetAngularVelocityEf($this, $w) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$w;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $9=$2;
      var $10=$2;
      var $11=$9*$10;
      var $12=$11 > 0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      __label__ = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($3+72)|0);
      HEAPF32[(($16)>>2)]=$15;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__GetMassData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZNK6b2Body11GetMassDataEP10b2MassData($3, $4);
  ;
  return;
}


function __ZNK6b2Body11GetMassDataEP10b2MassData($this, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=(($3+116)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  HEAPF32[(($7)>>2)]=$5;
  var $8=(($3+124)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=(($3+116)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=(($3+28)|0);
  var $13=(($12)|0);
  var $14=(($3+28)|0);
  var $15=(($14)|0);
  var $16=__Z5b2DotRK6b2Vec2S1_($13, $15);
  var $17=$11*$16;
  var $18=$9+$17;
  var $19=$2;
  var $20=(($19+12)|0);
  HEAPF32[(($20)>>2)]=$18;
  var $21=$2;
  var $22=(($21+4)|0);
  var $23=(($3+28)|0);
  var $24=(($23)|0);
  var $25=$22;
  var $26=$24;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[(($25+4)>>2)]=HEAP32[(($26+4)>>2)];
  ;
  return;
}


function __ZNK6b2Body17GetAngularDampingEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+136)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body15IsFixedRotationEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPU16[(($3)>>1)];
  var $5=(($4)&65535);
  var $6=$5 & 16;
  var $7=(($6)|0)==16;
  ;
  return $7;
}


function __ZNK6b2Body14GetLocalCenterEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=(($3)|0);
  ;
  return $4;
}


function __ZNK6b2Body16GetLinearDampingEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+132)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZN6b2Body16SetLinearDampingEf($this, $linearDamping) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$this;
  $2=$linearDamping;
  var $3=$1;
  var $4=$2;
  var $5=(($3+132)|0);
  HEAPF32[(($5)>>2)]=$4;
  ;
  return;
}


function __ZN6b2Body9SetBulletEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAPU16[(($8)>>1)];
      var $10=(($9)&65535);
      var $11=$10 | 8;
      var $12=(($11) & 65535);
      HEAP16[(($8)>>1)]=$12;
      __label__ = 4; break;
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAPU16[(($14)>>1)];
      var $16=(($15)&65535);
      var $17=$16 & -9;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Body15GetGravityScaleEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+140)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK6b2Body11GetPositionEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=(($3)|0);
  ;
  return $4;
}


function _emscripten_bind_b2Filter__set_maskBits_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+2)|0);
  HEAP16[(($5)>>1)]=$3;
  ;
  return;
}


function _emscripten_bind_b2Filter__set_categoryBits_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP16[(($5)>>1)]=$3;
  ;
  return;
}


function _emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1($self, $arg0) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body31GetLinearVelocityFromWorldPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret6)>>2)]=HEAP32[(($16)>>2)];HEAP32[((_ret6+4)>>2)]=HEAP32[(($16+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret6;
    case 6: 
      var $18=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $19=$18.f0;
      $3=$19;
      var $20=$18.f1;
      $4=$20;
      ;
      __label__ = 7; break;
    case 7: 
      var $22=$3;
      var $23=$3;
      var $24=$4;
      var $25=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $23, tempValue);
      var $26=($25.f1 = $24, $25);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Body31GetLinearVelocityFromWorldPointERK6b2Vec2($agg_result, $this, $worldPoint) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=__stackBase__+8;
  $1=$this;
  $2=$worldPoint;
  var $5=$1;
  var $6=(($5+64)|0);
  var $7=(($5+72)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$2;
  var $10=(($5+28)|0);
  var $11=(($10+16)|0);
  __ZmiRK6b2Vec2S1_($4, $9, $11);
  __Z7b2CrossfRK6b2Vec2($3, $8, $4);
  __ZplRK6b2Vec2S1_($agg_result, $6, $3);
  STACKTOP = __stackBase__;
  return;
}


function _emscripten_bind_b2Body__ResetMassData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Body13ResetMassDataEv($2);
  ;
  return;
}


function _emscripten_bind_b2Body__ApplyForceToCenter_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body18ApplyForceToCenterERK6b2Vec2($3, $4);
  ;
  return;
}


function __ZN6b2Body18ApplyForceToCenterERK6b2Vec2($this, $force) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$force;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=2;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $9=__ZNK6b2Body7IsAwakeEv($3);
      var $10=(($9)&1);
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      __label__ = 5; break;
    case 5: 
      var $14=(($3+76)|0);
      var $15=$2;
      __ZN6b2Vec2pLERKS_($14, $15);
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__ApplyTorque_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body11ApplyTorqueEf($3, $4);
  ;
  return;
}


function __ZN6b2Body11ApplyTorqueEf($this, $torque) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$torque;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=2;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $9=__ZNK6b2Body7IsAwakeEv($3);
      var $10=(($9)&1);
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      __label__ = 5; break;
    case 5: 
      var $14=$2;
      var $15=(($3+84)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=$16+$14;
      HEAPF32[(($15)>>2)]=$17;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__IsAwake_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body7IsAwakeEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__SetType_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body7SetTypeE10b2BodyType($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Body__CreateFixture_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN6b2Body13CreateFixtureEPK12b2FixtureDef($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2Body__CreateFixture_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZN6b2Body13CreateFixtureEPK7b2Shapef($4, $5, $6);
  ;
  return $7;
}


function _emscripten_bind_b2Body__SetMassData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body11SetMassDataEPK10b2MassData($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Body__GetTransform_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body12GetTransformEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetWorldCenter_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body14GetWorldCenterEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetAngularDamping_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body17GetAngularDampingEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__ApplyLinearImpulse_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Body18ApplyLinearImpulseERK6b2Vec2S2_($4, $5, $6);
  ;
  return;
}


function __ZN6b2Body18ApplyLinearImpulseERK6b2Vec2S2_($this, $impulse, $point) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $5=__stackBase__+8;
      $1=$this;
      $2=$impulse;
      $3=$point;
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)!=2;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $12=__ZNK6b2Body7IsAwakeEv($6);
      var $13=(($12)&1);
      var $14=(($13)|0)==0;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($6, 1);
      __label__ = 5; break;
    case 5: 
      var $17=(($6+64)|0);
      var $18=(($6+120)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$2;
      __ZmlfRK6b2Vec2($4, $19, $20);
      __ZN6b2Vec2pLERKS_($17, $4);
      var $21=(($6+128)|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=$3;
      var $24=(($6+28)|0);
      var $25=(($24+16)|0);
      __ZmiRK6b2Vec2S1_($5, $23, $25);
      var $26=$2;
      var $27=__Z7b2CrossRK6b2Vec2S1_($5, $26);
      var $28=$22*$27;
      var $29=(($6+72)|0);
      var $30=HEAPF32[(($29)>>2)];
      var $31=$30+$28;
      HEAPF32[(($29)>>2)]=$31;
      __label__ = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__IsFixedRotation_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body15IsFixedRotationEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetLocalCenter_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body14GetLocalCenterEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetWorldVector_p1($self, $arg0) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(__ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(__ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body14GetWorldVectorERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret7)>>2)]=HEAP32[(($16)>>2)];HEAP32[((_ret7+4)>>2)]=HEAP32[(($16+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret7;
    case 6: 
      var $18=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $19=$18.f0;
      $3=$19;
      var $20=$18.f1;
      $4=$20;
      ;
      __label__ = 7; break;
    case 7: 
      var $22=$3;
      var $23=$3;
      var $24=$4;
      var $25=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $23, tempValue);
      var $26=($25.f1 = $24, $25);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1($self, $arg0) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body31GetLinearVelocityFromLocalPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret8)>>2)]=HEAP32[(($16)>>2)];HEAP32[((_ret8+4)>>2)]=HEAP32[(($16+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret8;
    case 6: 
      var $18=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $19=$18.f0;
      $3=$19;
      var $20=$18.f1;
      $4=$20;
      ;
      __label__ = 7; break;
    case 7: 
      var $22=$3;
      var $23=$3;
      var $24=$4;
      var $25=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $23, tempValue);
      var $26=($25.f1 = $24, $25);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK6b2Body31GetLinearVelocityFromLocalPointERK6b2Vec2($agg_result, $this, $localPoint) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3=__stackBase__;
  $1=$this;
  $2=$localPoint;
  var $4=$1;
  var $5=$2;
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($3, $4, $5);
  __ZNK6b2Body31GetLinearVelocityFromWorldPointERK6b2Vec2($agg_result, $4, $3);
  STACKTOP = __stackBase__;
  return;
}


function _emscripten_bind_b2Body__GetContactList_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body14GetContactListEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetWorldPoint_p1($self, $arg0) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(__ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(__ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body13GetWorldPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret9)>>2)]=HEAP32[(($16)>>2)];HEAP32[((_ret9+4)>>2)]=HEAP32[(($16+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret9;
    case 6: 
      var $18=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $19=$18.f0;
      $3=$19;
      var $20=$18.f1;
      $4=$20;
      ;
      __label__ = 7; break;
    case 7: 
      var $22=$3;
      var $23=$3;
      var $24=$4;
      var $25=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $23, tempValue);
      var $26=($25.f1 = $24, $25);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__SetAwake_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body8SetAwakeEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2Body__GetLinearDamping_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body16GetLinearDampingEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__IsBullet_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body8IsBulletEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetWorld_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body8GetWorldEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetLocalVector_p1($self, $arg0) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(__ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(__ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret);
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body14GetLocalVectorERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret10)>>2)]=HEAP32[(($16)>>2)];HEAP32[((_ret10+4)>>2)]=HEAP32[(($16+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret10;
    case 6: 
      var $18=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $19=$18.f0;
      $3=$19;
      var $20=$18.f1;
      $4=$20;
      ;
      __label__ = 7; break;
    case 7: 
      var $22=$3;
      var $23=$3;
      var $24=$4;
      var $25=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $23, tempValue);
      var $26=($25.f1 = $24, $25);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__SetLinearDamping_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body16SetLinearDampingEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Body__Dump_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Body4DumpEv($2);
  ;
  return;
}


function _emscripten_bind_b2Body__SetBullet_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body9SetBulletEb($4, $6);
  ;
  return;
}


function _emscripten_bind_b2Body__GetType_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body7GetTypeEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__GetGravityScale_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body15GetGravityScaleEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__DestroyFixture_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body14DestroyFixtureEP9b2Fixture($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Body__GetInertia_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body10GetInertiaEv($2);
  ;
  return $3;
}


function __ZNK6b2Body10GetInertiaEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+124)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(($2+116)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($2+28)|0);
  var $8=(($7)|0);
  var $9=(($2+28)|0);
  var $10=(($9)|0);
  var $11=__Z5b2DotRK6b2Vec2S1_($8, $10);
  var $12=$6*$11;
  var $13=$4+$12;
  ;
  return $13;
}


function _emscripten_bind_b2Body__IsActive_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body8IsActiveEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Body__SetFixedRotation_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body16SetFixedRotationEb($4, $6);
  ;
  return;
}


function __ZN6b2Body16SetFixedRotationEb($this, $flag) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&1);
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAPU16[(($8)>>1)];
      var $10=(($9)&65535);
      var $11=$10 | 16;
      var $12=(($11) & 65535);
      HEAP16[(($8)>>1)]=$12;
      __label__ = 4; break;
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAPU16[(($14)>>1)];
      var $16=(($15)&65535);
      var $17=$16 & -17;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      __label__ = 4; break;
    case 4: 
      __ZN6b2Body13ResetMassDataEv($4);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__ApplyAngularImpulse_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body19ApplyAngularImpulseEf($3, $4);
  ;
  return;
}


function __ZN6b2Body19ApplyAngularImpulseEf($this, $impulse) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$impulse;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=2;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $9=__ZNK6b2Body7IsAwakeEv($3);
      var $10=(($9)&1);
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      __label__ = 5; break;
    case 5: 
      var $14=(($3+128)|0);
      var $15=HEAPF32[(($14)>>2)];
      var $16=$2;
      var $17=$15*$16;
      var $18=(($3+72)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$19+$17;
      HEAPF32[(($18)>>2)]=$20;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Body__GetPosition_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body11GetPositionEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2StackAllocator16GetMaxAllocationEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2StackAllocator____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2StackAllocatorD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    case 5: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $2=$12;
      var $13=$11.f1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      __label__ = 6; break;
    case 6: 
      var $16=$2;
      var $17=$2;
      var $18=$3;
      var $19=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $17, tempValue);
      var $20=($19.f1 = $18, $19);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2StackAllocator__b2StackAllocator_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(102800);
      var $4=$3;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN16b2StackAllocatorC1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2StackAllocator__Allocate_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN16b2StackAllocator8AllocateEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2StackAllocator__Free_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2StackAllocator4FreeEPv($3, $4);
  ;
  return;
}


function _emscripten_bind_b2DestructionListener__SayGoodbye_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  ;
  return;
}


function _emscripten_bind_b2Filter____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Filter__get_groupIndex_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP16[(($3)>>1)];
  ;
  return $4;
}


function _emscripten_bind_b2Filter__set_groupIndex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP16[(($5)>>1)]=$3;
  ;
  return;
}


function _emscripten_bind_b2Filter__get_maskBits_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+2)|0);
  var $4=HEAP16[(($3)>>1)];
  ;
  return $4;
}


function _emscripten_bind_b2Filter__get_categoryBits_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP16[(($3)>>1)];
  ;
  return $4;
}


function _emscripten_bind_b2FrictionJointDef__get_maxForce_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2FrictionJointDef__set_maxForce_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+40)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__get_linearDamping_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__get_awake_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+37)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2BodyDef__get_type_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__get_allowSleep_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2BodyDef__get_bullet_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+39)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2BodyDef__get_userData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__set_angularDamping_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+32)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_fixedRotation_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+38)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_allowSleep_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+36)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__get_gravityScale_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__set_angularVelocity_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+24)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_userData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__get_position_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  ;
  return $3;
}


function _emscripten_bind_b2BodyDef__set_type_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_gravityScale_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+48)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__get_angularDamping_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+32)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__set_bullet_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+39)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_active_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+40)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_angle_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__get_angle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__get_angularVelocity_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2BodyDef__get_linearVelocity_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  ;
  return $3;
}


function _emscripten_bind_b2BodyDef__get_active_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2BodyDef__set_linearDamping_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+28)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2BodyDef__get_fixedRotation_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+38)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2BodyDef__set_awake_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+37)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2Vec2__set_x_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2Vec2__get_x_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2Vec2__get_y_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2Vec2__set_y_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2Vec3__set_z_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2Vec3__get_z_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2Filter__b2Filter_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(6);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN8b2FilterC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2FrictionJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(44);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN18b2FrictionJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN18b2FrictionJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN18b2FrictionJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2FrictionJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN18b2FrictionJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_position_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2BodyDef__set_linearVelocity_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+16)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2BodyDef__b2BodyDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(52);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN9b2BodyDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN9b2BodyDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN9b2BodyDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2BodyDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec2__Normalize_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Vec29NormalizeEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Vec2__b2Vec2_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(8);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec2__b2Vec2_p2($arg0, $arg1) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$arg0;
      $2=$arg1;
      var $5=__Znwj(8);
      var $6=$5;
      var $7=$1;
      var $8=$2;
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Eff($6, $7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $6;
    case 3: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $3=$12;
      var $13=$11.f1;
      $4=$13;
      __ZdlPv($5);
      __label__ = 4; break;
    case 4: 
      var $15=$3;
      var $16=$3;
      var $17=$4;
      var $18=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $16, tempValue);
      var $19=($18.f1 = $17, $18);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec2__Set_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Vec23SetEff($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2Vec2__IsValid_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Vec27IsValidEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Vec2__Skew_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Vec24SkewEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret11)>>2)]=HEAP32[(($14)>>2)];HEAP32[((_ret11+4)>>2)]=HEAP32[(($14+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret11;
    case 6: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      ;
      __label__ = 7; break;
    case 7: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec2__LengthSquared_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Vec213LengthSquaredEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Vec2__op_add_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec2pLERKS_($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Vec2__SetZero_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Vec27SetZeroEv($2);
  ;
  return;
}


function _emscripten_bind_b2Vec2__Length_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Vec26LengthEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2Vec2____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec2__op_mul_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec2mLEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Vec2__op_sub_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Vec2ngEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret12)>>2)]=HEAP32[(($14)>>2)];HEAP32[((_ret12+4)>>2)]=HEAP32[(($14+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret12;
    case 6: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      ;
      __label__ = 7; break;
    case 7: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec3____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec3__Set_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN6b2Vec33SetEfff($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2Vec3__op_add_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec3pLERKS_($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Vec3__SetZero_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Vec37SetZeroEv($2);
  ;
  return;
}


function _emscripten_bind_b2Vec3__b2Vec3_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(12);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN6b2Vec3C1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec3__b2Vec3_p3($arg0, $arg1, $arg2) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$arg0;
      $2=$arg1;
      $3=$arg2;
      var $6=__Znwj(12);
      var $7=$6;
      var $8=$1;
      var $9=$2;
      var $10=$3;
      (function() { try { __THREW__ = false; return __ZN6b2Vec3C1Efff($7, $8, $9, $10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $7;
    case 3: 
      var $13=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $14=$13.f0;
      $4=$14;
      var $15=$13.f1;
      $5=$15;
      __ZdlPv($6);
      __label__ = 4; break;
    case 4: 
      var $17=$4;
      var $18=$4;
      var $19=$5;
      var $20=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $18, tempValue);
      var $21=($20.f1 = $19, $20);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Vec3__op_mul_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec3mLEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2DistanceProxy__get_m_radius_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2DistanceProxy__set_m_radius_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+24)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2DistanceProxy__get_m_vertices_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2DistanceProxy__get_m_count_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function __ZNK15b2DistanceProxy14GetVertexCountEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2DistanceProxy__set_m_vertices_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+16)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2DistanceProxy__set_m_count_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+20)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FixtureDef__get_isSensor_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2FixtureDef__set_userData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FixtureDef__set_shape_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FixtureDef__get_density_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2FixtureDef__get_shape_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2FixtureDef__set_density_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+16)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FixtureDef__set_restitution_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FixtureDef__get_restitution_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2FixtureDef__set_isSensor_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+20)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2FixtureDef__get_filter_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+22)|0);
  ;
  return $3;
}


function _emscripten_bind_b2FixtureDef__get_friction_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2FixtureDef__set_friction_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2FixtureDef__get_userData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+48)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+68)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  ;
  return $3;
}


function _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+52)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+64)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+60)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2Rot__set_c_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function __ZN5b2Rot11SetIdentityEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAPF32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAPF32[(($4)>>2)]=1;
  ;
  return;
}


function _emscripten_bind_b2Rot__get_c_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2Vec3__op_sub_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec3C1Ev(_ret13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Vec3ngEv($4, $13);
      var $14=$4;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((_ret13+4)>>2)]=HEAP32[(($14+4)>>2)];HEAP32[((_ret13+8)>>2)]=HEAP32[(($14+8)>>2)];
      STACKTOP = __stackBase__;
      return _ret13;
    case 6: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      ;
      __label__ = 7; break;
    case 7: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2DistanceProxy__Set_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(28);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN15b2DistanceProxyC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2DistanceProxy____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2DistanceProxy__GetSupportVertex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK15b2DistanceProxy16GetSupportVertexERK6b2Vec2($3, $4);
  ;
  return $5;
}


function __ZNK15b2DistanceProxy16GetSupportVertexERK6b2Vec2($this, $d) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $bestIndex;
      var $bestValue;
      var $i;
      var $value;
      $1=$this;
      $2=$d;
      var $3=$1;
      $bestIndex=0;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=$2;
      var $8=__Z5b2DotRK6b2Vec2S1_($6, $7);
      $bestValue=$8;
      $i=1;
      __label__ = 2; break;
    case 2: 
      var $10=$i;
      var $11=(($3+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|0) < (($12)|0);
      if ($13) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $15=$i;
      var $16=(($3+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<3))|0);
      var $19=$2;
      var $20=__Z5b2DotRK6b2Vec2S1_($18, $19);
      $value=$20;
      var $21=$value;
      var $22=$bestValue;
      var $23=$21 > $22;
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $25=$i;
      $bestIndex=$25;
      var $26=$value;
      $bestValue=$26;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $29=$i;
      var $30=(($29+1)|0);
      $i=$30;
      __label__ = 2; break;
    case 7: 
      var $32=$bestIndex;
      var $33=(($3+16)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+($32<<3))|0);
      ;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2DistanceProxy__GetVertexCount_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2DistanceProxy14GetVertexCountEv($2);
  ;
  return $3;
}


function _emscripten_bind_b2DistanceProxy__GetVertex_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK15b2DistanceProxy9GetVertexEi($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2DistanceProxy__GetSupport_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($3, $4);
  ;
  return $5;
}


function _emscripten_bind_b2FixtureDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2FixtureDef__b2FixtureDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(28);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN12b2FixtureDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2FixtureDef__set_filter_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+22)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(6 % 1 === 0, 'memcpy given ' + 6 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($6)>>1)]=HEAP16[(($7)>>1)];HEAP16[(($6+2)>>1)]=HEAP16[(($7+2)>>1)];HEAP16[(($6+4)>>1)]=HEAP16[(($7+4)>>1)];
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(72);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN19b2PrismaticJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN19b2PrismaticJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN19b2PrismaticJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN19b2PrismaticJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($6, $7, $8, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2PrismaticJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2Rot____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Rot__Set_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN5b2Rot3SetEf($3, $4);
  ;
  return;
}


function _emscripten_bind_b2Rot__GetAngle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK5b2Rot8GetAngleEv($2);
  ;
  return $3;
}


function __ZNK5b2Rot8GetAngleEv($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $2=__stackBase__+4;
  var $3;
  $3=$this;
  var $4=$3;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($4+4)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$1;
  var $10=$2;
  HEAPF32[(($1)>>2)]=$6;
  HEAPF32[(($2)>>2)]=$8;
  var $11=HEAPF32[(($1)>>2)];
  var $12=HEAPF32[(($2)>>2)];
  var $13=_atan2f($11, $12);
  var $14=$1;
  var $15=$2;
  STACKTOP = __stackBase__;
  return $13;
}


function _emscripten_bind_b2Rot__GetYAxis_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      __ZNK5b2Rot8GetYAxisEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret14)>>2)]=HEAP32[(($14)>>2)];HEAP32[((_ret14+4)>>2)]=HEAP32[(($14+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret14;
    case 6: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      ;
      __label__ = 7; break;
    case 7: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK5b2Rot8GetYAxisEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  __ZN6b2Vec2C1Eff($agg_result, $5, $7);
  ;
  return;
}


function _emscripten_bind_b2Rot__GetXAxis_p0($self) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(__ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(__ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      (function() { try { __THREW__ = false; return __ZN6b2Vec2C1Ev(_ret15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      ;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      __ZNK5b2Rot8GetXAxisEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[((_ret15)>>2)]=HEAP32[(($14)>>2)];HEAP32[((_ret15+4)>>2)]=HEAP32[(($14+4)>>2)];
      STACKTOP = __stackBase__;
      return _ret15;
    case 6: 
      var $16=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $17=$16.f0;
      $2=$17;
      var $18=$16.f1;
      $3=$18;
      ;
      __label__ = 7; break;
    case 7: 
      var $20=$2;
      var $21=$2;
      var $22=$3;
      var $23=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $21, tempValue);
      var $24=($23.f1 = $22, $23);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK5b2Rot8GetXAxisEv($agg_result, $this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(($2)|0);
  var $6=HEAPF32[(($5)>>2)];
  __ZN6b2Vec2C1Eff($agg_result, $4, $6);
  ;
  return;
}


function _emscripten_bind_b2Rot__SetIdentity_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN5b2Rot11SetIdentityEv($2);
  ;
  return;
}


function _emscripten_bind_b2Rot__b2Rot_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(8);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN5b2RotC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Rot__b2Rot_p1($arg0) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(8);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = false; return __ZN5b2RotC1Ef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $5;
    case 3: 
      var $9=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $10=$9.f0;
      $2=$10;
      var $11=$9.f1;
      $3=$11;
      __ZdlPv($4);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+52)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__get_localAxisA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  ;
  return $3;
}


function _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+48)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__get_enableMotor_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2WheelJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2WheelJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2WheelJointDef__set_enableMotor_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+44)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+48)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+40)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+52)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PulleyJointDef__get_ratio_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PulleyJointDef__get_lengthB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PulleyJointDef__get_lengthA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  ;
  return $3;
}


function _emscripten_bind_b2PulleyJointDef__set_ratio_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  ;
  return $3;
}


function _emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2PulleyJointDef__set_lengthB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__set_lengthA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+52)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2JointDef__get_bodyA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2JointDef__set_userData_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2JointDef__set_bodyA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2JointDef__set_bodyB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2JointDef__get_bodyB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2JointDef__set_type_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2JointDef__get_collideConnected_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  ;
  return $5;
}


function _emscripten_bind_b2JointDef__get_type_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2JointDef__set_collideConnected_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&1);
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+16)|0);
  var $8=(($5)&1);
  HEAP8[($7)]=$8;
  ;
  return;
}


function _emscripten_bind_b2JointDef__get_userData_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2Transform__get_p_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  ;
  return $3;
}


function _emscripten_bind_b2Transform__get_q_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  ;
  return $3;
}


function _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2WheelJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN15b2WheelJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($6, $7, $8, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(64);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN15b2WheelJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2WheelJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2WheelJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2WheelJointDef__set_localAxisA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(64);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN18b2RevoluteJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN18b2RevoluteJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN18b2RevoluteJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2RevoluteJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN18b2RevoluteJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(64);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN16b2PulleyJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN16b2PulleyJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2PulleyJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2PulleyJointDef__Initialize_p7($self, $arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  $6=$arg4;
  $7=$arg5;
  $8=$arg6;
  var $9=$1;
  var $10=$2;
  var $11=$3;
  var $12=$4;
  var $13=$5;
  var $14=$6;
  var $15=$7;
  var $16=$8;
  __ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f($9, $10, $11, $12, $13, $14, $15, $16);
  ;
  return;
}


function _emscripten_bind_b2JointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2JointDef__b2JointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(20);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN10b2JointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10b2JointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2JointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2Transform____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Transform__Set_p2($self, $arg0, $arg1) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN11b2Transform3SetERK6b2Vec2f($4, $5, $6);
  ;
  return;
}


function __ZN11b2Transform3SetERK6b2Vec2f($this, $position, $angle) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$position;
  $3=$angle;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$5;
  var $8=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[(($7+4)>>2)]=HEAP32[(($8+4)>>2)];
  var $9=(($4+8)|0);
  var $10=$3;
  __ZN5b2Rot3SetEf($9, $10);
  ;
  return;
}


function _emscripten_bind_b2Transform__set_p_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2Transform__set_q_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2Transform__b2Transform_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(16);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN11b2TransformC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Transform__b2Transform_p2($arg0, $arg1) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$arg0;
      $2=$arg1;
      var $5=__Znwj(16);
      var $6=$5;
      var $7=$1;
      var $8=$2;
      (function() { try { __THREW__ = false; return __ZN11b2TransformC1ERK6b2Vec2RK5b2Rot($6, $7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $6;
    case 3: 
      var $11=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $12=$11.f0;
      $3=$12;
      var $13=$11.f1;
      $4=$13;
      __ZdlPv($5);
      __label__ = 4; break;
    case 4: 
      var $15=$3;
      var $16=$3;
      var $17=$4;
      var $18=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $16, tempValue);
      var $19=($18.f1 = $17, $18);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2ColorC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return;
}


function _emscripten_bind_b2Color__set_b_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function __ZN7b2Color3SetEfff($this, $ri, $gi, $bi) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$ri;
  $3=$gi;
  $4=$bi;
  var $5=$1;
  var $6=$2;
  var $7=(($5)|0);
  HEAPF32[(($7)>>2)]=$6;
  var $8=$3;
  var $9=(($5+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  var $10=$4;
  var $11=(($5+8)|0);
  HEAPF32[(($11)>>2)]=$10;
  ;
  return;
}


function _emscripten_bind_b2Color__get_b_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2WeldJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2WeldJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+40)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+32)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2MouseJointDef__get_maxForce_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2MouseJointDef__set_maxForce_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+28)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2MouseJointDef__get_target_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+32)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2DistanceJointDef__get_length_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2DistanceJointDef__set_length_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+40)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2GearJointDef__set_joint1_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+20)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2GearJointDef__set_joint2_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+24)|0);
  HEAP32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2GearJointDef__set_ratio_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+28)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function _emscripten_bind_b2GearJointDef__get_joint1_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2GearJointDef__get_joint2_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAP32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2GearJointDef__get_ratio_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2RopeJointDef__get_maxLength_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  ;
  return $4;
}


function _emscripten_bind_b2RopeJointDef__get_localAnchorA_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  ;
  return $3;
}


function _emscripten_bind_b2RopeJointDef__get_localAnchorB_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  ;
  return $3;
}


function _emscripten_bind_b2RopeJointDef__set_maxLength_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  ;
  return;
}


function __ZN10b2JointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+12)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+16)|0);
  HEAP8[($7)]=0;
  ;
  return;
}


function __ZN11b2TransformC1ERK6b2Vec2RK5b2Rot($this, $position, $rotation) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$position;
  $3=$rotation;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN11b2TransformC2ERK6b2Vec2RK5b2Rot($4, $5, $6);
  ;
  return;
}


function _emscripten_bind_b2Transform__SetIdentity_p0($self) {
  ;
  var __label__;

  var $1;
  $1=$self;
  var $2=$1;
  __ZN11b2Transform11SetIdentityEv($2);
  ;
  return;
}


function __ZN11b2Transform11SetIdentityEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec27SetZeroEv($3);
  var $4=(($2+8)|0);
  __ZN5b2Rot11SetIdentityEv($4);
  ;
  return;
}


function _emscripten_bind_b2Color____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2Color__Set_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN7b2Color3SetEfff($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2Color__b2Color_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(12);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN7b2ColorC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN7b2ColorC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2ColorC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2Color__b2Color_p3($arg0, $arg1, $arg2) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$arg0;
      $2=$arg1;
      $3=$arg2;
      var $6=__Znwj(12);
      var $7=$6;
      var $8=$1;
      var $9=$2;
      var $10=$3;
      (function() { try { __THREW__ = false; return __ZN7b2ColorC1Efff($7, $8, $9, $10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $7;
    case 3: 
      var $13=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $14=$13.f0;
      $4=$14;
      var $15=$13.f1;
      $5=$15;
      __ZdlPv($6);
      __label__ = 4; break;
    case 4: 
      var $17=$4;
      var $18=$4;
      var $19=$5;
      var $20=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $18, tempValue);
      var $21=($20.f1 = $19, $20);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2WeldJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2WeldJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN14b2WeldJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($5, $6, $7, $8);
  ;
  return;
}


function _emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(48);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN14b2WeldJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2WeldJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2WeldJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2MouseJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(40);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN15b2MouseJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN15b2MouseJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2MouseJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2MouseJointDef__set_target_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2DistanceJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(48);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN18b2DistanceJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN18b2DistanceJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN18b2DistanceJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2DistanceJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($6, $7, $8, $9, $10);
  ;
  return;
}


function _emscripten_bind_b2GearJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2GearJointDef__b2GearJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(32);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN14b2GearJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2GearJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2GearJointDefC2Ev($2);
  ;
  return;
}


function _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2RopeJointDef____destroy___p0($self) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1($self, $arg0) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[(($6+4)>>2)]=HEAP32[(($7+4)>>2)];
  ;
  return;
}


function _emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(40);
      var $4=$3;
      (function() { try { __THREW__ = false; return __ZN14b2RopeJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $4;
    case 3: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $8=$7.f0;
      $1=$8;
      var $9=$7.f1;
      $2=$9;
      __ZdlPv($3);
      __label__ = 4; break;
    case 4: 
      var $11=$1;
      var $12=$1;
      var $13=$2;
      var $14=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $12, tempValue);
      var $15=($14.f1 = $13, $14);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN14b2RopeJointDefC1Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2RopeJointDefC2Ev($2);
  ;
  return;
}


function __ZN14b2RopeJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=10;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, -1, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 1, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  ;
  return;
}


function __ZN14b2GearJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=$2;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=6;
  var $6=(($2+20)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+24)|0);
  HEAP32[(($7)>>2)]=0;
  var $8=(($2+28)|0);
  HEAPF32[(($8)>>2)]=1;
  ;
  return;
}


function __ZN18b2DistanceJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=3;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 0, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=1;
  var $11=(($2+40)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+44)|0);
  HEAPF32[(($12)>>2)]=0;
  ;
  return;
}


function __ZN15b2MouseJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=$2;
  var $6=(($5)|0);
  HEAP32[(($6)>>2)]=5;
  var $7=(($2+20)|0);
  __ZN6b2Vec23SetEff($7, 0, 0);
  var $8=(($2+28)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=(($2+32)|0);
  HEAPF32[(($9)>>2)]=5;
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0.699999988079071;
  ;
  return;
}


function __ZN14b2WeldJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=8;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 0, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+40)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+44)|0);
  HEAPF32[(($12)>>2)]=0;
  ;
  return;
}


function __ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  var $4;
  $2=$this;
  $3=$thrown_type;
  $4=$0;
  var $5=$2;
  ;
  return 0;
}


function __ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  var $4;
  $2=$this;
  $3=$thrown_type;
  $4=$0;
  var $5=$2;
  ;
  return 0;
}


function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  var $4;
  $2=$this;
  $3=$thrown_type;
  $4=$0;
  var $5=$2;
  var $6=$5;
  var $7=$3;
  var $8=(($6)|0)==(($7)|0);
  ;
  return $8;
}


function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  var $4;
  $2=$this;
  $3=$thrown_type;
  $4=$0;
  var $5=$2;
  var $6=$5;
  var $7=$3;
  var $8=(($6)|0)==(($7)|0);
  ;
  return $8;
}


function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+16)|0);
      HEAP32[(($13)>>2)]=$11;
      var $14=$4;
      var $15=$2;
      var $16=(($15+24)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$2;
      var $18=(($17+36)|0);
      HEAP32[(($18)>>2)]=1;
      __label__ = 9; break;
    case 3: 
      var $20=$2;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$3;
      var $24=(($22)|0)==(($23)|0);
      if ($24) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $26=$2;
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==2;
      if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $31=$4;
      var $32=$2;
      var $33=(($32+24)|0);
      HEAP32[(($33)>>2)]=$31;
      __label__ = 6; break;
    case 6: 
      __label__ = 8; break;
    case 7: 
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+1)|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$2;
      var $41=(($40+24)|0);
      HEAP32[(($41)>>2)]=2;
      var $42=$2;
      var $43=(($42+54)|0);
      HEAP8[($43)]=1;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN11b2TransformC2ERK6b2Vec2RK5b2Rot($this, $position, $rotation) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$position;
  $3=$rotation;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$5;
  var $8=$6;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[(($7+4)>>2)]=HEAP32[(($8+4)>>2)];
  var $9=(($4+8)|0);
  var $10=$3;
  var $11=$9;
  var $12=$10;
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[(($11+4)>>2)]=HEAP32[(($12+4)>>2)];
  ;
  return;
}


function __ZN16b2PulleyJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+36)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=(($2+44)|0);
  __ZN6b2Vec2C1Ev($7);
  var $8=$2;
  var $9=(($8)|0);
  HEAP32[(($9)>>2)]=4;
  var $10=(($2+20)|0);
  __ZN6b2Vec23SetEff($10, -1, 1);
  var $11=(($2+28)|0);
  __ZN6b2Vec23SetEff($11, 1, 1);
  var $12=(($2+36)|0);
  __ZN6b2Vec23SetEff($12, -1, 0);
  var $13=(($2+44)|0);
  __ZN6b2Vec23SetEff($13, 1, 0);
  var $14=(($2+52)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+56)|0);
  HEAPF32[(($15)>>2)]=0;
  var $16=(($2+60)|0);
  HEAPF32[(($16)>>2)]=1;
  var $17=$2;
  var $18=(($17+16)|0);
  HEAP8[($18)]=1;
  ;
  return;
}


function __ZN18b2RevoluteJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=1;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 0, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+44)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+48)|0);
  HEAPF32[(($12)>>2)]=0;
  var $13=(($2+60)|0);
  HEAPF32[(($13)>>2)]=0;
  var $14=(($2+56)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+40)|0);
  HEAP8[($15)]=0;
  var $16=(($2+52)|0);
  HEAP8[($16)]=0;
  ;
  return;
}


function __ZN15b2WheelJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+36)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=$2;
  var $8=(($7)|0);
  HEAP32[(($8)>>2)]=7;
  var $9=(($2+20)|0);
  __ZN6b2Vec27SetZeroEv($9);
  var $10=(($2+28)|0);
  __ZN6b2Vec27SetZeroEv($10);
  var $11=(($2+36)|0);
  __ZN6b2Vec23SetEff($11, 1, 0);
  var $12=(($2+44)|0);
  HEAP8[($12)]=0;
  var $13=(($2+48)|0);
  HEAPF32[(($13)>>2)]=0;
  var $14=(($2+52)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+56)|0);
  HEAPF32[(($15)>>2)]=2;
  var $16=(($2+60)|0);
  HEAPF32[(($16)>>2)]=0.699999988079071;
  ;
  return;
}


function __ZN19b2PrismaticJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+36)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=$2;
  var $8=(($7)|0);
  HEAP32[(($8)>>2)]=2;
  var $9=(($2+20)|0);
  __ZN6b2Vec27SetZeroEv($9);
  var $10=(($2+28)|0);
  __ZN6b2Vec27SetZeroEv($10);
  var $11=(($2+36)|0);
  __ZN6b2Vec23SetEff($11, 1, 0);
  var $12=(($2+44)|0);
  HEAPF32[(($12)>>2)]=0;
  var $13=(($2+48)|0);
  HEAP8[($13)]=0;
  var $14=(($2+52)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+56)|0);
  HEAPF32[(($15)>>2)]=0;
  var $16=(($2+60)|0);
  HEAP8[($16)]=0;
  var $17=(($2+64)|0);
  HEAPF32[(($17)>>2)]=0;
  var $18=(($2+68)|0);
  HEAPF32[(($18)>>2)]=0;
  ;
  return;
}


function __ZN9b2BodyDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+16)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+44)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+4)|0);
  __ZN6b2Vec23SetEff($6, 0, 0);
  var $7=(($2+12)|0);
  HEAPF32[(($7)>>2)]=0;
  var $8=(($2+16)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+24)|0);
  HEAPF32[(($9)>>2)]=0;
  var $10=(($2+28)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+32)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+36)|0);
  HEAP8[($12)]=1;
  var $13=(($2+37)|0);
  HEAP8[($13)]=1;
  var $14=(($2+38)|0);
  HEAP8[($14)]=0;
  var $15=(($2+39)|0);
  HEAP8[($15)]=0;
  var $16=(($2)|0);
  HEAP32[(($16)>>2)]=0;
  var $17=(($2+40)|0);
  HEAP8[($17)]=1;
  var $18=(($2+48)|0);
  HEAPF32[(($18)>>2)]=1;
  ;
  return;
}


function __ZN18b2FrictionJointDefC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=9;
  var $8=(($2+20)|0);
  __ZN6b2Vec27SetZeroEv($8);
  var $9=(($2+28)|0);
  __ZN6b2Vec27SetZeroEv($9);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+40)|0);
  HEAPF32[(($11)>>2)]=0;
  ;
  return;
}


function __ZN10__cxxabiv116__shim_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv116__shim_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZNSt9type_infoD2Ev($3);
  ;
  return;
}


function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv123__fundamental_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv117__array_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv117__array_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv120__function_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv120__function_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv116__enum_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv116__enum_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv117__class_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv120__si_class_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv121__vmi_class_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv117__pbase_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv117__pbase_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv119__pointer_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev($this) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[__ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      ;
      return;
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0;
      $2=$9;
      var $10=$8.f1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      __label__ = 4; break;
    case 4: 
      var $13=$2;
      var $14=$2;
      var $15=$3;
      var $16=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $14, tempValue);
      var $17=($16.f1 = $15, $16);
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)];
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $thrown_class_type;
      var $info=__stackBase__;
      $2=$this;
      $3=$thrown_type;
      $4=$adjustedPtr;
      var $5=$2;
      var $6=$5;
      var $7=$3;
      var $8=(($6)|0)==(($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=1;
      __label__ = 11; break;
    case 3: 
      var $11=$3;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $14=$11;
      var $15=___dynamic_cast($14, __ZTIN10__cxxabiv116__shim_type_infoE, __ZTIN10__cxxabiv117__class_type_infoE, -1);
      var $16=$15;
      var $19 = $16;__label__ = 6; break;
    case 5: 
      var $19 = 0;__label__ = 6; break;
    case 6: 
      var $19;
      $thrown_class_type=$19;
      var $20=$thrown_class_type;
      var $21=(($20)|0)==0;
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 11; break;
    case 8: 
      var $24=$info;
      for (var $$dest = $24>>2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $25=(($info)|0);
      var $26=$thrown_class_type;
      HEAP32[(($25)>>2)]=$26;
      var $27=(($info+8)|0);
      HEAP32[(($27)>>2)]=$5;
      var $28=(($info+12)|0);
      HEAP32[(($28)>>2)]=-1;
      var $29=(($info+48)|0);
      HEAP32[(($29)>>2)]=1;
      var $30=$thrown_class_type;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$4;
      var $36=HEAP32[(($35)>>2)];
      FUNCTION_TABLE[$34]($30, $info, $36, 1);
      var $37=(($info+24)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|0)==1;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $41=(($info+16)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$4;
      HEAP32[(($43)>>2)]=$42;
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $46=$1;
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)|0)==(($8)|0);
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$2;
      var $12=$3;
      var $13=$4;
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($5, $11, $12, $13);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0)==(($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$5;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($12, $13, $14, $15);
      __label__ = 4; break;
    case 3: 
      var $17=(($5+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$2;
      var $24=$3;
      var $25=$4;
      FUNCTION_TABLE[$22]($18, $23, $24, $25);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $offset_to_base;
      var $vtable;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 >> 8;
      $offset_to_base=$8;
      var $9=(($5+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 & 1;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $14=$3;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      $vtable=$16;
      var $17=$vtable;
      var $18=$offset_to_base;
      var $19=(($17+$18)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      $offset_to_base=$21;
      __label__ = 3; break;
    case 3: 
      var $23=(($5)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=$3;
      var $31=$offset_to_base;
      var $32=(($30+$31)|0);
      var $33=(($5+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 & 2;
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $38=$4;
      var $41 = $38;__label__ = 6; break;
    case 5: 
      var $41 = 2;__label__ = 6; break;
    case 6: 
      var $41;
      FUNCTION_TABLE[$28]($24, $29, $32, $41);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $2;
      var $3;
      var $4;
      var $5;
      $3=$this;
      $4=$thrown_type;
      $5=$0;
      var $6=$3;
      var $7=$6;
      var $8=$4;
      var $9=(($7)|0)==(($8)|0);
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $2=1;
      __label__ = 4; break;
    case 3: 
      var $12=$4;
      var $13=$12;
      var $14=(($13)|0)==((__ZTINSt3__19nullptr_tE)|0);
      $2=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$2;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $6=$1;
      var $7=$2;
      var $8=(($7+53)|0);
      HEAP8[($8)]=1;
      var $9=$4;
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)|0)==(($12)|0);
      if ($13) { __label__ = 2; break; } else { __label__ = 17; break; }
    case 2: 
      var $15=$2;
      var $16=(($15+52)|0);
      HEAP8[($16)]=1;
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)==0;
      if ($20) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $22=$3;
      var $23=$2;
      var $24=(($23+16)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$5;
      var $26=$2;
      var $27=(($26+24)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=(($28+36)|0);
      HEAP32[(($29)>>2)]=1;
      var $30=$2;
      var $31=(($30+48)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0)==1;
      if ($33) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)==1;
      if ($38) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $40=$2;
      var $41=(($40+54)|0);
      HEAP8[($41)]=1;
      __label__ = 6; break;
    case 6: 
      __label__ = 16; break;
    case 7: 
      var $44=$2;
      var $45=(($44+16)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$3;
      var $48=(($46)|0)==(($47)|0);
      if ($48) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      var $50=$2;
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|0)==2;
      if ($53) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $55=$5;
      var $56=$2;
      var $57=(($56+24)|0);
      HEAP32[(($57)>>2)]=$55;
      __label__ = 10; break;
    case 10: 
      var $59=$2;
      var $60=(($59+48)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|0)==1;
      if ($62) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|0)==1;
      if ($67) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $69=$2;
      var $70=(($69+54)|0);
      HEAP8[($70)]=1;
      __label__ = 13; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $73=$2;
      var $74=(($73+36)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+1)|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=$2;
      var $78=(($77+54)|0);
      HEAP8[($78)]=1;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $5=$1;
      var $6=$3;
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0)==(($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $12=$2;
      var $13=(($12+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)!=1;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17=$4;
      var $18=$2;
      var $19=(($18+28)|0);
      HEAP32[(($19)>>2)]=$17;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $e;
      var $p;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0)==(($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$5;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($12, $13, $14, $15);
      __label__ = 11; break;
    case 3: 
      var $17=(($5+16)|0);
      var $18=(($17)|0);
      var $19=(($5+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($18+($20<<3))|0);
      $e=$21;
      var $22=(($5+16)|0);
      var $23=(($22)|0);
      $p=$23;
      var $24=$p;
      var $25=$2;
      var $26=$3;
      var $27=$4;
      __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($24, $25, $26, $27);
      var $28=$p;
      var $29=(($28+8)|0);
      $p=$29;
      var $30=$e;
      var $31=(($29)>>>0) < (($30)>>>0);
      if ($31) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $34=$p;
      var $35=$2;
      var $36=$3;
      var $37=$4;
      __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($34, $35, $36, $37);
      var $38=$2;
      var $39=(($38+54)|0);
      var $40=HEAP8[($39)];
      var $41=(($40) & 1);
      if ($41) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 9; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $45=$p;
      var $46=(($45+8)|0);
      $p=$46;
      var $47=$e;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $thrown_pointer_type;
      var $catch_class_type;
      var $thrown_class_type;
      var $info=__stackBase__;
      $2=$this;
      $3=$thrown_type;
      $4=$adjustedPtr;
      var $5=$2;
      var $6=$4;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$4;
      HEAP32[(($10)>>2)]=$9;
      var $11=$5;
      var $12=$3;
      var $13=$4;
      var $14=__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($11, $12, $13);
      if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=1;
      __label__ = 27; break;
    case 3: 
      var $17=$3;
      var $18=(($17)|0)==0;
      if ($18) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $20=$17;
      var $21=___dynamic_cast($20, __ZTIN10__cxxabiv116__shim_type_infoE, __ZTIN10__cxxabiv119__pointer_type_infoE, -1);
      var $22=$21;
      var $25 = $22;__label__ = 6; break;
    case 5: 
      var $25 = 0;__label__ = 6; break;
    case 6: 
      var $25;
      $thrown_pointer_type=$25;
      var $26=$thrown_pointer_type;
      var $27=(($26)|0)==0;
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 27; break;
    case 8: 
      var $30=$thrown_pointer_type;
      var $31=$30;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$5;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 ^ -1;
      var $38=$33 & $37;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=0;
      __label__ = 27; break;
    case 10: 
      var $42=$5;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$thrown_pointer_type;
      var $46=$45;
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($44)|0)==(($48)|0);
      if ($49) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=1;
      __label__ = 27; break;
    case 12: 
      var $52=$5;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      var $56=(($55)|0)==((__ZTIv)|0);
      if ($56) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=1;
      __label__ = 27; break;
    case 14: 
      var $59=$5;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|0)==0;
      if ($62) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $64=$61;
      var $65=___dynamic_cast($64, __ZTIN10__cxxabiv116__shim_type_infoE, __ZTIN10__cxxabiv117__class_type_infoE, -1);
      var $66=$65;
      var $69 = $66;__label__ = 17; break;
    case 16: 
      var $69 = 0;__label__ = 17; break;
    case 17: 
      var $69;
      $catch_class_type=$69;
      var $70=$catch_class_type;
      var $71=(($70)|0)==0;
      if ($71) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $1=0;
      __label__ = 27; break;
    case 19: 
      var $74=$thrown_pointer_type;
      var $75=$74;
      var $76=(($75+12)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|0)==0;
      if ($78) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $80=$77;
      var $81=___dynamic_cast($80, __ZTIN10__cxxabiv116__shim_type_infoE, __ZTIN10__cxxabiv117__class_type_infoE, -1);
      var $82=$81;
      var $85 = $82;__label__ = 22; break;
    case 21: 
      var $85 = 0;__label__ = 22; break;
    case 22: 
      var $85;
      $thrown_class_type=$85;
      var $86=$thrown_class_type;
      var $87=(($86)|0)==0;
      if ($87) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      $1=0;
      __label__ = 27; break;
    case 24: 
      var $90=$info;
      for (var $$dest = $90>>2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $91=(($info)|0);
      var $92=$thrown_class_type;
      HEAP32[(($91)>>2)]=$92;
      var $93=(($info+8)|0);
      var $94=$catch_class_type;
      HEAP32[(($93)>>2)]=$94;
      var $95=(($info+12)|0);
      HEAP32[(($95)>>2)]=-1;
      var $96=(($info+48)|0);
      HEAP32[(($96)>>2)]=1;
      var $97=$thrown_class_type;
      var $98=$97;
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$4;
      var $103=HEAP32[(($102)>>2)];
      FUNCTION_TABLE[$101]($97, $info, $103, 1);
      var $104=(($info+24)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0)==1;
      if ($106) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $108=(($info+16)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$4;
      HEAP32[(($110)>>2)]=$109;
      $1=1;
      __label__ = 27; break;
    case 26: 
      $1=0;
      __label__ = 27; break;
    case 27: 
      var $113=$1;
      STACKTOP = __stackBase__;
      return $113;
    default: assert(0, "bad label: " + __label__);
  }
}


function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vtable;
      var $offset_to_derived;
      var $dynamic_ptr;
      var $dynamic_type;
      var $dst_ptr;
      var $info=__stackBase__;
      $1=$static_ptr;
      $2=$static_type;
      $3=$dst_type;
      $4=$src2dst_offset;
      var $5=$1;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      $vtable=$7;
      var $8=$vtable;
      var $9=(($8-8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $offset_to_derived=$11;
      var $12=$1;
      var $13=$offset_to_derived;
      var $14=(($12+$13)|0);
      $dynamic_ptr=$14;
      var $15=$vtable;
      var $16=(($15-4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      $dynamic_type=$18;
      $dst_ptr=0;
      var $19=(($info)|0);
      var $20=$3;
      HEAP32[(($19)>>2)]=$20;
      var $21=(($info+4)|0);
      var $22=$1;
      HEAP32[(($21)>>2)]=$22;
      var $23=(($info+8)|0);
      var $24=$2;
      HEAP32[(($23)>>2)]=$24;
      var $25=(($info+12)|0);
      var $26=$4;
      HEAP32[(($25)>>2)]=$26;
      var $27=(($info+16)|0);
      HEAP32[(($27)>>2)]=0;
      var $28=(($info+20)|0);
      HEAP32[(($28)>>2)]=0;
      var $29=(($info+24)|0);
      HEAP32[(($29)>>2)]=0;
      var $30=(($info+28)|0);
      HEAP32[(($30)>>2)]=0;
      var $31=(($info+32)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=(($info+36)|0);
      HEAP32[(($32)>>2)]=0;
      var $33=(($info+40)|0);
      HEAP32[(($33)>>2)]=0;
      var $34=(($info+44)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=(($info+48)|0);
      HEAP32[(($35)>>2)]=0;
      var $36=(($info+52)|0);
      HEAP8[($36)]=0;
      var $37=(($info+53)|0);
      HEAP8[($37)]=0;
      var $38=(($info+54)|0);
      HEAP8[($38)]=0;
      var $39=$dynamic_type;
      var $40=$3;
      var $41=(($39)|0)==(($40)|0);
      if ($41) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $43=(($info+48)|0);
      HEAP32[(($43)>>2)]=1;
      var $44=$dynamic_type;
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$dynamic_ptr;
      var $50=$dynamic_ptr;
      FUNCTION_TABLE[$48]($44, $info, $49, $50, 1);
      var $51=(($info+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|0)==1;
      if ($53) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $55=$dynamic_ptr;
      $dst_ptr=$55;
      __label__ = 4; break;
    case 4: 
      __label__ = 18; break;
    case 5: 
      var $58=$dynamic_type;
      var $59=$58;
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+16)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$dynamic_ptr;
      FUNCTION_TABLE[$62]($58, $info, $63, 1);
      var $64=(($info+36)|0);
      var $65=HEAP32[(($64)>>2)];
      if ((($65)|0) == 0) {
        __label__ = 6; break;
      }
      else if ((($65)|0) == 1) {
        __label__ = 11; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 6: 
      var $67=(($info+40)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|0)==1;
      if ($69) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $71=(($info+28)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|0)==1;
      if ($73) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $75=(($info+32)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|0)==1;
      if ($77) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $79=(($info+20)|0);
      var $80=HEAP32[(($79)>>2)];
      $dst_ptr=$80;
      __label__ = 10; break;
    case 10: 
      __label__ = 17; break;
    case 11: 
      var $83=(($info+24)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|0)==1;
      if ($85) { __label__ = 15; break; } else { __label__ = 12; break; }
    case 12: 
      var $87=(($info+40)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|0)==0;
      if ($89) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $91=(($info+28)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0)==1;
      if ($93) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $95=(($info+32)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96)|0)==1;
      if ($97) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $99=(($info+16)|0);
      var $100=HEAP32[(($99)>>2)];
      $dst_ptr=$100;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $104=$dst_ptr;
      STACKTOP = __stackBase__;
      return $104;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $is_dst_type_derived_from_static_type;
      var $does_dst_type_point_to_our_static_type;
      var $e;
      var $p;
      var $e1;
      var $p2;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0)==(($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$5;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($12, $13, $14, $15);
      __label__ = 69; break;
    case 3: 
      var $17=$5;
      var $18=$2;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|0)==(($20)|0);
      if ($21) { __label__ = 4; break; } else { __label__ = 38; break; }
    case 4: 
      var $23=$3;
      var $24=$2;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)|0)==(($26)|0);
      if ($27) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $29=$3;
      var $30=$2;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)|0)==(($32)|0);
      if ($33) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $35=$4;
      var $36=(($35)|0)==1;
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $38=$2;
      var $39=(($38+32)|0);
      HEAP32[(($39)>>2)]=1;
      __label__ = 8; break;
    case 8: 
      __label__ = 37; break;
    case 9: 
      var $42=$4;
      var $43=$2;
      var $44=(($43+32)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$2;
      var $46=(($45+44)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|0)!=4;
      if ($48) { __label__ = 10; break; } else { __label__ = 36; break; }
    case 10: 
      $is_dst_type_derived_from_static_type=0;
      $does_dst_type_point_to_our_static_type=0;
      var $50=(($5+16)|0);
      var $51=(($50)|0);
      var $52=(($5+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($51+($53<<3))|0);
      $e=$54;
      var $55=(($5+16)|0);
      var $56=(($55)|0);
      $p=$56;
      __label__ = 11; break;
    case 11: 
      var $58=$p;
      var $59=$e;
      var $60=(($58)>>>0) < (($59)>>>0);
      if ($60) { __label__ = 12; break; } else { __label__ = 27; break; }
    case 12: 
      var $62=$2;
      var $63=(($62+52)|0);
      HEAP8[($63)]=0;
      var $64=$2;
      var $65=(($64+53)|0);
      HEAP8[($65)]=0;
      var $66=$p;
      var $67=$2;
      var $68=$3;
      var $69=$3;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($66, $67, $68, $69, 1);
      var $70=$2;
      var $71=(($70+54)|0);
      var $72=HEAP8[($71)];
      var $73=(($72) & 1);
      if ($73) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 27; break;
    case 14: 
      var $76=$2;
      var $77=(($76+53)|0);
      var $78=HEAP8[($77)];
      var $79=(($78) & 1);
      if ($79) { __label__ = 15; break; } else { __label__ = 25; break; }
    case 15: 
      $is_dst_type_derived_from_static_type=1;
      var $81=$2;
      var $82=(($81+52)|0);
      var $83=HEAP8[($82)];
      var $84=(($83) & 1);
      if ($84) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      $does_dst_type_point_to_our_static_type=1;
      var $86=$2;
      var $87=(($86+24)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|0)==1;
      if ($89) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 27; break;
    case 18: 
      var $92=(($5+8)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$93 & 2;
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      __label__ = 27; break;
    case 20: 
      __label__ = 24; break;
    case 21: 
      var $99=(($5+8)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$100 & 1;
      var $102=(($101)|0)!=0;
      if ($102) { __label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      __label__ = 27; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $108=$p;
      var $109=(($108+8)|0);
      $p=$109;
      __label__ = 11; break;
    case 27: 
      var $111=$does_dst_type_point_to_our_static_type;
      var $112=(($111) & 1);
      if ($112) { __label__ = 32; break; } else { __label__ = 28; break; }
    case 28: 
      var $114=$3;
      var $115=$2;
      var $116=(($115+20)|0);
      HEAP32[(($116)>>2)]=$114;
      var $117=$2;
      var $118=(($117+40)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+1)|0);
      HEAP32[(($118)>>2)]=$120;
      var $121=$2;
      var $122=(($121+36)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|0)==1;
      if ($124) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $126=$2;
      var $127=(($126+24)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128)|0)==2;
      if ($129) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $131=$2;
      var $132=(($131+54)|0);
      HEAP8[($132)]=1;
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $135=$is_dst_type_derived_from_static_type;
      var $136=(($135) & 1);
      if ($136) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $138=$2;
      var $139=(($138+44)|0);
      HEAP32[(($139)>>2)]=3;
      __label__ = 35; break;
    case 34: 
      var $141=$2;
      var $142=(($141+44)|0);
      HEAP32[(($142)>>2)]=4;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 68; break;
    case 38: 
      var $147=(($5+16)|0);
      var $148=(($147)|0);
      var $149=(($5+12)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($148+($150<<3))|0);
      $e1=$151;
      var $152=(($5+16)|0);
      var $153=(($152)|0);
      $p2=$153;
      var $154=$p2;
      var $155=$2;
      var $156=$3;
      var $157=$4;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($154, $155, $156, $157);
      var $158=$p2;
      var $159=(($158+8)|0);
      $p2=$159;
      var $160=$e1;
      var $161=(($159)>>>0) < (($160)>>>0);
      if ($161) { __label__ = 39; break; } else { __label__ = 67; break; }
    case 39: 
      var $163=(($5+8)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$164 & 2;
      var $166=(($165)|0)!=0;
      if ($166) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      var $168=$2;
      var $169=(($168+36)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170)|0)==1;
      if ($171) { __label__ = 41; break; } else { __label__ = 47; break; }
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $174=$2;
      var $175=(($174+54)|0);
      var $176=HEAP8[($175)];
      var $177=(($176) & 1);
      if ($177) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      __label__ = 46; break;
    case 44: 
      var $180=$p2;
      var $181=$2;
      var $182=$3;
      var $183=$4;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($180, $181, $182, $183);
      __label__ = 45; break;
    case 45: 
      var $185=$p2;
      var $186=(($185+8)|0);
      $p2=$186;
      var $187=$e1;
      var $188=(($186)>>>0) < (($187)>>>0);
      if ($188) { __label__ = 42; break; } else { __label__ = 46; break; }
    case 46: 
      __label__ = 66; break;
    case 47: 
      var $191=(($5+8)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=$192 & 1;
      var $194=(($193)|0)!=0;
      if ($194) { __label__ = 48; break; } else { __label__ = 57; break; }
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $197=$2;
      var $198=(($197+54)|0);
      var $199=HEAP8[($198)];
      var $200=(($199) & 1);
      if ($200) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      __label__ = 56; break;
    case 51: 
      var $203=$2;
      var $204=(($203+36)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=(($205)|0)==1;
      if ($206) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: 
      var $208=$2;
      var $209=(($208+24)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($210)|0)==1;
      if ($211) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      __label__ = 56; break;
    case 54: 
      var $214=$p2;
      var $215=$2;
      var $216=$3;
      var $217=$4;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($214, $215, $216, $217);
      __label__ = 55; break;
    case 55: 
      var $219=$p2;
      var $220=(($219+8)|0);
      $p2=$220;
      var $221=$e1;
      var $222=(($220)>>>0) < (($221)>>>0);
      if ($222) { __label__ = 49; break; } else { __label__ = 56; break; }
    case 56: 
      __label__ = 65; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $226=$2;
      var $227=(($226+54)|0);
      var $228=HEAP8[($227)];
      var $229=(($228) & 1);
      if ($229) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 64; break;
    case 60: 
      var $232=$2;
      var $233=(($232+36)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=(($234)|0)==1;
      if ($235) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      __label__ = 64; break;
    case 62: 
      var $238=$p2;
      var $239=$2;
      var $240=$3;
      var $241=$4;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($238, $239, $240, $241);
      __label__ = 63; break;
    case 63: 
      var $243=$p2;
      var $244=(($243+8)|0);
      $p2=$244;
      var $245=$e1;
      var $246=(($244)>>>0) < (($245)>>>0);
      if ($246) { __label__ = 58; break; } else { __label__ = 64; break; }
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $offset_to_base;
      var $vtable;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >> 8;
      $offset_to_base=$9;
      var $10=(($6+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 1;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $15=$4;
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      $vtable=$17;
      var $18=$vtable;
      var $19=$offset_to_base;
      var $20=(($18+$19)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      $offset_to_base=$22;
      __label__ = 3; break;
    case 3: 
      var $24=(($6)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=$3;
      var $32=$4;
      var $33=$offset_to_base;
      var $34=(($32+$33)|0);
      var $35=(($6+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 & 2;
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $40=$5;
      var $43 = $40;__label__ = 6; break;
    case 5: 
      var $43 = 2;__label__ = 6; break;
    case 6: 
      var $43;
      FUNCTION_TABLE[$29]($25, $30, $31, $34, $43);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $offset_to_base;
      var $vtable;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $5=$1;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 >> 8;
      $offset_to_base=$8;
      var $9=(($5+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 & 1;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $14=$3;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      $vtable=$16;
      var $17=$vtable;
      var $18=$offset_to_base;
      var $19=(($17+$18)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      $offset_to_base=$21;
      __label__ = 3; break;
    case 3: 
      var $23=(($5)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+16)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=$3;
      var $31=$offset_to_base;
      var $32=(($30+$31)|0);
      var $33=(($5+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 & 2;
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $38=$4;
      var $41 = $38;__label__ = 6; break;
    case 5: 
      var $41 = 2;__label__ = 6; break;
    case 6: 
      var $41;
      FUNCTION_TABLE[$28]($24, $29, $32, $41);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $is_dst_type_derived_from_static_type;
      var $does_dst_type_point_to_our_static_type;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0)==(($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$5;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($12, $13, $14, $15);
      __label__ = 27; break;
    case 3: 
      var $17=$5;
      var $18=$2;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|0)==(($20)|0);
      if ($21) { __label__ = 4; break; } else { __label__ = 25; break; }
    case 4: 
      var $23=$3;
      var $24=$2;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)|0)==(($26)|0);
      if ($27) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $29=$3;
      var $30=$2;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)|0)==(($32)|0);
      if ($33) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $35=$4;
      var $36=(($35)|0)==1;
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $38=$2;
      var $39=(($38+32)|0);
      HEAP32[(($39)>>2)]=1;
      __label__ = 8; break;
    case 8: 
      __label__ = 24; break;
    case 9: 
      var $42=$4;
      var $43=$2;
      var $44=(($43+32)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$2;
      var $46=(($45+44)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|0)!=4;
      if ($48) { __label__ = 10; break; } else { __label__ = 23; break; }
    case 10: 
      $is_dst_type_derived_from_static_type=0;
      $does_dst_type_point_to_our_static_type=0;
      var $50=$2;
      var $51=(($50+52)|0);
      HEAP8[($51)]=0;
      var $52=$2;
      var $53=(($52+53)|0);
      HEAP8[($53)]=0;
      var $54=(($5+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+12)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$2;
      var $61=$3;
      var $62=$3;
      FUNCTION_TABLE[$59]($55, $60, $61, $62, 1);
      var $63=$2;
      var $64=(($63+53)|0);
      var $65=HEAP8[($64)];
      var $66=(($65) & 1);
      if ($66) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      $is_dst_type_derived_from_static_type=1;
      var $68=$2;
      var $69=(($68+52)|0);
      var $70=HEAP8[($69)];
      var $71=(($70) & 1);
      if ($71) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $does_dst_type_point_to_our_static_type=1;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $75=$does_dst_type_point_to_our_static_type;
      var $76=(($75) & 1);
      if ($76) { __label__ = 19; break; } else { __label__ = 15; break; }
    case 15: 
      var $78=$3;
      var $79=$2;
      var $80=(($79+20)|0);
      HEAP32[(($80)>>2)]=$78;
      var $81=$2;
      var $82=(($81+40)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+1)|0);
      HEAP32[(($82)>>2)]=$84;
      var $85=$2;
      var $86=(($85+36)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0)==1;
      if ($88) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $90=$2;
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0)==2;
      if ($93) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $95=$2;
      var $96=(($95+54)|0);
      HEAP8[($96)]=1;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $99=$is_dst_type_derived_from_static_type;
      var $100=(($99) & 1);
      if ($100) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $102=$2;
      var $103=(($102+44)|0);
      HEAP32[(($103)>>2)]=3;
      __label__ = 22; break;
    case 21: 
      var $105=$2;
      var $106=(($105+44)|0);
      HEAP32[(($106)>>2)]=4;
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 26; break;
    case 25: 
      var $111=(($5+8)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$112;
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+16)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$2;
      var $118=$3;
      var $119=$4;
      FUNCTION_TABLE[$116]($112, $117, $118, $119);
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $5=$1;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)|0)==(($8)|0);
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$2;
      var $12=$3;
      var $13=$4;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($5, $11, $12, $13);
      __label__ = 15; break;
    case 3: 
      var $15=$2;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($5)|0)==(($17)|0);
      if ($18) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $20=$3;
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($20)|0)==(($23)|0);
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $26=$3;
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($26)|0)==(($29)|0);
      if ($30) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $32=$4;
      var $33=(($32)|0)==1;
      if ($33) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $35=$2;
      var $36=(($35+32)|0);
      HEAP32[(($36)>>2)]=1;
      __label__ = 8; break;
    case 8: 
      __label__ = 13; break;
    case 9: 
      var $39=$4;
      var $40=$2;
      var $41=(($40+32)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$3;
      var $43=$2;
      var $44=(($43+20)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$2;
      var $46=(($45+40)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+1)|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=$2;
      var $50=(($49+36)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51)|0)==1;
      if ($52) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $54=$2;
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56)|0)==2;
      if ($57) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $59=$2;
      var $60=(($59+54)|0);
      HEAP8[($60)]=1;
      __label__ = 12; break;
    case 12: 
      var $62=$2;
      var $63=(($62+44)|0);
      HEAP32[(($63)>>2)]=4;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $found_our_static_ptr;
      var $found_any_static_type;
      var $e;
      var $p;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)|0)==(($10)|0);
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $13=$6;
      var $14=$2;
      var $15=$3;
      var $16=$4;
      var $17=$5;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($13, $14, $15, $16, $17);
      __label__ = 22; break;
    case 3: 
      var $19=$2;
      var $20=(($19+52)|0);
      var $21=HEAP8[($20)];
      var $22=(($21) & 1);
      var $23=(($22)&1);
      $found_our_static_ptr=$23;
      var $24=$2;
      var $25=(($24+53)|0);
      var $26=HEAP8[($25)];
      var $27=(($26) & 1);
      var $28=(($27)&1);
      $found_any_static_type=$28;
      var $29=(($6+16)|0);
      var $30=(($29)|0);
      var $31=(($6+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($30+($32<<3))|0);
      $e=$33;
      var $34=(($6+16)|0);
      var $35=(($34)|0);
      $p=$35;
      var $36=$2;
      var $37=(($36+52)|0);
      HEAP8[($37)]=0;
      var $38=$2;
      var $39=(($38+53)|0);
      HEAP8[($39)]=0;
      var $40=$p;
      var $41=$2;
      var $42=$3;
      var $43=$4;
      var $44=$5;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($40, $41, $42, $43, $44);
      var $45=$p;
      var $46=(($45+8)|0);
      $p=$46;
      var $47=$e;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { __label__ = 4; break; } else { __label__ = 21; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $51=$2;
      var $52=(($51+54)|0);
      var $53=HEAP8[($52)];
      var $54=(($53) & 1);
      if ($54) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 20; break;
    case 7: 
      var $57=$2;
      var $58=(($57+52)|0);
      var $59=HEAP8[($58)];
      var $60=(($59) & 1);
      if ($60) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $62=$2;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|0)==1;
      if ($65) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 20; break;
    case 10: 
      var $68=(($6+8)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 & 2;
      var $71=(($70)|0)!=0;
      if ($71) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      __label__ = 20; break;
    case 12: 
      __label__ = 18; break;
    case 13: 
      var $75=$2;
      var $76=(($75+53)|0);
      var $77=HEAP8[($76)];
      var $78=(($77) & 1);
      if ($78) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $80=(($6+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & 1;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      __label__ = 20; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $88=$2;
      var $89=(($88+52)|0);
      HEAP8[($89)]=0;
      var $90=$2;
      var $91=(($90+53)|0);
      HEAP8[($91)]=0;
      var $92=$p;
      var $93=$2;
      var $94=$3;
      var $95=$4;
      var $96=$5;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($92, $93, $94, $95, $96);
      __label__ = 19; break;
    case 19: 
      var $98=$p;
      var $99=(($98+8)|0);
      $p=$99;
      var $100=$e;
      var $101=(($99)>>>0) < (($100)>>>0);
      if ($101) { __label__ = 5; break; } else { __label__ = 20; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $104=$found_our_static_ptr;
      var $105=(($104) & 1);
      var $106=$2;
      var $107=(($106+52)|0);
      var $108=(($105)&1);
      HEAP8[($107)]=$108;
      var $109=$found_any_static_type;
      var $110=(($109) & 1);
      var $111=$2;
      var $112=(($111+53)|0);
      var $113=(($110)&1);
      HEAP8[($112)]=$113;
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)|0)==(($10)|0);
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $13=$6;
      var $14=$2;
      var $15=$3;
      var $16=$4;
      var $17=$5;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($13, $14, $15, $16, $17);
      __label__ = 4; break;
    case 3: 
      var $19=(($6+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$2;
      var $26=$3;
      var $27=$4;
      var $28=$5;
      FUNCTION_TABLE[$24]($20, $25, $26, $27, $28);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $6=$1;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|0)==(($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$2;
      var $13=$3;
      var $14=$4;
      var $15=$5;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($6, $12, $13, $14, $15);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc($bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1; //@line 4628 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)>>>0) <= 244; //@line 4628 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($3) { __label__ = 2; break; } else { __label__ = 37; break; } //@line 4628 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $5=$1; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) < 11; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $14 = 16;__label__ = 5; break; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $9=$1; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=(($9+4)|0); //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($10+7)|0); //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$11 & -8; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14 = $12;__label__ = 5; break; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $14; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nb=$14; //@line 4631 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$nb; //@line 4632 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$15 >>> 3; //@line 4632 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $idx=$16; //@line 4632 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=HEAPU32[((((__gm_)|0))>>2)]; //@line 4633 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$idx; //@line 4633 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$17 >>> (($18)>>>0); //@line 4633 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $smallbits=$19; //@line 4633 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$smallbits; //@line 4635 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=$20 & 3; //@line 4635 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=(($21)|0)!=0; //@line 4635 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($22) { __label__ = 6; break; } else { __label__ = 13; break; } //@line 4635 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $24=$smallbits; //@line 4637 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$24 ^ -1; //@line 4637 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=$25 & 1; //@line 4637 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$idx; //@line 4637 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=(($27+$26)|0); //@line 4637 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $idx=$28; //@line 4637 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=$idx; //@line 4638 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$29 << 1; //@line 4638 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=((((__gm_+40)|0)+($30<<2))|0); //@line 4638 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=$31; //@line 4638 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 4638 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $b=$33; //@line 4638 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=$b; //@line 4639 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=(($34+8)|0); //@line 4639 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($35)>>2)]; //@line 4639 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$36; //@line 4639 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$p; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=(($37+8)|0); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($38)>>2)]; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$39; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$b; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$F; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($40)|0)==(($41)|0); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $44=$idx; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=1 << $44; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=$45 ^ -1; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[((((__gm_)|0))>>2)]; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=$47 & $46; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$48; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $50=$F; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=(($51)>>>0) >= (($52)>>>0); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=(($53)&1); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($54)==(1)); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=(($55)|0)!=0; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($56) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $58=$F; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$b; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=(($59+8)|0); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=$b; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=$F; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+12)|0); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($63)>>2)]=$61; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      _abort(); //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4641 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $67=$idx; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=$67 << 3; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=$68 | 1; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=$69 | 2; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=$p; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($72)>>2)]=$70; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=$p; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=$73; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=$idx; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=$75 << 3; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=(($74+$76)|0); //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=$77; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=(($78+4)|0); //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($79)>>2)]; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=$80 | 1; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($79)>>2)]=$81; //@line 4642 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=$p; //@line 4643 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=$82; //@line 4643 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+8)|0); //@line 4643 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$84; //@line 4643 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4645 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $86=$nb; //@line 4648 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4648 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=(($86)>>>0) > (($87)>>>0); //@line 4648 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($88) { __label__ = 14; break; } else { __label__ = 35; break; } //@line 4648 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $90=$smallbits; //@line 4649 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=(($90)|0)!=0; //@line 4649 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($91) { __label__ = 15; break; } else { __label__ = 30; break; } //@line 4649 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $93=$smallbits; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=$idx; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=$93 << $94; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=$idx; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=1 << $96; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$97 << 1; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$idx; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=1 << $99; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$100 << 1; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=(((-$101))|0); //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$98 | $102; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=$95 & $103; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $leftbits=$104; //@line 4653 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=$leftbits; //@line 4654 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=$leftbits; //@line 4654 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=(((-$106))|0); //@line 4654 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=$105 & $107; //@line 4654 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $leastbit=$108; //@line 4654 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=$leastbit; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $110=(($109-1)|0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$110; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=$111 >>> 12; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=$112 & 16; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$113; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=$K; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$114; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=$K; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=$116 >>> (($115)>>>0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$117; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=$118 >>> 5; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=$119 & 8; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$120; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=$N; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=(($121+$120)|0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$122; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=$K; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=$124 >>> (($123)>>>0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$125; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=$126 >>> 2; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=$127 & 4; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$128; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=$N; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=(($129+$128)|0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$130; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=$K; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=$132 >>> (($131)>>>0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$133; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$134 >>> 1; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=$135 & 2; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$136; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=$N; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=(($137+$136)|0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$138; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=$K; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=$140 >>> (($139)>>>0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$141; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=$142 >>> 1; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=$143 & 1; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$144; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=$N; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=(($145+$144)|0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$146; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=$K; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $149=$148 >>> (($147)>>>0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$149; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=$N; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$Y; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=(($150+$151)|0); //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $i=$152; //@line 4655 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=$i; //@line 4656 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=$153 << 1; //@line 4656 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=((((__gm_+40)|0)+($154<<2))|0); //@line 4656 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4656 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 4656 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $b1=$157; //@line 4656 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=$b1; //@line 4657 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+8)|0); //@line 4657 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 4657 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p2=$160; //@line 4657 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=$p2; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=(($161+8)|0); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=HEAP32[(($162)>>2)]; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F3=$163; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=$b1; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=$F3; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $166=(($164)|0)==(($165)|0); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($166) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $168=$i; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=1 << $168; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=$169 ^ -1; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[((((__gm_)|0))>>2)]; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=$171 & $170; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$172; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $174=$F3; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=(($175)>>>0) >= (($176)>>>0); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)&1); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $179=(($178)==(1)); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $180=(($179)|0)!=0; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($180) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $182=$F3; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=$b1; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $184=(($183+8)|0); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($184)>>2)]=$182; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=$b1; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=$F3; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $187=(($186+12)|0); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($187)>>2)]=$185; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      _abort(); //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4659 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $191=$i; //@line 4660 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $192=$191 << 3; //@line 4660 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $193=$nb; //@line 4660 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=(($192-$193)|0); //@line 4660 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$194; //@line 4660 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=$nb; //@line 4665 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=$195 | 1; //@line 4665 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=$196 | 2; //@line 4665 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $198=$p2; //@line 4665 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=(($198+4)|0); //@line 4665 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($199)>>2)]=$197; //@line 4665 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $200=$p2; //@line 4666 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $201=$200; //@line 4666 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=$nb; //@line 4666 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=(($201+$202)|0); //@line 4666 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 4666 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $r=$204; //@line 4666 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=$rsize; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=$205 | 1; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=$r; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=(($207+4)|0); //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($208)>>2)]=$206; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=$rsize; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=$r; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=$210; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=$rsize; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=(($211+$212)|0); //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $214=$213; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)|0); //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($215)>>2)]=$209; //@line 4667 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $216=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $DVS=$216; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $217=$DVS; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 22; break; } else { __label__ = 29; break; } //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $220=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $DV=$220; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $221=$DVS; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $222=$221 >>> 3; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I=$222; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $223=$I; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $224=$223 << 1; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $225=((((__gm_+40)|0)+($224<<2))|0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $226=$225; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B=$227; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=$B; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F4=$228; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $229=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230=$I; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $231=1 << $230; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $232=$229 & $231; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)|0)!=0; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($233) { __label__ = 24; break; } else { __label__ = 23; break; } //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $235=$I; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $236=1 << $235; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $238=$237 | $236; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$238; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $240=$B; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $241=(($240+8)|0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=$242; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $245=(($243)>>>0) >= (($244)>>>0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $246=(($245)&1); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0)!=0; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($248) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $250=$B; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+8)|0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $252=HEAP32[(($251)>>2)]; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F4=$252; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $256=$DV; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $257=$B; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $258=(($257+8)|0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($258)>>2)]=$256; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $259=$DV; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $260=$F4; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $261=(($260+12)|0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $262=$F4; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $263=$DV; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+8)|0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($264)>>2)]=$262; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $265=$B; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $266=$DV; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $267=(($266+12)|0); //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($267)>>2)]=$265; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $269=$rsize; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$269; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $270=$r; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$270; //@line 4668 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $271=$p2; //@line 4670 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $272=$271; //@line 4670 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $273=(($272+8)|0); //@line 4670 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$273; //@line 4670 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $275=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $276=(($275)|0)!=0; //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($276) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $278=$nb; //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=_tmalloc_small(__gm_, $278); //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$279; //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $280=(($279)|0)!=0; //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($280) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      __label__ = 53; break; //@line 4677 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break; //@line 4679 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 44; break; //@line 4680 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $287=$1; //@line 4681 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)>>>0) >= 4294967232; //@line 4681 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 4681 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      $nb=-1; //@line 4682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 43; break; //@line 4682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $291=$1; //@line 4684 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $292=(($291+4)|0); //@line 4684 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $293=(($292+7)|0); //@line 4684 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $294=$293 & -8; //@line 4684 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nb=$294; //@line 4684 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $295=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $296=(($295)|0)!=0; //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($296) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $298=$nb; //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $299=_tmalloc_large(__gm_, $298); //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$299; //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $300=(($299)|0)!=0; //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($300) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 4685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 53; break; //@line 4687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $305=$nb; //@line 4691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $306=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $307=(($305)>>>0) <= (($306)>>>0); //@line 4691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($307) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 4691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $309=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4692 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $310=$nb; //@line 4692 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $311=(($309-$310)|0); //@line 4692 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize5=$311; //@line 4692 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $312=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4693 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p6=$312; //@line 4693 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $313=$rsize5; //@line 4694 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $314=(($313)>>>0) >= 16; //@line 4694 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($314) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4694 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $316=$p6; //@line 4695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $317=$316; //@line 4695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $318=$nb; //@line 4695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $319=(($317+$318)|0); //@line 4695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $320=$319; //@line 4695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$320; //@line 4695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $r7=$320; //@line 4695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $321=$rsize5; //@line 4696 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$321; //@line 4696 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $322=$rsize5; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $323=$322 | 1; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=$r7; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($325)>>2)]=$323; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326=$rsize5; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $327=$r7; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $328=$327; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $329=$rsize5; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $330=(($328+$329)|0); //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $331=$330; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $332=(($331)|0); //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($332)>>2)]=$326; //@line 4697 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $333=$nb; //@line 4698 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $334=$333 | 1; //@line 4698 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $335=$334 | 2; //@line 4698 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $336=$p6; //@line 4698 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+4)|0); //@line 4698 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($337)>>2)]=$335; //@line 4698 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4699 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $339=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4701 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $dvs=$339; //@line 4701 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4702 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $340=$dvs; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $341=$340 | 1; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $342=$341 | 2; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $343=$p6; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $344=(($343+4)|0); //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($344)>>2)]=$342; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $345=$p6; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $346=$345; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $347=$dvs; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $348=(($346+$347)|0); //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $349=$348; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $350=(($349+4)|0); //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $352=$351 | 1; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($350)>>2)]=$352; //@line 4704 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break;
    case 48: 
      var $354=$p6; //@line 4706 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $355=$354; //@line 4706 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+8)|0); //@line 4706 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$356; //@line 4706 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4708 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $358=$nb; //@line 4711 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $359=HEAPU32[((((__gm_+12)|0))>>2)]; //@line 4711 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $360=(($358)>>>0) < (($359)>>>0); //@line 4711 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($360) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4711 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $362=$nb; //@line 4712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $363=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $364=(($363-$362)|0); //@line 4712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$364; //@line 4712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize8=$364; //@line 4712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $365=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4713 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p9=$365; //@line 4713 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $366=$p9; //@line 4714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $367=$366; //@line 4714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=$nb; //@line 4714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $369=(($367+$368)|0); //@line 4714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $370=$369; //@line 4714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$370; //@line 4714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $r10=$370; //@line 4714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $371=$rsize8; //@line 4715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $372=$371 | 1; //@line 4715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $373=$r10; //@line 4715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $374=(($373+4)|0); //@line 4715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($374)>>2)]=$372; //@line 4715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $375=$nb; //@line 4716 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $376=$375 | 1; //@line 4716 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $377=$376 | 2; //@line 4716 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $378=$p9; //@line 4716 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $379=(($378+4)|0); //@line 4716 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($379)>>2)]=$377; //@line 4716 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $380=$p9; //@line 4717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $381=$380; //@line 4717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$382; //@line 4717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4720 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $385=$nb; //@line 4723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=_sys_alloc(__gm_, $385); //@line 4723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$386; //@line 4723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $388=$mem; //@line 4727 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $388; //@line 4727 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _tmalloc_small($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1; //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=(($3+4)|0); //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=$1; //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=(($6+4)|0); //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($7)>>2)]; //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=(((-$8))|0); //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=$5 & $9; //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $leastbit=$10; //@line 4268 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$leastbit; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=(($11-1)|0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$12; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=$13 >>> 12; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$14 & 16; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$15; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$K; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$16; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=$K; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$18 >>> (($17)>>>0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$19; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=$20 >>> 5; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=$21 & 8; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$22; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$N; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=(($23+$22)|0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$24; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$K; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$26 >>> (($25)>>>0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$27; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=$28 >>> 2; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$29 & 4; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$30; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=$N; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=(($31+$30)|0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$32; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$K; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=$34 >>> (($33)>>>0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$35; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$36 >>> 1; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=$37 & 2; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$38; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=$N; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=(($39+$38)|0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$40; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$K; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$42 >>> (($41)>>>0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$43; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$44 >>> 1; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=$45 & 1; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$46; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=$N; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=(($47+$46)|0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$48; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=$K; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=$50 >>> (($49)>>>0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$51; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$N; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=$Y; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=(($52+$53)|0); //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $i=$54; //@line 4269 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=$i; //@line 4270 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$1; //@line 4270 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4270 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4270 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4270 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $t=$59; //@line 4270 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $v=$59; //@line 4270 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$t; //@line 4271 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=(($60+4)|0); //@line 4271 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=HEAP32[(($61)>>2)]; //@line 4271 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=$62 & -8; //@line 4271 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=$2; //@line 4271 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=(($63-$64)|0); //@line 4271 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$65; //@line 4271 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $67=$t; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=(($67+16)|0); //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0); //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=(($70)|0)!=0; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($71) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $73=$t; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+16)|0); //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=(($74)|0); //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83 = $76;__label__ = 5; break; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $78=$t; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=(($78+16)|0); //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+4)|0); //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83 = $81;__label__ = 5; break; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $83; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $t=$83; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=(($83)|0)!=0; //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 4273 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $86=$t; //@line 4274 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=(($86+4)|0); //@line 4274 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($87)>>2)]; //@line 4274 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=$88 & -8; //@line 4274 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=$2; //@line 4274 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=(($89-$90)|0); //@line 4274 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $trem=$91; //@line 4274 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=$trem; //@line 4275 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=$rsize; //@line 4275 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=(($92)>>>0) < (($93)>>>0); //@line 4275 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($94) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4275 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $96=$trem; //@line 4276 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$96; //@line 4276 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=$t; //@line 4277 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $v=$97; //@line 4277 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4278 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 2; break; //@line 4279 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $100=$v; //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=$1; //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=(($101)>>>0) >= (($104)>>>0); //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)&1); //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=(($107)|0)!=0; //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 10; break; } else { __label__ = 69; break; } //@line 4281 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $110=$v; //@line 4282 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=$110; //@line 4282 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=$2; //@line 4282 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=(($111+$112)|0); //@line 4282 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4282 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $r=$114; //@line 4282 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=$v; //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=$115; //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=$r; //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=$117; //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=(($116)>>>0) < (($118)>>>0); //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=(($119)&1); //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=(($120)==(1)); //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)!=0; //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 11; break; } else { __label__ = 68; break; } //@line 4284 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $124=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=(($124+24)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=HEAP32[(($125)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $XP=$126; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=(($127+12)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($128)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=(($129)|0)!=(($130)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($131) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $133=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=(($133+8)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$135; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=(($136+12)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=HEAP32[(($137)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$138; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=$F; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=$139; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=(($141+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=HEAPU32[(($142)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=(($140)>>>0) >= (($143)>>>0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)&1); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=(($145)==(1)); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=(($146)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($147) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $149=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=$F; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=(($150+12)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($151)>>2)]=$149; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=$F; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=(($153+8)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      _abort(); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 28; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $158=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=(($159+4)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$160; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($160)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$161; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=(($161)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($162) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $164=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $166=(($165)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$166; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[(($166)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$167; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $168=(($167)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($168) { __label__ = 18; break; } else { __label__ = 27; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      __label__ = 19; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $171=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=(($171+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $173=(($172+4)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$173; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $174=HEAP32[(($173)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $175=(($174)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($175) { var $183 = 1;__label__ = 21; break; } else { __label__ = 20; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $177=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=(($177+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $179=(($178)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$179; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $180=HEAP32[(($179)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $181=(($180)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183 = $181;__label__ = 21; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $183;
      if ($183) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $185=$CP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$185; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=HEAP32[(($185)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$186; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $188=$RP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189=$188; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $190=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $191=(($190+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $192=HEAPU32[(($191)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $193=(($189)>>>0) >= (($192)>>>0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=(($193)&1); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=(($194)==(1)); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=(($195)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($196) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $198=$RP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      _abort(); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $203=$XP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=(($203)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($204) { __label__ = 29; break; } else { __label__ = 56; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $206=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=(($206+28)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=HEAP32[(($207)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=(($209+304)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=(($210+($208<<2))|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H=$211; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=$H; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $214=HEAP32[(($213)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $215=(($212)|0)==(($214)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($215) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $217=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $218=$H; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($218)>>2)]=$217; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $219=(($217)|0)==0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($219) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $221=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $222=(($221+28)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $224=1 << $223; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $225=$224 ^ -1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $226=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $229=$228 & $225; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($227)>>2)]=$229; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      __label__ = 40; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $232=$XP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $233=$232; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $234=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $235=(($234+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $236=HEAPU32[(($235)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=(($233)>>>0) >= (($236)>>>0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $238=(($237)&1); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $239=(($238)==(1)); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $240=(($239)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($240) { __label__ = 34; break; } else { __label__ = 38; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $242=$XP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=(($242+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $244=(($243)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $246=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=(($245)|0)==(($246)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($247) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $249=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $250=$XP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($252)>>2)]=$249; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 37; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $254=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $255=$XP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $256=(($255+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $257=(($256+4)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($257)>>2)]=$254; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 37; break;
    case 37: 
      __label__ = 39; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $262=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($263) { __label__ = 41; break; } else { __label__ = 55; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $265=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $266=$265; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $267=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $269=HEAPU32[(($268)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $270=(($266)>>>0) >= (($269)>>>0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $271=(($270)&1); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $272=(($271)==(1)); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $273=(($272)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($273) { __label__ = 42; break; } else { __label__ = 53; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $275=$XP; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $276=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $277=(($276+24)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($277)>>2)]=$275; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $278=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=(($278+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $280=(($279)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C0=$281; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $282=(($281)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($282) { __label__ = 43; break; } else { __label__ = 47; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $284=$C0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $285=$284; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $286=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $287=(($286+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $288=HEAPU32[(($287)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $289=(($285)>>>0) >= (($288)>>>0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $290=(($289)&1); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $291=(($290)==(1)); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $292=(($291)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($292) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $294=$C0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $295=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $296=(($295+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $297=(($296)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($297)>>2)]=$294; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $298=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $299=$C0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $300=(($299+24)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($300)>>2)]=$298; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      _abort(); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 47; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $304=$v; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $305=(($304+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $306=(($305+4)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $307=HEAP32[(($306)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C1=$307; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $308=(($307)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($308) { __label__ = 48; break; } else { __label__ = 52; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $310=$C1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $311=$310; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $312=$1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $313=(($312+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $314=HEAPU32[(($313)>>2)]; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $315=(($311)>>>0) >= (($314)>>>0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $316=(($315)&1); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $317=(($316)==(1)); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)|0)!=0; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($318) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $320=$C1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $321=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $322=(($321+16)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $323=(($322+4)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($323)>>2)]=$320; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=$R; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $325=$C1; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326=(($325+24)|0); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($326)>>2)]=$324; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 51; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 50: 
      _abort(); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 54; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 53: 
      _abort(); //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 55; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4285 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $334=$rsize; //@line 4286 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $335=(($334)>>>0) < 16; //@line 4286 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($335) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4286 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $337=$rsize; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $338=$2; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $339=(($337+$338)|0); //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $340=$339 | 1; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $341=$340 | 2; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $342=$v; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($343)>>2)]=$341; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $344=$v; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $345=$344; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $346=$rsize; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $347=$2; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $348=(($346+$347)|0); //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $349=(($345+$348)|0); //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $350=$349; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+4)|0); //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $353=$352 | 1; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$353; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4287 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $355=$2; //@line 4289 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $356=$355 | 1; //@line 4289 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $357=$356 | 2; //@line 4289 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $358=$v; //@line 4289 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4289 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($359)>>2)]=$357; //@line 4289 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $360=$rsize; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $361=$360 | 1; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $362=$r; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $363=(($362+4)|0); //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($363)>>2)]=$361; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $364=$rsize; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $365=$r; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $366=$365; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $367=$rsize; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=(($366+$367)|0); //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $369=$368; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $370=(($369)|0); //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($370)>>2)]=$364; //@line 4290 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $371=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $372=(($371+8)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $373=HEAP32[(($372)>>2)]; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $DVS=$373; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $374=$DVS; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $375=(($374)|0)!=0; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($375) { __label__ = 59; break; } else { __label__ = 66; break; } //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $377=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $378=(($377+20)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $379=HEAP32[(($378)>>2)]; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $DV=$379; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $380=$DVS; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $381=$380 >>> 3; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I=$381; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $382=$I; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $383=$382 << 1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $384=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $385=(($384+40)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+($383<<2))|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $387=$386; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $388=$387; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B=$388; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $389=$B; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F1=$389; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $390=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $391=(($390)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $392=HEAP32[(($391)>>2)]; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $393=$I; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $394=1 << $393; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $395=$392 & $394; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $396=(($395)|0)!=0; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($396) { __label__ = 61; break; } else { __label__ = 60; break; } //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $398=$I; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $399=1 << $398; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $400=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $401=(($400)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $403=$402 | $399; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($401)>>2)]=$403; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $405=$B; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $406=(($405+8)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $407=HEAP32[(($406)>>2)]; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $408=$407; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $409=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $410=(($409+16)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $411=HEAPU32[(($410)>>2)]; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $412=(($408)>>>0) >= (($411)>>>0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $413=(($412)&1); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $414=(($413)==(1)); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $415=(($414)|0)!=0; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($415) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $417=$B; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $418=(($417+8)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $419=HEAP32[(($418)>>2)]; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F1=$419; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 63: 
      _abort(); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $423=$DV; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $424=$B; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $425=(($424+8)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($425)>>2)]=$423; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $426=$DV; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $427=$F1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $428=(($427+12)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($428)>>2)]=$426; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $429=$F1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $430=$DV; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $431=(($430+8)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($431)>>2)]=$429; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $432=$B; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $433=$DV; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+12)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($434)>>2)]=$432; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $436=$rsize; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $437=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $438=(($437+8)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($438)>>2)]=$436; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $439=$r; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $440=$1; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+20)|0); //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($441)>>2)]=$439; //@line 4291 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break;
    case 67: 
      var $443=$v; //@line 4293 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $444=$443; //@line 4293 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4293 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $445; //@line 4293 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 4295 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 69: 
      _abort(); //@line 4297 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4297 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _tmalloc_large($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0; //@line 4194 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 4195 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=(((-$4))|0); //@line 4195 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$5; //@line 4195 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=$3; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=$6 >>> 8; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $X=$7; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$X; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)==0; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      $idx=0; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $12=$X; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)>>>0) > 65535; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $idx=31; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $16=$X; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$16; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=$Y; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=(($17-256)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$18 >>> 16; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$19 & 8; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$20; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=$N; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=$Y; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$22 << $21; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$23; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=(($23-4096)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$24 >>> 16; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=$25 & 4; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$26; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$K; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$N; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+$27)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$29; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$K; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=$Y; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=$31 << $30; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$32; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=(($32-16384)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=$33 >>> 16; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 2; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$35; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$N; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=(($36+$35)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$37; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=$N; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=((14-$38)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$K; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$Y; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=$41 << $40; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$42; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$42 >>> 15; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=(($39+$43)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$44; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$K; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=$45 << 1; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=$3; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=$K; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=(($48+7)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$47 >>> (($49)>>>0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=$50 & 1; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=(($46+$51)|0); //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $idx=$52; //@line 4198 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $55=$idx; //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$2; //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $t=$59; //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=0; //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 8; break; } else { __label__ = 23; break; } //@line 4199 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $62=$3; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=$idx; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=(($63)|0)==31; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($64) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $73 = 0;__label__ = 11; break; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $67=$idx; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=$67 >>> 1; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68+8)|0); //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=(($69-2)|0); //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=((31-$70)|0); //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73 = $71;__label__ = 11; break; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $73; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=$62 << $73; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sizebits=$74; //@line 4201 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rst=0; //@line 4202 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4203 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $76=$t; //@line 4205 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+4)|0); //@line 4205 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($77)>>2)]; //@line 4205 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=$78 & -8; //@line 4205 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=$3; //@line 4205 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=(($79-$80)|0); //@line 4205 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $trem=$81; //@line 4205 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=$trem; //@line 4206 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=$rsize; //@line 4206 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=(($82)>>>0) < (($83)>>>0); //@line 4206 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 4206 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $86=$t; //@line 4207 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $v=$86; //@line 4207 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=$trem; //@line 4208 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$87; //@line 4208 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=(($87)|0)==0; //@line 4208 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($88) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4208 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      __label__ = 22; break; //@line 4209 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 16; break; //@line 4210 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $92=$t; //@line 4211 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=(($92+16)|0); //@line 4211 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=(($93+4)|0); //@line 4211 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=HEAP32[(($94)>>2)]; //@line 4211 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rt=$95; //@line 4211 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=$sizebits; //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=$96 >>> 31; //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$97 & 1; //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$t; //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=(($99+16)|0); //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=(($100+($98<<2))|0); //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($101)>>2)]; //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $t=$102; //@line 4212 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$rt; //@line 4213 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=(($103)|0)!=0; //@line 4213 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($104) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 4213 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $106=$rt; //@line 4213 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=$t; //@line 4213 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=(($106)|0)!=(($107)|0); //@line 4213 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4213 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $110=$rt; //@line 4214 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rst=$110; //@line 4214 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 4214 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $112=$t; //@line 4215 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=(($112)|0)==0; //@line 4215 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($113) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4215 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $115=$rst; //@line 4216 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $t=$115; //@line 4216 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4217 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $117=$sizebits; //@line 4219 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=$117 << 1; //@line 4219 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sizebits=$118; //@line 4219 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4220 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 23; break; //@line 4221 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $121=$t; //@line 4222 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)==0; //@line 4222 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 4222 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $124=$v; //@line 4222 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=(($124)|0)==0; //@line 4222 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($125) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 4222 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $127=$idx; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=1 << $127; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=$128 << 1; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=$idx; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=1 << $130; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=$131 << 1; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=(((-$132))|0); //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=$129 | $133; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$2; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=(($135+4)|0); //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=$134 & $137; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $leftbits=$138; //@line 4223 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=$leftbits; //@line 4224 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=(($139)|0)!=0; //@line 4224 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($140) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4224 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $142=$leftbits; //@line 4226 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=$leftbits; //@line 4226 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=(((-$143))|0); //@line 4226 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=$142 & $144; //@line 4226 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $leastbit=$145; //@line 4226 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=$leastbit; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=(($146-1)|0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y1=$147; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $149=$148 >>> 12; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=$149 & 16; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$150; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$K2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N3=$151; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=$K2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=$153 >>> (($152)>>>0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y1=$154; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=$155 >>> 5; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=$156 & 8; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$157; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=$N3; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+$157)|0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N3=$159; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=$K2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=$161 >>> (($160)>>>0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y1=$162; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=$163 >>> 2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=$164 & 4; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$165; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $166=$N3; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $167=(($166+$165)|0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N3=$167; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $168=$K2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=$169 >>> (($168)>>>0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y1=$170; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $171=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=$171 >>> 1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $173=$172 & 2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$173; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $174=$N3; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $175=(($174+$173)|0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N3=$175; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=$K2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=$177 >>> (($176)>>>0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y1=$178; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $179=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $180=$179 >>> 1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $181=$180 & 1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$181; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $182=$N3; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+$181)|0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N3=$183; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $184=$K2; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=$185 >>> (($184)>>>0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y1=$186; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $187=$N3; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $188=$Y1; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189=(($187+$188)|0); //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $i=$189; //@line 4227 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $190=$i; //@line 4228 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $191=$2; //@line 4228 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $192=(($191+304)|0); //@line 4228 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $193=(($192+($190<<2))|0); //@line 4228 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=HEAP32[(($193)>>2)]; //@line 4228 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $t=$194; //@line 4228 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4229 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4230 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4232 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $198=$t; //@line 4232 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)|0)!=0; //@line 4232 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($199) { __label__ = 30; break; } else { __label__ = 36; break; } //@line 4232 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $201=$t; //@line 4233 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=(($201+4)|0); //@line 4233 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($202)>>2)]; //@line 4233 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=$203 & -8; //@line 4233 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=$3; //@line 4233 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=(($204-$205)|0); //@line 4233 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $trem4=$206; //@line 4233 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=$trem4; //@line 4234 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=$rsize; //@line 4234 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=(($207)>>>0) < (($208)>>>0); //@line 4234 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($209) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4234 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $211=$trem4; //@line 4235 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$211; //@line 4235 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=$t; //@line 4236 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $v=$212; //@line 4236 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4237 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $214=$t; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $215=(($214+16)|0); //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $216=(($215)|0); //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $217=HEAP32[(($216)>>2)]; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $220=$t; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $221=(($220+16)|0); //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $222=(($221)|0); //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230 = $223;__label__ = 35; break; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $225=$t; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $226=(($225+16)|0); //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230 = $228;__label__ = 35; break; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $230; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $t=$230; //@line 4238 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4239 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $232=$v; //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)|0)!=0; //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($233) { __label__ = 37; break; } else { __label__ = 126; break; } //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $235=$rsize; //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $236=$2; //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=(($236+8)|0); //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $238=HEAP32[(($237)>>2)]; //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $239=$3; //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $240=(($238-$239)|0); //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $241=(($235)>>>0) < (($240)>>>0); //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($241) { __label__ = 38; break; } else { __label__ = 126; break; } //@line 4242 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $243=$v; //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $244=$243; //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $245=$2; //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $246=(($245+16)|0); //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=HEAPU32[(($246)>>2)]; //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $248=(($244)>>>0) >= (($247)>>>0); //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $249=(($248)&1); //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $250=(($249)==(1)); //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $251=(($250)|0)!=0; //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($251) { __label__ = 39; break; } else { __label__ = 125; break; } //@line 4243 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $253=$v; //@line 4244 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $254=$253; //@line 4244 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $255=$3; //@line 4244 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $256=(($254+$255)|0); //@line 4244 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $257=$256; //@line 4244 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $r=$257; //@line 4244 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $258=$v; //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $259=$258; //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $260=$r; //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $261=$260; //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $262=(($259)>>>0) < (($261)>>>0); //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)&1); //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $264=(($263)==(1)); //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $265=(($264)|0)!=0; //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($265) { __label__ = 40; break; } else { __label__ = 124; break; } //@line 4246 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $267=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+24)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($268)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $XP=$269; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $270=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $271=(($270+12)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $273=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $274=(($272)|0)!=(($273)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($274) { __label__ = 41; break; } else { __label__ = 45; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $276=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $277=(($276+8)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $278=HEAP32[(($277)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$278; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+12)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$281; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $282=$F; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $283=$282; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $284=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $286=HEAPU32[(($285)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $287=(($283)>>>0) >= (($286)>>>0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)&1); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $289=(($288)==(1)); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $290=(($289)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($290) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $292=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $293=$F; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+12)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=$292; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $295=$F; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $296=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $297=(($296+8)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($297)>>2)]=$295; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 43: 
      _abort(); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      __label__ = 57; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $301=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $302=(($301+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $303=(($302+4)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$303; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $304=HEAP32[(($303)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$304; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $305=(($304)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($305) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $307=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $308=(($307+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $309=(($308)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$309; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $310=HEAP32[(($309)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$310; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $311=(($310)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($311) { __label__ = 47; break; } else { __label__ = 56; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $314=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $315=(($314+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $316=(($315+4)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$316; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $317=HEAP32[(($316)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($318) { var $326 = 1;__label__ = 50; break; } else { __label__ = 49; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $320=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $321=(($320+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $322=(($321)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$322; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $323=HEAP32[(($322)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=(($323)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326 = $324;__label__ = 50; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $326;
      if ($326) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $328=$CP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$328; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $329=HEAP32[(($328)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$329; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $331=$RP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $332=$331; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $333=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $334=(($333+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $335=HEAPU32[(($334)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $336=(($332)>>>0) >= (($335)>>>0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $337=(($336)&1); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $338=(($337)==(1)); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $339=(($338)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($339) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $341=$RP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($341)>>2)]=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 55; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $346=$XP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $347=(($346)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($347) { __label__ = 58; break; } else { __label__ = 85; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $349=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $350=(($349+28)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $352=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+304)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $354=(($353+($351<<2))|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H=$354; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $355=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $356=$H; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $357=HEAP32[(($356)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $358=(($355)|0)==(($357)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($358) { __label__ = 59; break; } else { __label__ = 62; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $360=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $361=$H; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($361)>>2)]=$360; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $362=(($360)|0)==0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($362) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $364=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $365=(($364+28)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $366=HEAP32[(($365)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $367=1 << $366; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=$367 ^ -1; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $369=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $370=(($369+4)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $371=HEAP32[(($370)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $372=$371 & $368; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($370)>>2)]=$372; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 61; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 61: 
      __label__ = 69; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $375=$XP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $376=$375; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $377=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $378=(($377+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $379=HEAPU32[(($378)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $380=(($376)>>>0) >= (($379)>>>0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $381=(($380)&1); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $382=(($381)==(1)); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $383=(($382)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($383) { __label__ = 63; break; } else { __label__ = 67; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $385=$XP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $389=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $390=(($388)|0)==(($389)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($390) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $392=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $393=$XP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $394=(($393+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $395=(($394)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($395)>>2)]=$392; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $397=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $398=$XP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $399=(($398+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($400)>>2)]=$397; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break;
    case 66: 
      __label__ = 68; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 67: 
      _abort(); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break;
    case 69: 
      var $405=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $406=(($405)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($406) { __label__ = 70; break; } else { __label__ = 84; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $408=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $409=$408; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $410=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $412=HEAPU32[(($411)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $413=(($409)>>>0) >= (($412)>>>0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $414=(($413)&1); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $415=(($414)==(1)); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $416=(($415)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($416) { __label__ = 71; break; } else { __label__ = 82; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $418=$XP; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $419=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $420=(($419+24)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $421=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $422=(($421+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $423=(($422)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $424=HEAP32[(($423)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C0=$424; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $425=(($424)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($425) { __label__ = 72; break; } else { __label__ = 76; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $427=$C0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $428=$427; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $429=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $430=(($429+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $431=HEAPU32[(($430)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $432=(($428)>>>0) >= (($431)>>>0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $433=(($432)&1); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $434=(($433)==(1)); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $435=(($434)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($435) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $437=$C0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $438=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $439=(($438+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $440=(($439)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($440)>>2)]=$437; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $441=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $442=$C0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $443=(($442+24)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($443)>>2)]=$441; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 75; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 74: 
      _abort(); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 76; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $447=$v; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $448=(($447+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $449=(($448+4)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $450=HEAP32[(($449)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C1=$450; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $451=(($450)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($451) { __label__ = 77; break; } else { __label__ = 81; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $453=$C1; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $454=$453; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $455=$2; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $456=(($455+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $457=HEAPU32[(($456)>>2)]; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $458=(($454)>>>0) >= (($457)>>>0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $459=(($458)&1); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $460=(($459)==(1)); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $461=(($460)|0)!=0; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($461) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $463=$C1; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $464=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $465=(($464+16)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $466=(($465+4)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($466)>>2)]=$463; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $467=$R; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $468=$C1; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $469=(($468+24)|0); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 80; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 79: 
      _abort(); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 80: 
      __label__ = 81; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 81: 
      __label__ = 83; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 82: 
      _abort(); //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 84; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break; //@line 4247 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $477=$rsize; //@line 4248 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $478=(($477)>>>0) < 16; //@line 4248 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($478) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 4248 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $480=$rsize; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $481=$3; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $482=(($480+$481)|0); //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $483=$482 | 1; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $484=$483 | 2; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $485=$v; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $486=(($485+4)|0); //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $487=$v; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $488=$487; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $489=$rsize; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $490=$3; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $491=(($489+$490)|0); //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $492=(($488+$491)|0); //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $493=$492; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $494=(($493+4)|0); //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $495=HEAP32[(($494)>>2)]; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $496=$495 | 1; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($494)>>2)]=$496; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4249 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $498=$3; //@line 4251 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $499=$498 | 1; //@line 4251 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $500=$499 | 2; //@line 4251 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $501=$v; //@line 4251 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $502=(($501+4)|0); //@line 4251 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($502)>>2)]=$500; //@line 4251 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $503=$rsize; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $504=$503 | 1; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $505=$r; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $507=$rsize; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $508=$r; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $509=$508; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $510=$rsize; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $511=(($509+$510)|0); //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $512=$511; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $513=(($512)|0); //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($513)>>2)]=$507; //@line 4252 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $514=$rsize; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $515=$514 >>> 3; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $516=(($515)>>>0) < 32; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($516) { __label__ = 88; break; } else { __label__ = 95; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $518=$rsize; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $519=$518 >>> 3; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I=$519; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $520=$I; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $521=$520 << 1; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $522=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $523=(($522+40)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $524=(($523+($521<<2))|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $525=$524; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $526=$525; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B=$526; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $527=$B; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F5=$527; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $528=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $529=(($528)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $530=HEAP32[(($529)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $531=$I; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $532=1 << $531; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $533=$530 & $532; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $534=(($533)|0)!=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($534) { __label__ = 90; break; } else { __label__ = 89; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $536=$I; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $537=1 << $536; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $538=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $539=(($538)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $540=HEAP32[(($539)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $541=$540 | $537; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($539)>>2)]=$541; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 94; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $543=$B; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $544=(($543+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $545=HEAP32[(($544)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $546=$545; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $547=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $548=(($547+16)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $549=HEAPU32[(($548)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $550=(($546)>>>0) >= (($549)>>>0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $551=(($550)&1); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $552=(($551)==(1)); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $553=(($552)|0)!=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($553) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $555=$B; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $556=(($555+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $557=HEAP32[(($556)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F5=$557; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 92: 
      _abort(); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 93: 
      __label__ = 94; break;
    case 94: 
      var $561=$r; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $562=$B; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $563=(($562+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($563)>>2)]=$561; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $564=$r; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $565=$F5; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $566=(($565+12)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($566)>>2)]=$564; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $567=$F5; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $568=$r; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $569=(($568+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($569)>>2)]=$567; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $570=$B; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $571=$r; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $572=(($571+12)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($572)>>2)]=$570; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 122; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $574=$r; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $575=$574; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $TP=$575; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $576=$rsize; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $577=$576 >>> 8; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $X8=$577; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $578=$X8; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $579=(($578)|0)==0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($579) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 96: 
      $I7=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $582=$X8; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $583=(($582)>>>0) > 65535; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($583) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 98: 
      $I7=31; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 100; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 99: 
      var $586=$X8; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y9=$586; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $587=$Y9; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $588=(($587-256)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $589=$588 >>> 16; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $590=$589 & 8; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N10=$590; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $591=$N10; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $592=$Y9; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $593=$592 << $591; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y9=$593; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $594=(($593-4096)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $595=$594 >>> 16; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $596=$595 & 4; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K11=$596; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $597=$K11; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $598=$N10; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $599=(($598+$597)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N10=$599; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $600=$K11; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $601=$Y9; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $602=$601 << $600; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y9=$602; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $603=(($602-16384)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $604=$603 >>> 16; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $605=$604 & 2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K11=$605; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $606=$N10; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $607=(($606+$605)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N10=$607; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $608=$N10; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $609=((14-$608)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $610=$K11; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $611=$Y9; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $612=$611 << $610; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y9=$612; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $613=$612 >>> 15; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $614=(($609+$613)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K11=$614; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $615=$K11; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $616=$615 << 1; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $617=$rsize; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $618=$K11; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $619=(($618+7)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $620=$617 >>> (($619)>>>0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $621=$620 & 1; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $622=(($616+$621)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I7=$622; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 100; break;
    case 100: 
      __label__ = 101; break;
    case 101: 
      var $625=$I7; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $626=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $627=(($626+304)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $628=(($627+($625<<2))|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H6=$628; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $629=$I7; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $630=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $631=(($630+28)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($631)>>2)]=$629; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $632=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $633=(($632+16)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $634=(($633+4)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($634)>>2)]=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $635=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $636=(($635+16)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $637=(($636)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($637)>>2)]=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $638=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $639=(($638+4)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $640=HEAP32[(($639)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $641=$I7; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $642=1 << $641; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $643=$640 & $642; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $644=(($643)|0)!=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($644) { __label__ = 103; break; } else { __label__ = 102; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 102: 
      var $646=$I7; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $647=1 << $646; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $648=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $649=(($648+4)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $650=HEAP32[(($649)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $651=$650 | $647; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($649)>>2)]=$651; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $652=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $653=$H6; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($653)>>2)]=$652; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $654=$H6; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $655=$654; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $656=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $657=(($656+24)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($657)>>2)]=$655; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $658=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $659=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $660=(($659+12)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($660)>>2)]=$658; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $661=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $662=(($661+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($662)>>2)]=$658; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $664=$H6; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $665=HEAP32[(($664)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$665; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $666=$rsize; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $667=$I7; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $668=(($667)|0)==31; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($668) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $677 = 0;__label__ = 106; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $671=$I7; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $672=$671 >>> 1; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $673=(($672+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $674=(($673-2)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $675=((31-$674)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $677 = $675;__label__ = 106; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 106: 
      var $677; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $678=$666 << $677; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K12=$678; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $680=$T; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $681=(($680+4)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $682=HEAP32[(($681)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $683=$682 & -8; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $684=$rsize; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $685=(($683)|0)!=(($684)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($685) { __label__ = 108; break; } else { __label__ = 114; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $687=$K12; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $688=$687 >>> 31; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $689=$688 & 1; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $690=$T; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $691=(($690+16)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $692=(($691+($689<<2))|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C=$692; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $693=$K12; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $694=$693 << 1; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K12=$694; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $695=$C; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $696=HEAP32[(($695)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $697=(($696)|0)!=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($697) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $699=$C; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $700=HEAP32[(($699)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$700; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 113; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $702=$C; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $703=$702; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $704=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $705=(($704+16)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $706=HEAPU32[(($705)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $707=(($703)>>>0) >= (($706)>>>0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $708=(($707)&1); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $709=(($708)==(1)); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $710=(($709)|0)!=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($710) { __label__ = 111; break; } else { __label__ = 112; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $712=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $713=$C; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($713)>>2)]=$712; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $714=$T; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $715=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $716=(($715+24)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($716)>>2)]=$714; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $717=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $718=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $719=(($718+12)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($719)>>2)]=$717; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $720=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $721=(($720+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($721)>>2)]=$717; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 120; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 112: 
      _abort(); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 113: 
      __label__ = 119; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $725=$T; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $726=(($725+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $727=HEAP32[(($726)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F13=$727; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $728=$T; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $729=$728; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $730=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $731=(($730+16)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $732=HEAPU32[(($731)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $733=(($729)>>>0) >= (($732)>>>0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($733) { __label__ = 115; break; } else { var $742 = 0;__label__ = 116; break; } //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $735=$F13; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $736=$735; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $737=$2; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $738=(($737+16)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $739=HEAPU32[(($738)>>2)]; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $740=(($736)>>>0) >= (($739)>>>0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $742 = $740;__label__ = 116; break;
    case 116: 
      var $742;
      var $743=(($742)&1);
      var $744=(($743)==(1));
      var $745=(($744)|0)!=0;
      if ($745) { __label__ = 117; break; } else { __label__ = 118; break; }
    case 117: 
      var $747=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $748=$F13; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $749=(($748+12)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($749)>>2)]=$747; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $750=$T; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $751=(($750+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($751)>>2)]=$747; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $752=$F13; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $753=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $754=(($753+8)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($754)>>2)]=$752; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $755=$T; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $756=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $757=(($756+12)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($757)>>2)]=$755; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $758=$TP; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $759=(($758+24)|0); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($759)>>2)]=0; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 120; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 118: 
      _abort(); //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 119: 
      __label__ = 107; break; //@line 4253 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 120: 
      __label__ = 121; break;
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      var $766=$v; //@line 4255 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $767=$766; //@line 4255 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $768=(($767+8)|0); //@line 4255 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$768; //@line 4255 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 127; break; //@line 4255 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 124: 
      __label__ = 125; break; //@line 4257 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 125: 
      _abort(); //@line 4258 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4258 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 126: 
      $1=0; //@line 4260 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 127; break; //@line 4260 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $773=$1; //@line 4261 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $773; //@line 4261 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _sys_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize1;
      var $br2;
      var $end3;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1; //@line 3876 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tsize=0; //@line 3877 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mmap_flag=0; //@line 3878 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[((((_mparams)|0))>>2)]; //@line 3880 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)!=0; //@line 3880 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($5) { var $10 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 3880 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $7=_init_mparams(); //@line 3880 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=(($7)|0)!=0; //@line 3880 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10 = $8;__label__ = 3; break; //@line 3880 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $10;
      var $11=(($10)&1); //@line 3880 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$2; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=(($12+440)|0); //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$14 & 0; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $18=$3; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=HEAPU32[((((_mparams+12)|0))>>2)]; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=(($18)>>>0) >= (($19)>>>0); //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $22=$2; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=(($22+12)|0); //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)!=0; //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3883 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $27=$2; //@line 3884 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$3; //@line 3884 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=_mmap_alloc($27, $28); //@line 3884 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$29; //@line 3884 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$mem; //@line 3885 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0)!=0; //@line 3885 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3885 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $33=$mem; //@line 3886 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$33; //@line 3886 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 3886 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 9; break; //@line 3887 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $36=$2; //@line 3911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=(($36+440)|0); //@line 3911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 3911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=$38 & 4; //@line 3911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0)!=0; //@line 3911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($40) { __label__ = 42; break; } else { __label__ = 10; break; } //@line 3911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      $br=-1; //@line 3912 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=$2; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+24)|0); //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=(($44)|0)==0; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($45) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $55 = 0;__label__ = 13; break; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $48=$2; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=$2; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=(($49+24)|0); //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=HEAP32[(($50)>>2)]; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$51; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=_segment_holding($48, $52); //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55 = $53;__label__ = 13; break; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $55; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $ss=$55; //@line 3913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $asize=0; //@line 3914 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$ss; //@line 3917 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($56)|0)==0; //@line 3917 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 14; break; } else { __label__ = 22; break; } //@line 3917 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $59=_sbrk(0); //@line 3918 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $base=$59; //@line 3918 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$base; //@line 3919 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)|0)!=-1; //@line 3919 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($61) { __label__ = 15; break; } else { __label__ = 21; break; } //@line 3919 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $63=$3; //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=(($63+48)|0); //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=(($65-1)|0); //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=(($64+$66)|0); //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68-1)|0); //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=$69 ^ -1; //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=$67 & $70; //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $asize=$71; //@line 3920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=$base; //@line 3922 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=$72; //@line 3922 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3922 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=(($74-1)|0); //@line 3922 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=$73 & $75; //@line 3922 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=(($76)|0)==0; //@line 3922 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($77) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3922 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $79=$base; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=$79; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=(($81-1)|0); //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=(($80+$82)|0); //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=(($84-1)|0); //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=$85 ^ -1; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=$83 & $86; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=$base; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=$88; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=(($87-$89)|0); //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=$asize; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=(($91+$90)|0); //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $asize=$92; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 3923 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $94=$asize; //@line 3925 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=(($94)>>>0) < 2147483647; //@line 3925 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($95) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 3925 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $97=$asize; //@line 3926 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=_sbrk($97); //@line 3926 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $br=$98; //@line 3926 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$base; //@line 3926 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=(($98)|0)==(($99)|0); //@line 3926 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($100) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 3926 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $102=$base; //@line 3927 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tbase=$102; //@line 3927 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$asize; //@line 3928 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tsize=$103; //@line 3928 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3929 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 3930 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 26; break; //@line 3931 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $107=$3; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=$2; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=(($108+12)|0); //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=(($107-$110)|0); //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+48)|0); //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=(($113-1)|0); //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=(($112+$114)|0); //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=(($116-1)|0); //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=$117 ^ -1; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=$115 & $118; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $asize=$119; //@line 3934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=$asize; //@line 3936 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=(($120)>>>0) < 2147483647; //@line 3936 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($121) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 3936 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $123=$asize; //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=_sbrk($123); //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $br=$124; //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=$ss; //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=(($125)|0); //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=$ss; //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=(($128+4)|0); //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=HEAP32[(($129)>>2)]; //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=(($127+$130)|0); //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=(($124)|0)==(($131)|0); //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($132) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3937 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $134=$br; //@line 3938 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tbase=$134; //@line 3938 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$asize; //@line 3939 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tsize=$135; //@line 3939 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 3940 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $138=$tbase; //@line 3943 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=(($138)|0)==-1; //@line 3943 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($139) { __label__ = 27; break; } else { __label__ = 41; break; } //@line 3943 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $141=$br; //@line 3944 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=(($141)|0)!=-1; //@line 3944 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($142) { __label__ = 28; break; } else { __label__ = 37; break; } //@line 3944 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $144=$asize; //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)>>>0) < 2147483647; //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($145) { __label__ = 29; break; } else { __label__ = 36; break; } //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $147=$asize; //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=$3; //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $149=(($148+48)|0); //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=(($147)>>>0) < (($149)>>>0); //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($150) { __label__ = 30; break; } else { __label__ = 36; break; } //@line 3945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $152=$3; //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=(($152+48)|0); //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=$asize; //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=(($153-$154)|0); //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=(($156-1)|0); //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=(($155+$157)|0); //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=(($159-1)|0); //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=$160 ^ -1; //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=$158 & $161; //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $esize=$162; //@line 3947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=$esize; //@line 3948 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=(($163)>>>0) < 2147483647; //@line 3948 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($164) { __label__ = 31; break; } else { __label__ = 35; break; } //@line 3948 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $166=$esize; //@line 3949 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $167=_sbrk($166); //@line 3949 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $end=$167; //@line 3949 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $168=$end; //@line 3950 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=(($168)|0)!=-1; //@line 3950 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($169) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 3950 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $171=$esize; //@line 3951 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=$asize; //@line 3951 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $173=(($172+$171)|0); //@line 3951 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $asize=$173; //@line 3951 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3951 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $175=$asize; //@line 3953 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=(((-$175))|0); //@line 3953 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=_sbrk($176); //@line 3953 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $br=-1; //@line 3954 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break; //@line 3956 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      __label__ = 36; break; //@line 3957 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break; //@line 3958 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $182=$br; //@line 3959 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=(($182)|0)!=-1; //@line 3959 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($183) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3959 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $185=$br; //@line 3960 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tbase=$185; //@line 3960 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=$asize; //@line 3961 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tsize=$186; //@line 3961 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3962 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $188=$2; //@line 3964 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189=(($188+440)|0); //@line 3964 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 3964 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $191=$190 | 4; //@line 3964 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($189)>>2)]=$191; //@line 3964 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break; //@line 3965 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break; //@line 3968 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $195=$tbase; //@line 3982 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=(($195)|0)==-1; //@line 3982 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($196) { __label__ = 43; break; } else { __label__ = 52; break; } //@line 3982 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $198=$3; //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=(($198+48)|0); //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $201=(($200-1)|0); //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=(($199+$201)|0); //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=(($203-1)|0); //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=$204 ^ -1; //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=$202 & $205; //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $asize1=$206; //@line 3983 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=$asize1; //@line 3984 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=(($207)>>>0) < 2147483647; //@line 3984 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($208) { __label__ = 44; break; } else { __label__ = 51; break; } //@line 3984 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      $br2=-1; //@line 3985 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $end3=-1; //@line 3986 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=$asize1; //@line 3988 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=_sbrk($210); //@line 3988 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $br2=$211; //@line 3988 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=_sbrk(0); //@line 3989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $end3=$212; //@line 3989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=$br2; //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $214=(($213)|0)!=-1; //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($214) { __label__ = 45; break; } else { __label__ = 50; break; } //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $216=$end3; //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $217=(($216)|0)!=-1; //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($217) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $219=$br2; //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $220=$end3; //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $221=(($219)>>>0) < (($220)>>>0); //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($221) { __label__ = 47; break; } else { __label__ = 50; break; } //@line 3991 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $223=$end3; //@line 3992 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $224=$br2; //@line 3992 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $225=$223; //@line 3992 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $226=$224; //@line 3992 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=(($225-$226)|0); //@line 3992 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $ssize=$227; //@line 3992 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=$ssize; //@line 3993 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $229=$3; //@line 3993 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230=(($229+40)|0); //@line 3993 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $231=(($228)>>>0) > (($230)>>>0); //@line 3993 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 3993 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $233=$br2; //@line 3994 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tbase=$233; //@line 3994 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $234=$ssize; //@line 3995 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tsize=$234; //@line 3995 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 3996 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 49: 
      __label__ = 50; break; //@line 3997 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 50: 
      __label__ = 51; break; //@line 3998 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 3999 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $239=$tbase; //@line 4001 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $240=(($239)|0)!=-1; //@line 4001 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($240) { __label__ = 53; break; } else { __label__ = 91; break; } //@line 4001 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $242=$tsize; //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=$2; //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $244=(($243+432)|0); //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $246=(($245+$242)|0); //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($244)>>2)]=$246; //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=$2; //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $248=(($247+436)|0); //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $250=(($246)>>>0) > (($249)>>>0); //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($250) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4003 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $252=$2; //@line 4004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $253=(($252+432)|0); //@line 4004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $254=HEAP32[(($253)>>2)]; //@line 4004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $255=$2; //@line 4004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $256=(($255+436)|0); //@line 4004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($256)>>2)]=$254; //@line 4004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 55; break; //@line 4004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $258=$2; //@line 4006 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+24)|0); //@line 4006 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $260=HEAP32[(($259)>>2)]; //@line 4006 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $261=(($260)|0)!=0; //@line 4006 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($261) { __label__ = 63; break; } else { __label__ = 56; break; } //@line 4006 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $263=$2; //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $265=HEAP32[(($264)>>2)]; //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $266=(($265)|0)==0; //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($266) { __label__ = 58; break; } else { __label__ = 57; break; } //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $268=$tbase; //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $269=$2; //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $270=(($269+16)|0); //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $271=HEAPU32[(($270)>>2)]; //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $272=(($268)>>>0) < (($271)>>>0); //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($272) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4007 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $274=$tbase; //@line 4008 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $275=$2; //@line 4008 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $276=(($275+16)|0); //@line 4008 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($276)>>2)]=$274; //@line 4008 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4008 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $278=$tbase; //@line 4009 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=$2; //@line 4009 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+444)|0); //@line 4009 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $281=(($280)|0); //@line 4009 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($281)>>2)]=$278; //@line 4009 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $282=$tsize; //@line 4010 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $283=$2; //@line 4010 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $284=(($283+444)|0); //@line 4010 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+4)|0); //@line 4010 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($285)>>2)]=$282; //@line 4010 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $286=$mmap_flag; //@line 4011 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $287=$2; //@line 4011 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $288=(($287+444)|0); //@line 4011 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $289=(($288+12)|0); //@line 4011 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($289)>>2)]=$286; //@line 4011 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $290=HEAP32[((((_mparams)|0))>>2)]; //@line 4012 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $291=$2; //@line 4012 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $292=(($291+36)|0); //@line 4012 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 4012 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $293=$2; //@line 4013 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+32)|0); //@line 4013 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=-1; //@line 4013 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $295=$2; //@line 4014 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _init_bins($295); //@line 4014 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $296=$2; //@line 4016 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $297=(($296)|0)==((__gm_)|0); //@line 4016 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($297) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4016 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $299=$2; //@line 4017 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $300=$tbase; //@line 4017 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $301=$300; //@line 4017 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $302=$tsize; //@line 4017 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $303=(($302-40)|0); //@line 4017 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _init_top($299, $301, $303); //@line 4017 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break; //@line 4017 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $305=$2; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $306=$305; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $307=(($306-8)|0); //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $308=$307; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $309=$308; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $310=$2; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $311=$310; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $312=(($311-8)|0); //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $313=$312; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $314=(($313+4)|0); //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $315=HEAP32[(($314)>>2)]; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $316=$315 & -8; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $317=(($309+$316)|0); //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $318=$317; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mn=$318; //@line 4022 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $319=$2; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $320=$mn; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $321=$tbase; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $322=$tsize; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $323=(($321+$322)|0); //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=$mn; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $325=$324; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326=$323; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $327=$325; //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $328=(($326-$327)|0); //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $329=(($328-40)|0); //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _init_top($319, $320, $329); //@line 4023 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break;
    case 62: 
      __label__ = 88; break; //@line 4025 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $332=$2; //@line 4029 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $333=(($332+444)|0); //@line 4029 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$333; //@line 4029 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $335=$sp; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $336=(($335)|0)!=0; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($336) { __label__ = 65; break; } else { var $348 = 0;__label__ = 66; break; } //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $338=$tbase; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $339=$sp; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)|0); //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $341=HEAP32[(($340)>>2)]; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $342=$sp; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $344=HEAP32[(($343)>>2)]; //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $345=(($341+$344)|0); //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $346=(($338)|0)!=(($345)|0); //@line 4031 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $348 = $346;__label__ = 66; break;
    case 66: 
      var $348;
      if ($348) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $350=$sp; //@line 4032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+8)|0); //@line 4032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$352; //@line 4032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $354=$sp; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $355=(($354)|0)!=0; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($355) { __label__ = 69; break; } else { __label__ = 74; break; } //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $357=$sp; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $358=(($357+12)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $360=$359 & 8; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $361=(($360)|0)!=0; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($361) { __label__ = 74; break; } else { __label__ = 70; break; } //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $363=$sp; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $364=(($363+12)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $365=HEAP32[(($364)>>2)]; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $366=$365 & 0; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $367=$mmap_flag; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=(($366)|0)==(($367)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($368) { __label__ = 71; break; } else { __label__ = 74; break; } //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $370=$2; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $371=(($370+24)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $372=HEAP32[(($371)>>2)]; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $373=$372; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $374=$sp; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $375=(($374)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $376=HEAPU32[(($375)>>2)]; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $377=(($373)>>>0) >= (($376)>>>0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($377) { __label__ = 72; break; } else { __label__ = 74; break; } //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $379=$2; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $380=(($379+24)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $381=HEAP32[(($380)>>2)]; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $382=$381; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $383=$sp; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $384=(($383)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=$sp; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $387=(($386+4)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $389=(($385+$388)|0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $390=(($382)>>>0) < (($389)>>>0); //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($390) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $392=$tsize; //@line 4037 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $393=$sp; //@line 4037 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $394=(($393+4)|0); //@line 4037 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $395=HEAP32[(($394)>>2)]; //@line 4037 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $396=(($395+$392)|0); //@line 4037 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($394)>>2)]=$396; //@line 4037 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $397=$2; //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $398=$2; //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $399=(($398+24)|0); //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $400=HEAP32[(($399)>>2)]; //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $401=$2; //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $402=(($401+12)|0); //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $403=HEAP32[(($402)>>2)]; //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $404=$tsize; //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $405=(($403+$404)|0); //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _init_top($397, $400, $405); //@line 4038 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 4039 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $407=$tbase; //@line 4041 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $408=$2; //@line 4041 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $409=(($408+16)|0); //@line 4041 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $410=HEAPU32[(($409)>>2)]; //@line 4041 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $411=(($407)>>>0) < (($410)>>>0); //@line 4041 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($411) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 4041 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $413=$tbase; //@line 4042 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $414=$2; //@line 4042 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $415=(($414+16)|0); //@line 4042 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($415)>>2)]=$413; //@line 4042 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4042 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $417=$2; //@line 4043 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $418=(($417+444)|0); //@line 4043 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$418; //@line 4043 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $420=$sp; //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $421=(($420)|0)!=0; //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($421) { __label__ = 78; break; } else { var $431 = 0;__label__ = 79; break; } //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $423=$sp; //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $424=(($423)|0); //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $425=HEAP32[(($424)>>2)]; //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $426=$tbase; //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $427=$tsize; //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $428=(($426+$427)|0); //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $429=(($425)|0)!=(($428)|0); //@line 4044 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $431 = $429;__label__ = 79; break;
    case 79: 
      var $431;
      if ($431) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $433=$sp; //@line 4045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+8)|0); //@line 4045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$435; //@line 4045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $437=$sp; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $438=(($437)|0)!=0; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($438) { __label__ = 82; break; } else { __label__ = 85; break; } //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $440=$sp; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+12)|0); //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $442=HEAP32[(($441)>>2)]; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $443=$442 & 8; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $444=(($443)|0)!=0; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($444) { __label__ = 85; break; } else { __label__ = 83; break; } //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $446=$sp; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $447=(($446+12)|0); //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $448=HEAP32[(($447)>>2)]; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $449=$448 & 0; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $450=$mmap_flag; //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $451=(($449)|0)==(($450)|0); //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($451) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 4046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $453=$sp; //@line 4049 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $454=(($453)|0); //@line 4049 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $455=HEAP32[(($454)>>2)]; //@line 4049 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldbase=$455; //@line 4049 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $456=$tbase; //@line 4050 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $457=$sp; //@line 4050 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $458=(($457)|0); //@line 4050 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($458)>>2)]=$456; //@line 4050 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $459=$tsize; //@line 4051 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $460=$sp; //@line 4051 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $461=(($460+4)|0); //@line 4051 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $462=HEAP32[(($461)>>2)]; //@line 4051 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $463=(($462+$459)|0); //@line 4051 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($461)>>2)]=$463; //@line 4051 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $464=$2; //@line 4052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $465=$tbase; //@line 4052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $466=$oldbase; //@line 4052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $467=$3; //@line 4052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $468=_prepend_alloc($464, $465, $466, $467); //@line 4052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$468; //@line 4052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 4052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $470=$2; //@line 4055 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $471=$tbase; //@line 4055 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $472=$tsize; //@line 4055 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $473=$mmap_flag; //@line 4055 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _add_segment($470, $471, $472, $473); //@line 4055 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      var $477=$3; //@line 4059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $478=$2; //@line 4059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $479=(($478+12)|0); //@line 4059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $480=HEAPU32[(($479)>>2)]; //@line 4059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $481=(($477)>>>0) < (($480)>>>0); //@line 4059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($481) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $483=$3; //@line 4060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $484=$2; //@line 4060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $485=(($484+12)|0); //@line 4060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $486=HEAP32[(($485)>>2)]; //@line 4060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $487=(($486-$483)|0); //@line 4060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($485)>>2)]=$487; //@line 4060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$487; //@line 4060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $488=$2; //@line 4061 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $489=(($488+24)|0); //@line 4061 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $490=HEAP32[(($489)>>2)]; //@line 4061 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$490; //@line 4061 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $491=$p; //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $492=$491; //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $493=$3; //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $494=(($492+$493)|0); //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $495=$494; //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $496=$2; //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+24)|0); //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $r=$495; //@line 4062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $498=$rsize; //@line 4063 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $499=$498 | 1; //@line 4063 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $500=$r; //@line 4063 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $501=(($500+4)|0); //@line 4063 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($501)>>2)]=$499; //@line 4063 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $502=$3; //@line 4064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $503=$502 | 1; //@line 4064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $504=$503 | 2; //@line 4064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $505=$p; //@line 4064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $507=$p; //@line 4067 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $508=$507; //@line 4067 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $509=(($508+8)|0); //@line 4067 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$509; //@line 4067 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 4067 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 90: 
      __label__ = 91; break; //@line 4069 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $512=___errno(); //@line 4071 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($512)>>2)]=12; //@line 4071 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=0; //@line 4072 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 4072 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $514=$1; //@line 4073 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $514; //@line 4073 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _free($mem) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1; //@line 4740 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4740 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($3) { __label__ = 2; break; } else { __label__ = 196; break; } //@line 4740 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $5=$1; //@line 4741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5-8)|0); //@line 4741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 4741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$7; //@line 4741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$p; //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=$8; //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($9)>>>0) >= (($10)>>>0); //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 3; break; } else { var $19 = 0;__label__ = 4; break; } //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $13=$p; //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 3; //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=(($16)|0)!=1; //@line 4753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19 = $17;__label__ = 4; break;
    case 4: 
      var $19;
      var $20=(($19)&1);
      var $21=(($20)==(1));
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 5; break; } else { __label__ = 193; break; }
    case 5: 
      var $24=$p; //@line 4754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+4)|0); //@line 4754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 4754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & -8; //@line 4754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$27; //@line 4754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$p; //@line 4755 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 4755 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$psize; //@line 4755 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=(($29+$30)|0); //@line 4755 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=$31; //@line 4755 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $next=$32; //@line 4755 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$p; //@line 4756 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=(($33+4)|0); //@line 4756 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 4756 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$35 & 1; //@line 4756 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=(($36)|0)!=0; //@line 4756 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($37) { __label__ = 77; break; } else { __label__ = 6; break; } //@line 4756 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $39=$p; //@line 4757 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0); //@line 4757 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 4757 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $prevsize=$41; //@line 4757 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=$p; //@line 4758 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+4)|0); //@line 4758 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4758 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 3; //@line 4758 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)==0; //@line 4758 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4758 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $48=$prevsize; //@line 4759 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=(($48+16)|0); //@line 4759 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$psize; //@line 4759 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=(($50+$49)|0); //@line 4759 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$51; //@line 4759 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4762 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $53=$p; //@line 4765 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 4765 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=$prevsize; //@line 4765 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=(((-$55))|0); //@line 4765 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($54+$56)|0); //@line 4765 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=$57; //@line 4765 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $prev=$58; //@line 4765 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$prevsize; //@line 4766 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$psize; //@line 4766 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=(($60+$59)|0); //@line 4766 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$61; //@line 4766 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=$prev; //@line 4767 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$62; //@line 4767 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=$prev; //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=$63; //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=(($64)>>>0) >= (($65)>>>0); //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=(($66)&1); //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=(($67)==(1)); //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0)!=0; //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($69) { __label__ = 9; break; } else { __label__ = 74; break; } //@line 4768 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $71=$p; //@line 4769 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4769 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=(($71)|0)!=(($72)|0); //@line 4769 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($73) { __label__ = 10; break; } else { __label__ = 70; break; } //@line 4769 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $75=$prevsize; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=$75 >>> 3; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=(($76)>>>0) < 32; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($77) { __label__ = 11; break; } else { __label__ = 23; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $79=$p; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+8)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$81; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=$p; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+12)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B=$84; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=$prevsize; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=$85 >>> 3; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I=$86; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=$F; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=$B; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=(($87)|0)==(($88)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($89) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $91=$I; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=1 << $91; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=$92 ^ -1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=HEAP32[((((__gm_)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=$94 & $93; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$95; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $97=$F; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$I; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$98 << 1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=((((__gm_+40)|0)+($99<<2))|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=(($97)|0)==(($102)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($103) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $105=$F; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=$105; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=(($106)>>>0) >= (($107)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 15; break; } else { var $125 = 0;__label__ = 18; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $110=$B; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=$I; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=$111 << 1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=((((__gm_+40)|0)+($112<<2))|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=(($110)|0)==(($115)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($116) { var $123 = 1;__label__ = 17; break; } else { __label__ = 16; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $118=$B; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=$118; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=(($119)>>>0) >= (($120)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123 = $121;__label__ = 17; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $123;
      var $125 = $123;__label__ = 18; break;
    case 18: 
      var $125;
      var $126=(($125)&1);
      var $127=(($126)==(1));
      var $128=(($127)|0)!=0;
      if ($128) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $130=$B; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=$F; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($132)>>2)]=$130; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=$F; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=$B; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=(($134+8)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($135)>>2)]=$133; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      _abort(); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 69; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $140=$p; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=$140; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $TP=$141; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=(($142+24)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $XP=$144; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=(($145+12)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $149=(($147)|0)!=(($148)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($149) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $151=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+8)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F1=$153; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=(($154+12)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=HEAP32[(($155)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$156; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=$F1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=(($158)>>>0) >= (($159)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=(($160)&1); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=(($161)==(1)); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=(($162)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($163) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $165=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $166=$F1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $167=(($166+12)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($167)>>2)]=$165; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $168=$F1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+8)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($170)>>2)]=$168; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 40; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $174=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $175=(($174+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+4)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$176; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$177; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($178) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $180=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $181=(($180+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $182=(($181)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$182; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=HEAP32[(($182)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$183; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $184=(($183)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($184) { __label__ = 30; break; } else { __label__ = 39; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 31; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $187=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189=(($188+4)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$189; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $191=(($190)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($191) { var $199 = 1;__label__ = 33; break; } else { __label__ = 32; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $193=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=(($194)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$195; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=HEAP32[(($195)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=(($196)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199 = $197;__label__ = 33; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $199;
      if ($199) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $201=$CP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$201; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=HEAP32[(($201)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$202; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 31; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $204=$RP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=$204; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=(($205)>>>0) >= (($206)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=(($207)&1); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=(($208)==(1)); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=(($209)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($210) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $212=$RP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($212)>>2)]=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      _abort(); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      __label__ = 39; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $217=$XP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 41; break; } else { __label__ = 68; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $220=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $221=(($220+28)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $222=HEAP32[(($221)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $223=((((__gm_+304)|0)+($222<<2))|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H=$223; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $224=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $225=$H; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $226=HEAP32[(($225)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=(($224)|0)==(($226)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($227) { __label__ = 42; break; } else { __label__ = 45; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $229=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230=$H; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($230)>>2)]=$229; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $231=(($229)|0)==0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $233=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $234=(($233+28)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $235=HEAP32[(($234)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $236=1 << $235; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=$236 ^ -1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $238=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $239=$238 & $237; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$239; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      __label__ = 52; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $242=$XP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=$242; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $245=(($243)>>>0) >= (($244)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $246=(($245)&1); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($248) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $250=$XP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $253=HEAP32[(($252)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $254=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $255=(($253)|0)==(($254)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($255) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $257=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $258=$XP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $260=(($259)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($260)>>2)]=$257; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $262=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $263=$XP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $265=(($264+4)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($265)>>2)]=$262; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break;
    case 49: 
      __label__ = 51; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 50: 
      _abort(); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $270=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $271=(($270)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($271) { __label__ = 53; break; } else { __label__ = 67; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $273=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $274=$273; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $276=(($274)>>>0) >= (($275)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $277=(($276)&1); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=(($278)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($279) { __label__ = 54; break; } else { __label__ = 65; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $281=$XP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $282=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $283=(($282+24)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($283)>>2)]=$281; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $284=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $286=(($285)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $287=HEAP32[(($286)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C0=$287; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 55; break; } else { __label__ = 59; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $290=$C0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $291=$290; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $292=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $293=(($291)>>>0) >= (($292)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $294=(($293)&1); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $295=(($294)==(1)); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $296=(($295)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($296) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $298=$C0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $299=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $300=(($299+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $301=(($300)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($301)>>2)]=$298; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $302=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $303=$C0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $304=(($303+24)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($304)>>2)]=$302; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 58; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 57: 
      _abort(); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 58: 
      __label__ = 59; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $308=$TP; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $309=(($308+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $310=(($309+4)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $311=HEAP32[(($310)>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C1=$311; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $312=(($311)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($312) { __label__ = 60; break; } else { __label__ = 64; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $314=$C1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $315=$314; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $316=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $317=(($315)>>>0) >= (($316)>>>0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)&1); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $319=(($318)==(1)); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $320=(($319)|0)!=0; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($320) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $322=$C1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $323=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=(($323+16)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($325)>>2)]=$322; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326=$R; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $327=$C1; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $328=(($327+24)|0); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($328)>>2)]=$326; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 62: 
      _abort(); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 63: 
      __label__ = 64; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 66; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 65: 
      _abort(); //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 67; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 68; break; //@line 4770 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 73; break; //@line 4771 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $338=$next; //@line 4772 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $339=(($338+4)|0); //@line 4772 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $340=HEAP32[(($339)>>2)]; //@line 4772 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $341=$340 & 3; //@line 4772 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)==3; //@line 4772 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 4772 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $344=$psize; //@line 4773 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$344; //@line 4773 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $345=$next; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $346=(($345+4)|0); //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $347=HEAP32[(($346)>>2)]; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $348=$347 & -2; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($346)>>2)]=$348; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $349=$psize; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $350=$349 | 1; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=$p; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $352=(($351+4)|0); //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($352)>>2)]=$350; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $353=$psize; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $354=$p; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $355=$354; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $356=$psize; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $357=(($355+$356)|0); //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $358=$357; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $359=(($358)|0); //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($359)>>2)]=$353; //@line 4774 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4775 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 72: 
      __label__ = 73; break;
    case 73: 
      __label__ = 75; break; //@line 4777 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 74: 
      __label__ = 194; break; //@line 4779 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break; //@line 4781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $366=$p; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $367=$366; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=$next; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $369=$368; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $370=(($367)>>>0) < (($369)>>>0); //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($370) { __label__ = 78; break; } else { var $378 = 0;__label__ = 79; break; } //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $372=$next; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $373=(($372+4)|0); //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $374=HEAP32[(($373)>>2)]; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $375=$374 & 1; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $376=(($375)|0)!=0; //@line 4783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $378 = $376;__label__ = 79; break;
    case 79: 
      var $378;
      var $379=(($378)&1);
      var $380=(($379)==(1));
      var $381=(($380)|0)!=0;
      if ($381) { __label__ = 80; break; } else { __label__ = 192; break; }
    case 80: 
      var $383=$next; //@line 4784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $384=(($383+4)|0); //@line 4784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=$385 & 2; //@line 4784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0)!=0; //@line 4784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($387) { __label__ = 153; break; } else { __label__ = 81; break; } //@line 4784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $389=$next; //@line 4785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $390=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $391=(($389)|0)==(($390)|0); //@line 4785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($391) { __label__ = 82; break; } else { __label__ = 87; break; } //@line 4785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $393=$psize; //@line 4786 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $394=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4786 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $395=(($394+$393)|0); //@line 4786 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$395; //@line 4786 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tsize=$395; //@line 4786 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $396=$p; //@line 4787 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$396; //@line 4787 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $397=$tsize; //@line 4788 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $398=$397 | 1; //@line 4788 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $399=$p; //@line 4788 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4788 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($400)>>2)]=$398; //@line 4788 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $401=$p; //@line 4789 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4789 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $403=(($401)|0)==(($402)|0); //@line 4789 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($403) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 4789 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 83: 
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4790 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4791 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4792 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $406=$tsize; //@line 4793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $407=HEAPU32[((((__gm_+28)|0))>>2)]; //@line 4793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $408=(($406)>>>0) > (($407)>>>0); //@line 4793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($408) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $410=_sys_trim(__gm_, 0); //@line 4794 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 4794 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 86: 
      __label__ = 195; break; //@line 4795 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $413=$next; //@line 4797 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $414=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4797 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $415=(($413)|0)==(($414)|0); //@line 4797 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($415) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 4797 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $417=$psize; //@line 4798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $418=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $419=(($418+$417)|0); //@line 4798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$419; //@line 4798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $dsize=$419; //@line 4798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $420=$p; //@line 4799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$420; //@line 4799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $421=$dsize; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $422=$421 | 1; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $423=$p; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $424=(($423+4)|0); //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($424)>>2)]=$422; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $425=$dsize; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $426=$p; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $427=$426; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $428=$dsize; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $429=(($427+$428)|0); //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $430=$429; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $431=(($430)|0); //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($431)>>2)]=$425; //@line 4800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $433=$next; //@line 4804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+4)|0); //@line 4804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $436=$435 & -8; //@line 4804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nsize=$436; //@line 4804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $437=$nsize; //@line 4805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $438=$psize; //@line 4805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $439=(($438+$437)|0); //@line 4805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$439; //@line 4805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $440=$nsize; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $441=$440 >>> 3; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $442=(($441)>>>0) < 32; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($442) { __label__ = 90; break; } else { __label__ = 102; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $444=$next; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $446=HEAP32[(($445)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F2=$446; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $447=$next; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $448=(($447+12)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $449=HEAP32[(($448)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B3=$449; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $450=$nsize; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $451=$450 >>> 3; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I4=$451; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $452=$F2; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $453=$B3; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $454=(($452)|0)==(($453)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($454) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $456=$I4; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $457=1 << $456; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $458=$457 ^ -1; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $459=HEAP32[((((__gm_)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $460=$459 & $458; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$460; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $462=$F2; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $463=$I4; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $464=$463 << 1; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $465=((((__gm_+40)|0)+($464<<2))|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $466=$465; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $467=$466; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $468=(($462)|0)==(($467)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($468) { __label__ = 94; break; } else { __label__ = 93; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $470=$F2; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $471=$470; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $472=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $473=(($471)>>>0) >= (($472)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($473) { __label__ = 94; break; } else { var $490 = 0;__label__ = 97; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $475=$B3; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $476=$I4; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $477=$476 << 1; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $478=((((__gm_+40)|0)+($477<<2))|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $479=$478; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $480=$479; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $481=(($475)|0)==(($480)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($481) { var $488 = 1;__label__ = 96; break; } else { __label__ = 95; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $483=$B3; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $484=$483; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $485=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $486=(($484)>>>0) >= (($485)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $488 = $486;__label__ = 96; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $488;
      var $490 = $488;__label__ = 97; break;
    case 97: 
      var $490;
      var $491=(($490)&1);
      var $492=(($491)==(1));
      var $493=(($492)|0)!=0;
      if ($493) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $495=$B3; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $496=$F2; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+12)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $498=$F2; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $499=$B3; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $500=(($499+8)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($500)>>2)]=$498; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 100; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 99: 
      _abort(); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 100: 
      __label__ = 101; break;
    case 101: 
      __label__ = 148; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 102: 
      var $505=$next; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $506=$505; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $TP5=$506; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $507=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $508=(($507+24)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $509=HEAP32[(($508)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $XP6=$509; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $510=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $511=(($510+12)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $512=HEAP32[(($511)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $513=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $514=(($512)|0)!=(($513)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($514) { __label__ = 103; break; } else { __label__ = 107; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $516=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $517=(($516+8)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $518=HEAP32[(($517)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F8=$518; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $519=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $520=(($519+12)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $521=HEAP32[(($520)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R7=$521; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $522=$F8; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $523=$522; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $524=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $525=(($523)>>>0) >= (($524)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $526=(($525)&1); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $527=(($526)==(1)); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $528=(($527)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($528) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $530=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $531=$F8; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $532=(($531+12)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($532)>>2)]=$530; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $533=$F8; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $534=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $535=(($534+8)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($535)>>2)]=$533; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 105: 
      _abort(); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 106: 
      __label__ = 119; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $539=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $540=(($539+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $541=(($540+4)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP9=$541; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $542=HEAP32[(($541)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R7=$542; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $543=(($542)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($543) { __label__ = 109; break; } else { __label__ = 108; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $545=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $546=(($545+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $547=(($546)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP9=$547; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $548=HEAP32[(($547)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R7=$548; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $549=(($548)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($549) { __label__ = 109; break; } else { __label__ = 118; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 109: 
      __label__ = 110; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $552=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $553=(($552+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $554=(($553+4)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP10=$554; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $555=HEAP32[(($554)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $556=(($555)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($556) { var $564 = 1;__label__ = 112; break; } else { __label__ = 111; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $558=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $559=(($558+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $560=(($559)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP10=$560; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $561=HEAP32[(($560)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $562=(($561)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $564 = $562;__label__ = 112; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $564;
      if ($564) { __label__ = 113; break; } else { __label__ = 114; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 113: 
      var $566=$CP10; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP9=$566; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $567=HEAP32[(($566)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R7=$567; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 110; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $569=$RP9; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $570=$569; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $571=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $572=(($570)>>>0) >= (($571)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $573=(($572)&1); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $574=(($573)==(1)); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $575=(($574)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($575) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $577=$RP9; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($577)>>2)]=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 117; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 116: 
      _abort(); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 117: 
      __label__ = 118; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 118: 
      __label__ = 119; break;
    case 119: 
      var $582=$XP6; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $583=(($582)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($583) { __label__ = 120; break; } else { __label__ = 147; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 120: 
      var $585=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $586=(($585+28)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $587=HEAP32[(($586)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $588=((((__gm_+304)|0)+($587<<2))|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H11=$588; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $589=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $590=$H11; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $591=HEAP32[(($590)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $592=(($589)|0)==(($591)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($592) { __label__ = 121; break; } else { __label__ = 124; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 121: 
      var $594=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $595=$H11; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($595)>>2)]=$594; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $596=(($594)|0)==0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($596) { __label__ = 122; break; } else { __label__ = 123; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 122: 
      var $598=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $599=(($598+28)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $600=HEAP32[(($599)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $601=1 << $600; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $602=$601 ^ -1; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $603=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $604=$603 & $602; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$604; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 123: 
      __label__ = 131; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 124: 
      var $607=$XP6; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $608=$607; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $609=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $610=(($608)>>>0) >= (($609)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $611=(($610)&1); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $612=(($611)==(1)); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $613=(($612)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($613) { __label__ = 125; break; } else { __label__ = 129; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 125: 
      var $615=$XP6; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $616=(($615+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $617=(($616)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $618=HEAP32[(($617)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $619=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $620=(($618)|0)==(($619)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($620) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 126: 
      var $622=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $623=$XP6; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $624=(($623+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $625=(($624)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($625)>>2)]=$622; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $627=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $628=$XP6; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $629=(($628+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $630=(($629+4)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($630)>>2)]=$627; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break;
    case 128: 
      __label__ = 130; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 129: 
      _abort(); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 130: 
      __label__ = 131; break;
    case 131: 
      var $635=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $636=(($635)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($636) { __label__ = 132; break; } else { __label__ = 146; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 132: 
      var $638=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $639=$638; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $640=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $641=(($639)>>>0) >= (($640)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $642=(($641)&1); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $643=(($642)==(1)); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $644=(($643)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($644) { __label__ = 133; break; } else { __label__ = 144; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 133: 
      var $646=$XP6; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $647=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $648=(($647+24)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($648)>>2)]=$646; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $649=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $650=(($649+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $651=(($650)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $652=HEAP32[(($651)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C012=$652; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $653=(($652)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($653) { __label__ = 134; break; } else { __label__ = 138; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 134: 
      var $655=$C012; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $656=$655; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $657=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $658=(($656)>>>0) >= (($657)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $659=(($658)&1); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $660=(($659)==(1)); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $661=(($660)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($661) { __label__ = 135; break; } else { __label__ = 136; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 135: 
      var $663=$C012; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $664=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $665=(($664+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $666=(($665)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($666)>>2)]=$663; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $667=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $668=$C012; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $669=(($668+24)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($669)>>2)]=$667; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 137; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 136: 
      _abort(); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 137: 
      __label__ = 138; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 138: 
      var $673=$TP5; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $674=(($673+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $675=(($674+4)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $676=HEAP32[(($675)>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C113=$676; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $677=(($676)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($677) { __label__ = 139; break; } else { __label__ = 143; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 139: 
      var $679=$C113; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $680=$679; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $681=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $682=(($680)>>>0) >= (($681)>>>0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $683=(($682)&1); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $684=(($683)==(1)); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $685=(($684)|0)!=0; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($685) { __label__ = 140; break; } else { __label__ = 141; break; } //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 140: 
      var $687=$C113; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $688=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $689=(($688+16)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $690=(($689+4)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($690)>>2)]=$687; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $691=$R7; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $692=$C113; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $693=(($692+24)|0); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($693)>>2)]=$691; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 142; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 141: 
      _abort(); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 142: 
      __label__ = 143; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 143: 
      __label__ = 145; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 144: 
      _abort(); //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 145: 
      __label__ = 146; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 146: 
      __label__ = 147; break; //@line 4806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 147: 
      __label__ = 148; break;
    case 148: 
      var $702=$psize; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $703=$702 | 1; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $704=$p; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $705=(($704+4)|0); //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($705)>>2)]=$703; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $706=$psize; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $707=$p; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $708=$707; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $709=$psize; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $710=(($708+$709)|0); //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $711=$710; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $712=(($711)|0); //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($712)>>2)]=$706; //@line 4807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $713=$p; //@line 4808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $714=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $715=(($713)|0)==(($714)|0); //@line 4808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($715) { __label__ = 149; break; } else { __label__ = 150; break; } //@line 4808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 149: 
      var $717=$psize; //@line 4809 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$717; //@line 4809 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 150: 
      __label__ = 151; break;
    case 151: 
      __label__ = 152; break;
    case 152: 
      __label__ = 154; break; //@line 4813 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 153: 
      var $722=$next; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $723=(($722+4)|0); //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $724=HEAP32[(($723)>>2)]; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $725=$724 & -2; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($723)>>2)]=$725; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $726=$psize; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $727=$726 | 1; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $728=$p; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $729=(($728+4)|0); //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($729)>>2)]=$727; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $730=$psize; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $731=$p; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $732=$731; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $733=$psize; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $734=(($732+$733)|0); //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $735=$734; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $736=(($735)|0); //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($736)>>2)]=$730; //@line 4815 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 154; break;
    case 154: 
      var $738=$psize; //@line 4817 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $739=$738 >>> 3; //@line 4817 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $740=(($739)>>>0) < 32; //@line 4817 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($740) { __label__ = 155; break; } else { __label__ = 162; break; } //@line 4817 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 155: 
      var $742=$psize; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $743=$742 >>> 3; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I14=$743; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $744=$I14; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $745=$744 << 1; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $746=((((__gm_+40)|0)+($745<<2))|0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $747=$746; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $748=$747; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B15=$748; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $749=$B15; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F16=$749; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $750=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $751=$I14; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $752=1 << $751; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $753=$750 & $752; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $754=(($753)|0)!=0; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($754) { __label__ = 157; break; } else { __label__ = 156; break; } //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 156: 
      var $756=$I14; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $757=1 << $756; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $758=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $759=$758 | $757; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$759; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 161; break; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 157: 
      var $761=$B15; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $762=(($761+8)|0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $763=HEAP32[(($762)>>2)]; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $764=$763; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $765=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $766=(($764)>>>0) >= (($765)>>>0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $767=(($766)&1); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $768=(($767)==(1)); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $769=(($768)|0)!=0; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($769) { __label__ = 158; break; } else { __label__ = 159; break; } //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 158: 
      var $771=$B15; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $772=(($771+8)|0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $773=HEAP32[(($772)>>2)]; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F16=$773; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 160; break; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 159: 
      _abort(); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 160: 
      __label__ = 161; break;
    case 161: 
      var $777=$p; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $778=$B15; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $779=(($778+8)|0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($779)>>2)]=$777; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $780=$p; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $781=$F16; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $782=(($781+12)|0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($782)>>2)]=$780; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $783=$F16; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $784=$p; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $785=(($784+8)|0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($785)>>2)]=$783; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $786=$B15; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $787=$p; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $788=(($787+12)|0); //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($788)>>2)]=$786; //@line 4818 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 191; break; //@line 4820 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 162: 
      var $790=$p; //@line 4822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $791=$790; //@line 4822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tp=$791; //@line 4822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $792=$psize; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $793=$792 >>> 8; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $X=$793; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $794=$X; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $795=(($794)|0)==0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($795) { __label__ = 163; break; } else { __label__ = 164; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 163: 
      $I18=0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 164: 
      var $798=$X; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $799=(($798)>>>0) > 65535; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($799) { __label__ = 165; break; } else { __label__ = 166; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 165: 
      $I18=31; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 167; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 166: 
      var $802=$X; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$802; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $803=$Y; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $804=(($803-256)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $805=$804 >>> 16; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $806=$805 & 8; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$806; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $807=$N; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $808=$Y; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $809=$808 << $807; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$809; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $810=(($809-4096)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $811=$810 >>> 16; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $812=$811 & 4; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$812; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $813=$K; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $814=$N; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $815=(($814+$813)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$815; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $816=$K; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $817=$Y; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $818=$817 << $816; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$818; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $819=(($818-16384)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $820=$819 >>> 16; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $821=$820 & 2; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$821; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $822=$N; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $823=(($822+$821)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$823; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $824=$N; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $825=((14-$824)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $826=$K; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $827=$Y; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $828=$827 << $826; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$828; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $829=$828 >>> 15; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $830=(($825+$829)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$830; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $831=$K; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $832=$831 << 1; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $833=$psize; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $834=$K; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $835=(($834+7)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $836=$833 >>> (($835)>>>0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $837=$836 & 1; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $838=(($832+$837)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I18=$838; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 167; break;
    case 167: 
      __label__ = 168; break;
    case 168: 
      var $841=$I18; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $842=((((__gm_+304)|0)+($841<<2))|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H17=$842; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $843=$I18; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $844=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $845=(($844+28)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($845)>>2)]=$843; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $846=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $847=(($846+16)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $848=(($847+4)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($848)>>2)]=0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $849=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $850=(($849+16)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $851=(($850)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($851)>>2)]=0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $852=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $853=$I18; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $854=1 << $853; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $855=$852 & $854; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $856=(($855)|0)!=0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($856) { __label__ = 170; break; } else { __label__ = 169; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 169: 
      var $858=$I18; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $859=1 << $858; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $860=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $861=$860 | $859; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$861; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $862=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $863=$H17; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($863)>>2)]=$862; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $864=$H17; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $865=$864; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $866=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $867=(($866+24)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($867)>>2)]=$865; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $868=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $869=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $870=(($869+12)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($870)>>2)]=$868; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $871=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $872=(($871+8)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($872)>>2)]=$868; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 170: 
      var $874=$H17; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $875=HEAP32[(($874)>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$875; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $876=$psize; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $877=$I18; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $878=(($877)|0)==31; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($878) { __label__ = 171; break; } else { __label__ = 172; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 171: 
      var $887 = 0;__label__ = 173; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 172: 
      var $881=$I18; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $882=$881 >>> 1; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $883=(($882+8)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $884=(($883-2)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $885=((31-$884)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $887 = $885;__label__ = 173; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 173: 
      var $887; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $888=$876 << $887; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K19=$888; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 174; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 174: 
      var $890=$T; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $891=(($890+4)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $892=HEAP32[(($891)>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $893=$892 & -8; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $894=$psize; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $895=(($893)|0)!=(($894)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($895) { __label__ = 175; break; } else { __label__ = 181; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 175: 
      var $897=$K19; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $898=$897 >>> 31; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $899=$898 & 1; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $900=$T; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $901=(($900+16)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $902=(($901+($899<<2))|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C=$902; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $903=$K19; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $904=$903 << 1; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K19=$904; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $905=$C; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $906=HEAP32[(($905)>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $907=(($906)|0)!=0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($907) { __label__ = 176; break; } else { __label__ = 177; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 176: 
      var $909=$C; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $910=HEAP32[(($909)>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$910; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 180; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 177: 
      var $912=$C; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $913=$912; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $914=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $915=(($913)>>>0) >= (($914)>>>0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $916=(($915)&1); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $917=(($916)==(1)); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $918=(($917)|0)!=0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($918) { __label__ = 178; break; } else { __label__ = 179; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 178: 
      var $920=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $921=$C; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($921)>>2)]=$920; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $922=$T; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $923=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $924=(($923+24)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($924)>>2)]=$922; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $925=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $926=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $927=(($926+12)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($927)>>2)]=$925; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $928=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $929=(($928+8)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($929)>>2)]=$925; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 187; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 179: 
      _abort(); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 180: 
      __label__ = 186; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 181: 
      var $933=$T; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $934=(($933+8)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $935=HEAP32[(($934)>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F20=$935; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $936=$T; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $937=$936; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $938=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $939=(($937)>>>0) >= (($938)>>>0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($939) { __label__ = 182; break; } else { var $946 = 0;__label__ = 183; break; } //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 182: 
      var $941=$F20; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $942=$941; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $943=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $944=(($942)>>>0) >= (($943)>>>0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $946 = $944;__label__ = 183; break;
    case 183: 
      var $946;
      var $947=(($946)&1);
      var $948=(($947)==(1));
      var $949=(($948)|0)!=0;
      if ($949) { __label__ = 184; break; } else { __label__ = 185; break; }
    case 184: 
      var $951=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $952=$F20; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $953=(($952+12)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($953)>>2)]=$951; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $954=$T; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $955=(($954+8)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($955)>>2)]=$951; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $956=$F20; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $957=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $958=(($957+8)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($958)>>2)]=$956; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $959=$T; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $960=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $961=(($960+12)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($961)>>2)]=$959; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $962=$tp; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $963=(($962+24)|0); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($963)>>2)]=0; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 187; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 185: 
      _abort(); //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 186: 
      __label__ = 174; break; //@line 4823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 187: 
      __label__ = 188; break;
    case 188: 
      var $968=HEAP32[((((__gm_+32)|0))>>2)]; //@line 4825 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $969=(($968-1)|0); //@line 4825 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+32)|0))>>2)]=$969; //@line 4825 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $970=(($969)|0)==0; //@line 4825 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($970) { __label__ = 189; break; } else { __label__ = 190; break; } //@line 4825 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 189: 
      var $972=_release_unused_segments(__gm_); //@line 4826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 190; break; //@line 4826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 190: 
      __label__ = 191; break;
    case 191: 
      __label__ = 195; break; //@line 4828 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 192: 
      __label__ = 193; break; //@line 4830 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 193: 
      __label__ = 194; break; //@line 4830 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 194: 
      _abort(); //@line 4832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 195: 
      __label__ = 196; break; //@line 4836 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 196: 
      ;
      return; //@line 4840 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _sys_trim($m, $pad) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0; //@line 4126 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[((((_mparams)|0))>>2)]; //@line 4127 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 4127 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($4) { var $9 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 4127 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $6=_init_mparams(); //@line 4127 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=(($6)|0)!=0; //@line 4127 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9 = $7;__label__ = 3; break; //@line 4127 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $9;
      var $10=(($9)&1); //@line 4127 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$2; //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)>>>0) < 4294967232; //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 25; break; } //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $14=$1; //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+24)|0); //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=(($16)|0)!=0; //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 25; break; } //@line 4128 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $19=$2; //@line 4129 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=(($19+40)|0); //@line 4129 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $2=$20; //@line 4129 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=$1; //@line 4131 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+12)|0); //@line 4131 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=HEAPU32[(($22)>>2)]; //@line 4131 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=$2; //@line 4131 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($23)>>>0) > (($24)>>>0); //@line 4131 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 6; break; } else { __label__ = 21; break; } //@line 4131 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $27=HEAP32[((((_mparams+8)|0))>>2)]; //@line 4133 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $unit=$27; //@line 4133 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$1; //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=$2; //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=(($30-$31)|0); //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$unit; //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=(($33-1)|0); //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=(($32+$34)|0); //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$unit; //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=Math.floor((($35)>>>0)/(($36)>>>0)); //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=(($37-1)|0); //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=$unit; //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=(($38*$39)|0); //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $extra=$40; //@line 4135 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$1; //@line 4136 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=$1; //@line 4136 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+24)|0); //@line 4136 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4136 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$44; //@line 4136 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=_segment_holding($41, $45); //@line 4136 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$46; //@line 4136 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=$sp; //@line 4138 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=(($47+12)|0); //@line 4138 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 4138 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$49 & 8; //@line 4138 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=(($50)|0)!=0; //@line 4138 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($51) { __label__ = 18; break; } else { __label__ = 7; break; } //@line 4138 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $53=$sp; //@line 4139 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=(($53+12)|0); //@line 4139 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($54)>>2)]; //@line 4139 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$55 & 0; //@line 4139 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($56)|0)!=0; //@line 4139 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4139 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 17; break; //@line 4150 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $60=$extra; //@line 4152 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)>>>0) >= 2147483647; //@line 4152 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($61) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4152 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $63=$unit; //@line 4153 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=((-2147483648-$63)|0); //@line 4153 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $extra=$64; //@line 4153 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 4153 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $66=_sbrk(0); //@line 4157 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $old_br=$66; //@line 4157 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=$old_br; //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=$sp; //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0); //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=$sp; //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($70+$73)|0); //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=(($67)|0)==(($74)|0); //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($75) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 4158 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $77=$extra; //@line 4159 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=(((-$77))|0); //@line 4159 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=_sbrk($78); //@line 4159 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rel_br=$79; //@line 4159 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=_sbrk(0); //@line 4160 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $new_br=$80; //@line 4160 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=$rel_br; //@line 4161 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=(($81)|0)!=-1; //@line 4161 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($82) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 4161 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $84=$new_br; //@line 4161 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=$old_br; //@line 4161 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=(($84)>>>0) < (($85)>>>0); //@line 4161 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($86) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4161 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $88=$old_br; //@line 4162 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=$new_br; //@line 4162 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=$88; //@line 4162 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=$89; //@line 4162 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=(($90-$91)|0); //@line 4162 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $released=$92; //@line 4162 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 4162 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 16; break; //@line 4163 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break; //@line 4167 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $97=$released; //@line 4169 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=(($97)|0)!=0; //@line 4169 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($98) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4169 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $100=$released; //@line 4170 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$sp; //@line 4170 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=(($101+4)|0); //@line 4170 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 4170 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=(($103-$100)|0); //@line 4170 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($102)>>2)]=$104; //@line 4170 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=$released; //@line 4171 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=$1; //@line 4171 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+432)|0); //@line 4171 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 4171 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=(($108-$105)|0); //@line 4171 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($107)>>2)]=$109; //@line 4171 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $110=$1; //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=$1; //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+24)|0); //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=$1; //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=(($114+12)|0); //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[(($115)>>2)]; //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=$released; //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=(($116-$117)|0); //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _init_top($110, $113, $118); //@line 4172 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4174 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 4175 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $121=$released; //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)==0; //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $124=$1; //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=(($124+12)|0); //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=HEAPU32[(($125)>>2)]; //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=$1; //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=(($127+28)|0); //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=HEAPU32[(($128)>>2)]; //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=(($126)>>>0) > (($129)>>>0); //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($130) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4182 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $132=$1; //@line 4183 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=(($132+28)|0); //@line 4183 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($133)>>2)]=-1; //@line 4183 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 4183 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      __label__ = 25; break; //@line 4184 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $136=$released; //@line 4186 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=(($136)|0)!=0; //@line 4186 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=$137 ? 1 : 0; //@line 4186 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $138; //@line 4186 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _calloc($n_elements, $elem_size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $req;
      $1=$n_elements;
      $2=$elem_size;
      $req=0; //@line 4844 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=$1; //@line 4845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 4845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($4) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 4845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $6=$1; //@line 4846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=$2; //@line 4846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=(($6*$7)|0); //@line 4846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $req=$8; //@line 4846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=$1; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=$2; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$9 | $10; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$11 & -65536; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)!=0; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $15=$req; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$1; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=Math.floor((($15)>>>0)/(($16)>>>0)); //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$2; //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=(($17)|0)!=(($18)|0); //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4847 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $req=-1; //@line 4849 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4849 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      __label__ = 6; break; //@line 4850 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $23=$req; //@line 4851 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=_malloc($23); //@line 4851 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$24; //@line 4851 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$mem; //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=(($25)|0)!=0; //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($26) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $28=$mem; //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28-8)|0); //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=(($30+4)|0); //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=HEAP32[(($31)>>2)]; //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$32 & 3; //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=(($33)|0)==0; //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($34) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 4852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $36=$mem; //@line 4853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$req; //@line 4853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _memset($36, 0, $37, 1); //@line 4853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 4853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $39=$mem; //@line 4854 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $39; //@line 4854 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _realloc($oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$oldmem;
      $3=$bytes;
      var $4=$2; //@line 4858 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)==0; //@line 4858 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4858 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $7=$3; //@line 4859 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=_malloc($7); //@line 4859 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$8; //@line 4859 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 4; break; //@line 4859 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $m=__gm_; //@line 4868 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=$m; //@line 4876 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$2; //@line 4876 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$3; //@line 4876 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=_internal_realloc($10, $11, $12); //@line 4876 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$13; //@line 4876 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 4; break; //@line 4876 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $15=$1; //@line 4878 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $15; //@line 4878 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _release_unused_segments($m) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0; //@line 4079 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nsegs=0; //@line 4080 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $2=$1; //@line 4081 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=(($2+444)|0); //@line 4081 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $pred=$3; //@line 4081 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=$pred; //@line 4082 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=(($4+8)|0); //@line 4082 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 4082 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$6; //@line 4082 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 4083 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $8=$sp; //@line 4083 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)!=0; //@line 4083 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 87; break; } //@line 4083 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $11=$sp; //@line 4084 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)|0); //@line 4084 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 4084 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $base=$13; //@line 4084 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=$sp; //@line 4085 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+4)|0); //@line 4085 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4085 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $size=$16; //@line 4085 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=$sp; //@line 4086 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+8)|0); //@line 4086 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 4086 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $next=$19; //@line 4086 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$nsegs; //@line 4087 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=(($20+1)|0); //@line 4087 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nsegs=$21; //@line 4087 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=$sp; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=(($22+12)|0); //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$24 & 0; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=(($25)|0)!=0; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($26) { __label__ = 4; break; } else { __label__ = 86; break; } //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $28=$sp; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=$30 & 8; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=(($31)|0)!=0; //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($32) { __label__ = 86; break; } else { __label__ = 5; break; } //@line 4088 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $34=$base; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=$base; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=(($35+8)|0); //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$36; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=$37 & 7; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=(($38)|0)==0; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $49 = 0;__label__ = 8; break; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $42=$base; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+8)|0); //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 7; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=((8-$45)|0); //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=$46 & 7; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49 = $47;__label__ = 8; break; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $49; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=(($34+$49)|0); //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$51; //@line 4089 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$p; //@line 4090 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=(($52+4)|0); //@line 4090 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 4090 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=$54 & -8; //@line 4090 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$55; //@line 4090 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$p; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+4)|0); //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=HEAP32[(($57)>>2)]; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$58 & 3; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=1; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 85; break; } else { __label__ = 9; break; } //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $62=$p; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=$psize; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=(($63+$64)|0); //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=$base; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=$size; //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=(($66+$67)|0); //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68-40)|0); //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=(($65)>>>0) >= (($69)>>>0); //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($70) { __label__ = 10; break; } else { __label__ = 85; break; } //@line 4092 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $72=$p; //@line 4093 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=$72; //@line 4093 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tp=$73; //@line 4093 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=$p; //@line 4095 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=$1; //@line 4095 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=(($75+20)|0); //@line 4095 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=HEAP32[(($76)>>2)]; //@line 4095 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=(($74)|0)==(($77)|0); //@line 4095 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($78) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4095 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $80=$1; //@line 4096 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=(($80+20)|0); //@line 4096 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($81)>>2)]=0; //@line 4096 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=$1; //@line 4097 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+8)|0); //@line 4097 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($83)>>2)]=0; //@line 4097 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 58; break; //@line 4098 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $85=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+24)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $XP=$87; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+12)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=(($90)|0)!=(($91)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($92) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $94=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+8)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$96; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=(($97+12)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=HEAP32[(($98)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$99; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=$F; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=(($101)>>>0) >= (($104)>>>0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)&1); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=(($107)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $110=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=$F; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+12)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($112)>>2)]=$110; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=$F; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=(($114+8)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($115)>>2)]=$113; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      _abort(); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 29; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $119=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=(($119+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+4)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$121; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$122; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=(($122)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($123) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $125=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=(($126)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$127; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$128; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=(($128)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($129) { __label__ = 19; break; } else { __label__ = 28; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $132=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=(($132+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=(($133+4)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$134; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($136) { var $144 = 1;__label__ = 22; break; } else { __label__ = 21; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $138=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=(($138+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=(($139)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$140; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=(($141)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144 = $142;__label__ = 22; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $144;
      if ($144) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $146=$CP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$146; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$147; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $149=$RP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=$149; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=HEAPU32[(($152)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=(($150)>>>0) >= (($153)>>>0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=(($154)&1); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=(($155)==(1)); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=(($156)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($157) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $159=$RP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($159)>>2)]=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $164=$XP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=(($164)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($165) { __label__ = 30; break; } else { __label__ = 57; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $167=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $168=(($167+28)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=HEAP32[(($168)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $171=(($170+304)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=(($171+($169<<2))|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H=$172; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $173=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $174=$H; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $175=HEAP32[(($174)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=(($173)|0)==(($175)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($176) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $178=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $179=$H; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($179)>>2)]=$178; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $180=(($178)|0)==0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($180) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $182=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+28)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($183)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=1 << $184; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=$185 ^ -1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $187=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+4)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $190=$189 & $186; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($188)>>2)]=$190; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 41; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $193=$XP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=$193; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=(($195+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=HEAPU32[(($196)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $198=(($194)>>>0) >= (($197)>>>0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)&1); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $200=(($199)==(1)); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $201=(($200)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($201) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $203=$XP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=(($203+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=(($204)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=HEAP32[(($205)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=(($206)|0)==(($207)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($208) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $210=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=$XP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=(($211+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=(($212)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($213)>>2)]=$210; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $215=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $216=$XP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $217=(($216+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $218=(($217+4)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($218)>>2)]=$215; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break;
    case 38: 
      __label__ = 40; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $223=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $224=(($223)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($224) { __label__ = 42; break; } else { __label__ = 56; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $226=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $229=(($228+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230=HEAPU32[(($229)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $231=(($227)>>>0) >= (($230)>>>0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $232=(($231)&1); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)==(1)); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $234=(($233)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($234) { __label__ = 43; break; } else { __label__ = 54; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $236=$XP; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $238=(($237+24)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($238)>>2)]=$236; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $239=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $240=(($239+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $241=(($240)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C0=$242; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=(($242)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($243) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $245=$C0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $246=$245; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $248=(($247+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $250=(($246)>>>0) >= (($249)>>>0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $251=(($250)&1); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)==(1)); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $253=(($252)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($253) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $255=$C0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $256=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $257=(($256+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $258=(($257)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($258)>>2)]=$255; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $259=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $260=$C0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $261=(($260+24)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      _abort(); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $265=$tp; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $266=(($265+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $267=(($266+4)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $268=HEAP32[(($267)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C1=$268; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $269=(($268)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($269) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $271=$C1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $272=$271; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $273=$1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $274=(($273+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[(($274)>>2)]; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $276=(($272)>>>0) >= (($275)>>>0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $277=(($276)&1); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=(($278)|0)!=0; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($279) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $281=$C1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $282=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $283=(($282+16)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $284=(($283+4)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($284)>>2)]=$281; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $285=$R; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $286=$C1; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $287=(($286+24)|0); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($287)>>2)]=$285; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 55; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4100 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $296=$psize; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $297=$296 >>> 8; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $X=$297; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $298=$X; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $299=(($298)|0)==0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($299) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 59: 
      $I=0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $302=$X; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $303=(($302)>>>0) > 65535; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($303) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 61: 
      $I=31; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $306=$X; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$306; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $307=$Y; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $308=(($307-256)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $309=$308 >>> 16; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $310=$309 & 8; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$310; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $311=$N; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $312=$Y; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $313=$312 << $311; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$313; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $314=(($313-4096)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $315=$314 >>> 16; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $316=$315 & 4; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$316; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $317=$K; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $318=$N; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $319=(($318+$317)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$319; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $320=$K; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $321=$Y; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $322=$321 << $320; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$322; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $323=(($322-16384)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=$323 >>> 16; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $325=$324 & 2; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$325; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326=$N; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $327=(($326+$325)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$327; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $328=$N; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $329=((14-$328)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $330=$K; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $331=$Y; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $332=$331 << $330; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$332; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $333=$332 >>> 15; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $334=(($329+$333)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$334; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $335=$K; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $336=$335 << 1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $337=$psize; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $338=$K; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $339=(($338+7)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $340=$337 >>> (($339)>>>0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $341=$340 & 1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $342=(($336+$341)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I=$342; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $345=$I; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $346=$1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $347=(($346+304)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+($345<<2))|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H1=$348; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $349=$I; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $350=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+28)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $352=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+16)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $354=(($353+4)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($354)>>2)]=0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $355=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+16)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $357=(($356)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($357)>>2)]=0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $358=$1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $360=HEAP32[(($359)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $361=$I; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $362=1 << $361; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $363=$360 & $362; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $364=(($363)|0)!=0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($364) { __label__ = 66; break; } else { __label__ = 65; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $366=$I; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $367=1 << $366; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=$1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $369=(($368+4)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $370=HEAP32[(($369)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $371=$370 | $367; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($369)>>2)]=$371; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $372=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $373=$H1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($373)>>2)]=$372; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $374=$H1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $375=$374; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $376=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $377=(($376+24)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($377)>>2)]=$375; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $378=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $379=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $380=(($379+12)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($380)>>2)]=$378; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $381=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($382)>>2)]=$378; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $384=$H1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$385; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=$psize; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $387=$I; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $388=(($387)|0)==31; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($388) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $397 = 0;__label__ = 69; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $391=$I; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $392=$391 >>> 1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $393=(($392+8)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $394=(($393-2)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $395=((31-$394)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $397 = $395;__label__ = 69; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $397; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $398=$386 << $397; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$398; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 70; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $400=$T; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $401=(($400+4)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $403=$402 & -8; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $404=$psize; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $405=(($403)|0)!=(($404)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($405) { __label__ = 71; break; } else { __label__ = 77; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $407=$K2; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $408=$407 >>> 31; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $409=$408 & 1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $410=$T; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $412=(($411+($409<<2))|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C=$412; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $413=$K2; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $414=$413 << 1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$414; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $415=$C; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $416=HEAP32[(($415)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $417=(($416)|0)!=0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($417) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $419=$C; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $420=HEAP32[(($419)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$420; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $422=$C; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $423=$422; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $424=$1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $425=(($424+16)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $426=HEAPU32[(($425)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $427=(($423)>>>0) >= (($426)>>>0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $428=(($427)&1); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $429=(($428)==(1)); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $430=(($429)|0)!=0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($430) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $432=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $433=$C; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($433)>>2)]=$432; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $434=$T; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $435=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $436=(($435+24)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($436)>>2)]=$434; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $437=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $438=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $439=(($438+12)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($439)>>2)]=$437; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $440=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+8)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($441)>>2)]=$437; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 83; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 75: 
      _abort(); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 82; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $445=$T; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $446=(($445+8)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $447=HEAP32[(($446)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F3=$447; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $448=$T; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $449=$448; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $450=$1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $451=(($450+16)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $452=HEAPU32[(($451)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $453=(($449)>>>0) >= (($452)>>>0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($453) { __label__ = 78; break; } else { var $462 = 0;__label__ = 79; break; } //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $455=$F3; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $456=$455; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $457=$1; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $458=(($457+16)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $459=HEAPU32[(($458)>>2)]; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $460=(($456)>>>0) >= (($459)>>>0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $462 = $460;__label__ = 79; break;
    case 79: 
      var $462;
      var $463=(($462)&1);
      var $464=(($463)==(1));
      var $465=(($464)|0)!=0;
      if ($465) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $467=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $468=$F3; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $469=(($468+12)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $470=$T; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $471=(($470+8)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($471)>>2)]=$467; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $472=$F3; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $473=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $474=(($473+8)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($474)>>2)]=$472; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $475=$T; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $476=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $477=(($476+12)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $478=$tp; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $479=(($478+24)|0); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($479)>>2)]=0; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 83; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 81: 
      _abort(); //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 82: 
      __label__ = 70; break; //@line 4110 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break; //@line 4112 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 85: 
      __label__ = 86; break; //@line 4113 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $486=$sp; //@line 4116 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $pred=$486; //@line 4116 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $487=$next; //@line 4117 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$487; //@line 4117 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 4118 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $489=$nsegs; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $490=(($489)>>>0) > 4294967295; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($490) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $492=$nsegs; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $495 = $492;__label__ = 90; break; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $495 = -1;__label__ = 90; break; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $495; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $496=$1; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+32)|0); //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4120 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $498=$released; //@line 4122 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $498; //@line 4122 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _memalign($alignment, $bytes) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$alignment;
  $2=$bytes;
  var $3=$1; //@line 4881 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $4=$2; //@line 4881 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $5=_internal_memalign(__gm_, $3, $4); //@line 4881 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  ;
  return $5; //@line 4881 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _internal_memalign($m, $alignment, $bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $a;
      var $nb;
      var $req;
      var $mem;
      var $leader;
      var $trailer;
      var $p;
      var $br;
      var $pos;
      var $newp;
      var $leadsize;
      var $newsize;
      var $size;
      var $remainder_size;
      var $remainder;
      $2=$m;
      $3=$alignment;
      $4=$bytes;
      var $5=$3; //@line 4379 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) <= 8; //@line 4379 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4379 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $8=$4; //@line 4380 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=_malloc($8); //@line 4380 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$9; //@line 4380 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 37; break; //@line 4380 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $11=$3; //@line 4381 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)>>>0) < 16; //@line 4381 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4381 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $3=16; //@line 4382 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4382 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $15=$3; //@line 4383 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$3; //@line 4383 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=(($16-1)|0); //@line 4383 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$15 & $17; //@line 4383 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=(($18)|0)!=0; //@line 4383 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 4383 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      $a=16; //@line 4384 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $22=$a; //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$3; //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=(($22)>>>0) < (($23)>>>0); //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($24) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $26=$a; //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$26 << 1; //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $a=$27; //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $29=$a; //@line 4386 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $3=$29; //@line 4386 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 4387 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $31=$4; //@line 4389 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=$3; //@line 4389 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=((-64-$32)|0); //@line 4389 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=(($31)>>>0) >= (($33)>>>0); //@line 4389 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($34) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 4389 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $36=$2; //@line 4390 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=(($36)|0)!=0; //@line 4390 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($37) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4390 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $39=___errno(); //@line 4391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($39)>>2)]=12; //@line 4391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 36; break; //@line 4393 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $42=$4; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=(($42)>>>0) < 11; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($43) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $51 = 16;__label__ = 17; break; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $46=$4; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=(($46+4)|0); //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=(($47+7)|0); //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=$48 & -8; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51 = $49;__label__ = 17; break; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $51; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nb=$51; //@line 4395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$nb; //@line 4396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=$3; //@line 4396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=(($52+$53)|0); //@line 4396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($54+16)|0); //@line 4396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=(($55-4)|0); //@line 4396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $req=$56; //@line 4396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=$req; //@line 4397 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=_malloc($57); //@line 4397 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$58; //@line 4397 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$mem; //@line 4398 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=0; //@line 4398 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 18; break; } else { __label__ = 35; break; } //@line 4398 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      $leader=0; //@line 4399 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $trailer=0; //@line 4400 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=$mem; //@line 4401 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=(($62-8)|0); //@line 4401 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=$63; //@line 4401 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$64; //@line 4401 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=$mem; //@line 4404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=$3; //@line 4404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=(($66)>>>0)%(($67)>>>0); //@line 4404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0)!=0; //@line 4404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($69) { __label__ = 19; break; } else { __label__ = 26; break; } //@line 4404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $71=$mem; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=$3; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=(($71+$72)|0); //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($73-1)|0); //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=$74; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=$3; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=(((-$76))|0); //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=$75 & $77; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=$78; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=(($79-8)|0); //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=$80; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=$81; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $br=$82; //@line 4416 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=$br; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=$p; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=$84; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=$83; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=$85; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=(($86-$87)|0); //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=(($88)>>>0) >= 16; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($89) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $91=$br; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97 = $91;__label__ = 22; break; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $93=$br; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=$3; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=(($93+$94)|0); //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97 = $95;__label__ = 22; break; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $97; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $pos=$97; //@line 4418 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$pos; //@line 4419 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4419 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newp=$99; //@line 4419 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=$pos; //@line 4420 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$p; //@line 4420 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4420 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$100; //@line 4420 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=$102; //@line 4420 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=(($103-$104)|0); //@line 4420 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $leadsize=$105; //@line 4420 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=$p; //@line 4421 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+4)|0); //@line 4421 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 4421 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=$108 & -8; //@line 4421 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $110=$leadsize; //@line 4421 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=(($109-$110)|0); //@line 4421 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newsize=$111; //@line 4421 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=$p; //@line 4423 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=(($112+4)|0); //@line 4423 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 4423 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=$114 & 3; //@line 4423 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=(($115)|0)==0; //@line 4423 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($116) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4423 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $118=$p; //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=(($118)|0); //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=HEAP32[(($119)>>2)]; //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=$leadsize; //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=(($120+$121)|0); //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=$newp; //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=(($123)|0); //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($124)>>2)]=$122; //@line 4424 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=$newsize; //@line 4425 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=$newp; //@line 4425 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=(($126+4)|0); //@line 4425 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($127)>>2)]=$125; //@line 4425 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 4426 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $129=$newp; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=(($129+4)|0); //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=HEAP32[(($130)>>2)]; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=$131 & 1; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=$newsize; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=$132 | $133; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$134 | 2; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=$newp; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=(($136+4)|0); //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($137)>>2)]=$135; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=$newp; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=$138; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=$newsize; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=(($139+$140)|0); //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=$141; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=(($142+4)|0); //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=$144 | 1; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($143)>>2)]=$145; //@line 4428 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=$p; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=(($146+4)|0); //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=HEAP32[(($147)>>2)]; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $149=$148 & 1; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=$leadsize; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$149 | $150; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=$151 | 2; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=$p; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=(($153+4)|0); //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=$p; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=$leadsize; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=(($156+$157)|0); //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=$158; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=(($159+4)|0); //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($160)>>2)]; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=$161 | 1; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($160)>>2)]=$162; //@line 4429 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=$p; //@line 4430 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 4430 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+8)|0); //@line 4430 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $leader=$165; //@line 4430 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break;
    case 25: 
      var $167=$newp; //@line 4432 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$167; //@line 4432 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 4433 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $169=$p; //@line 4436 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+4)|0); //@line 4436 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[(($170)>>2)]; //@line 4436 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=$171 & 3; //@line 4436 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $173=(($172)|0)==0; //@line 4436 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($173) { __label__ = 30; break; } else { __label__ = 27; break; } //@line 4436 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $175=$p; //@line 4437 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+4)|0); //@line 4437 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 4437 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=$177 & -8; //@line 4437 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $size=$178; //@line 4437 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $179=$size; //@line 4438 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $180=$nb; //@line 4438 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $181=(($180+16)|0); //@line 4438 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $182=(($179)>>>0) > (($181)>>>0); //@line 4438 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($182) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4438 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $184=$size; //@line 4439 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=$nb; //@line 4439 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=(($184-$185)|0); //@line 4439 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$186; //@line 4439 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $187=$p; //@line 4440 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $188=$187; //@line 4440 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189=$nb; //@line 4440 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $190=(($188+$189)|0); //@line 4440 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $191=$190; //@line 4440 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $remainder=$191; //@line 4440 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $192=$p; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $193=(($192+4)|0); //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=HEAP32[(($193)>>2)]; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=$194 & 1; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=$nb; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=$195 | $196; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $198=$197 | 2; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=$p; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $200=(($199+4)|0); //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($200)>>2)]=$198; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $201=$p; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=$201; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=$nb; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=(($202+$203)|0); //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=$204; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=(($205+4)|0); //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=HEAP32[(($206)>>2)]; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=$207 | 1; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($206)>>2)]=$208; //@line 4441 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=$remainder; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=(($209+4)|0); //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=HEAP32[(($210)>>2)]; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=$211 & 1; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=$remainder_size; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $214=$212 | $213; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $215=$214 | 2; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $216=$remainder; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $217=(($216+4)|0); //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($217)>>2)]=$215; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $218=$remainder; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $219=$218; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $220=$remainder_size; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $221=(($219+$220)|0); //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $222=$221; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $223=(($222+4)|0); //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $224=HEAP32[(($223)>>2)]; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $225=$224 | 1; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($223)>>2)]=$225; //@line 4442 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $226=$remainder; //@line 4443 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4443 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=(($227+8)|0); //@line 4443 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $trailer=$228; //@line 4443 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4444 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break; //@line 4445 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $231=$leader; //@line 4451 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $232=(($231)|0)!=0; //@line 4451 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($232) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4451 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $234=$leader; //@line 4452 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _free($234); //@line 4452 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4453 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $236=$trailer; //@line 4454 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=(($236)|0)!=0; //@line 4454 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($237) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4454 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $239=$trailer; //@line 4455 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _free($239); //@line 4455 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4456 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $241=$p; //@line 4457 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $242=$241; //@line 4457 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=(($242+8)|0); //@line 4457 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$243; //@line 4457 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 37; break; //@line 4457 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      __label__ = 36; break;
    case 36: 
      $1=0; //@line 4460 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 37; break; //@line 4460 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $247=$1; //@line 4461 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $247; //@line 4461 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _independent_calloc($n_elements, $elem_size, $chunks) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $sz=__stackBase__;
  $1=$n_elements;
  $2=$elem_size;
  $3=$chunks;
  var $4=$2; //@line 4886 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  HEAP32[(($sz)>>2)]=$4; //@line 4886 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $5=$1; //@line 4887 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $6=$3; //@line 4887 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $7=_ialloc(__gm_, $5, $sz, 3, $6); //@line 4887 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  STACKTOP = __stackBase__;
  return $7; //@line 4887 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _internal_realloc($m, $oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $2=$m;
      $3=$oldmem;
      $4=$bytes;
      var $5=$4; //@line 4304 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) >= 4294967232; //@line 4304 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4304 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $8=___errno(); //@line 4305 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($8)>>2)]=12; //@line 4305 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=0; //@line 4306 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4306 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $10=$3; //@line 4309 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($10-8)|0); //@line 4309 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 4309 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldp=$12; //@line 4309 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=$oldp; //@line 4310 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4310 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4310 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & -8; //@line 4310 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldsize=$16; //@line 4310 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=$oldp; //@line 4311 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$17; //@line 4311 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$oldsize; //@line 4311 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=(($18+$19)|0); //@line 4311 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=$20; //@line 4311 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $next=$21; //@line 4311 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newp=0; //@line 4312 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $extra=0; //@line 4313 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=$oldp; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$22; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=$2; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+16)|0); //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=HEAPU32[(($25)>>2)]; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=(($23)>>>0) >= (($26)>>>0); //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($27) { __label__ = 4; break; } else { var $47 = 0;__label__ = 7; break; } //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $29=$oldp; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=(($29+4)|0); //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=$31 & 3; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=(($32)|0)!=1; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($33) { __label__ = 5; break; } else { var $47 = 0;__label__ = 7; break; } //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $35=$oldp; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$35; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$next; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=$37; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=(($36)>>>0) < (($38)>>>0); //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($39) { __label__ = 6; break; } else { var $47 = 0;__label__ = 7; break; } //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $41=$next; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($41+4)|0); //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$43 & 1; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=(($44)|0)!=0; //@line 4317 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47 = $45;__label__ = 7; break;
    case 7: 
      var $47;
      var $48=(($47)&1);
      var $49=(($48)==(1));
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 8; break; } else { __label__ = 23; break; }
    case 8: 
      var $52=$4; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=(($52)>>>0) < 11; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($53) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $61 = 16;__label__ = 11; break; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $56=$4; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+4)|0); //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+7)|0); //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$58 & -8; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61 = $59;__label__ = 11; break; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $61; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nb=$61; //@line 4319 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=$oldp; //@line 4320 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+4)|0); //@line 4320 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 4320 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=$64 & 3; //@line 4320 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=(($65)|0)==0; //@line 4320 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($66) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4320 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $68=$2; //@line 4321 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=$oldp; //@line 4321 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=$nb; //@line 4321 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=_mmap_resize($68, $69, $70); //@line 4321 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newp=$71; //@line 4321 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4321 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $73=$oldsize; //@line 4322 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=$nb; //@line 4322 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=(($73)>>>0) >= (($74)>>>0); //@line 4322 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($75) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 4322 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $77=$oldsize; //@line 4323 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=$nb; //@line 4323 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=(($77-$78)|0); //@line 4323 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rsize=$79; //@line 4323 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=$oldp; //@line 4324 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newp=$80; //@line 4324 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=$rsize; //@line 4325 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=(($81)>>>0) >= 16; //@line 4325 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($82) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4325 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $84=$newp; //@line 4326 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=$84; //@line 4326 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=$nb; //@line 4326 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=(($85+$86)|0); //@line 4326 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=$87; //@line 4326 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $remainder=$88; //@line 4326 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=$newp; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+4)|0); //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=$91 & 1; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=$nb; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=$92 | $93; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=$94 | 2; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=$newp; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=(($96+4)|0); //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$newp; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=$nb; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=(($99+$100)|0); //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+4)|0); //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=HEAP32[(($103)>>2)]; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=$104 | 1; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($103)>>2)]=$105; //@line 4327 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=$rsize; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=$106 | 1; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=$107 | 2; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=$remainder; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $110=(($109+4)|0); //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($110)>>2)]=$108; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $111=$remainder; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=$111; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=$rsize; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=(($112+$113)|0); //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=(($115+4)|0); //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=$117 | 1; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($116)>>2)]=$118; //@line 4328 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=$remainder; //@line 4329 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4329 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+8)|0); //@line 4329 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $extra=$121; //@line 4329 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4330 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 21; break; //@line 4331 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $124=$next; //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=$2; //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+24)|0); //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=(($124)|0)==(($127)|0); //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($128) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $130=$oldsize; //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=$2; //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=(($130+$133)|0); //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$nb; //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=(($134)>>>0) > (($135)>>>0); //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($136) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4332 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $138=$oldsize; //@line 4334 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=$2; //@line 4334 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=(($139+12)|0); //@line 4334 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4334 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=(($138+$141)|0); //@line 4334 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newsize=$142; //@line 4334 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=$newsize; //@line 4335 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=$nb; //@line 4335 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=(($143-$144)|0); //@line 4335 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newtopsize=$145; //@line 4335 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=$oldp; //@line 4336 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4336 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=$nb; //@line 4336 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $149=(($147+$148)|0); //@line 4336 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=$149; //@line 4336 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newtop=$150; //@line 4336 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$oldp; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+4)|0); //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=$153 & 1; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=$nb; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=$154 | $155; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=$156 | 2; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=$oldp; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+4)|0); //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($159)>>2)]=$157; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=$oldp; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=$nb; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=(($161+$162)|0); //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+4)|0); //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $166=HEAP32[(($165)>>2)]; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $167=$166 | 1; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($165)>>2)]=$167; //@line 4337 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $168=$newtopsize; //@line 4338 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=$168 | 1; //@line 4338 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=$newtop; //@line 4338 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $171=(($170+4)|0); //@line 4338 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($171)>>2)]=$169; //@line 4338 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=$newtop; //@line 4339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $173=$2; //@line 4339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $174=(($173+24)|0); //@line 4339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($174)>>2)]=$172; //@line 4339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $175=$newtopsize; //@line 4340 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=$2; //@line 4340 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=(($176+12)|0); //@line 4340 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($177)>>2)]=$175; //@line 4340 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=$oldp; //@line 4341 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newp=$178; //@line 4341 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4342 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 24; break; //@line 4343 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      _abort(); //@line 4345 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4345 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $184=$newp; //@line 4357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=(($184)|0)!=0; //@line 4357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($185) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 4357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $187=$extra; //@line 4358 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $188=(($187)|0)!=0; //@line 4358 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($188) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4358 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $190=$extra; //@line 4359 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _free($190); //@line 4359 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4360 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $192=$newp; //@line 4361 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $193=$192; //@line 4361 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+8)|0); //@line 4361 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$194; //@line 4361 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4361 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $196=$4; //@line 4364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=_malloc($196); //@line 4364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newmem=$197; //@line 4364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $198=$newmem; //@line 4365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)|0)!=0; //@line 4365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($199) { __label__ = 29; break; } else { __label__ = 33; break; } //@line 4365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $201=$oldsize; //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=$oldp; //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=(($202+4)|0); //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=$204 & 3; //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=(($205)|0)==0; //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=$206 ? 8 : 4; //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=(($201-$207)|0); //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oc=$208; //@line 4366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=$newmem; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=$3; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=$oc; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=$4; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=(($211)>>>0) < (($212)>>>0); //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($213) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $215=$oc; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $219 = $215;__label__ = 32; break; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $217=$4; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $219 = $217;__label__ = 32; break; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $219; //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      assert($219 % 1 === 0, 'memcpy given ' + $219 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($209, $210, $219, 1); //@line 4367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $220=$3; //@line 4368 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _free($220); //@line 4368 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4369 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $222=$newmem; //@line 4370 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$222; //@line 4370 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4370 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $224=$1; //@line 4374 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $224; //@line 4374 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_footprint() {
  ;
  var __label__;

  var $1=HEAP32[((((__gm_+432)|0))>>2)]; //@line 4920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  ;
  return $1; //@line 4920 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _malloc_max_footprint() {
  ;
  var __label__;

  var $1=HEAP32[((((__gm_+436)|0))>>2)]; //@line 4924 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  ;
  return $1; //@line 4924 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _ialloc($m, $n_elements, $sizes, $opts, $chunks) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $element_size;
      var $contents_size;
      var $array_size;
      var $mem;
      var $p;
      var $remainder_size;
      var $marray;
      var $array_chunk;
      var $was_enabled;
      var $size;
      var $i;
      var $array_chunk_size;
      $2=$m;
      $3=$n_elements;
      $4=$sizes;
      $5=$opts;
      $6=$chunks;
      var $7=HEAP32[((((_mparams)|0))>>2)]; //@line 4491 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=(($7)|0)!=0; //@line 4491 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($8) { var $13 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 4491 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $10=_init_mparams(); //@line 4491 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($10)|0)!=0; //@line 4491 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13 = $11;__label__ = 3; break; //@line 4491 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $13;
      var $14=(($13)&1); //@line 4491 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$6; //@line 4493 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 4493 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 4493 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $18=$3; //@line 4494 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=(($18)|0)==0; //@line 4494 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4494 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $21=$6; //@line 4495 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$21; //@line 4495 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4495 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $23=$6; //@line 4496 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $marray=$23; //@line 4496 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $array_size=0; //@line 4497 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4498 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $25=$3; //@line 4501 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=(($25)|0)==0; //@line 4501 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4501 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $28=_malloc(0); //@line 4502 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 4502 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$29; //@line 4502 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4502 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      $marray=0; //@line 4503 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=$3; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=((($31<<2))|0); //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=(($32)>>>0) < 11; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($33) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $42 = 16;__label__ = 12; break; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $36=$3; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=((($36<<2))|0); //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=(($37+4)|0); //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=(($38+7)|0); //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$39 & -8; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42 = $40;__label__ = 12; break; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $42; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $array_size=$42; //@line 4504 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break;
    case 13: 
      var $44=$5; //@line 4508 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 1; //@line 4508 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)!=0; //@line 4508 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4508 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $48=$4; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=HEAPU32[(($48)>>2)]; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=(($49)>>>0) < 11; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($50) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $59 = 16;__label__ = 17; break; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $53=$4; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($54+4)|0); //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=(($55+7)|0); //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=$56 & -8; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59 = $57;__label__ = 17; break; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $59; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $element_size=$59; //@line 4509 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$3; //@line 4510 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=$element_size; //@line 4510 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=(($60*$61)|0); //@line 4510 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $contents_size=$62; //@line 4510 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 4511 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      $element_size=0; //@line 4513 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $contents_size=0; //@line 4514 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $i=0; //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $65=$i; //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=$3; //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=(($65)|0)!=(($66)|0); //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($67) { __label__ = 20; break; } else { __label__ = 25; break; } //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $69=$i; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=$4; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+($69<<2))|0); //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=HEAPU32[(($71)>>2)]; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=(($72)>>>0) < 11; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($73) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $84 = 16;__label__ = 23; break; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $76=$i; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=$4; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=(($77+($76<<2))|0); //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+4)|0); //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=(($80+7)|0); //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=$81 & -8; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84 = $82;__label__ = 23; break; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $84; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=$contents_size; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+$84)|0); //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $contents_size=$86; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 4516 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $88=$i; //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+1)|0); //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $i=$89; //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 4515 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $92=$contents_size; //@line 4519 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=$array_size; //@line 4519 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=(($92+$93)|0); //@line 4519 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $size=$94; //@line 4519 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=$2; //@line 4526 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=(($95+440)|0); //@line 4526 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 4526 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$97 & 0; //@line 4526 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $was_enabled=$98; //@line 4526 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$2; //@line 4527 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=(($99+440)|0); //@line 4527 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($100)>>2)]; //@line 4527 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($100)>>2)]=$101; //@line 4527 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=$size; //@line 4528 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=(($102-4)|0); //@line 4528 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=_malloc($103); //@line 4528 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mem=$104; //@line 4528 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=$was_enabled; //@line 4529 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)|0)!=0; //@line 4529 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($106) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4529 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $108=$2; //@line 4530 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=(($108+440)|0); //@line 4530 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 4530 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($109)>>2)]=$110; //@line 4530 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4530 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $112=$mem; //@line 4531 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=(($112)|0)==0; //@line 4531 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($113) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 4531 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      $1=0; //@line 4532 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4532 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $116=$mem; //@line 4535 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=(($116-8)|0); //@line 4535 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=$117; //@line 4535 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$118; //@line 4535 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=$p; //@line 4536 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=(($119+4)|0); //@line 4536 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=HEAP32[(($120)>>2)]; //@line 4536 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=$121 & -8; //@line 4536 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$122; //@line 4536 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=$5; //@line 4540 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=$123 & 2; //@line 4540 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=(($124)|0)!=0; //@line 4540 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($125) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4540 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $127=$mem; //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=$127; //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=$128; //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=$remainder_size; //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=(($130-4)|0); //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=$array_size; //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=(($131-$132)|0); //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _memset($129, 0, $133, 1); //@line 4541 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4542 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $135=$marray; //@line 4545 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0)==0; //@line 4545 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($136) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4545 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $138=$p; //@line 4547 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=$138; //@line 4547 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=$contents_size; //@line 4547 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=(($139+$140)|0); //@line 4547 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=$141; //@line 4547 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $array_chunk=$142; //@line 4547 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=$remainder_size; //@line 4548 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=$contents_size; //@line 4548 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=(($143-$144)|0); //@line 4548 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $array_chunk_size=$145; //@line 4548 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=$array_chunk; //@line 4549 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4549 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=(($147+8)|0); //@line 4549 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $149=$148; //@line 4549 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $marray=$149; //@line 4549 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $150=$array_chunk_size; //@line 4550 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$150 | 1; //@line 4550 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=$151 | 2; //@line 4550 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=$array_chunk; //@line 4550 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=(($153+4)|0); //@line 4550 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4550 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=$contents_size; //@line 4551 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$155; //@line 4551 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4552 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      $i=0; //@line 4555 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4555 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $158=$p; //@line 4556 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=$158; //@line 4556 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=(($159+8)|0); //@line 4556 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=$i; //@line 4556 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=$marray; //@line 4556 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=(($162+($161<<2))|0); //@line 4556 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($163)>>2)]=$160; //@line 4556 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=$i; //@line 4557 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=$3; //@line 4557 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $166=(($165-1)|0); //@line 4557 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $167=(($164)|0)!=(($166)|0); //@line 4557 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($167) { __label__ = 36; break; } else { __label__ = 43; break; } //@line 4557 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $169=$element_size; //@line 4558 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=(($169)|0)!=0; //@line 4558 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($170) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4558 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $172=$element_size; //@line 4559 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $size=$172; //@line 4559 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 42; break; //@line 4559 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $174=$i; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $175=$4; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+($174<<2))|0); //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=HEAPU32[(($176)>>2)]; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)>>>0) < 11; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($178) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $189 = 16;__label__ = 41; break; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $181=$i; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $182=$4; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+($181<<2))|0); //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($183)>>2)]; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=(($184+4)|0); //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=(($185+7)|0); //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $187=$186 & -8; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189 = $187;__label__ = 41; break; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $189; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $size=$189; //@line 4561 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 42; break;
    case 42: 
      var $191=$size; //@line 4562 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $192=$remainder_size; //@line 4562 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $193=(($192-$191)|0); //@line 4562 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$193; //@line 4562 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=$size; //@line 4563 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=$194 | 1; //@line 4563 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=$195 | 2; //@line 4563 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=$p; //@line 4563 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $198=(($197+4)|0); //@line 4563 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=$196; //@line 4563 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=$p; //@line 4564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $200=$199; //@line 4564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $201=$size; //@line 4564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=(($200+$201)|0); //@line 4564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=$202; //@line 4564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$203; //@line 4564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4565 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $205=$remainder_size; //@line 4567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=$205 | 1; //@line 4567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=$206 | 2; //@line 4567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=$p; //@line 4567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=(($208+4)|0); //@line 4567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($209)>>2)]=$207; //@line 4567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 4568 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      __label__ = 45; break; //@line 4570 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $212=$i; //@line 4555 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=(($212+1)|0); //@line 4555 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $i=$213; //@line 4555 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4555 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $215=$marray; //@line 4589 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$215; //@line 4589 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4589 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $217=$1; //@line 4590 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $217; //@line 4590 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _independent_comalloc($n_elements, $sizes, $chunks) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$n_elements;
  $2=$sizes;
  $3=$chunks;
  var $4=$1; //@line 4892 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $5=$2; //@line 4892 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $6=$3; //@line 4892 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $7=_ialloc(__gm_, $4, $5, 0, $6); //@line 4892 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  ;
  return $7; //@line 4892 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _valloc($bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $pagesz;
      $1=$bytes;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4897 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4897 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 4897 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $5=_init_mparams(); //@line 4897 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 4897 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 3; break; //@line 4897 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8;
      var $9=(($8)&1); //@line 4897 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4898 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $pagesz=$10; //@line 4898 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$pagesz; //@line 4899 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$1; //@line 4899 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=_memalign($11, $12); //@line 4899 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $13; //@line 4899 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _pvalloc($bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $pagesz;
      $1=$bytes;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4904 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4904 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 4904 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $5=_init_mparams(); //@line 4904 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 4904 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 3; break; //@line 4904 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8;
      var $9=(($8)&1); //@line 4904 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4905 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $pagesz=$10; //@line 4905 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$pagesz; //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$1; //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=$pagesz; //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=(($12+$13)|0); //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=(($14-1)|0); //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$pagesz; //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=(($16-1)|0); //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$17 ^ -1; //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$15 & $18; //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=_memalign($11, $19); //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $20; //@line 4906 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_trim($pad) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $result;
      $1=$pad;
      $result=0; //@line 4910 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 4911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $5=_init_mparams(); //@line 4911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 4911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 3; break; //@line 4911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8;
      var $9=(($8)&1); //@line 4911 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=$1; //@line 4913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=_sys_trim(__gm_, $10); //@line 4913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $result=$11; //@line 4913 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$result; //@line 4916 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $12; //@line 4916 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mallinfo($agg_result) {
  ;
  var __label__;

  _internal_mallinfo($agg_result, __gm_); //@line 4929 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  ;
  return; //@line 4929 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _internal_mallinfo($agg_result, $m) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $nm=__stackBase__;
      var $nfree;
      var $mfree;
      var $sum;
      var $s;
      var $q;
      var $sz;
      $1=$m;
      var $2=$nm; //@line 3338 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      for (var $$dest = $2>>2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      }; //@line 3338 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[((((_mparams)|0))>>2)]; //@line 3339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 3339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($4) { var $9 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 3339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $6=_init_mparams(); //@line 3339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=(($6)|0)!=0; //@line 3339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9 = $7;__label__ = 3; break; //@line 3339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $9;
      var $10=(($9)&1); //@line 3339 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$1; //@line 3342 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=(($11+24)|0); //@line 3342 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 3342 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=(($13)|0)!=0; //@line 3342 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 20; break; } //@line 3342 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $nfree=1; //@line 3343 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$1; //@line 3344 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=(($16+12)|0); //@line 3344 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($17)>>2)]; //@line 3344 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=(($18+40)|0); //@line 3344 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mfree=$19; //@line 3344 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$mfree; //@line 3345 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sum=$20; //@line 3345 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=$1; //@line 3346 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+444)|0); //@line 3346 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $s=$22; //@line 3346 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3347 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $24=$s; //@line 3347 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)!=0; //@line 3347 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 6; break; } else { __label__ = 19; break; } //@line 3347 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $27=$s; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0); //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($28)>>2)]; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$s; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0); //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=HEAP32[(($31)>>2)]; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=(($32+8)|0); //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=$33; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 7; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=(($35)|0)==0; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $48 = 0;__label__ = 9; break; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $39=$s; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0); //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($41+8)|0); //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$43 & 7; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=((8-$44)|0); //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=$45 & 7; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48 = $46;__label__ = 9; break; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $48; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=(($29+$48)|0); //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $q=$50; //@line 3348 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $52=$q; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=$52; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=$s; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($54)|0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=HEAPU32[(($55)>>2)]; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($53)>>>0) >= (($56)>>>0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 11; break; } else { var $81 = 0;__label__ = 14; break; } //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $59=$q; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=$s; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=(($61)|0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=HEAP32[(($62)>>2)]; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=$s; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=(($64+4)|0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=HEAP32[(($65)>>2)]; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=(($63+$66)|0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=(($60)>>>0) < (($67)>>>0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($68) { __label__ = 12; break; } else { var $81 = 0;__label__ = 14; break; } //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $70=$q; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=$1; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+24)|0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($70)|0)!=(($73)|0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($74) { __label__ = 13; break; } else { var $81 = 0;__label__ = 14; break; } //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $76=$q; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+4)|0); //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($77)>>2)]; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=(($78)|0)!=7; //@line 3349 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81 = $79;__label__ = 14; break;
    case 14: 
      var $81;
      if ($81) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $83=$q; //@line 3351 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+4)|0); //@line 3351 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($84)>>2)]; //@line 3351 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=$85 & -8; //@line 3351 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sz=$86; //@line 3351 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=$sz; //@line 3352 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=$sum; //@line 3352 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+$87)|0); //@line 3352 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sum=$89; //@line 3352 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=$q; //@line 3353 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=(($90+4)|0); //@line 3353 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($91)>>2)]; //@line 3353 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=$92 & 3; //@line 3353 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=(($93)|0)!=1; //@line 3353 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($94) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3353 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $96=$sz; //@line 3354 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=$mfree; //@line 3354 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=(($97+$96)|0); //@line 3354 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mfree=$98; //@line 3354 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$nfree; //@line 3355 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=(($99+1)|0); //@line 3355 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nfree=$100; //@line 3355 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 3356 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $102=$q; //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=$q; //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=(($104+4)|0); //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=HEAP32[(($105)>>2)]; //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=$106 & -8; //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=(($103+$107)|0); //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=$108; //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $q=$109; //@line 3357 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3358 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $111=$s; //@line 3359 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+8)|0); //@line 3359 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 3359 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $s=$113; //@line 3359 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3360 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $115=$sum; //@line 3362 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=(($nm)|0); //@line 3362 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($116)>>2)]=$115; //@line 3362 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=$nfree; //@line 3363 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=(($nm+4)|0); //@line 3363 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($118)>>2)]=$117; //@line 3363 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=$1; //@line 3364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=(($119+432)|0); //@line 3364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=HEAP32[(($120)>>2)]; //@line 3364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=$sum; //@line 3364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=(($121-$122)|0); //@line 3364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=(($nm+16)|0); //@line 3364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($124)>>2)]=$123; //@line 3364 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=$1; //@line 3365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+436)|0); //@line 3365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 3365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=(($nm+20)|0); //@line 3365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($128)>>2)]=$127; //@line 3365 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=$1; //@line 3366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=(($129+432)|0); //@line 3366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=HEAP32[(($130)>>2)]; //@line 3366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=$mfree; //@line 3366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=(($131-$132)|0); //@line 3366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=(($nm+28)|0); //@line 3366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($134)>>2)]=$133; //@line 3366 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$mfree; //@line 3367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=(($nm+32)|0); //@line 3367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($136)>>2)]=$135; //@line 3367 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=$1; //@line 3368 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=(($137+12)|0); //@line 3368 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=HEAP32[(($138)>>2)]; //@line 3368 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=(($nm+36)|0); //@line 3368 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($140)>>2)]=$139; //@line 3368 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3369 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $142=$agg_result; //@line 3373 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=$nm; //@line 3373 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $143>>2, $$dest = $142>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      }; //@line 3373 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      STACKTOP = __stackBase__;
      return; //@line 3373 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_stats() {
  ;
  var __label__;

  _internal_malloc_stats(__gm_); //@line 4934 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  ;
  return; //@line 4935 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _internal_malloc_stats($m) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $maxfp;
      var $fp;
      var $used;
      var $s;
      var $q;
      $1=$m;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 3378 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 3378 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 3378 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $5=_init_mparams(); //@line 3378 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 3378 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 3; break; //@line 3378 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8;
      var $9=(($8)&1); //@line 3378 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $maxfp=0; //@line 3380 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $fp=0; //@line 3381 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $used=0; //@line 3382 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=$1; //@line 3384 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($10+24)|0); //@line 3384 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=HEAP32[(($11)>>2)]; //@line 3384 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)!=0; //@line 3384 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 20; break; } //@line 3384 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $15=$1; //@line 3385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+444)|0); //@line 3385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $s=$16; //@line 3385 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=$1; //@line 3386 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+436)|0); //@line 3386 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 3386 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $maxfp=$19; //@line 3386 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$1; //@line 3387 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=(($20+432)|0); //@line 3387 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[(($21)>>2)]; //@line 3387 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $fp=$22; //@line 3387 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$fp; //@line 3388 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=$1; //@line 3388 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+12)|0); //@line 3388 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 3388 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=(($26+40)|0); //@line 3388 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=(($23-$27)|0); //@line 3388 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $used=$28; //@line 3388 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3390 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $30=$s; //@line 3390 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0)!=0; //@line 3390 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($31) { __label__ = 6; break; } else { __label__ = 19; break; } //@line 3390 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $33=$s; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=(($33)|0); //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$s; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=(($36)|0); //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=(($38+8)|0); //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$40 & 7; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($41)|0)==0; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $54 = 0;__label__ = 9; break; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $45=$s; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0); //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[(($46)>>2)]; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=(($47+8)|0); //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=$48; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$49 & 7; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=((8-$50)|0); //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$51 & 7; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54 = $52;__label__ = 9; break; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $54; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($35+$54)|0); //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $q=$56; //@line 3391 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $58=$q; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$58; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$s; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)|0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=HEAPU32[(($61)>>2)]; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=(($59)>>>0) >= (($62)>>>0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($63) { __label__ = 11; break; } else { var $87 = 0;__label__ = 14; break; } //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $65=$q; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=$s; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=(($67)|0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=HEAP32[(($68)>>2)]; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=$s; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+4)|0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($71)>>2)]; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=(($69+$72)|0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($66)>>>0) < (($73)>>>0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($74) { __label__ = 12; break; } else { var $87 = 0;__label__ = 14; break; } //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $76=$q; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=$1; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=(($77+24)|0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=(($76)|0)!=(($79)|0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($80) { __label__ = 13; break; } else { var $87 = 0;__label__ = 14; break; } //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $82=$q; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+4)|0); //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=(($84)|0)!=7; //@line 3392 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87 = $85;__label__ = 14; break;
    case 14: 
      var $87;
      if ($87) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $89=$q; //@line 3394 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+4)|0); //@line 3394 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 3394 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=$91 & 3; //@line 3394 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=(($92)|0)!=1; //@line 3394 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($93) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3394 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $95=$q; //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=(($95+4)|0); //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$97 & -8; //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$used; //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=(($99-$98)|0); //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $used=$100; //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 3395 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $102=$q; //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=$q; //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=(($104+4)|0); //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=HEAP32[(($105)>>2)]; //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=$106 & -8; //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=(($103+$107)|0); //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=$108; //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $q=$109; //@line 3396 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3397 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $111=$s; //@line 3398 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+8)|0); //@line 3398 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 3398 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $s=$113; //@line 3398 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3399 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break; //@line 3400 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $116=HEAP32[((__impure_ptr)>>2)]; //@line 3402 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=(($116+12)|0); //@line 3402 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=HEAP32[(($117)>>2)]; //@line 3402 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $119=$maxfp; //@line 3402 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=_fprintf($118, ((STRING_TABLE.__str34)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$119,tempInt)); //@line 3402 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=HEAP32[((__impure_ptr)>>2)]; //@line 3403 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=(($121+12)|0); //@line 3403 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=HEAP32[(($122)>>2)]; //@line 3403 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=$fp; //@line 3403 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=_fprintf($123, ((STRING_TABLE.__str135)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$124,tempInt)); //@line 3403 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=HEAP32[((__impure_ptr)>>2)]; //@line 3404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=(($126+12)|0); //@line 3404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 3404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=$used; //@line 3404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=_fprintf($128, ((STRING_TABLE.__str236)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$129,tempInt)); //@line 3404 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3408 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mallopt($param_number, $value) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$param_number;
  $2=$value;
  var $3=$1; //@line 4938 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $4=$2; //@line 4938 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  var $5=_change_mparam($3, $4); //@line 4938 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
  ;
  return $5; //@line 4938 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
}


function _init_mparams() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((_mparams)|0))>>2)]; //@line 2965 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $2=(($1)|0)==0; //@line 2965 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($2) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 2965 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $4=_sysconf(8); //@line 2971 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$4; //@line 2971 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=$psize; //@line 2972 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $gsize=$5; //@line 2972 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=$gsize; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=$gsize; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=(($7-1)|0); //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=$6 & $8; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=(($9)|0)!=0; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $12=$psize; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=$psize; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=(($13-1)|0); //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$12 & $14; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2989 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      _abort(); //@line 2997 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 2997 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $19=$gsize; //@line 2999 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$19; //@line 2999 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$psize; //@line 3000 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+4)|0))>>2)]=$20; //@line 3000 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=-1; //@line 3001 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=2097152; //@line 3002 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+20)|0))>>2)]=0; //@line 3004 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[((((_mparams+20)|0))>>2)]; //@line 3011 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+440)|0))>>2)]=$21; //@line 3011 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=_time(0); //@line 3030 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$22 ^ 1431655765; //@line 3030 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $magic=$23; //@line 3030 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=$magic; //@line 3032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$24 | 8; //@line 3032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $magic=$25; //@line 3032 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=$magic; //@line 3033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & -8; //@line 3033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $magic=$27; //@line 3033 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$magic; //@line 3034 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams)|0))>>2)]=$28; //@line 3034 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3036 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      ;
      return 1; //@line 3039 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_usable_size($mem) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $p;
      $2=$mem;
      var $3=$2; //@line 4944 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 4944 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($4) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 4944 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $6=$2; //@line 4945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=(($6-8)|0); //@line 4945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 4945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$8; //@line 4945 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=$p; //@line 4946 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=(($9+4)|0); //@line 4946 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($10)>>2)]; //@line 4946 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$11 & 3; //@line 4946 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)!=1; //@line 4946 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4946 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $15=$p; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+4)|0); //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & -8; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=(($19+4)|0); //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($20)>>2)]; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=$21 & 3; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=(($22)|0)==0; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=$23 ? 8 : 4; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($18-$24)|0); //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$25; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4947 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      __label__ = 5; break; //@line 4948 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $1=0; //@line 4949 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4949 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $29=$1; //@line 4950 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $29; //@line 4950 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mmap_resize($m, $oldp, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      var $5=$3; //@line 3699 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+4)|0); //@line 3699 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3699 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$7 & -8; //@line 3699 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldsize=$8; //@line 3699 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=$4; //@line 3700 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=$9 >>> 3; //@line 3700 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($10)>>>0) < 32; //@line 3700 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3700 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      $1=0; //@line 3701 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3701 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $14=$oldsize; //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$4; //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+4)|0); //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=(($14)>>>0) >= (($16)>>>0); //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $19=$oldsize; //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$4; //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=(($19-$20)|0); //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$22 << 1; //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=(($21)>>>0) <= (($23)>>>0); //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3703 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $26=$3; //@line 3705 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$26; //@line 3705 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3705 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $28=$3; //@line 3707 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28)|0); //@line 3707 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 3707 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $offset=$30; //@line 3707 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=$oldsize; //@line 3708 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=$offset; //@line 3708 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=(($31+$32)|0); //@line 3708 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=(($33+16)|0); //@line 3708 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldmmsize=$34; //@line 3708 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=$4; //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=(($35+24)|0); //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=(($36+7)|0); //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=(($38-1)|0); //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=(($37+$39)|0); //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($41-1)|0); //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$42 ^ -1; //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$40 & $43; //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newmmsize=$44; //@line 3709 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $cp=-1; //@line 3711 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$cp; //@line 3712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)!=-1; //@line 3712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 3712 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $48=$cp; //@line 3713 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=$offset; //@line 3713 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=(($48+$49)|0); //@line 3713 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 3713 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $newp=$51; //@line 3713 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$newmmsize; //@line 3714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=$offset; //@line 3714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=(($52-$53)|0); //@line 3714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($54-16)|0); //@line 3714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$55; //@line 3714 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$psize; //@line 3715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=$newp; //@line 3715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+4)|0); //@line 3715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($58)>>2)]=$56; //@line 3715 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$newp; //@line 3717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=$psize; //@line 3717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 3717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=(($63+4)|0); //@line 3717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($64)>>2)]=7; //@line 3717 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=$newp; //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=$psize; //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=(($67+4)|0); //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($66+$68)|0); //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+4)|0); //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($71)>>2)]=0; //@line 3718 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=$cp; //@line 3720 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=$2; //@line 3720 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+16)|0); //@line 3720 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=HEAPU32[(($74)>>2)]; //@line 3720 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=(($72)>>>0) < (($75)>>>0); //@line 3720 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($76) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3720 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $78=$cp; //@line 3721 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=$2; //@line 3721 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+16)|0); //@line 3721 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($80)>>2)]=$78; //@line 3721 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 3721 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $82=$newmmsize; //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=$oldmmsize; //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=(($82-$83)|0); //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=$2; //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+432)|0); //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=(($87+$84)|0); //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($86)>>2)]=$88; //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=$2; //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+436)|0); //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=HEAPU32[(($90)>>2)]; //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=(($88)>>>0) > (($91)>>>0); //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($92) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3722 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $94=$2; //@line 3723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+432)|0); //@line 3723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 3723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=$2; //@line 3723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=(($97+436)|0); //@line 3723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($98)>>2)]=$96; //@line 3723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3723 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $100=$newp; //@line 3725 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$100; //@line 3725 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3725 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 13; break;
    case 13: 
      $1=0; //@line 3728 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3728 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $104=$1; //@line 3729 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $104; //@line 3729 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _segment_holding($m, $addr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2; //@line 2562 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=(($4+444)|0); //@line 2562 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$5; //@line 2562 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 2563 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $7=$3; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$sp; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0); //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=HEAPU32[(($9)>>2)]; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($7)>>>0) >= (($10)>>>0); //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $13=$3; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=$sp; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=(($14)|0); //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=$sp; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+4)|0); //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=(($16+$19)|0); //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=(($13)>>>0) < (($20)>>>0); //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2564 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $23=$sp; //@line 2565 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$23; //@line 2565 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 2565 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $25=$sp; //@line 2566 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=(($25+8)|0); //@line 2566 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=HEAP32[(($26)>>2)]; //@line 2566 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$27; //@line 2566 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0)==0; //@line 2566 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2566 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      $1=0; //@line 2567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 2567 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      __label__ = 2; break; //@line 2568 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $32=$1; //@line 2569 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $32; //@line 2569 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_top($m, $p, $psize) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=$4; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+8)|0); //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$7 & 7; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)==0; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $20 = 0;__label__ = 4; break; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $12=$2; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=$12; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 7; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=((8-$16)|0); //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & 7; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20 = $18;__label__ = 4; break; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $20; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $offset=$20; //@line 3736 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=$2; //@line 3737 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3737 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$offset; //@line 3737 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=(($22+$23)|0); //@line 3737 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$24; //@line 3737 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $2=$25; //@line 3737 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=$offset; //@line 3738 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$3; //@line 3738 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=(($27-$26)|0); //@line 3738 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $3=$28; //@line 3738 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=$2; //@line 3740 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$1; //@line 3740 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=(($30+24)|0); //@line 3740 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($31)>>2)]=$29; //@line 3740 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=$3; //@line 3741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$1; //@line 3741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=(($33+12)|0); //@line 3741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($34)>>2)]=$32; //@line 3741 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=$3; //@line 3742 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$35 | 1; //@line 3742 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$2; //@line 3742 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=(($37+4)|0); //@line 3742 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($38)>>2)]=$36; //@line 3742 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=$2; //@line 3744 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3744 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$3; //@line 3744 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3744 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3744 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=(($43+4)|0); //@line 3744 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($44)>>2)]=40; //@line 3744 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=HEAP32[((((_mparams+16)|0))>>2)]; //@line 3745 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=$1; //@line 3745 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=(($46+28)|0); //@line 3745 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($47)>>2)]=$45; //@line 3745 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3746 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mmap_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3; //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=(($4+24)|0); //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+7)|0); //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=(($7-1)|0); //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=(($6+$8)|0); //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=(($10-1)|0); //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$11 ^ -1; //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=$9 & $12; //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $mmsize=$13; //@line 3672 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=$mmsize; //@line 3673 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$3; //@line 3673 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($14)>>>0) > (($15)>>>0); //@line 3673 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 2; break; } else { __label__ = 13; break; } //@line 3673 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      $mm=-1; //@line 3674 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$mm; //@line 3675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=(($18)|0)!=-1; //@line 3675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 3675 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $21=$mm; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+8)|0); //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$22; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=$23 & 7; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)==0; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $35 = 0;__label__ = 6; break; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $28=$mm; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+8)|0); //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=$30 & 7; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=((8-$31)|0); //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$32 & 7; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35 = $33;__label__ = 6; break; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $35; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $offset=$35; //@line 3676 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$mmsize; //@line 3677 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$offset; //@line 3677 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38=(($36-$37)|0); //@line 3677 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=(($38-16)|0); //@line 3677 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$39; //@line 3677 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$mm; //@line 3678 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$offset; //@line 3678 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3678 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3678 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$43; //@line 3678 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$offset; //@line 3679 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$p; //@line 3679 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0); //@line 3679 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($46)>>2)]=$44; //@line 3679 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=$psize; //@line 3680 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=$p; //@line 3680 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=(($48+4)|0); //@line 3680 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($49)>>2)]=$47; //@line 3680 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$p; //@line 3682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 3682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$psize; //@line 3682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=(($51+$52)|0); //@line 3682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 3682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($54+4)|0); //@line 3682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($55)>>2)]=7; //@line 3682 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$p; //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=$psize; //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=(($58+4)|0); //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=(($57+$59)|0); //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=$60; //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=(($61+4)|0); //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($62)>>2)]=0; //@line 3683 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=$2; //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=(($63+16)|0); //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=HEAP32[(($64)>>2)]; //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=(($65)|0)==0; //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($66) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $68=$mm; //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=$2; //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=(($69+16)|0); //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=HEAPU32[(($70)>>2)]; //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=(($68)>>>0) < (($71)>>>0); //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($72) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3685 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $74=$mm; //@line 3686 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=$2; //@line 3686 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=(($75+16)|0); //@line 3686 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($76)>>2)]=$74; //@line 3686 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 3686 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $78=$mmsize; //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=$2; //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+432)|0); //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=(($81+$78)|0); //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($80)>>2)]=$82; //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=$2; //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+436)|0); //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=HEAPU32[(($84)>>2)]; //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=(($82)>>>0) > (($85)>>>0); //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($86) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3687 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $88=$2; //@line 3688 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+432)|0); //@line 3688 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 3688 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=$2; //@line 3688 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=(($91+436)|0); //@line 3688 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($92)>>2)]=$90; //@line 3688 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3688 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $94=$p; //@line 3691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=$94; //@line 3691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=(($95+8)|0); //@line 3691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=$96; //@line 3691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3691 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 13; break; //@line 3693 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      $1=0; //@line 3694 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3694 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $100=$1; //@line 3695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $100; //@line 3695 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_bins($m) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0; //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $3=$i; //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)>>>0) < 32; //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=$i; //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=$6 << 1; //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$1; //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=(($8+40)|0); //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=(($9+($7<<2))|0); //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=$10; //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $bin=$12; //@line 3753 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=$bin; //@line 3754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=$bin; //@line 3754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+12)|0); //@line 3754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($15)>>2)]=$13; //@line 3754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$bin; //@line 3754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=(($16+8)|0); //@line 3754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($17)>>2)]=$13; //@line 3754 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 4; break; //@line 3755 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $19=$i; //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=(($19+1)|0); //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $i=$20; //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 3752 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      ;
      return; //@line 3756 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _change_mparam($param_number, $value) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $val;
      $2=$param_number;
      $3=$value;
      var $4=HEAP32[((((_mparams)|0))>>2)]; //@line 3045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)!=0; //@line 3045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($5) { var $10 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 3045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $7=_init_mparams(); //@line 3045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=(($7)|0)!=0; //@line 3045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10 = $8;__label__ = 3; break; //@line 3045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $10;
      var $11=(($10)&1); //@line 3045 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$3; //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)==-1; //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $18 = -1;__label__ = 6; break; //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $16=$3; //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18 = $16;__label__ = 6; break; //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $18; //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $val=$18; //@line 3046 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$2; //@line 3047 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ((($19)|0) == -1) {
        __label__ = 7; break;
      }
      else if ((($19)|0) == -2) {
        __label__ = 8; break;
      }
      else if ((($19)|0) == -3) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 7: 
      var $21=$val; //@line 3049 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=$21; //@line 3049 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=1; //@line 3050 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3050 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $23=$val; //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=HEAPU32[((((_mparams+4)|0))>>2)]; //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($23)>>>0) >= (($24)>>>0); //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $27=$val; //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$val; //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28-1)|0); //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $30=$27 & $29; //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0)==0; //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($31) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3052 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $33=$val; //@line 3053 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$33; //@line 3053 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=1; //@line 3054 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3054 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      $1=0; //@line 3057 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3057 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $36=$val; //@line 3059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=$36; //@line 3059 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $1=1; //@line 3060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3060 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      $1=0; //@line 3062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3062 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $39=$1; //@line 3064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $39; //@line 3064 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=$2; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=(($6+8)|0); //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=$8 & 7; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=(($9)|0)==0; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $20 = 0;__label__ = 4; break; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $13=$2; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 7; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=((8-$16)|0); //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & 7; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20 = $18;__label__ = 4; break; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $20; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=(($5+$20)|0); //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$22; //@line 3780 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=$3; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=$3; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+8)|0); //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & 7; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0)==0; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $38 = 0;__label__ = 7; break; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $31=$3; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $32=(($31+8)|0); //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=$33 & 7; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=((8-$34)|0); //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=$35 & 7; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $38 = $36;__label__ = 7; break; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $38; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39=(($23+$38)|0); //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$40; //@line 3781 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$oldfirst; //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=$41; //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$p; //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=$42; //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=$44; //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $47=(($45-$46)|0); //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$47; //@line 3782 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $48=$p; //@line 3783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $49=$48; //@line 3783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $50=$4; //@line 3783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $51=(($49+$50)|0); //@line 3783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52=$51; //@line 3783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $q=$52; //@line 3783 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=$psize; //@line 3784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=$4; //@line 3784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=(($53-$54)|0); //@line 3784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $qsize=$55; //@line 3784 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$4; //@line 3785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=$56 | 1; //@line 3785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=$57 | 2; //@line 3785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$p; //@line 3785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=(($59+4)|0); //@line 3785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 3785 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=$oldfirst; //@line 3792 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=$1; //@line 3792 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+24)|0); //@line 3792 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 3792 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=(($61)|0)==(($64)|0); //@line 3792 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($65) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3792 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $67=$qsize; //@line 3793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=$1; //@line 3793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68+12)|0); //@line 3793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 3793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+$67)|0); //@line 3793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($69)>>2)]=$71; //@line 3793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tsize=$71; //@line 3793 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=$q; //@line 3794 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=$1; //@line 3794 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+24)|0); //@line 3794 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3794 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=$tsize; //@line 3795 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=$75 | 1; //@line 3795 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=$q; //@line 3795 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=(($77+4)|0); //@line 3795 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($78)>>2)]=$76; //@line 3795 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 109; break; //@line 3797 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $80=$oldfirst; //@line 3798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=$1; //@line 3798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=(($81+20)|0); //@line 3798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=HEAP32[(($82)>>2)]; //@line 3798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=(($80)|0)==(($83)|0); //@line 3798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3798 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $86=$qsize; //@line 3799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=$1; //@line 3799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=(($87+8)|0); //@line 3799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=HEAP32[(($88)>>2)]; //@line 3799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+$86)|0); //@line 3799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($88)>>2)]=$90; //@line 3799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $dsize=$90; //@line 3799 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=$q; //@line 3800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=$1; //@line 3800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=(($92+20)|0); //@line 3800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($93)>>2)]=$91; //@line 3800 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=$dsize; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=$94 | 1; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $96=$q; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $97=(($96+4)|0); //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$dsize; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=$q; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$dsize; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=(($100+$101)|0); //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=(($103)|0); //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($104)>>2)]=$98; //@line 3801 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 3802 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $106=$oldfirst; //@line 3804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+4)|0); //@line 3804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 3804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=$108 & 3; //@line 3804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $110=(($109)|0)!=1; //@line 3804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($110) { __label__ = 72; break; } else { __label__ = 12; break; } //@line 3804 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $112=$oldfirst; //@line 3805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $113=(($112+4)|0); //@line 3805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 3805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $115=$114 & -8; //@line 3805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nsize=$115; //@line 3805 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=$nsize; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=$116 >>> 3; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $118=(($117)>>>0) < 32; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($118) { __label__ = 13; break; } else { __label__ = 25; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $120=$oldfirst; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+8)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$122; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=$oldfirst; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=(($123+12)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=HEAP32[(($124)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B=$125; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=$nsize; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=$126 >>> 3; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I=$127; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=$F; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=$B; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=(($128)|0)==(($129)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($130) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $132=$I; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=1 << $132; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=$133 ^ -1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=$137 & $134; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($136)>>2)]=$138; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $140=$F; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=$I; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=$141 << 1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=(($143+40)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=(($144+($142<<2))|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=$145; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=(($140)|0)==(($147)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($148) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $150=$F; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$150; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=(($152+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=HEAPU32[(($153)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=(($151)>>>0) >= (($154)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($155) { __label__ = 17; break; } else { var $176 = 0;__label__ = 20; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $157=$B; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=$I; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=$158 << 1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=(($160+40)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=(($161+($159<<2))|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=$162; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=(($157)|0)==(($164)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($165) { var $174 = 1;__label__ = 19; break; } else { __label__ = 18; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $167=$B; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $168=$167; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $171=HEAPU32[(($170)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=(($168)>>>0) >= (($171)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $174 = $172;__label__ = 19; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $174;
      var $176 = $174;__label__ = 20; break;
    case 20: 
      var $176;
      var $177=(($176)&1);
      var $178=(($177)==(1));
      var $179=(($178)|0)!=0;
      if ($179) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $181=$B; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $182=$F; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+12)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($183)>>2)]=$181; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $184=$F; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=$B; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $186=(($185+8)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($186)>>2)]=$184; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      _abort(); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 71; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $191=$oldfirst; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $192=$191; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $TP=$192; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $193=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+24)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($194)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $XP=$195; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=(($196+12)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $198=HEAP32[(($197)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $200=(($198)|0)!=(($199)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($200) { __label__ = 26; break; } else { __label__ = 30; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $202=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=(($202+8)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F1=$204; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $205=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $206=(($205+12)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=HEAP32[(($206)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$207; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=$F1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=$208; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=(($210+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $212=HEAPU32[(($211)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $213=(($209)>>>0) >= (($212)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $214=(($213)&1); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)==(1)); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $216=(($215)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($216) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $218=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $219=$F1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $220=(($219+12)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($220)>>2)]=$218; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $221=$F1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $222=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $223=(($222+8)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($223)>>2)]=$221; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      _abort(); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 42; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $227=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=(($227+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $229=(($228+4)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$229; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230=HEAP32[(($229)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$230; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $231=(($230)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $233=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $234=(($233+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $235=(($234)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$235; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $236=HEAP32[(($235)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$236; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=(($236)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($237) { __label__ = 32; break; } else { __label__ = 41; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      __label__ = 33; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $240=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $241=(($240+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $242=(($241+4)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$242; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=HEAP32[(($242)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $244=(($243)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($244) { var $252 = 1;__label__ = 35; break; } else { __label__ = 34; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $246=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=(($246+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $CP=$248; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $249=HEAP32[(($248)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $250=(($249)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $252 = $250;__label__ = 35; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $252;
      if ($252) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $254=$CP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $RP=$254; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $255=HEAP32[(($254)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $R=$255; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $257=$RP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $258=$257; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $259=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $260=(($259+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $261=HEAPU32[(($260)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $262=(($258)>>>0) >= (($261)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)&1); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $264=(($263)==(1)); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $265=(($264)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($265) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $267=$RP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($267)>>2)]=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $272=$XP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $273=(($272)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($273) { __label__ = 43; break; } else { __label__ = 70; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $275=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $276=(($275+28)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $277=HEAP32[(($276)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $278=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=(($278+304)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+($277<<2))|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H=$280; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $281=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $282=$H; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $283=HEAP32[(($282)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $284=(($281)|0)==(($283)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($284) { __label__ = 44; break; } else { __label__ = 47; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $286=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $287=$H; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($287)>>2)]=$286; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $288=(($286)|0)==0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $290=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $291=(($290+28)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $292=HEAP32[(($291)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $293=1 << $292; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $294=$293 ^ -1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $295=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $296=(($295+4)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $298=$297 & $294; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($296)>>2)]=$298; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 54; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $301=$XP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $302=$301; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $303=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $304=(($303+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $305=HEAPU32[(($304)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $306=(($302)>>>0) >= (($305)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $307=(($306)&1); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $308=(($307)==(1)); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $309=(($308)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($309) { __label__ = 48; break; } else { __label__ = 52; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $311=$XP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $312=(($311+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $313=(($312)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $315=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $316=(($314)|0)==(($315)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($316) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $318=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $319=$XP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $320=(($319+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $321=(($320)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($321)>>2)]=$318; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 51; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $323=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=$XP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326=(($325+4)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($326)>>2)]=$323; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 51; break;
    case 51: 
      __label__ = 53; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 52: 
      _abort(); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $331=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $332=(($331)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($332) { __label__ = 55; break; } else { __label__ = 69; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $334=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $335=$334; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $336=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $339=(($335)>>>0) >= (($338)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)&1); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 56; break; } else { __label__ = 67; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $344=$XP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $345=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $346=(($345+24)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($346)>>2)]=$344; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $347=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $349=(($348)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $350=HEAP32[(($349)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C0=$350; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=(($350)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($351) { __label__ = 57; break; } else { __label__ = 61; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $353=$C0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $354=$353; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $355=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $357=HEAPU32[(($356)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $358=(($354)>>>0) >= (($357)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $359=(($358)&1); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $360=(($359)==(1)); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $361=(($360)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($361) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $363=$C0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $364=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $365=(($364+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $366=(($365)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($366)>>2)]=$363; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $367=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=$C0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $369=(($368+24)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($369)>>2)]=$367; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 60; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 59: 
      _abort(); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 60: 
      __label__ = 61; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $373=$TP; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $374=(($373+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $375=(($374+4)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $376=HEAP32[(($375)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C1=$376; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $377=(($376)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($377) { __label__ = 62; break; } else { __label__ = 66; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $379=$C1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $380=$379; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $381=$1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $383=HEAPU32[(($382)>>2)]; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $384=(($380)>>>0) >= (($383)>>>0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $385=(($384)&1); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=(($385)==(1)); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0)!=0; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($387) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $389=$C1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $390=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $391=(($390+16)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $392=(($391+4)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($392)>>2)]=$389; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $393=$R; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $394=$C1; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $395=(($394+24)|0); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($395)>>2)]=$393; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 64: 
      _abort(); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 66; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 68; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 67: 
      _abort(); //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 3806 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 70: 
      __label__ = 71; break;
    case 71: 
      var $404=$oldfirst; //@line 3807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $405=$404; //@line 3807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $406=$nsize; //@line 3807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $407=(($405+$406)|0); //@line 3807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $408=$407; //@line 3807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$408; //@line 3807 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $409=$nsize; //@line 3808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $410=$qsize; //@line 3808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $411=(($410+$409)|0); //@line 3808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $qsize=$411; //@line 3808 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 72; break; //@line 3809 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $413=$oldfirst; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $414=(($413+4)|0); //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $415=HEAP32[(($414)>>2)]; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $416=$415 & -2; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($414)>>2)]=$416; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $417=$qsize; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $418=$417 | 1; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $419=$q; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $420=(($419+4)|0); //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $421=$qsize; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $422=$q; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $423=$422; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $424=$qsize; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $425=(($423+$424)|0); //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $426=$425; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $427=(($426)|0); //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($427)>>2)]=$421; //@line 3810 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $428=$qsize; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $429=$428 >>> 3; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $430=(($429)>>>0) < 32; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($430) { __label__ = 73; break; } else { __label__ = 80; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $432=$qsize; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $433=$432 >>> 3; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I2=$433; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $434=$I2; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $435=$434 << 1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $436=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $437=(($436+40)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $438=(($437+($435<<2))|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $439=$438; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $440=$439; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B3=$440; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $441=$B3; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F4=$441; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $442=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $443=(($442)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $444=HEAP32[(($443)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $445=$I2; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $446=1 << $445; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $447=$444 & $446; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $448=(($447)|0)!=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($448) { __label__ = 75; break; } else { __label__ = 74; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $450=$I2; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $451=1 << $450; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $452=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $453=(($452)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $454=HEAP32[(($453)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $455=$454 | $451; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($453)>>2)]=$455; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 79; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $457=$B3; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $458=(($457+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $459=HEAP32[(($458)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $460=$459; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $461=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $462=(($461+16)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $463=HEAPU32[(($462)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $464=(($460)>>>0) >= (($463)>>>0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $465=(($464)&1); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $466=(($465)==(1)); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $467=(($466)|0)!=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($467) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $469=$B3; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $470=(($469+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $471=HEAP32[(($470)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F4=$471; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 77: 
      _abort(); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 78: 
      __label__ = 79; break;
    case 79: 
      var $475=$q; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $476=$B3; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $477=(($476+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $478=$q; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $479=$F4; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $480=(($479+12)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($480)>>2)]=$478; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $481=$F4; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $482=$q; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $483=(($482+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($483)>>2)]=$481; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $484=$B3; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $485=$q; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $486=(($485+12)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 80: 
      var $488=$q; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $489=$488; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $TP5=$489; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $490=$qsize; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $491=$490 >>> 8; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $X=$491; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $492=$X; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $493=(($492)|0)==0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($493) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 81: 
      $I7=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $496=$X; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $497=(($496)>>>0) > 65535; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($497) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 83: 
      $I7=31; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $500=$X; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$500; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $501=$Y; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $502=(($501-256)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $503=$502 >>> 16; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $504=$503 & 8; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$504; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $505=$N; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $506=$Y; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $507=$506 << $505; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$507; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $508=(($507-4096)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $509=$508 >>> 16; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $510=$509 & 4; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$510; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $511=$K; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $512=$N; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $513=(($512+$511)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$513; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $514=$K; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $515=$Y; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $516=$515 << $514; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$516; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $517=(($516-16384)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $518=$517 >>> 16; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $519=$518 & 2; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$519; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $520=$N; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $521=(($520+$519)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$521; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $522=$N; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $523=((14-$522)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $524=$K; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $525=$Y; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $526=$525 << $524; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$526; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $527=$526 >>> 15; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $528=(($523+$527)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$528; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $529=$K; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $530=$529 << 1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $531=$qsize; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $532=$K; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $533=(($532+7)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $534=$531 >>> (($533)>>>0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $535=$534 & 1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $536=(($530+$535)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I7=$536; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      var $539=$I7; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $540=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $541=(($540+304)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $542=(($541+($539<<2))|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H6=$542; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $543=$I7; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $544=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $545=(($544+28)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($545)>>2)]=$543; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $546=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $547=(($546+16)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $548=(($547+4)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($548)>>2)]=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $549=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $550=(($549+16)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $551=(($550)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($551)>>2)]=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $552=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $553=(($552+4)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $554=HEAP32[(($553)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $555=$I7; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $556=1 << $555; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $557=$554 & $556; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $558=(($557)|0)!=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($558) { __label__ = 88; break; } else { __label__ = 87; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $560=$I7; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $561=1 << $560; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $562=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $563=(($562+4)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $564=HEAP32[(($563)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $565=$564 | $561; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($563)>>2)]=$565; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $566=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $567=$H6; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($567)>>2)]=$566; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $568=$H6; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $569=$568; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $570=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $571=(($570+24)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($571)>>2)]=$569; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $572=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $573=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $574=(($573+12)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($574)>>2)]=$572; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $575=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $576=(($575+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($576)>>2)]=$572; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $578=$H6; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $579=HEAP32[(($578)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$579; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $580=$qsize; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $581=$I7; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $582=(($581)|0)==31; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($582) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $591 = 0;__label__ = 91; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $585=$I7; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $586=$585 >>> 1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $587=(($586+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $588=(($587-2)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $589=((31-$588)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $591 = $589;__label__ = 91; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $591; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $592=$580 << $591; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K8=$592; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $594=$T; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $595=(($594+4)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $596=HEAP32[(($595)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $597=$596 & -8; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $598=$qsize; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $599=(($597)|0)!=(($598)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($599) { __label__ = 93; break; } else { __label__ = 99; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $601=$K8; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $602=$601 >>> 31; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $603=$602 & 1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $604=$T; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $605=(($604+16)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $606=(($605+($603<<2))|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C=$606; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $607=$K8; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $608=$607 << 1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K8=$608; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $609=$C; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $610=HEAP32[(($609)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $611=(($610)|0)!=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($611) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $613=$C; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $614=HEAP32[(($613)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$614; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 98; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $616=$C; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $617=$616; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $618=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $619=(($618+16)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $620=HEAPU32[(($619)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $621=(($617)>>>0) >= (($620)>>>0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $622=(($621)&1); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $623=(($622)==(1)); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $624=(($623)|0)!=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($624) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $626=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $627=$C; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($627)>>2)]=$626; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $628=$T; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $629=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $630=(($629+24)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($630)>>2)]=$628; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $631=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $632=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $633=(($632+12)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($633)>>2)]=$631; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $634=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $635=(($634+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($635)>>2)]=$631; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 105; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 97: 
      _abort(); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 98: 
      __label__ = 104; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 99: 
      var $639=$T; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $640=(($639+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $641=HEAP32[(($640)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F9=$641; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $642=$T; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $643=$642; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $644=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $645=(($644+16)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $646=HEAPU32[(($645)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $647=(($643)>>>0) >= (($646)>>>0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($647) { __label__ = 100; break; } else { var $656 = 0;__label__ = 101; break; } //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $649=$F9; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $650=$649; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $651=$1; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $652=(($651+16)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $653=HEAPU32[(($652)>>2)]; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $654=(($650)>>>0) >= (($653)>>>0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $656 = $654;__label__ = 101; break;
    case 101: 
      var $656;
      var $657=(($656)&1);
      var $658=(($657)==(1));
      var $659=(($658)|0)!=0;
      if ($659) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: 
      var $661=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $662=$F9; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $663=(($662+12)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($663)>>2)]=$661; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $664=$T; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $665=(($664+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($665)>>2)]=$661; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $666=$F9; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $667=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $668=(($667+8)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($668)>>2)]=$666; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $669=$T; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $670=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $671=(($670+12)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($671)>>2)]=$669; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $672=$TP5; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $673=(($672+24)|0); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($673)>>2)]=0; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 105; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 103: 
      _abort(); //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 104: 
      __label__ = 92; break; //@line 3811 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 105: 
      __label__ = 106; break;
    case 106: 
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      var $681=$p; //@line 3816 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $682=$681; //@line 3816 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $683=(($682+8)|0); //@line 3816 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      ;
      return $683; //@line 3816 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNKSt9bad_alloc4whatEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return ((STRING_TABLE.__str337)|0); //@line 160 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZSt15get_new_handlerv() {
  ;
  var __label__;

  var $1=(tempValue=HEAP32[((__ZL13__new_handler)>>2)],HEAP32[((__ZL13__new_handler)>>2)]=tempValue+0,tempValue); //@line 146 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  var $2=$1; //@line 146 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ;
  return $2; //@line 146 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZSt15set_new_handlerPFvvE($handler) {
  ;
  var __label__;

  var $1;
  $1=$handler;
  var $2=$1; //@line 140 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  var $3=$2; //@line 140 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  var $4=(tempValue=HEAP32[((__ZL13__new_handler)>>2)],HEAP32[((__ZL13__new_handler)>>2)]=$3,tempValue); //@line 140 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  var $5=$4; //@line 140 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ;
  return $5; //@line 140 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt9bad_allocC2Ev($this) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $2;
  $2=$this;
  var $3=$2;
  var $4=$3; //@line 150 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  var $5=$1;
  HEAP32[(($1)>>2)]=$4;
  var $6=HEAP32[(($1)>>2)];
  var $7=$6; //@line 90 "/home/alan.kligman/project/emscripten/system/include/libcxx/exception"
  HEAP32[(($7)>>2)]=((__ZTVSt9exception+8)|0); //@line 90 "/home/alan.kligman/project/emscripten/system/include/libcxx/exception"
  var $8=$1; //@line 90 "/home/alan.kligman/project/emscripten/system/include/libcxx/exception"
  var $9=$3; //@line 150 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  HEAP32[(($9)>>2)]=((__ZTVSt9bad_alloc+8)|0); //@line 150 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  STACKTOP = __stackBase__;
  return; //@line 151 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdlPv($ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      $1=$ptr;
      var $2=$1; //@line 107 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $3=(($2)|0)!=0; //@line 107 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 107 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 2: 
      var $5=$1; //@line 108 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      _free($5); //@line 108 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 3; break; //@line 108 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      ;
      return; //@line 109 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZdlPvRKSt9nothrow_t($ptr, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$ptr;
  $3=$0;
  var $4=$2; //@line 115 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  __ZdlPv($4); //@line 115 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 116 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdaPv($ptr) {
  ;
  var __label__;

  var $1;
  $1=$ptr;
  var $2=$1; //@line 122 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  __ZdlPv($2); //@line 122 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 123 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdaPvRKSt9nothrow_t($ptr, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$ptr;
  $3=$0;
  var $4=$2; //@line 129 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  __ZdaPv($4); //@line 129 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 130 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt9bad_allocD0Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  FUNCTION_TABLE[__ZNSt9bad_allocD1Ev]($2); //@line 154 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  var $3=$2; //@line 154 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  __ZdlPv($3); //@line 154 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  ;
  return; //@line 155 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
}


function __ZNSt9bad_allocD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2; //@line 155 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  __ZNSt9exceptionD2Ev($3); //@line 155 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 155 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function _add_segment($m, $tbase, $tsize, $mmapped) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1; //@line 3822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+24)|0); //@line 3822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 3822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $old_top=$8; //@line 3822 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $9=$1; //@line 3823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $10=$old_top; //@line 3823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $11=_segment_holding($9, $10); //@line 3823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $oldsp=$11; //@line 3823 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $12=$oldsp; //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0); //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $15=$oldsp; //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+4)|0); //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $18=(($14+$17)|0); //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $old_end=$18; //@line 3824 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $ssize=24; //@line 3825 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $19=$old_end; //@line 3826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $20=$ssize; //@line 3826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $21=(($20+16)|0); //@line 3826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+7)|0); //@line 3826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $23=(((-$22))|0); //@line 3826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $24=(($19+$23)|0); //@line 3826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $rawsp=$24; //@line 3826 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $25=$rawsp; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $26=(($25+8)|0); //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $27=$26; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $28=$27 & 7; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $29=(($28)|0)==0; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($29) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $39 = 0;__label__ = 4; break; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $32=$rawsp; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $33=(($32+8)|0); //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $34=$33; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 7; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $36=((8-$35)|0); //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $37=$36 & 7; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $39 = $37;__label__ = 4; break; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $39; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $offset=$39; //@line 3827 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $40=$rawsp; //@line 3828 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $41=$offset; //@line 3828 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3828 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $asp=$42; //@line 3828 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $43=$asp; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $44=$old_top; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $45=(($44+16)|0); //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $46=(($43)>>>0) < (($45)>>>0); //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $48=$old_top; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52 = $48;__label__ = 7; break; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $50=$asp; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $52 = $50;__label__ = 7; break; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $52; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $csp=$52; //@line 3829 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $53=$csp; //@line 3830 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 3830 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $sp=$54; //@line 3830 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $55=$sp; //@line 3831 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 3831 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+8)|0); //@line 3831 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $58=$57; //@line 3831 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $ss=$58; //@line 3831 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $59=$sp; //@line 3832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $61=$ssize; //@line 3832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 3832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tnext=$63; //@line 3832 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $64=$tnext; //@line 3833 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$64; //@line 3833 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nfences=0; //@line 3834 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $65=$1; //@line 3837 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $66=$2; //@line 3837 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $67=$66; //@line 3837 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $68=$3; //@line 3837 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $69=(($68-40)|0); //@line 3837 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      _init_top($65, $67, $69); //@line 3837 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $70=$ssize; //@line 3841 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $71=$70 | 1; //@line 3841 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $72=$71 | 2; //@line 3841 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $73=$sp; //@line 3841 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+4)|0); //@line 3841 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3841 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $75=$ss; //@line 3842 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $76=$1; //@line 3842 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+444)|0); //@line 3842 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $78=$75; //@line 3842 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $79=$77; //@line 3842 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)];HEAP32[(($78+8)>>2)]=HEAP32[(($79+8)>>2)];HEAP32[(($78+12)>>2)]=HEAP32[(($79+12)>>2)]; //@line 3842 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $80=$2; //@line 3843 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $81=$1; //@line 3843 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $82=(($81+444)|0); //@line 3843 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $83=(($82)|0); //@line 3843 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($83)>>2)]=$80; //@line 3843 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $84=$3; //@line 3844 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $85=$1; //@line 3844 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+444)|0); //@line 3844 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $87=(($86+4)|0); //@line 3844 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($87)>>2)]=$84; //@line 3844 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $88=$4; //@line 3845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $89=$1; //@line 3845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+444)|0); //@line 3845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $91=(($90+12)|0); //@line 3845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($91)>>2)]=$88; //@line 3845 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $92=$ss; //@line 3846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $93=$1; //@line 3846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $94=(($93+444)|0); //@line 3846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+8)|0); //@line 3846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($95)>>2)]=$92; //@line 3846 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 3849 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $97=$p; //@line 3850 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $98=$97; //@line 3850 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $99=(($98+4)|0); //@line 3850 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3850 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nextp=$100; //@line 3850 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $101=$p; //@line 3851 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $102=(($101+4)|0); //@line 3851 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($102)>>2)]=7; //@line 3851 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $103=$nfences; //@line 3852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $104=(($103+1)|0); //@line 3852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $nfences=$104; //@line 3852 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $105=$nextp; //@line 3853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $106=(($105+4)|0); //@line 3853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 3853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $108=$old_end; //@line 3853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $109=(($107)>>>0) < (($108)>>>0); //@line 3853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($109) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3853 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $111=$nextp; //@line 3854 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $p=$111; //@line 3854 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3854 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 10: 
      __label__ = 12; break; //@line 3856 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 8; break; //@line 3857 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $115=$csp; //@line 3861 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $116=$old_top; //@line 3861 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $117=(($115)|0)!=(($116)|0); //@line 3861 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($117) { __label__ = 13; break; } else { __label__ = 49; break; } //@line 3861 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $119=$old_top; //@line 3862 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 3862 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $q=$120; //@line 3862 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $121=$csp; //@line 3863 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $122=$old_top; //@line 3863 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $123=$121; //@line 3863 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $124=$122; //@line 3863 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $125=(($123-$124)|0); //@line 3863 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $psize=$125; //@line 3863 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $126=$q; //@line 3864 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $127=$126; //@line 3864 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $128=$psize; //@line 3864 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $129=(($127+$128)|0); //@line 3864 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $130=$129; //@line 3864 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $tn=$130; //@line 3864 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $131=$tn; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+4)|0); //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $134=$133 & -2; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($132)>>2)]=$134; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $135=$psize; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $136=$135 | 1; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $137=$q; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $138=(($137+4)|0); //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($138)>>2)]=$136; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $139=$psize; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $140=$q; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $141=$140; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $142=$psize; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $143=(($141+$142)|0); //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $144=$143; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)|0); //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($145)>>2)]=$139; //@line 3865 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $146=$psize; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $147=$146 >>> 3; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $148=(($147)>>>0) < 32; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($148) { __label__ = 14; break; } else { __label__ = 21; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $150=$psize; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $151=$150 >>> 3; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I=$151; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $152=$I; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $153=$152 << 1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $154=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $155=(($154+40)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $156=(($155+($153<<2))|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $B=$158; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $159=$B; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$159; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $160=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $161=(($160)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($161)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $163=$I; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $164=1 << $163; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $165=$162 & $164; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $166=(($165)|0)!=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($166) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $168=$I; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $169=1 << $168; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $170=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $171=(($170)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($171)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $173=$172 | $169; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($171)>>2)]=$173; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $175=$B; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $178=$177; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $179=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $180=(($179+16)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $181=HEAPU32[(($180)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $182=(($178)>>>0) >= (($181)>>>0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $183=(($182)&1); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $184=(($183)==(1)); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $185=(($184)|0)!=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($185) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $187=$B; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F=$189; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 18: 
      _abort(); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $193=$q; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $194=$B; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $195=(($194+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($195)>>2)]=$193; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $196=$q; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $197=$F; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $198=(($197+12)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=$196; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $199=$F; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $200=$q; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $201=(($200+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($201)>>2)]=$199; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $202=$B; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $203=$q; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $204=(($203+12)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($204)>>2)]=$202; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $206=$q; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $207=$206; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $TP=$207; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $208=$psize; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $209=$208 >>> 8; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $X=$209; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $210=$X; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $211=(($210)|0)==0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($211) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 22: 
      $I1=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $214=$X; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)>>>0) > 65535; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($215) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 24: 
      $I1=31; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $218=$X; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$218; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $219=$Y; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $220=(($219-256)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $221=$220 >>> 16; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $222=$221 & 8; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$222; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $223=$N; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $224=$Y; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $225=$224 << $223; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$225; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $226=(($225-4096)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $227=$226 >>> 16; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $228=$227 & 4; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$228; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $229=$K; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $230=$N; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $231=(($230+$229)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$231; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $232=$K; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $233=$Y; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $234=$233 << $232; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$234; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $235=(($234-16384)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $236=$235 >>> 16; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $237=$236 & 2; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$237; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $238=$N; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $239=(($238+$237)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $N=$239; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $240=$N; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $241=((14-$240)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $242=$K; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $243=$Y; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $244=$243 << $242; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $Y=$244; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $245=$244 >>> 15; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $246=(($241+$245)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K=$246; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $247=$K; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $248=$247 << 1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $249=$psize; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $250=$K; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+7)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $252=$249 >>> (($251)>>>0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $253=$252 & 1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $254=(($248+$253)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $I1=$254; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $257=$I1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $258=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+304)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $260=(($259+($257<<2))|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $H=$260; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $261=$I1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $262=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $263=(($262+28)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($263)>>2)]=$261; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $264=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $265=(($264+16)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $266=(($265+4)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($266)>>2)]=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $267=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+16)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $269=(($268)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($269)>>2)]=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $270=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $271=(($270+4)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $273=$I1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $274=1 << $273; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $275=$272 & $274; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $276=(($275)|0)!=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($276) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $278=$I1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $279=1 << $278; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $280=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $281=(($280+4)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($281)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $283=$282 | $279; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($281)>>2)]=$283; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $284=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $285=$H; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($285)>>2)]=$284; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $286=$H; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $287=$286; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $288=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $289=(($288+24)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($289)>>2)]=$287; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $290=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $291=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $292=(($291+12)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $293=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=$290; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $296=$H; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$297; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $298=$psize; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $299=$I1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $300=(($299)|0)==31; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($300) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $309 = 0;__label__ = 32; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $303=$I1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $304=$303 >>> 1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $305=(($304+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $306=(($305-2)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $307=((31-$306)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $309 = $307;__label__ = 32; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $309; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $310=$298 << $309; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$310; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $312=$T; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $313=(($312+4)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $315=$314 & -8; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $316=$psize; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $317=(($315)|0)!=(($316)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($317) { __label__ = 34; break; } else { __label__ = 40; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $319=$K2; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $320=$319 >>> 31; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $321=$320 & 1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $322=$T; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $323=(($322+16)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $324=(($323+($321<<2))|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $C=$324; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $325=$K2; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $326=$325 << 1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $K2=$326; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $327=$C; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $328=HEAP32[(($327)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $329=(($328)|0)!=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($329) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $331=$C; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $332=HEAP32[(($331)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $T=$332; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $334=$C; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $335=$334; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $336=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $339=(($335)>>>0) >= (($338)>>>0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)&1); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)!=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $344=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $345=$C; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($345)>>2)]=$344; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $346=$T; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $347=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+24)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($348)>>2)]=$346; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $349=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $350=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+12)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $352=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($353)>>2)]=$349; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 45; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $357=$T; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $358=(($357+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      $F3=$359; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $360=$T; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $361=$360; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $362=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $363=(($362+16)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $364=HEAPU32[(($363)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $365=(($361)>>>0) >= (($364)>>>0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      if ($365) { __label__ = 41; break; } else { var $374 = 0;__label__ = 42; break; } //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $367=$F3; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $368=$367; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $369=$1; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $370=(($369+16)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $371=HEAPU32[(($370)>>2)]; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $372=(($368)>>>0) >= (($371)>>>0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $374 = $372;__label__ = 42; break;
    case 42: 
      var $374;
      var $375=(($374)&1);
      var $376=(($375)==(1));
      var $377=(($376)|0)!=0;
      if ($377) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $379=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $380=$F3; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $381=(($380+12)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($381)>>2)]=$379; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $382=$T; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $383=(($382+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($383)>>2)]=$379; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $384=$F3; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $385=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+8)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($386)>>2)]=$384; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $387=$T; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $388=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $389=(($388+12)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($389)>>2)]=$387; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $390=$TP; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      var $391=(($390+24)|0); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($391)>>2)]=0; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 44: 
      _abort(); //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 33; break; //@line 3866 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break; //@line 3867 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    case 49: 
      ;
      return; //@line 3870 "/home/alan.kligman/project/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Znwj($size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $p;
      var $nh;
      var $2;
      var $3;
      $1=$size;
      var $4=$1; //@line 35 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $5=(($4)|0)==0; //@line 35 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 35 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 2: 
      $1=1; //@line 36 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 3; break; //@line 36 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      __label__ = 4; break; //@line 38 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $9=$1; //@line 38 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $10=_malloc($9); //@line 38 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $p=$10; //@line 38 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $11=(($10)|0)==0; //@line 38 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      if ($11) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 38 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $13=__ZSt15get_new_handlerv(); //@line 42 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $nh=$13; //@line 42 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $14=$nh; //@line 43 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $15=(($14)|0)!=0; //@line 43 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      if ($15) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 43 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $17=$nh; //@line 44 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[$17]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 12; break; //@line 44 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 8: 
      var $20=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $21=$20.f0; //@line 44 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $2=$21; //@line 44 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $22=$20.f1; //@line 44 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $3=$22; //@line 44 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 9; break; //@line 44 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 9: 
      var $24=$3; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $25=(($24)|0) < 0; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      if ($25) { __label__ = 10; break; } else { __label__ = 14; break; } //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 10: 
      var $27=$2; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($27); //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 11: 
      var $29=___cxa_allocate_exception(4); //@line 47 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $30=$29; //@line 47 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      FUNCTION_TABLE[__ZNSt9bad_allocC1Ev]($30); //@line 47 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_throw($29, __ZTISt9bad_alloc, 36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 15; break; } else { __label__ = 8; break; }
    case 12: 
      __label__ = 4; break; //@line 51 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 13: 
      var $33=$p; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $33; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 14: 
      var $35=$2; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $36=$2; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $37=$3; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $38=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $36, tempValue); //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $39=($38.f1 = $37, $38); //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)]; //@line 52 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 15: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZnwjRKSt9nothrow_t($size, $0) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $2;
      var $3;
      var $p;
      var $4;
      var $5;
      $2=$size;
      $3=$0;
      $p=0; //@line 59 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $6=$2; //@line 64 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $7 = (function() { try { __THREW__ = false; return __Znwj($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $p=$7; //@line 64 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 6; break; //@line 66 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      var $10=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      var $11=$10.f0; //@line 64 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $4=$11; //@line 64 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $12=$10.f1; //@line 64 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $5=$12; //@line 64 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 4; break; //@line 64 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $14=$4; //@line 66 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $15=___cxa_begin_catch($14); //@line 66 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      __label__ = 6; break; //@line 69 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $18=$p; //@line 71 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $18; //@line 71 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $20=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $21=$20.f0; //@line 69 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $4=$21; //@line 69 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $22=$20.f1; //@line 69 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $5=$22; //@line 69 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 8; break; //@line 69 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 8: 
      var $24=$4; //@line 71 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($24); //@line 71 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 71 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Znaj($size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$size;
      var $4=$1; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $5 = (function() { try { __THREW__ = false; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      ;
      return $5; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $9=$8.f0; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $2=$9; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $10=$8.f1; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $3=$10; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 4; break; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $12=$3; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $13=(($12)|0) < 0; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $15=$2; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($15); //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $17=$2; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $18=$2; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $19=$3; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $20=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $18, tempValue); //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $21=($20.f1 = $19, $20); //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)]; //@line 81 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZnajRKSt9nothrow_t($size, $nothrow) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $p;
      var $3;
      var $4;
      $1=$size;
      $2=$nothrow;
      $p=0; //@line 88 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $5=$1; //@line 93 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $6 = (function() { try { __THREW__ = false; return __Znaj($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $p=$6; //@line 93 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 6; break; //@line 95 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      var $9=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[0]);
      var $10=$9.f0; //@line 93 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $3=$10; //@line 93 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $11=$9.f1; //@line 93 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $4=$11; //@line 93 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 4; break; //@line 93 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $13=$3; //@line 95 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $14=___cxa_begin_catch($13); //@line 95 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      __label__ = 6; break; //@line 98 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $17=$p; //@line 100 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $17; //@line 100 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $19=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[((_llvm_eh_exception.buf+4)>>2)],[]);
      var $20=$19.f0; //@line 98 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $3=$20; //@line 98 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      var $21=$19.f1; //@line 98 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      $4=$21; //@line 98 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 8; break; //@line 98 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    case 8: 
      var $23=$3; //@line 100 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($23); //@line 100 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 100 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNKSt20bad_array_new_length4whatEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return ((STRING_TABLE.__str1438)|0); //@line 174 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt20bad_array_new_lengthC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2; //@line 164 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  __ZNSt9bad_allocC2Ev($3); //@line 164 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  var $4=$2; //@line 164 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  HEAP32[(($4)>>2)]=((__ZTVSt20bad_array_new_length+8)|0); //@line 164 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  ;
  return; //@line 165 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt20bad_array_new_lengthD0Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  FUNCTION_TABLE[__ZNSt20bad_array_new_lengthD1Ev]($2); //@line 168 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  var $3=$2; //@line 168 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  __ZdlPv($3); //@line 168 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
  ;
  return; //@line 169 "/home/alan.kligman/project/emscripten/system/include/libcxx/new"
}


function __ZSt17__throw_bad_allocv() {
  ;
  var __label__;

  var $1=___cxa_allocate_exception(4); //@line 181 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  var $2=$1; //@line 181 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  FUNCTION_TABLE[__ZNSt9bad_allocC1Ev]($2); //@line 181 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ___cxa_throw($1, __ZTISt9bad_alloc, 36); //@line 181 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  throw "Reached an unreachable!" //@line 181 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 183 "/home/alan.kligman/project/emscripten/system/lib/libcxx/new.cpp"
}


  function ___gxx_personality_v0() {
    }
var __ZSt9terminatev; // stub for __ZSt9terminatev

  
  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  var _sqrtf=Math.sqrt;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [Pointer_stringify(filename), line, Pointer_stringify(func)];
    }

  
  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }var _llvm_memset_p0i8_i32=_memset;

  var _sinf=Math.sin;

  var _cosf=Math.cos;

  var _floorf=Math.floor;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
var _llvm_va_start; // stub for _llvm_va_start

  
  
  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              return FS.analyzePath([link].concat(path).join('/'),
                                    dontResolveLastLink, linksVisited + 1);
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
          return ret;
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {isDevice: false, contents: data};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
          var xhr = new XMLHttpRequest();
          xhr.open('GET', obj.url, false);
  
          // Some hints to the browser that we want binary data.
          if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
          if (xhr.overrideMimeType) {
            xhr.overrideMimeType('text/plain; charset=x-user-defined');
          }
  
          xhr.send(null);
          if (xhr.status != 200 && xhr.status != 0) success = false;
          if (xhr.response !== undefined) {
            obj.contents = new Uint8Array(xhr.response || []);
          } else {
            obj.contents = intArrayFromString(xhr.responseText || '', true);
          }
        } else if (typeof read !== 'undefined') {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read(obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Default handlers.
        if (!input) input = function() {
          if (!input.cache || !input.cache.length) {
            var result;
            if (typeof window != 'undefined' &&
                typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
            }
            if (!result) result = '';
            input.cache = intArrayFromString(result + '\n', true);
          }
          return input.cache.shift();
        };
        if (!output) output = function(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(String.fromCharCode(val));
          }
        };
        if (!output.printer) output.printer = print;
        if (!output.buffer) output.buffer = [];
        if (!error) error = output;
  
        // Create the temporary folder.
        FS.createFolder('/', 'tmp', true, true);
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        _stdin = allocate([1], 'void*', ALLOC_STATIC);
        _stdout = allocate([2], 'void*', ALLOC_STATIC);
        _stderr = allocate([3], 'void*', ALLOC_STATIC);
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr
        if (FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      }};
  
  
  
  
  
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(buf+i)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(buf+i)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[((varargs+argIndex)>>2)],tempDoubleI32[1]=HEAP32[((varargs+argIndex+4)>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[((varargs+argIndex)>>2)],
                 HEAP32[((varargs+argIndex+4)>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((varargs+argIndex)>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var argText;
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*');
            var copiedString;
            if (arg) {
              copiedString = String_copy(arg);
              if (precisionSet && copiedString.length > precision) {
                copiedString = copiedString.slice(0, precision);
              }
            } else {
              copiedString = intArrayFromString('(null)', true);
            }
            if (!flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            ret = ret.concat(copiedString);
            if (flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  var _vprintf=_printf;

  function _llvm_va_end() {}

  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var now = Date.now();
      HEAP32[((ptr+indexes[0])>>2)]=Math.floor(now/1000) // seconds
      HEAP32[((ptr+indexes[1])>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000) // microseconds
      return 0;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  var _expf=Math.exp;

  var _atan2f=Math.atan2;

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_abort() {}

  function ___cxa_guard_release() {}
var __ZNSt9type_infoD2Ev; // stub for __ZNSt9type_infoD2Ev

  var _llvm_memset_p0i8_i64=_memset;
var _llvm_dbg_declare; // stub for _llvm_dbg_declare
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort(code) {
      ABORT = true;
      throw 'ABORT: ' + code + ', at ' + (new Error().stack);
    }


  
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }
  var ___errno=___errno_location;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return { 'f0':thrown, 'f1':typeArray[i]};
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return {'f0':thrown,'f1':throwntype};
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      print('Compiled code throwing an exception, ' + [ptr,type,destructor] + ', at ' + new Error().stack);
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[((_llvm_eh_exception.buf+4)>>2)]=type
      HEAP32[((_llvm_eh_exception.buf+8)>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_call_unexpected(exception) {
      ABORT = true;
      throw exception;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = false;
      // Clear type.
      HEAP32[((_llvm_eh_exception.buf+4)>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[((_llvm_eh_exception.buf+8)>>2)];
      if (destructor) {
        FUNCTION_TABLE[destructor](ptr);
        HEAP32[((_llvm_eh_exception.buf+8)>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
var __ZNSt9exceptionD2Ev; // stub for __ZNSt9exceptionD2Ev




__ATINIT__.unshift({ func: function() { FS.ignorePermissions = false; if (!FS.init.initialized) FS.init() } });__ATEXIT__.push({ func: function() { FS.quit() } });
___setErrNo(0);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}









var _b2_gjkCalls;
var _b2_gjkIters;
var _b2_gjkMaxIters;

























































var _b2_toiCalls;
var _b2_toiIters;
var _b2_toiMaxIters;
var _b2_toiRootIters;
var _b2_toiMaxRootIters;








var __ZTV12b2ChainShape;













var __ZTI7b2Shape;
var __ZTI12b2ChainShape;
var __ZTV7b2Shape;
var __ZTV13b2CircleShape;

var __ZTI13b2CircleShape;
var __ZTV11b2EdgeShape;

var __ZTI11b2EdgeShape;









var __ZTV14b2PolygonShape;

var __ZTI14b2PolygonShape;


var __ZN16b2BlockAllocator12s_blockSizesE;
var __ZN16b2BlockAllocator17s_blockSizeLookupE;
var __ZN16b2BlockAllocator28s_blockSizeLookupInitializedE;








var __ZTV6b2Draw;

var __ZTI6b2Draw;
var _b2Vec2_zero;

__ATINIT__ = __ATINIT__.concat([
  { func: __GLOBAL__I_a },
  { func: __GLOBAL__I_a120 }
]);

var _b2_version;


















































var _b2_defaultFilter;
var ___dso_handle;
var _b2_defaultListener;







var __ZTV17b2ContactListener;

var __ZTI17b2ContactListener;














































































var __ZTV15b2ContactFilter;

var __ZTI15b2ContactFilter;
var __ZTV23b2ChainAndCircleContact;






var __ZTI9b2Contact;
var __ZTI23b2ChainAndCircleContact;
var __ZTV24b2ChainAndPolygonContact;





var __ZTI24b2ChainAndPolygonContact;
var __ZTV15b2CircleContact;





var __ZTI15b2CircleContact;
var __ZN9b2Contact11s_registersE;
var __ZN9b2Contact13s_initializedE;








var __ZTV9b2Contact;










var __ZTV22b2EdgeAndCircleContact;





var __ZTI22b2EdgeAndCircleContact;
var __ZTV23b2EdgeAndPolygonContact;





var __ZTI23b2EdgeAndPolygonContact;
var __ZTV25b2PolygonAndCircleContact;





var __ZTI25b2PolygonAndCircleContact;
var __ZTV16b2PolygonContact;





var __ZTI16b2PolygonContact;
var __ZTV15b2DistanceJoint;












var __ZTI7b2Joint;
var __ZTI15b2DistanceJoint;
var __ZTV15b2FrictionJoint;















var __ZTI15b2FrictionJoint;
var __ZTV11b2GearJoint;















var __ZTI11b2GearJoint;




var __ZTV7b2Joint;



var __ZTV12b2MouseJoint;









var __ZTI12b2MouseJoint;

var __ZTV16b2PrismaticJoint;



















var __ZTI16b2PrismaticJoint;



var __ZTV13b2PulleyJoint;















var __ZTI13b2PulleyJoint;
var __ZTV15b2RevoluteJoint;


















var __ZTI15b2RevoluteJoint;
var __ZTV11b2RopeJoint;









var __ZTI11b2RopeJoint;
var __ZTV11b2WeldJoint;











var __ZTI11b2WeldJoint;
var __ZTV12b2WheelJoint;














var __ZTI12b2WheelJoint;



var _ret;
var __ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret;
var _ret1;
var __ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret;
var _ret2;
var __ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret;
var _ret3;
var __ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret;
var _ret4;
var __ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret;
var _ret5;
var __ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret;
var _ret6;
var __ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret;
var _ret7;
var __ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret;
var _ret8;
var __ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret;
var _ret9;
var __ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret;
var _ret10;
var __ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret;
var _ret11;
var __ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret;
var _ret12;
var __ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret;
var _ret13;
var __ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret;
var _ret14;
var __ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret;
var _ret15;
var __ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret;
var _llvm_used;

var __ZTISt9type_info;
var __ZTIN10__cxxabiv116__shim_type_infoE;

var __ZTIN10__cxxabiv117__class_type_infoE;

var __ZTINSt3__19nullptr_tE;


var __ZTIN10__cxxabiv117__pbase_type_infoE;
var __ZTIN10__cxxabiv119__pointer_type_infoE;
var __ZTVN10__cxxabiv116__shim_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
var __ZTVN10__cxxabiv117__pbase_type_infoE;
var __ZTVN10__cxxabiv123__fundamental_type_infoE;

var __ZTIN10__cxxabiv123__fundamental_type_infoE;

var __ZTIv;

var __ZTIPv;

var __ZTIPKv;

var __ZTIDn;

var __ZTIPDn;

var __ZTIPKDn;

var __ZTIb;

var __ZTIPb;

var __ZTIPKb;

var __ZTIw;

var __ZTIPw;

var __ZTIPKw;

var __ZTIc;

var __ZTIPc;

var __ZTIPKc;

var __ZTIh;

var __ZTIPh;

var __ZTIPKh;

var __ZTIa;

var __ZTIPa;

var __ZTIPKa;

var __ZTIs;

var __ZTIPs;

var __ZTIPKs;

var __ZTIt;

var __ZTIPt;

var __ZTIPKt;

var __ZTIi;

var __ZTIPi;

var __ZTIPKi;

var __ZTIj;

var __ZTIPj;

var __ZTIPKj;

var __ZTIl;

var __ZTIPl;

var __ZTIPKl;

var __ZTIm;

var __ZTIPm;

var __ZTIPKm;

var __ZTIx;

var __ZTIPx;

var __ZTIPKx;

var __ZTIy;

var __ZTIPy;

var __ZTIPKy;

var __ZTIf;

var __ZTIPf;

var __ZTIPKf;

var __ZTId;

var __ZTIPd;

var __ZTIPKd;

var __ZTIe;

var __ZTIPe;

var __ZTIPKe;

var __ZTIDs;

var __ZTIPDs;

var __ZTIPKDs;

var __ZTIDi;

var __ZTIPDi;

var __ZTIPKDi;
var __ZTVN10__cxxabiv117__array_type_infoE;

var __ZTIN10__cxxabiv117__array_type_infoE;
var __ZTVN10__cxxabiv120__function_type_infoE;

var __ZTIN10__cxxabiv120__function_type_infoE;
var __ZTVN10__cxxabiv116__enum_type_infoE;

var __ZTIN10__cxxabiv116__enum_type_infoE;
var __ZTVN10__cxxabiv120__si_class_type_infoE;

var __ZTIN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv121__vmi_class_type_infoE;

var __ZTIN10__cxxabiv121__vmi_class_type_infoE;
var __ZTVN10__cxxabiv119__pointer_type_infoE;
var __ZTVN10__cxxabiv129__pointer_to_member_type_infoE;

var __ZTIN10__cxxabiv129__pointer_to_member_type_infoE;
var __gm_;
var _mparams;
var __impure_ptr;



var __ZSt7nothrow;
var __ZL13__new_handler;
var __ZTVSt9bad_alloc;

var __ZTVSt20bad_array_new_length;


var __ZTISt9exception;
var __ZTISt9bad_alloc;

var __ZTISt20bad_array_new_length;
var __ZTVSt9exception;
var __ZN12b2BroadPhaseC1Ev;
var __ZN12b2BroadPhaseD1Ev;
var __ZN13b2DynamicTreeC1Ev;
var __ZN13b2DynamicTreeD1Ev;
var __ZN12b2ChainShapeD1Ev;
var __ZN16b2BlockAllocatorC1Ev;
var __ZN16b2BlockAllocatorD1Ev;
var __ZN16b2StackAllocatorC1Ev;
var __ZN16b2StackAllocatorD1Ev;
var __ZN7b2TimerC1Ev;
var __ZN6b2BodyC1EPK9b2BodyDefP7b2World;
var __ZN6b2BodyD1Ev;
var __ZN16b2ContactManagerC1Ev;
var __ZN9b2FixtureC1Ev;
var __ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener;
var __ZN8b2IslandD1Ev;
var __ZN7b2WorldC1ERK6b2Vec2;
var __ZN7b2WorldD1Ev;
var __ZN23b2ChainAndCircleContactC1EP9b2FixtureiS1_i;
var __ZN24b2ChainAndPolygonContactC1EP9b2FixtureiS1_i;
var __ZN15b2CircleContactC1EP9b2FixtureS1_;
var __ZN15b2ContactSolverC1EP18b2ContactSolverDef;
var __ZN15b2ContactSolverD1Ev;
var __ZN22b2EdgeAndCircleContactC1EP9b2FixtureS1_;
var __ZN23b2EdgeAndPolygonContactC1EP9b2FixtureS1_;
var __ZN25b2PolygonAndCircleContactC1EP9b2FixtureS1_;
var __ZN16b2PolygonContactC1EP9b2FixtureS1_;
var __ZN15b2DistanceJointC1EPK18b2DistanceJointDef;
var __ZN15b2FrictionJointC1EPK18b2FrictionJointDef;
var __ZN11b2GearJointC1EPK14b2GearJointDef;
var __ZN12b2MouseJointC1EPK15b2MouseJointDef;
var __ZN16b2PrismaticJointC1EPK19b2PrismaticJointDef;
var __ZN13b2PulleyJointC1EPK16b2PulleyJointDef;
var __ZN15b2RevoluteJointC1EPK18b2RevoluteJointDef;
var __ZN11b2RopeJointC1EPK14b2RopeJointDef;
var __ZN11b2WeldJointC1EPK14b2WeldJointDef;
var __ZN12b2WheelJointC1EPK15b2WheelJointDef;
var __ZN6b2RopeC1Ev;
var __ZN6b2RopeD1Ev;
var __ZN10__cxxabiv116__shim_type_infoD1Ev;
var __ZN10__cxxabiv123__fundamental_type_infoD1Ev;
var __ZN10__cxxabiv123__fundamental_type_infoD2Ev;
var __ZN10__cxxabiv117__array_type_infoD1Ev;
var __ZN10__cxxabiv117__array_type_infoD2Ev;
var __ZN10__cxxabiv120__function_type_infoD1Ev;
var __ZN10__cxxabiv120__function_type_infoD2Ev;
var __ZN10__cxxabiv116__enum_type_infoD1Ev;
var __ZN10__cxxabiv116__enum_type_infoD2Ev;
var __ZN10__cxxabiv117__class_type_infoD1Ev;
var __ZN10__cxxabiv117__class_type_infoD2Ev;
var __ZN10__cxxabiv120__si_class_type_infoD1Ev;
var __ZN10__cxxabiv120__si_class_type_infoD2Ev;
var __ZN10__cxxabiv121__vmi_class_type_infoD1Ev;
var __ZN10__cxxabiv121__vmi_class_type_infoD2Ev;
var __ZN10__cxxabiv117__pbase_type_infoD1Ev;
var __ZN10__cxxabiv117__pbase_type_infoD2Ev;
var __ZN10__cxxabiv119__pointer_type_infoD1Ev;
var __ZN10__cxxabiv119__pointer_type_infoD2Ev;
var __ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev;
var __ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
STRING_TABLE.__str=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,69,100,103,101,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_=allocate([118,111,105,100,32,98,50,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,40,98,50,77,97,110,105,102,111,108,100,32,42,44,32,99,111,110,115,116,32,98,50,69,100,103,101,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,67,105,114,99,108,101,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0] /* void b2CollideEdgeAn */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1=allocate([100,101,110,32,62,32,48,46,48,102,0] /* den _ 0.0f\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,80,111,108,121,103,111,110,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_=allocate([118,111,105,100,32,98,50,70,105,110,100,73,110,99,105,100,101,110,116,69,100,103,101,40,98,50,67,108,105,112,86,101,114,116,101,120,32,42,44,32,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,44,32,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0] /* void b2FindIncidentE */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13=allocate([48,32,60,61,32,101,100,103,101,49,32,38,38,32,101,100,103,101,49,32,60,32,112,111,108,121,49,45,62,109,95,118,101,114,116,101,120,67,111,117,110,116,0] /* 0 _= edge1 && edge1  */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_=allocate([102,108,111,97,116,51,50,32,98,50,69,100,103,101,83,101,112,97,114,97,116,105,111,110,40,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,44,32,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0] /* float32 b2EdgeSepara */, "i8", ALLOC_STATIC);
_b2_gjkCalls=allocate(1, "i32", ALLOC_STATIC);
_b2_gjkIters=allocate(1, "i32", ALLOC_STATIC);
_b2_gjkMaxIters=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str6=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2DistanceProxy3SetEPK7b2Shapei=allocate([118,111,105,100,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,58,58,83,101,116,40,99,111,110,115,116,32,98,50,83,104,97,112,101,32,42,44,32,105,110,116,51,50,41,0] /* void b2DistanceProxy */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17=allocate([48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,99,104,97,105,110,45,62,109,95,99,111,117,110,116,0] /* 0 _= index && index  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput=allocate([118,111,105,100,32,98,50,68,105,115,116,97,110,99,101,40,98,50,68,105,115,116,97,110,99,101,79,117,116,112,117,116,32,42,44,32,98,50,83,105,109,112,108,101,120,67,97,99,104,101,32,42,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,73,110,112,117,116,32,42,41,0] /* void b2Distance(b2Di */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv=allocate([102,108,111,97,116,51,50,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,77,101,116,114,105,99,40,41,32,99,111,110,115,116,0] /* float32 b2Simplex::G */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_=allocate([118,111,105,100,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,87,105,116,110,101,115,115,80,111,105,110,116,115,40,98,50,86,101,99,50,32,42,44,32,98,50,86,101,99,50,32,42,41,32,99,111,110,115,116,0] /* void b2Simplex::GetW */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,104,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi=allocate([99,111,110,115,116,32,98,50,86,101,99,50,32,38,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,58,58,71,101,116,86,101,114,116,101,120,40,105,110,116,51,50,41,32,99,111,110,115,116,0] /* const b2Vec2 &b2Dist */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4=allocate([48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0] /* 0 _= index && index  */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex18GetSearchDirectionEv=allocate([98,50,86,101,99,50,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,83,101,97,114,99,104,68,105,114,101,99,116,105,111,110,40,41,32,99,111,110,115,116,0] /* b2Vec2 b2Simplex::Ge */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv=allocate([98,50,86,101,99,50,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,67,108,111,115,101,115,116,80,111,105,110,116,40,41,32,99,111,110,115,116,0] /* b2Vec2 b2Simplex::Ge */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_=allocate([118,111,105,100,32,98,50,83,105,109,112,108,101,120,58,58,82,101,97,100,67,97,99,104,101,40,99,111,110,115,116,32,98,50,83,105,109,112,108,101,120,67,97,99,104,101,32,42,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0] /* void b2Simplex::Read */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5=allocate([99,97,99,104,101,45,62,99,111,117,110,116,32,60,61,32,51,0] /* cache-_count _= 3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12AllocateNodeEv=allocate([105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,65,108,108,111,99,97,116,101,78,111,100,101,40,41,0] /* int32 b2DynamicTree: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str115=allocate([109,95,110,111,100,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* m_nodeCount == m_nod */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi=allocate([118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,70,114,101,101,78,111,100,101,40,105,110,116,51,50,41,0] /* void b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str216=allocate([48,32,60,61,32,110,111,100,101,73,100,32,38,38,32,110,111,100,101,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= nodeId && nodeI */, "i8", ALLOC_STATIC);
STRING_TABLE.__str317=allocate([48,32,60,32,109,95,110,111,100,101,67,111,117,110,116,0] /* 0 _ m_nodeCount\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12DestroyProxyEi=allocate([118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,68,101,115,116,114,111,121,80,114,111,120,121,40,105,110,116,51,50,41,0] /* void b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str418=allocate([48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= proxyId && prox */, "i8", ALLOC_STATIC);
STRING_TABLE.__str519=allocate([109,95,110,111,100,101,115,91,112,114,111,120,121,73,100,93,46,73,115,76,101,97,102,40,41,0] /* m_nodes[proxyId].IsL */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2=allocate([98,111,111,108,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,77,111,118,101,80,114,111,120,121,40,105,110,116,51,50,44,32,99,111,110,115,116,32,98,50,65,65,66,66,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,41,0] /* bool b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree10InsertLeafEi=allocate([118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,73,110,115,101,114,116,76,101,97,102,40,105,110,116,51,50,41,0] /* void b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str620=allocate([99,104,105,108,100,49,32,33,61,32,40,45,49,41,0] /* child1 != (-1)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7=allocate([99,104,105,108,100,50,32,33,61,32,40,45,49,41,0] /* child2 != (-1)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi=allocate([105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,66,97,108,97,110,99,101,40,105,110,116,51,50,41,0] /* int32 b2DynamicTree: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8=allocate([105,65,32,33,61,32,40,45,49,41,0] /* iA != (-1)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9=allocate([48,32,60,61,32,105,66,32,38,38,32,105,66,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= iB && iB _ m_no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10=allocate([48,32,60,61,32,105,67,32,38,38,32,105,67,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= iC && iC _ m_no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11=allocate([48,32,60,61,32,105,70,32,38,38,32,105,70,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= iF && iF _ m_no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12=allocate([48,32,60,61,32,105,71,32,38,38,32,105,71,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= iG && iG _ m_no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1321=allocate([109,95,110,111,100,101,115,91,67,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0] /* m_nodes[C-_parent].c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1422=allocate([48,32,60,61,32,105,68,32,38,38,32,105,68,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= iD && iD _ m_no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15=allocate([48,32,60,61,32,105,69,32,38,38,32,105,69,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= iE && iE _ m_no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16=allocate([109,95,110,111,100,101,115,91,66,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0] /* m_nodes[B-_parent].c */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13ComputeHeightEi=allocate([105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,67,111,109,112,117,116,101,72,101,105,103,104,116,40,105,110,116,51,50,41,32,99,111,110,115,116,0] /* int32 b2DynamicTree: */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi=allocate([118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,86,97,108,105,100,97,116,101,83,116,114,117,99,116,117,114,101,40,105,110,116,51,50,41,32,99,111,110,115,116,0] /* void b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1723=allocate([109,95,110,111,100,101,115,91,105,110,100,101,120,93,46,112,97,114,101,110,116,32,61,61,32,40,45,49,41,0] /* m_nodes[index].paren */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18=allocate([99,104,105,108,100,49,32,61,61,32,40,45,49,41,0] /* child1 == (-1)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19=allocate([99,104,105,108,100,50,32,61,61,32,40,45,49,41,0] /* child2 == (-1)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20=allocate([110,111,100,101,45,62,104,101,105,103,104,116,32,61,61,32,48,0] /* node-_height == 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21=allocate([48,32,60,61,32,99,104,105,108,100,49,32,38,38,32,99,104,105,108,100,49,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= child1 && child */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22=allocate([48,32,60,61,32,99,104,105,108,100,50,32,38,38,32,99,104,105,108,100,50,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= child2 && child */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([109,95,110,111,100,101,115,91,99,104,105,108,100,49,93,46,112,97,114,101,110,116,32,61,61,32,105,110,100,101,120,0] /* m_nodes[child1].pare */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24=allocate([109,95,110,111,100,101,115,91,99,104,105,108,100,50,93,46,112,97,114,101,110,116,32,61,61,32,105,110,100,101,120,0] /* m_nodes[child2].pare */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi=allocate([118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,86,97,108,105,100,97,116,101,77,101,116,114,105,99,115,40,105,110,116,51,50,41,32,99,111,110,115,116,0] /* void b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([110,111,100,101,45,62,104,101,105,103,104,116,32,61,61,32,104,101,105,103,104,116,0] /* node-_height == heig */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([97,97,98,98,46,108,111,119,101,114,66,111,117,110,100,32,61,61,32,110,111,100,101,45,62,97,97,98,98,46,108,111,119,101,114,66,111,117,110,100,0] /* aabb.lowerBound == n */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27=allocate([97,97,98,98,46,117,112,112,101,114,66,111,117,110,100,32,61,61,32,110,111,100,101,45,62,97,97,98,98,46,117,112,112,101,114,66,111,117,110,100,0] /* aabb.upperBound == n */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv=allocate([118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,86,97,108,105,100,97,116,101,40,41,32,99,111,110,115,116,0] /* void b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2824=allocate([48,32,60,61,32,102,114,101,101,73,110,100,101,120,32,38,38,32,102,114,101,101,73,110,100,101,120,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= freeIndex && fr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29=allocate([71,101,116,72,101,105,103,104,116,40,41,32,61,61,32,67,111,109,112,117,116,101,72,101,105,103,104,116,40,41,0] /* GetHeight() == Compu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30=allocate([109,95,110,111,100,101,67,111,117,110,116,32,43,32,102,114,101,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* m_nodeCount + freeCo */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv=allocate([105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,71,101,116,77,97,120,66,97,108,97,110,99,101,40,41,32,99,111,110,115,116,0] /* int32 b2DynamicTree: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31=allocate([110,111,100,101,45,62,73,115,76,101,97,102,40,41,32,61,61,32,102,97,108,115,101,0] /* node-_IsLeaf() == fa */, "i8", ALLOC_STATIC);
_b2_toiCalls=allocate(1, "i32", ALLOC_STATIC);
_b2_toiIters=allocate(1, "i32", ALLOC_STATIC);
_b2_toiMaxIters=allocate(1, "i32", ALLOC_STATIC);
_b2_toiRootIters=allocate(1, "i32", ALLOC_STATIC);
_b2_toiMaxRootIters=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,84,105,109,101,79,102,73,109,112,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput=allocate([118,111,105,100,32,98,50,84,105,109,101,79,102,73,109,112,97,99,116,40,98,50,84,79,73,79,117,116,112,117,116,32,42,44,32,99,111,110,115,116,32,98,50,84,79,73,73,110,112,117,116,32,42,41,0] /* void b2TimeOfImpact( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str136=allocate([116,97,114,103,101,116,32,62,32,116,111,108,101,114,97,110,99,101,0] /* target _ tolerance\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction8EvaluateEiif=allocate([102,108,111,97,116,51,50,32,98,50,83,101,112,97,114,97,116,105,111,110,70,117,110,99,116,105,111,110,58,58,69,118,97,108,117,97,116,101,40,105,110,116,51,50,44,32,105,110,116,51,50,44,32,102,108,111,97,116,51,50,41,32,99,111,110,115,116,0] /* float32 b2Separation */, "i8", ALLOC_STATIC);
STRING_TABLE.__str237=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f=allocate([102,108,111,97,116,51,50,32,98,50,83,101,112,97,114,97,116,105,111,110,70,117,110,99,116,105,111,110,58,58,70,105,110,100,77,105,110,83,101,112,97,114,97,116,105,111,110,40,105,110,116,51,50,32,42,44,32,105,110,116,51,50,32,42,44,32,102,108,111,97,116,51,50,41,32,99,111,110,115,116,0] /* float32 b2Separation */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f=allocate([102,108,111,97,116,51,50,32,98,50,83,101,112,97,114,97,116,105,111,110,70,117,110,99,116,105,111,110,58,58,73,110,105,116,105,97,108,105,122,101,40,99,111,110,115,116,32,98,50,83,105,109,112,108,101,120,67,97,99,104,101,32,42,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,83,119,101,101,112,32,38,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,83,119,101,101,112,32,38,44,32,102,108,111,97,116,51,50,41,0] /* float32 b2Separation */, "i8", ALLOC_STATIC);
STRING_TABLE.__str541=allocate([48,32,60,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,32,51,0] /* 0 _ count && count _ */, "i8", ALLOC_STATIC);
__ZTV12b2ChainShape=allocate([0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 40, 0, 0, 0, 42, 0, 0, 0, 44, 0, 0, 0, 46, 0, 0, 0, 48, 0, 0, 0, 50, 0, 0, 0, 52, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,67,104,97,105,110,83,104,97,112,101,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i=allocate([118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,67,114,101,97,116,101,76,111,111,112,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0] /* void b2ChainShape::C */, "i8", ALLOC_STATIC);
STRING_TABLE.__str143=allocate([109,95,118,101,114,116,105,99,101,115,32,61,61,32,95,95,110,117,108,108,32,38,38,32,109,95,99,111,117,110,116,32,61,61,32,48,0] /* m_vertices == __null */, "i8", ALLOC_STATIC);
STRING_TABLE.__str244=allocate([99,111,117,110,116,32,62,61,32,51,0] /* count _= 3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i=allocate([118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,67,114,101,97,116,101,67,104,97,105,110,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0] /* void b2ChainShape::C */, "i8", ALLOC_STATIC);
STRING_TABLE.__str345=allocate([99,111,117,110,116,32,62,61,32,50,0] /* count _= 2\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei=allocate([118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,71,101,116,67,104,105,108,100,69,100,103,101,40,98,50,69,100,103,101,83,104,97,112,101,32,42,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0] /* void b2ChainShape::G */, "i8", ALLOC_STATIC);
STRING_TABLE.__str446=allocate([48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,32,45,32,49,0] /* 0 _= index && index  */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi=allocate([118,105,114,116,117,97,108,32,98,111,111,108,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,82,97,121,67,97,115,116,40,98,50,82,97,121,67,97,115,116,79,117,116,112,117,116,32,42,44,32,99,111,110,115,116,32,98,50,82,97,121,67,97,115,116,73,110,112,117,116,32,38,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0] /* virtual bool b2Chain */, "i8", ALLOC_STATIC);
STRING_TABLE.__str547=allocate([99,104,105,108,100,73,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0] /* childIndex _ m_count */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi=allocate([118,105,114,116,117,97,108,32,118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,67,111,109,112,117,116,101,65,65,66,66,40,98,50,65,65,66,66,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0] /* virtual void b2Chain */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS12b2ChainShape=allocate([49,50,98,50,67,104,97,105,110,83,104,97,112,101,0] /* 12b2ChainShape\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS7b2Shape=allocate([55,98,50,83,104,97,112,101,0] /* 7b2Shape\00 */, "i8", ALLOC_STATIC);
__ZTI7b2Shape=allocate(8, "*", ALLOC_STATIC);
__ZTI12b2ChainShape=allocate(12, "*", ALLOC_STATIC);
__ZTV7b2Shape=allocate([0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
__ZTV13b2CircleShape=allocate([0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 62, 0, 0, 0, 64, 0, 0, 0, 66, 0, 0, 0, 68, 0, 0, 0, 70, 0, 0, 0, 72, 0, 0, 0, 74, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTS13b2CircleShape=allocate([49,51,98,50,67,105,114,99,108,101,83,104,97,112,101,0] /* 13b2CircleShape\00 */, "i8", ALLOC_STATIC);
__ZTI13b2CircleShape=allocate(12, "*", ALLOC_STATIC);
__ZTV11b2EdgeShape=allocate([0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 78, 0, 0, 0, 80, 0, 0, 0, 82, 0, 0, 0, 84, 0, 0, 0, 86, 0, 0, 0, 88, 0, 0, 0, 90, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTS11b2EdgeShape=allocate([49,49,98,50,69,100,103,101,83,104,97,112,101,0] /* 11b2EdgeShape\00 */, "i8", ALLOC_STATIC);
__ZTI11b2EdgeShape=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__str52=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN14b2PolygonShape3SetEPK6b2Vec2i=allocate([118,111,105,100,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,58,58,83,101,116,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0] /* void b2PolygonShape: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str153=allocate([51,32,60,61,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,61,32,56,0] /* 3 _= count && count  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str254=allocate([101,100,103,101,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,32,42,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0] /* edge.LengthSquared() */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi=allocate([118,105,114,116,117,97,108,32,98,111,111,108,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,58,58,82,97,121,67,97,115,116,40,98,50,82,97,121,67,97,115,116,79,117,116,112,117,116,32,42,44,32,99,111,110,115,116,32,98,50,82,97,121,67,97,115,116,73,110,112,117,116,32,38,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0] /* virtual bool b2Polyg */, "i8", ALLOC_STATIC);
STRING_TABLE.__str355=allocate([48,46,48,102,32,60,61,32,108,111,119,101,114,32,38,38,32,108,111,119,101,114,32,60,61,32,105,110,112,117,116,46,109,97,120,70,114,97,99,116,105,111,110,0] /* 0.0f _= lower && low */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf=allocate([118,105,114,116,117,97,108,32,118,111,105,100,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,58,58,67,111,109,112,117,116,101,77,97,115,115,40,98,50,77,97,115,115,68,97,116,97,32,42,44,32,102,108,111,97,116,51,50,41,32,99,111,110,115,116,0] /* virtual void b2Polyg */, "i8", ALLOC_STATIC);
STRING_TABLE.__str456=allocate([109,95,118,101,114,116,101,120,67,111,117,110,116,32,62,61,32,51,0] /* m_vertexCount _= 3\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str557=allocate([97,114,101,97,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0] /* area _ 1.19209290E-0 */, "i8", ALLOC_STATIC);
__ZTV14b2PolygonShape=allocate([0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 94, 0, 0, 0, 96, 0, 0, 0, 98, 0, 0, 0, 100, 0, 0, 0, 102, 0, 0, 0, 104, 0, 0, 0, 106, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTS14b2PolygonShape=allocate([49,52,98,50,80,111,108,121,103,111,110,83,104,97,112,101,0] /* 14b2PolygonShape\00 */, "i8", ALLOC_STATIC);
__ZTI14b2PolygonShape=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZL15ComputeCentroidPK6b2Vec2i=allocate([98,50,86,101,99,50,32,67,111,109,112,117,116,101,67,101,110,116,114,111,105,100,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0] /* b2Vec2 ComputeCentro */, "i8", ALLOC_STATIC);
STRING_TABLE.__str658=allocate([99,111,117,110,116,32,62,61,32,51,0] /* count _= 3\00 */, "i8", ALLOC_STATIC);
__ZN16b2BlockAllocator12s_blockSizesE=allocate([16, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 160, 0, 0, 0, 192, 0, 0, 0, 224, 0, 0, 0, 256, 0, 0, 0, 320, 0, 0, 0, 384, 0, 0, 0, 448, 0, 0, 0, 512, 0, 0, 0, 640, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__ZN16b2BlockAllocator17s_blockSizeLookupE=allocate(641, "i8", ALLOC_STATIC);
__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str59=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocatorC2Ev=allocate([98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,58,58,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,40,41,0] /* b2BlockAllocator::b2 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str160=allocate([106,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0] /* j _ b2_blockSizes\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi=allocate([118,111,105,100,32,42,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,58,58,65,108,108,111,99,97,116,101,40,105,110,116,51,50,41,0] /* void _b2BlockAllocat */, "i8", ALLOC_STATIC);
STRING_TABLE.__str261=allocate([48,32,60,32,115,105,122,101,0] /* 0 _ size\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str362=allocate([48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0] /* 0 _= index && index  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str463=allocate([98,108,111,99,107,67,111,117,110,116,32,42,32,98,108,111,99,107,83,105,122,101,32,60,61,32,98,50,95,99,104,117,110,107,83,105,122,101,0] /* blockCount _ blockSi */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi=allocate([118,111,105,100,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,58,58,70,114,101,101,40,118,111,105,100,32,42,44,32,105,110,116,51,50,41,0] /* void b2BlockAllocato */, "i8", ALLOC_STATIC);
__ZTV6b2Draw=allocate([0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 110, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTS6b2Draw=allocate([54,98,50,68,114,97,119,0] /* 6b2Draw\00 */, "i8", ALLOC_STATIC);
__ZTI6b2Draw=allocate(8, "*", ALLOC_STATIC);
_b2Vec2_zero=allocate(8, "float", ALLOC_STATIC);
_b2_version=allocate([2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str72=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev=allocate([98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,58,58,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,40,41,0] /* b2StackAllocator::~b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str173=allocate([109,95,105,110,100,101,120,32,61,61,32,48,0] /* m_index == 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str274=allocate([109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0] /* m_entryCount == 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi=allocate([118,111,105,100,32,42,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,58,58,65,108,108,111,99,97,116,101,40,105,110,116,51,50,41,0] /* void _b2StackAllocat */, "i8", ALLOC_STATIC);
STRING_TABLE.__str375=allocate([109,95,101,110,116,114,121,67,111,117,110,116,32,60,32,98,50,95,109,97,120,83,116,97,99,107,69,110,116,114,105,101,115,0] /* m_entryCount _ b2_ma */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator4FreeEPv=allocate([118,111,105,100,32,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,58,58,70,114,101,101,40,118,111,105,100,32,42,41,0] /* void b2StackAllocato */, "i8", ALLOC_STATIC);
STRING_TABLE.__str476=allocate([109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0] /* m_entryCount _ 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str577=allocate([112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0] /* p == entry-_data\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,66,111,100,121,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World=allocate([98,50,66,111,100,121,58,58,98,50,66,111,100,121,40,99,111,110,115,116,32,98,50,66,111,100,121,68,101,102,32,42,44,32,98,50,87,111,114,108,100,32,42,41,0] /* b2Body::b2Body(const */, "i8", ALLOC_STATIC);
STRING_TABLE.__str179=allocate([98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0] /* bd-_position.IsValid */, "i8", ALLOC_STATIC);
STRING_TABLE.__str280=allocate([98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0] /* bd-_linearVelocity.I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str381=allocate([98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0] /* b2IsValid(bd-_angle) */, "i8", ALLOC_STATIC);
STRING_TABLE.__str482=allocate([98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0] /* b2IsValid(bd-_angula */, "i8", ALLOC_STATIC);
STRING_TABLE.__str583=allocate([98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0] /* b2IsValid(bd-_angula */, "i8", ALLOC_STATIC);
STRING_TABLE.__str684=allocate([98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0] /* b2IsValid(bd-_linear */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body7SetTypeE10b2BodyType=allocate([118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,84,121,112,101,40,98,50,66,111,100,121,84,121,112,101,41,0] /* void b2Body::SetType */, "i8", ALLOC_STATIC);
STRING_TABLE.__str785=allocate([109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0] /* m_world-_IsLocked()  */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13CreateFixtureEPK12b2FixtureDef=allocate([98,50,70,105,120,116,117,114,101,32,42,98,50,66,111,100,121,58,58,67,114,101,97,116,101,70,105,120,116,117,114,101,40,99,111,110,115,116,32,98,50,70,105,120,116,117,114,101,68,101,102,32,42,41,0] /* b2Fixture _b2Body::C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture=allocate([118,111,105,100,32,98,50,66,111,100,121,58,58,68,101,115,116,114,111,121,70,105,120,116,117,114,101,40,98,50,70,105,120,116,117,114,101,32,42,41,0] /* void b2Body::Destroy */, "i8", ALLOC_STATIC);
STRING_TABLE.__str886=allocate([102,105,120,116,117,114,101,45,62,109,95,98,111,100,121,32,61,61,32,116,104,105,115,0] /* fixture-_m_body == t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str987=allocate([109,95,102,105,120,116,117,114,101,67,111,117,110,116,32,62,32,48,0] /* m_fixtureCount _ 0\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1088=allocate([102,111,117,110,100,0] /* found\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13ResetMassDataEv=allocate([118,111,105,100,32,98,50,66,111,100,121,58,58,82,101,115,101,116,77,97,115,115,68,97,116,97,40,41,0] /* void b2Body::ResetMa */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1189=allocate([109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0] /* m_type == b2_dynamic */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1290=allocate([109,95,73,32,62,32,48,46,48,102,0] /* m_I _ 0.0f\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body11SetMassDataEPK10b2MassData=allocate([118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,77,97,115,115,68,97,116,97,40,99,111,110,115,116,32,98,50,77,97,115,115,68,97,116,97,32,42,41,0] /* void b2Body::SetMass */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body12SetTransformERK6b2Vec2f=allocate([118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,84,114,97,110,115,102,111,114,109,40,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,102,108,111,97,116,51,50,41,0] /* void b2Body::SetTran */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body9SetActiveEb=allocate([118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,65,99,116,105,118,101,40,98,111,111,108,41,0] /* void b2Body::SetActi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1391=allocate([123,10,0] /* {\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1492=allocate([32,32,98,50,66,111,100,121,68,101,102,32,98,100,59,10,0] /*   b2BodyDef bd;\0A\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1593=allocate([32,32,98,100,46,116,121,112,101,32,61,32,98,50,66,111,100,121,84,121,112,101,40,37,100,41,59,10,0] /*   bd.type = b2BodyTy */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1694=allocate([32,32,98,100,46,112,111,115,105,116,105,111,110,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   bd.position.Set(%. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1795=allocate([32,32,98,100,46,97,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   bd.angle = %.15lef */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1896=allocate([32,32,98,100,46,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   bd.linearVelocity. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1997=allocate([32,32,98,100,46,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   bd.angularVelocity */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2098=allocate([32,32,98,100,46,108,105,110,101,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   bd.linearDamping = */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2199=allocate([32,32,98,100,46,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   bd.angularDamping  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22100=allocate([32,32,98,100,46,97,108,108,111,119,83,108,101,101,112,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   bd.allowSleep = bo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23101=allocate([32,32,98,100,46,97,119,97,107,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   bd.awake = bool(%d */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24102=allocate([32,32,98,100,46,102,105,120,101,100,82,111,116,97,116,105,111,110,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   bd.fixedRotation = */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25103=allocate([32,32,98,100,46,98,117,108,108,101,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   bd.bullet = bool(% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26104=allocate([32,32,98,100,46,97,99,116,105,118,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   bd.active = bool(% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27105=allocate([32,32,98,100,46,103,114,97,118,105,116,121,83,99,97,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   bd.gravityScale =  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28106=allocate([32,32,98,111,100,105,101,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,66,111,100,121,40,38,98,100,41,59,10,0] /*   bodies[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29107=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30108=allocate([32,32,123,10,0] /*   {\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31109=allocate([32,32,125,10,0] /*   }\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32=allocate([125,10,0] /* }\0A\00 */, "i8", ALLOC_STATIC);
_b2_defaultFilter=allocate(4, "*", ALLOC_STATIC);
_b2_defaultListener=allocate(4, "*", ALLOC_STATIC);
STRING_TABLE.__str110=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi=allocate([118,111,105,100,32,42,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,71,101,116,85,115,101,114,68,97,116,97,40,105,110,116,51,50,41,32,99,111,110,115,116,0] /* void _b2DynamicTree: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2111=allocate([48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0] /* 0 _= proxyId && prox */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3112=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2GrowableStackIiLi256EE3PopEv=allocate([105,110,116,32,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,60,105,110,116,44,32,50,53,54,62,58,58,80,111,112,40,41,0] /* int b2GrowableStack_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4113=allocate([109,95,99,111,117,110,116,32,62,32,48,0] /* m_count _ 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi=allocate([99,111,110,115,116,32,98,50,65,65,66,66,32,38,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,71,101,116,70,97,116,65,65,66,66,40,105,110,116,51,50,41,32,99,111,110,115,116,0] /* const b2AABB &b2Dyna */, "i8", ALLOC_STATIC);
__ZTV17b2ContactListener=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 112, 0, 0, 0, 114, 0, 0, 0, 116, 0, 0, 0, 118, 0, 0, 0, 120, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTS17b2ContactListener=allocate([49,55,98,50,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0] /* 17b2ContactListener\ */, "i8", ALLOC_STATIC);
__ZTI17b2ContactListener=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__str121=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture7DestroyEP16b2BlockAllocator=allocate([118,111,105,100,32,98,50,70,105,120,116,117,114,101,58,58,68,101,115,116,114,111,121,40,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0] /* void b2Fixture::Dest */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1122=allocate([109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32,48,0] /* m_proxyCount == 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2123=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform=allocate([118,111,105,100,32,98,50,70,105,120,116,117,114,101,58,58,67,114,101,97,116,101,80,114,111,120,105,101,115,40,98,50,66,114,111,97,100,80,104,97,115,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0] /* void b2Fixture::Crea */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3124=allocate([32,32,32,32,98,50,70,105,120,116,117,114,101,68,101,102,32,102,100,59,10,0] /*     b2FixtureDef fd; */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4125=allocate([32,32,32,32,102,100,46,102,114,105,99,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0] /*     fd.friction = %. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5126=allocate([32,32,32,32,102,100,46,114,101,115,116,105,116,117,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0] /*     fd.restitution = */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6127=allocate([32,32,32,32,102,100,46,100,101,110,115,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0] /*     fd.density = %.1 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7128=allocate([32,32,32,32,102,100,46,105,115,83,101,110,115,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*     fd.isSensor = bo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8129=allocate([32,32,32,32,102,100,46,102,105,108,116,101,114,46,99,97,116,101,103,111,114,121,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0] /*     fd.filter.catego */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9130=allocate([32,32,32,32,102,100,46,102,105,108,116,101,114,46,109,97,115,107,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0] /*     fd.filter.maskBi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10131=allocate([32,32,32,32,102,100,46,102,105,108,116,101,114,46,103,114,111,117,112,73,110,100,101,120,32,61,32,105,110,116,49,54,40,37,100,41,59,10,0] /*     fd.filter.groupI */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11132=allocate([32,32,32,32,98,50,67,105,114,99,108,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0] /*     b2CircleShape sh */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12133=allocate([32,32,32,32,115,104,97,112,101,46,109,95,114,97,100,105,117,115,32,61,32,37,46,49,53,108,101,102,59,10,0] /*     shape.m_radius = */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13134=allocate([32,32,32,32,115,104,97,112,101,46,109,95,112,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     shape.m_p.Set(%. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14135=allocate([32,32,32,32,98,50,69,100,103,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0] /*     b2EdgeShape shap */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15136=allocate([32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,48,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     shape.m_vertex0. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16137=allocate([32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,49,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     shape.m_vertex1. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17138=allocate([32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,50,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     shape.m_vertex2. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18139=allocate([32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,51,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     shape.m_vertex3. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19140=allocate([32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,48,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*     shape.m_hasVerte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20141=allocate([32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,51,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*     shape.m_hasVerte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21142=allocate([32,32,32,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0] /*     b2PolygonShape s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22143=allocate([32,32,32,32,98,50,86,101,99,50,32,118,115,91,37,100,93,59,10,0] /*     b2Vec2 vs[%d];\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23144=allocate([32,32,32,32,118,115,91,37,100,93,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     vs[%d].Set(%.15l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24145=allocate([32,32,32,32,115,104,97,112,101,46,83,101,116,40,118,115,44,32,37,100,41,59,10,0] /*     shape.Set(vs, %d */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25146=allocate([32,32,32,32,98,50,67,104,97,105,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0] /*     b2ChainShape sha */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26147=allocate([32,32,32,32,115,104,97,112,101,46,67,114,101,97,116,101,67,104,97,105,110,40,118,115,44,32,37,100,41,59,10,0] /*     shape.CreateChai */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27148=allocate([32,32,32,32,115,104,97,112,101,46,109,95,112,114,101,118,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     shape.m_prevVert */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28149=allocate([32,32,32,32,115,104,97,112,101,46,109,95,110,101,120,116,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*     shape.m_nextVert */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29150=allocate([32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,80,114,101,118,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*     shape.m_hasPrevV */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30151=allocate([32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,78,101,120,116,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*     shape.m_hasNextV */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31152=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32153=allocate([32,32,32,32,102,100,46,115,104,97,112,101,32,61,32,38,115,104,97,112,101,59,10,0] /*     fd.shape = &shap */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([32,32,32,32,98,111,100,105,101,115,91,37,100,93,45,62,67,114,101,97,116,101,70,105,120,116,117,114,101,40,38,102,100,41,59,10,0] /*     bodies[%d]-_Crea */, "i8", ALLOC_STATIC);
STRING_TABLE.__str170=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island8SolveTOIERK10b2TimeStepii=allocate([118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,83,111,108,118,101,84,79,73,40,99,111,110,115,116,32,98,50,84,105,109,101,83,116,101,112,32,38,44,32,105,110,116,51,50,44,32,105,110,116,51,50,41,0] /* void b2Island::Solve */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1171=allocate([116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0] /* toiIndexA _ m_bodyCo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2172=allocate([116,111,105,73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0] /* toiIndexB _ m_bodyCo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str174=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111,114,108,100,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World10CreateBodyEPK9b2BodyDef=allocate([98,50,66,111,100,121,32,42,98,50,87,111,114,108,100,58,58,67,114,101,97,116,101,66,111,100,121,40,99,111,110,115,116,32,98,50,66,111,100,121,68,101,102,32,42,41,0] /* b2Body _b2World::Cre */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1175=allocate([73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0] /* IsLocked() == false\ */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11DestroyBodyEP6b2Body=allocate([118,111,105,100,32,98,50,87,111,114,108,100,58,58,68,101,115,116,114,111,121,66,111,100,121,40,98,50,66,111,100,121,32,42,41,0] /* void b2World::Destro */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2176=allocate([109,95,98,111,100,121,67,111,117,110,116,32,62,32,48,0] /* m_bodyCount _ 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11CreateJointEPK10b2JointDef=allocate([98,50,74,111,105,110,116,32,42,98,50,87,111,114,108,100,58,58,67,114,101,97,116,101,74,111,105,110,116,40,99,111,110,115,116,32,98,50,74,111,105,110,116,68,101,102,32,42,41,0] /* b2Joint _b2World::Cr */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World12DestroyJointEP7b2Joint=allocate([118,111,105,100,32,98,50,87,111,114,108,100,58,58,68,101,115,116,114,111,121,74,111,105,110,116,40,98,50,74,111,105,110,116,32,42,41,0] /* void b2World::Destro */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3177=allocate([109,95,106,111,105,110,116,67,111,117,110,116,32,62,32,48,0] /* m_jointCount _ 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep=allocate([118,111,105,100,32,98,50,87,111,114,108,100,58,58,83,111,108,118,101,40,99,111,110,115,116,32,98,50,84,105,109,101,83,116,101,112,32,38,41,0] /* void b2World::Solve( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4178=allocate([98,45,62,73,115,65,99,116,105,118,101,40,41,32,61,61,32,116,114,117,101,0] /* b-_IsActive() == tru */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5179=allocate([115,116,97,99,107,67,111,117,110,116,32,60,32,115,116,97,99,107,83,105,122,101,0] /* stackCount _ stackSi */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World8SolveTOIERK10b2TimeStep=allocate([118,111,105,100,32,98,50,87,111,114,108,100,58,58,83,111,108,118,101,84,79,73,40,99,111,110,115,116,32,98,50,84,105,109,101,83,116,101,112,32,38,41,0] /* void b2World::SolveT */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6180=allocate([116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0] /* typeA == b2_dynamicB */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7181=allocate([97,108,112,104,97,48,32,60,32,49,46,48,102,0] /* alpha0 _ 1.0f\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color=allocate([118,111,105,100,32,98,50,87,111,114,108,100,58,58,68,114,97,119,83,104,97,112,101,40,98,50,70,105,120,116,117,114,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,67,111,108,111,114,32,38,41,0] /* void b2World::DrawSh */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8182=allocate([118,101,114,116,101,120,67,111,117,110,116,32,60,61,32,56,0] /* vertexCount _= 8\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9183=allocate([98,50,86,101,99,50,32,103,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /* b2Vec2 g(%.15lef, %. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10184=allocate([109,95,119,111,114,108,100,45,62,83,101,116,71,114,97,118,105,116,121,40,103,41,59,10,0] /* m_world-_SetGravity( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11185=allocate([98,50,66,111,100,121,42,42,32,98,111,100,105,101,115,32,61,32,40,98,50,66,111,100,121,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,66,111,100,121,42,41,41,59,10,0] /* b2Body__ bodies = (b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12186=allocate([98,50,74,111,105,110,116,42,42,32,106,111,105,110,116,115,32,61,32,40,98,50,74,111,105,110,116,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,74,111,105,110,116,42,41,41,59,10,0] /* b2Joint__ joints = ( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13187=allocate([123,10,0] /* {\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14188=allocate([125,10,0] /* }\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15189=allocate([98,50,70,114,101,101,40,106,111,105,110,116,115,41,59,10,0] /* b2Free(joints);\0A\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16190=allocate([98,50,70,114,101,101,40,98,111,100,105,101,115,41,59,10,0] /* b2Free(bodies);\0A\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17191=allocate([106,111,105,110,116,115,32,61,32,78,85,76,76,59,10,0] /* joints = NULL;\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18192=allocate([98,111,100,105,101,115,32,61,32,78,85,76,76,59,10,0] /* bodies = NULL;\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19193=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput=allocate([118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,82,97,121,67,97,115,116,40,98,50,87,111,114,108,100,82,97,121,67,97,115,116,87,114,97,112,112,101,114,32,42,44,32,99,111,110,115,116,32,98,50,82,97,121,67,97,115,116,73,110,112,117,116,32,38,41,32,99,111,110,115,116,0] /* void b2DynamicTree:: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20194=allocate([114,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,48,46,48,102,0] /* r.LengthSquared() _  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24201=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0] /* Box2D_v2.2.1/Box2D/C */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf=allocate([118,111,105,100,32,98,50,83,119,101,101,112,58,58,65,100,118,97,110,99,101,40,102,108,111,97,116,51,50,41,0] /* void b2Sweep::Advanc */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25202=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,104,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP7b2Joint=allocate([118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,65,100,100,40,98,50,74,111,105,110,116,32,42,41,0] /* void b2Island::Add(b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26203=allocate([109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,95,106,111,105,110,116,67,97,112,97,99,105,116,121,0] /* m_jointCount _ m_joi */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP9b2Contact=allocate([118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,65,100,100,40,98,50,67,111,110,116,97,99,116,32,42,41,0] /* void b2Island::Add(b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27204=allocate([109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0] /* m_contactCount _ m_c */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP6b2Body=allocate([118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,65,100,100,40,98,50,66,111,100,121,32,42,41,0] /* void b2Island::Add(b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28205=allocate([109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0] /* m_bodyCount _ m_body */, "i8", ALLOC_STATIC);
__ZTV15b2ContactFilter=allocate([0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 122, 0, 0, 0, 124, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTS15b2ContactFilter=allocate([49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0] /* 15b2ContactFilter\00 */, "i8", ALLOC_STATIC);
__ZTI15b2ContactFilter=allocate(8, "*", ALLOC_STATIC);
__ZTV23b2ChainAndCircleContact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 128, 0, 0, 0, 130, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str208=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i=allocate([98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,41,0] /* b2ChainAndCircleCont */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1209=allocate([109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0] /* m_fixtureA-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2210=allocate([109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0] /* m_fixtureB-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS23b2ChainAndCircleContact=allocate([50,51,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0] /* 23b2ChainAndCircleCo */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS9b2Contact=allocate([57,98,50,67,111,110,116,97,99,116,0] /* 9b2Contact\00 */, "i8", ALLOC_STATIC);
__ZTI9b2Contact=allocate(8, "*", ALLOC_STATIC);
__ZTI23b2ChainAndCircleContact=allocate(12, "*", ALLOC_STATIC);
__ZTV24b2ChainAndPolygonContact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 134, 0, 0, 0, 136, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str211=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i=allocate([98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,58,58,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,41,0] /* b2ChainAndPolygonCon */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1212=allocate([109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0] /* m_fixtureA-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2213=allocate([109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0] /* m_fixtureB-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS24b2ChainAndPolygonContact=allocate([50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0] /* 24b2ChainAndPolygonC */, "i8", ALLOC_STATIC);
__ZTI24b2ChainAndPolygonContact=allocate(12, "*", ALLOC_STATIC);
__ZTV15b2CircleContact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 140, 0, 0, 0, 142, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str214=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_=allocate([98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0] /* b2CircleContact::b2C */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1215=allocate([109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0] /* m_fixtureA-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2216=allocate([109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0] /* m_fixtureB-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS15b2CircleContact=allocate([49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0] /* 15b2CircleContact\00 */, "i8", ALLOC_STATIC);
__ZTI15b2CircleContact=allocate(12, "*", ALLOC_STATIC);
__ZN9b2Contact11s_registersE=allocate(192, ["*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"*",0,0,0,"i8",0,0,0], ALLOC_STATIC);
__ZN9b2Contact13s_initializedE=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str217=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_=allocate([115,116,97,116,105,99,32,118,111,105,100,32,98,50,67,111,110,116,97,99,116,58,58,65,100,100,84,121,112,101,40,98,50,67,111,110,116,97,99,116,67,114,101,97,116,101,70,99,110,32,42,44,32,98,50,67,111,110,116,97,99,116,68,101,115,116,114,111,121,70,99,110,32,42,44,32,98,50,83,104,97,112,101,58,58,84,121,112,101,44,32,98,50,83,104,97,112,101,58,58,84,121,112,101,41,0] /* static void b2Contac */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1218=allocate([48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0] /* 0 _= type1 && type1  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2219=allocate([48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0] /* 0 _= type2 && type2  */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator=allocate([115,116,97,116,105,99,32,98,50,67,111,110,116,97,99,116,32,42,98,50,67,111,110,116,97,99,116,58,58,67,114,101,97,116,101,40,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0] /* static b2Contact _b2 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator=allocate([115,116,97,116,105,99,32,118,111,105,100,32,98,50,67,111,110,116,97,99,116,58,58,68,101,115,116,114,111,121,40,98,50,67,111,110,116,97,99,116,32,42,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0] /* static void b2Contac */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3220=allocate([115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0] /* s_initialized == tru */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4221=allocate([48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0] /* 0 _= typeA && typeB  */, "i8", ALLOC_STATIC);
__ZTV9b2Contact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 144, 0, 0, 0, 146, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str230=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolverC2EP18b2ContactSolverDef=allocate([98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,58,58,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,40,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,68,101,102,32,42,41,0] /* b2ContactSolver::b2C */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1231=allocate([112,111,105,110,116,67,111,117,110,116,32,62,32,48,0] /* pointCount _ 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver29InitializeVelocityConstraintsEv=allocate([118,111,105,100,32,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,58,58,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,40,41,0] /* void b2ContactSolver */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2232=allocate([109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0] /* manifold-_pointCount */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver24SolveVelocityConstraintsEv=allocate([118,111,105,100,32,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,58,58,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,40,41,0] /* void b2ContactSolver */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3233=allocate([112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0] /* pointCount == 1 || p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4234=allocate([97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0] /* a.x _= 0.0f && a.y _ */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i=allocate([118,111,105,100,32,98,50,80,111,115,105,116,105,111,110,83,111,108,118,101,114,77,97,110,105,102,111,108,100,58,58,73,110,105,116,105,97,108,105,122,101,40,98,50,67,111,110,116,97,99,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,0] /* void b2PositionSolve */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5235=allocate([112,99,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0] /* pc-_pointCount _ 0\0 */, "i8", ALLOC_STATIC);
__ZTV22b2EdgeAndCircleContact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 150, 0, 0, 0, 152, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str252=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_=allocate([98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0] /* b2EdgeAndCircleConta */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1253=allocate([109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0] /* m_fixtureA-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2254=allocate([109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0] /* m_fixtureB-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS22b2EdgeAndCircleContact=allocate([50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0] /* 22b2EdgeAndCircleCon */, "i8", ALLOC_STATIC);
__ZTI22b2EdgeAndCircleContact=allocate(12, "*", ALLOC_STATIC);
__ZTV23b2EdgeAndPolygonContact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 156, 0, 0, 0, 158, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str259=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_=allocate([98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,58,58,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0] /* b2EdgeAndPolygonCont */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1260=allocate([109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0] /* m_fixtureA-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2261=allocate([109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0] /* m_fixtureB-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS23b2EdgeAndPolygonContact=allocate([50,51,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0] /* 23b2EdgeAndPolygonCo */, "i8", ALLOC_STATIC);
__ZTI23b2EdgeAndPolygonContact=allocate(12, "*", ALLOC_STATIC);
__ZTV25b2PolygonAndCircleContact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 162, 0, 0, 0, 164, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str266=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_=allocate([98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0] /* b2PolygonAndCircleCo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1267=allocate([109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0] /* m_fixtureA-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2268=allocate([109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0] /* m_fixtureB-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS25b2PolygonAndCircleContact=allocate([50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0] /* 25b2PolygonAndCircle */, "i8", ALLOC_STATIC);
__ZTI25b2PolygonAndCircleContact=allocate(12, "*", ALLOC_STATIC);
__ZTV16b2PolygonContact=allocate([0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 168, 0, 0, 0, 170, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str273=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_=allocate([98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,58,58,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0] /* b2PolygonContact::b2 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1274=allocate([109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0] /* m_fixtureA-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2275=allocate([109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0] /* m_fixtureB-_GetType( */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS16b2PolygonContact=allocate([49,54,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0] /* 16b2PolygonContact\0 */, "i8", ALLOC_STATIC);
__ZTI16b2PolygonContact=allocate(12, "*", ALLOC_STATIC);
__ZTV15b2DistanceJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 174, 0, 0, 0, 176, 0, 0, 0, 178, 0, 0, 0, 180, 0, 0, 0, 182, 0, 0, 0, 184, 0, 0, 0, 186, 0, 0, 0, 188, 0, 0, 0, 190, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str281=allocate([32,32,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2DistanceJointDef */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1282=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2283=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3284=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4285=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5286=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6287=allocate([32,32,106,100,46,108,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.length = %.15le */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7288=allocate([32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.frequencyHz = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8289=allocate([32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.dampingRatio =  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9290=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS15b2DistanceJoint=allocate([49,53,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,0] /* 15b2DistanceJoint\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS7b2Joint=allocate([55,98,50,74,111,105,110,116,0] /* 7b2Joint\00 */, "i8", ALLOC_STATIC);
__ZTI7b2Joint=allocate(8, "*", ALLOC_STATIC);
__ZTI15b2DistanceJoint=allocate(12, "*", ALLOC_STATIC);
__ZTV15b2FrictionJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 194, 0, 0, 0, 196, 0, 0, 0, 198, 0, 0, 0, 200, 0, 0, 0, 202, 0, 0, 0, 204, 0, 0, 0, 206, 0, 0, 0, 208, 0, 0, 0, 210, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str291=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint11SetMaxForceEf=allocate([118,111,105,100,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,58,58,83,101,116,77,97,120,70,111,114,99,101,40,102,108,111,97,116,51,50,41,0] /* void b2FrictionJoint */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1292=allocate([98,50,73,115,86,97,108,105,100,40,102,111,114,99,101,41,32,38,38,32,102,111,114,99,101,32,62,61,32,48,46,48,102,0] /* b2IsValid(force) &&  */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint12SetMaxTorqueEf=allocate([118,111,105,100,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,58,58,83,101,116,77,97,120,84,111,114,113,117,101,40,102,108,111,97,116,51,50,41,0] /* void b2FrictionJoint */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2293=allocate([98,50,73,115,86,97,108,105,100,40,116,111,114,113,117,101,41,32,38,38,32,116,111,114,113,117,101,32,62,61,32,48,46,48,102,0] /* b2IsValid(torque) && */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3294=allocate([32,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2FrictionJointDef */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4295=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5296=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6297=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7298=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8299=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9300=allocate([32,32,106,100,46,109,97,120,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.maxForce = %.15 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10301=allocate([32,32,106,100,46,109,97,120,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.maxTorque = %.1 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11302=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS15b2FrictionJoint=allocate([49,53,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,0] /* 15b2FrictionJoint\00 */, "i8", ALLOC_STATIC);
__ZTI15b2FrictionJoint=allocate(12, "*", ALLOC_STATIC);
__ZTV11b2GearJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0, 0, 214, 0, 0, 0, 216, 0, 0, 0, 218, 0, 0, 0, 220, 0, 0, 0, 222, 0, 0, 0, 224, 0, 0, 0, 226, 0, 0, 0, 228, 0, 0, 0, 230, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str303=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,71,101,97,114,74,111,105,110,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJointC2EPK14b2GearJointDef=allocate([98,50,71,101,97,114,74,111,105,110,116,58,58,98,50,71,101,97,114,74,111,105,110,116,40,99,111,110,115,116,32,98,50,71,101,97,114,74,111,105,110,116,68,101,102,32,42,41,0] /* b2GearJoint::b2GearJ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1304=allocate([109,95,116,121,112,101,65,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,65,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0] /* m_typeA == e_revolut */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2305=allocate([109,95,116,121,112,101,66,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,66,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0] /* m_typeB == e_revolut */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJoint8SetRatioEf=allocate([118,111,105,100,32,98,50,71,101,97,114,74,111,105,110,116,58,58,83,101,116,82,97,116,105,111,40,102,108,111,97,116,51,50,41,0] /* void b2GearJoint::Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3306=allocate([98,50,73,115,86,97,108,105,100,40,114,97,116,105,111,41,0] /* b2IsValid(ratio)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4307=allocate([32,32,98,50,71,101,97,114,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2GearJointDef jd; */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5308=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6309=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7310=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8311=allocate([32,32,106,100,46,106,111,105,110,116,49,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0] /*   jd.joint1 = joints */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9312=allocate([32,32,106,100,46,106,111,105,110,116,50,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0] /*   jd.joint2 = joints */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10313=allocate([32,32,106,100,46,114,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.ratio = %.15lef */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11314=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS11b2GearJoint=allocate([49,49,98,50,71,101,97,114,74,111,105,110,116,0] /* 11b2GearJoint\00 */, "i8", ALLOC_STATIC);
__ZTI11b2GearJoint=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__str315=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,74,111,105,110,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator=allocate([115,116,97,116,105,99,32,98,50,74,111,105,110,116,32,42,98,50,74,111,105,110,116,58,58,67,114,101,97,116,101,40,99,111,110,115,116,32,98,50,74,111,105,110,116,68,101,102,32,42,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0] /* static b2Joint _b2Jo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1316=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint7DestroyEPS_P16b2BlockAllocator=allocate([115,116,97,116,105,99,32,118,111,105,100,32,98,50,74,111,105,110,116,58,58,68,101,115,116,114,111,121,40,98,50,74,111,105,110,116,32,42,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0] /* static void b2Joint: */, "i8", ALLOC_STATIC);
__ZTV7b2Joint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 232, 0, 0, 0, 234, 0, 0, 0, 236, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0, 58, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef=allocate([98,50,74,111,105,110,116,58,58,98,50,74,111,105,110,116,40,99,111,110,115,116,32,98,50,74,111,105,110,116,68,101,102,32,42,41,0] /* b2Joint::b2Joint(con */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2317=allocate([100,101,102,45,62,98,111,100,121,65,32,33,61,32,100,101,102,45,62,98,111,100,121,66,0] /* def-_bodyA != def-_b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3318=allocate([47,47,32,68,117,109,112,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,106,111,105,110,116,32,116,121,112,101,46,10,0] /* // Dump is not suppo */, "i8", ALLOC_STATIC);
__ZTV12b2MouseJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 240, 0, 0, 0, 242, 0, 0, 0, 244, 0, 0, 0, 246, 0, 0, 0, 248, 0, 0, 0, 250, 0, 0, 0, 252, 0, 0, 0, 254, 0, 0, 0, 256, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str325=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,77,111,117,115,101,74,111,105,110,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef=allocate([98,50,77,111,117,115,101,74,111,105,110,116,58,58,98,50,77,111,117,115,101,74,111,105,110,116,40,99,111,110,115,116,32,98,50,77,111,117,115,101,74,111,105,110,116,68,101,102,32,42,41,0] /* b2MouseJoint::b2Mous */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1326=allocate([100,101,102,45,62,116,97,114,103,101,116,46,73,115,86,97,108,105,100,40,41,0] /* def-_target.IsValid( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2327=allocate([98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,109,97,120,70,111,114,99,101,41,32,38,38,32,100,101,102,45,62,109,97,120,70,111,114,99,101,32,62,61,32,48,46,48,102,0] /* b2IsValid(def-_maxFo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3328=allocate([98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,41,32,38,38,32,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,32,62,61,32,48,46,48,102,0] /* b2IsValid(def-_frequ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4329=allocate([98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,41,32,38,38,32,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,32,62,61,32,48,46,48,102,0] /* b2IsValid(def-_dampi */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData=allocate([118,105,114,116,117,97,108,32,118,111,105,100,32,98,50,77,111,117,115,101,74,111,105,110,116,58,58,73,110,105,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,40,99,111,110,115,116,32,98,50,83,111,108,118,101,114,68,97,116,97,32,38,41,0] /* virtual void b2Mouse */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5330=allocate([100,32,43,32,104,32,42,32,107,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0] /* d + h _ k _ 1.192092 */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS12b2MouseJoint=allocate([49,50,98,50,77,111,117,115,101,74,111,105,110,116,0] /* 12b2MouseJoint\00 */, "i8", ALLOC_STATIC);
__ZTI12b2MouseJoint=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__str6331=allocate([77,111,117,115,101,32,106,111,105,110,116,32,100,117,109,112,105,110,103,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0] /* Mouse joint dumping  */, "i8", ALLOC_STATIC);
__ZTV16b2PrismaticJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 260, 0, 0, 0, 262, 0, 0, 0, 264, 0, 0, 0, 266, 0, 0, 0, 268, 0, 0, 0, 270, 0, 0, 0, 272, 0, 0, 0, 274, 0, 0, 0, 276, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str334=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PrismaticJoint9SetLimitsEff=allocate([118,111,105,100,32,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,58,58,83,101,116,76,105,109,105,116,115,40,102,108,111,97,116,51,50,44,32,102,108,111,97,116,51,50,41,0] /* void b2PrismaticJoin */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1335=allocate([108,111,119,101,114,32,60,61,32,117,112,112,101,114,0] /* lower _= upper\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2336=allocate([32,32,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2PrismaticJointDe */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3337=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4338=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5339=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6340=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7341=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8342=allocate([32,32,106,100,46,108,111,99,97,108,65,120,105,115,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAxisA.Set( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9343=allocate([32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.referenceAngle  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10344=allocate([32,32,106,100,46,101,110,97,98,108,101,76,105,109,105,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.enableLimit = b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11345=allocate([32,32,106,100,46,108,111,119,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.lowerTranslatio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12346=allocate([32,32,106,100,46,117,112,112,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.upperTranslatio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13347=allocate([32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.enableMotor = b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14348=allocate([32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.motorSpeed = %. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15349=allocate([32,32,106,100,46,109,97,120,77,111,116,111,114,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.maxMotorForce = */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16350=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS16b2PrismaticJoint=allocate([49,54,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,0] /* 16b2PrismaticJoint\0 */, "i8", ALLOC_STATIC);
__ZTI16b2PrismaticJoint=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__str353=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,117,108,108,101,121,74,111,105,110,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f=allocate([118,111,105,100,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,58,58,73,110,105,116,105,97,108,105,122,101,40,98,50,66,111,100,121,32,42,44,32,98,50,66,111,100,121,32,42,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,102,108,111,97,116,51,50,41,0] /* void b2PulleyJointDe */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1354=allocate([114,97,116,105,111,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0] /* ratio _ 1.19209290E- */, "i8", ALLOC_STATIC);
__ZTV13b2PulleyJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 278, 0, 0, 0, 280, 0, 0, 0, 282, 0, 0, 0, 284, 0, 0, 0, 286, 0, 0, 0, 288, 0, 0, 0, 290, 0, 0, 0, 292, 0, 0, 0, 294, 0, 0, 0, 296, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN13b2PulleyJointC2EPK16b2PulleyJointDef=allocate([98,50,80,117,108,108,101,121,74,111,105,110,116,58,58,98,50,80,117,108,108,101,121,74,111,105,110,116,40,99,111,110,115,116,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,32,42,41,0] /* b2PulleyJoint::b2Pul */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2355=allocate([100,101,102,45,62,114,97,116,105,111,32,33,61,32,48,46,48,102,0] /* def-_ratio != 0.0f\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3356=allocate([32,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2PulleyJointDef j */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4357=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5358=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6359=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7360=allocate([32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.groundAnchorA.S */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8361=allocate([32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.groundAnchorB.S */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9362=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10363=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11364=allocate([32,32,106,100,46,108,101,110,103,116,104,65,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.lengthA = %.15l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12365=allocate([32,32,106,100,46,108,101,110,103,116,104,66,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.lengthB = %.15l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13366=allocate([32,32,106,100,46,114,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.ratio = %.15lef */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14367=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS13b2PulleyJoint=allocate([49,51,98,50,80,117,108,108,101,121,74,111,105,110,116,0] /* 13b2PulleyJoint\00 */, "i8", ALLOC_STATIC);
__ZTI13b2PulleyJoint=allocate(12, "*", ALLOC_STATIC);
__ZTV15b2RevoluteJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 312, 0, 0, 0, 314, 0, 0, 0, 316, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str374=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/D */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN15b2RevoluteJoint9SetLimitsEff=allocate([118,111,105,100,32,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,58,58,83,101,116,76,105,109,105,116,115,40,102,108,111,97,116,51,50,44,32,102,108,111,97,116,51,50,41,0] /* void b2RevoluteJoint */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1375=allocate([108,111,119,101,114,32,60,61,32,117,112,112,101,114,0] /* lower _= upper\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2376=allocate([32,32,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2RevoluteJointDef */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3377=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4378=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5379=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6380=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7381=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8382=allocate([32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.referenceAngle  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9383=allocate([32,32,106,100,46,101,110,97,98,108,101,76,105,109,105,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.enableLimit = b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10384=allocate([32,32,106,100,46,108,111,119,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.lowerAngle = %. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11385=allocate([32,32,106,100,46,117,112,112,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.upperAngle = %. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12386=allocate([32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.enableMotor = b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13387=allocate([32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.motorSpeed = %. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14388=allocate([32,32,106,100,46,109,97,120,77,111,116,111,114,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.maxMotorTorque  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15389=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS15b2RevoluteJoint=allocate([49,53,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,0] /* 15b2RevoluteJoint\00 */, "i8", ALLOC_STATIC);
__ZTI15b2RevoluteJoint=allocate(12, "*", ALLOC_STATIC);
__ZTV11b2RopeJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 320, 0, 0, 0, 322, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 332, 0, 0, 0, 334, 0, 0, 0, 336, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str392=allocate([32,32,98,50,82,111,112,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2RopeJointDef jd; */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1393=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2394=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3395=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4396=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5397=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6398=allocate([32,32,106,100,46,109,97,120,76,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.maxLength = %.1 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7399=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS11b2RopeJoint=allocate([49,49,98,50,82,111,112,101,74,111,105,110,116,0] /* 11b2RopeJoint\00 */, "i8", ALLOC_STATIC);
__ZTI11b2RopeJoint=allocate(12, "*", ALLOC_STATIC);
__ZTV11b2WeldJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 344, 0, 0, 0, 346, 0, 0, 0, 348, 0, 0, 0, 350, 0, 0, 0, 352, 0, 0, 0, 354, 0, 0, 0, 356, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str402=allocate([32,32,98,50,87,101,108,100,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2WeldJointDef jd; */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1403=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2404=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3405=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4406=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5407=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6408=allocate([32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.referenceAngle  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7409=allocate([32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.frequencyHz = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8410=allocate([32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.dampingRatio =  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9411=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS11b2WeldJoint=allocate([49,49,98,50,87,101,108,100,74,111,105,110,116,0] /* 11b2WeldJoint\00 */, "i8", ALLOC_STATIC);
__ZTI11b2WeldJoint=allocate(12, "*", ALLOC_STATIC);
__ZTV12b2WheelJoint=allocate([0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 364, 0, 0, 0, 366, 0, 0, 0, 368, 0, 0, 0, 370, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 376, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str414=allocate([32,32,98,50,87,104,101,101,108,74,111,105,110,116,68,101,102,32,106,100,59,10,0] /*   b2WheelJointDef jd */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1415=allocate([32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyA = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2416=allocate([32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0] /*   jd.bodyB = bodies[ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3417=allocate([32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.collideConnecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4418=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorA.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5419=allocate([32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAnchorB.Se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6420=allocate([32,32,106,100,46,108,111,99,97,108,65,120,105,115,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0] /*   jd.localAxisA.Set( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7421=allocate([32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0] /*   jd.enableMotor = b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8422=allocate([32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.motorSpeed = %. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9423=allocate([32,32,106,100,46,109,97,120,77,111,116,111,114,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.maxMotorTorque  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10424=allocate([32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.frequencyHz = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11425=allocate([32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0] /*   jd.dampingRatio =  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12426=allocate([32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0] /*   joints[%d] = m_wor */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS12b2WheelJoint=allocate([49,50,98,50,87,104,101,101,108,74,111,105,110,116,0] /* 12b2WheelJoint\00 */, "i8", ALLOC_STATIC);
__ZTI12b2WheelJoint=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__str429=allocate([66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,82,111,112,101,47,98,50,82,111,112,101,46,99,112,112,0] /* Box2D_v2.2.1/Box2D/R */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Rope10InitializeEPK9b2RopeDef=allocate([118,111,105,100,32,98,50,82,111,112,101,58,58,73,110,105,116,105,97,108,105,122,101,40,99,111,110,115,116,32,98,50,82,111,112,101,68,101,102,32,42,41,0] /* void b2Rope::Initial */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1430=allocate([100,101,102,45,62,99,111,117,110,116,32,62,61,32,51,0] /* def-_count _= 3\00 */, "i8", ALLOC_STATIC);
_ret=allocate(8, "float", ALLOC_STATIC);
__ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret1=allocate(8, "float", ALLOC_STATIC);
__ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret2=allocate(8, "float", ALLOC_STATIC);
__ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret3=allocate(8, "float", ALLOC_STATIC);
__ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret4=allocate(8, "float", ALLOC_STATIC);
__ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret5=allocate(8, "float", ALLOC_STATIC);
__ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret6=allocate(8, "float", ALLOC_STATIC);
__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret7=allocate(8, "float", ALLOC_STATIC);
__ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret8=allocate(8, "float", ALLOC_STATIC);
__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret9=allocate(8, "float", ALLOC_STATIC);
__ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret10=allocate(8, "float", ALLOC_STATIC);
__ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret11=allocate(8, "float", ALLOC_STATIC);
__ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret12=allocate(8, "float", ALLOC_STATIC);
__ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret13=allocate(12, "float", ALLOC_STATIC);
__ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret14=allocate(8, "float", ALLOC_STATIC);
__ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ret15=allocate(8, "float", ALLOC_STATIC);
__ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_llvm_used=allocate([378, 0, 0, 0, 380, 0, 0, 0, 382, 0, 0, 0, 384, 0, 0, 0, 386, 0, 0, 0, 388, 0, 0, 0, 390, 0, 0, 0, 392, 0, 0, 0, 394, 0, 0, 0, 396, 0, 0, 0, 398, 0, 0, 0, 400, 0, 0, 0, 402, 0, 0, 0, 404, 0, 0, 0, 406, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 412, 0, 0, 0, 414, 0, 0, 0, 416, 0, 0, 0, 418, 0, 0, 0, 420, 0, 0, 0, 422, 0, 0, 0, 424, 0, 0, 0, 426, 0, 0, 0, 428, 0, 0, 0, 430, 0, 0, 0, 432, 0, 0, 0, 434, 0, 0, 0, 436, 0, 0, 0, 438, 0, 0, 0, 440, 0, 0, 0, 442, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 448, 0, 0, 0, 450, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 456, 0, 0, 0, 458, 0, 0, 0, 460, 0, 0, 0, 462, 0, 0, 0, 464, 0, 0, 0, 466, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 472, 0, 0, 0, 474, 0, 0, 0, 476, 0, 0, 0, 478, 0, 0, 0, 480, 0, 0, 0, 482, 0, 0, 0, 484, 0, 0, 0, 486, 0, 0, 0, 488, 0, 0, 0, 490, 0, 0, 0, 492, 0, 0, 0, 494, 0, 0, 0, 496, 0, 0, 0, 498, 0, 0, 0, 500, 0, 0, 0, 502, 0, 0, 0, 504, 0, 0, 0, 506, 0, 0, 0, 508, 0, 0, 0, 510, 0, 0, 0, 512, 0, 0, 0, 514, 0, 0, 0, 516, 0, 0, 0, 518, 0, 0, 0, 520, 0, 0, 0, 522, 0, 0, 0, 524, 0, 0, 0, 526, 0, 0, 0, 528, 0, 0, 0, 530, 0, 0, 0, 532, 0, 0, 0, 534, 0, 0, 0, 536, 0, 0, 0, 538, 0, 0, 0, 540, 0, 0, 0, 542, 0, 0, 0, 544, 0, 0, 0, 546, 0, 0, 0, 548, 0, 0, 0, 550, 0, 0, 0, 552, 0, 0, 0, 554, 0, 0, 0, 556, 0, 0, 0, 558, 0, 0, 0, 560, 0, 0, 0, 562, 0, 0, 0, 564, 0, 0, 0, 566, 0, 0, 0, 568, 0, 0, 0, 570, 0, 0, 0, 572, 0, 0, 0, 574, 0, 0, 0, 576, 0, 0, 0, 578, 0, 0, 0, 580, 0, 0, 0, 582, 0, 0, 0, 584, 0, 0, 0, 586, 0, 0, 0, 588, 0, 0, 0, 590, 0, 0, 0, 592, 0, 0, 0, 594, 0, 0, 0, 596, 0, 0, 0, 598, 0, 0, 0, 600, 0, 0, 0, 602, 0, 0, 0, 604, 0, 0, 0, 606, 0, 0, 0, 608, 0, 0, 0, 610, 0, 0, 0, 612, 0, 0, 0, 614, 0, 0, 0, 616, 0, 0, 0, 618, 0, 0, 0, 620, 0, 0, 0, 622, 0, 0, 0, 624, 0, 0, 0, 626, 0, 0, 0, 628, 0, 0, 0, 630, 0, 0, 0, 632, 0, 0, 0, 634, 0, 0, 0, 636, 0, 0, 0, 638, 0, 0, 0, 640, 0, 0, 0, 642, 0, 0, 0, 644, 0, 0, 0, 646, 0, 0, 0, 648, 0, 0, 0, 650, 0, 0, 0, 652, 0, 0, 0, 654, 0, 0, 0, 656, 0, 0, 0, 658, 0, 0, 0, 660, 0, 0, 0, 662, 0, 0, 0, 664, 0, 0, 0, 666, 0, 0, 0, 668, 0, 0, 0, 670, 0, 0, 0, 672, 0, 0, 0, 674, 0, 0, 0, 676, 0, 0, 0, 678, 0, 0, 0, 680, 0, 0, 0, 682, 0, 0, 0, 684, 0, 0, 0, 686, 0, 0, 0, 688, 0, 0, 0, 690, 0, 0, 0, 692, 0, 0, 0, 694, 0, 0, 0, 696, 0, 0, 0, 698, 0, 0, 0, 700, 0, 0, 0, 702, 0, 0, 0, 704, 0, 0, 0, 706, 0, 0, 0, 708, 0, 0, 0, 710, 0, 0, 0, 712, 0, 0, 0, 714, 0, 0, 0, 716, 0, 0, 0, 718, 0, 0, 0, 720, 0, 0, 0, 722, 0, 0, 0, 724, 0, 0, 0, 726, 0, 0, 0, 728, 0, 0, 0, 730, 0, 0, 0, 732, 0, 0, 0, 734, 0, 0, 0, 736, 0, 0, 0, 738, 0, 0, 0, 740, 0, 0, 0, 742, 0, 0, 0, 744, 0, 0, 0, 746, 0, 0, 0, 748, 0, 0, 0, 750, 0, 0, 0, 752, 0, 0, 0, 754, 0, 0, 0, 756, 0, 0, 0, 758, 0, 0, 0, 760, 0, 0, 0, 762, 0, 0, 0, 764, 0, 0, 0, 766, 0, 0, 0, 768, 0, 0, 0, 770, 0, 0, 0, 772, 0, 0, 0, 774, 0, 0, 0, 776, 0, 0, 0, 778, 0, 0, 0, 780, 0, 0, 0, 782, 0, 0, 0, 784, 0, 0, 0, 786, 0, 0, 0, 788, 0, 0, 0, 790, 0, 0, 0, 792, 0, 0, 0, 794, 0, 0, 0, 796, 0, 0, 0, 798, 0, 0, 0, 800, 0, 0, 0, 802, 0, 0, 0, 804, 0, 0, 0, 806, 0, 0, 0, 808, 0, 0, 0, 810, 0, 0, 0, 812, 0, 0, 0, 814, 0, 0, 0, 816, 0, 0, 0, 818, 0, 0, 0, 820, 0, 0, 0, 822, 0, 0, 0, 824, 0, 0, 0, 826, 0, 0, 0, 828, 0, 0, 0, 830, 0, 0, 0, 832, 0, 0, 0, 834, 0, 0, 0, 836, 0, 0, 0, 838, 0, 0, 0, 840, 0, 0, 0, 842, 0, 0, 0, 844, 0, 0, 0, 846, 0, 0, 0, 848, 0, 0, 0, 850, 0, 0, 0, 852, 0, 0, 0, 854, 0, 0, 0, 856, 0, 0, 0, 858, 0, 0, 0, 860, 0, 0, 0, 862, 0, 0, 0, 864, 0, 0, 0, 866, 0, 0, 0, 868, 0, 0, 0, 870, 0, 0, 0, 872, 0, 0, 0, 874, 0, 0, 0, 876, 0, 0, 0, 878, 0, 0, 0, 880, 0, 0, 0, 882, 0, 0, 0, 884, 0, 0, 0, 886, 0, 0, 0, 888, 0, 0, 0, 890, 0, 0, 0, 892, 0, 0, 0, 894, 0, 0, 0, 896, 0, 0, 0, 898, 0, 0, 0, 900, 0, 0, 0, 902, 0, 0, 0, 904, 0, 0, 0, 906, 0, 0, 0, 908, 0, 0, 0, 910, 0, 0, 0, 912, 0, 0, 0, 914, 0, 0, 0, 916, 0, 0, 0, 918, 0, 0, 0, 920, 0, 0, 0, 922, 0, 0, 0, 924, 0, 0, 0, 926, 0, 0, 0, 928, 0, 0, 0, 930, 0, 0, 0, 932, 0, 0, 0, 934, 0, 0, 0, 936, 0, 0, 0, 938, 0, 0, 0, 940, 0, 0, 0, 942, 0, 0, 0, 944, 0, 0, 0, 946, 0, 0, 0, 948, 0, 0, 0, 950, 0, 0, 0, 952, 0, 0, 0, 954, 0, 0, 0, 956, 0, 0, 0, 958, 0, 0, 0, 960, 0, 0, 0, 962, 0, 0, 0, 964, 0, 0, 0, 966, 0, 0, 0, 968, 0, 0, 0, 970, 0, 0, 0, 972, 0, 0, 0, 974, 0, 0, 0, 976, 0, 0, 0, 978, 0, 0, 0, 980, 0, 0, 0, 982, 0, 0, 0, 984, 0, 0, 0, 986, 0, 0, 0, 988, 0, 0, 0, 990, 0, 0, 0, 992, 0, 0, 0, 994, 0, 0, 0, 996, 0, 0, 0, 998, 0, 0, 0, 1000, 0, 0, 0, 1002, 0, 0, 0, 1004, 0, 0, 0, 1006, 0, 0, 0, 1008, 0, 0, 0, 1010, 0, 0, 0, 1012, 0, 0, 0, 1014, 0, 0, 0, 1016, 0, 0, 0, 1018, 0, 0, 0, 1020, 0, 0, 0, 1022, 0, 0, 0, 1024, 0, 0, 0, 1026, 0, 0, 0, 1028, 0, 0, 0, 1030, 0, 0, 0, 1032, 0, 0, 0, 1034, 0, 0, 0, 1036, 0, 0, 0, 1038, 0, 0, 0, 1040, 0, 0, 0, 1042, 0, 0, 0, 1044, 0, 0, 0, 1046, 0, 0, 0, 1048, 0, 0, 0, 1050, 0, 0, 0, 1052, 0, 0, 0, 1054, 0, 0, 0, 1056, 0, 0, 0, 1058, 0, 0, 0, 1060, 0, 0, 0, 1062, 0, 0, 0, 1064, 0, 0, 0, 1066, 0, 0, 0, 1068, 0, 0, 0, 1070, 0, 0, 0, 1072, 0, 0, 0, 1074, 0, 0, 0, 1076, 0, 0, 0, 1078, 0, 0, 0, 1080, 0, 0, 0, 1082, 0, 0, 0, 1084, 0, 0, 0, 1086, 0, 0, 0, 1088, 0, 0, 0, 1090, 0, 0, 0, 1092, 0, 0, 0, 1094, 0, 0, 0, 1096, 0, 0, 0, 1098, 0, 0, 0, 1100, 0, 0, 0, 1102, 0, 0, 0, 1104, 0, 0, 0, 1106, 0, 0, 0, 1108, 0, 0, 0, 1110, 0, 0, 0, 1112, 0, 0, 0, 1114, 0, 0, 0, 1116, 0, 0, 0, 1118, 0, 0, 0, 1120, 0, 0, 0, 1122, 0, 0, 0, 1124, 0, 0, 0, 1126, 0, 0, 0, 1128, 0, 0, 0, 1130, 0, 0, 0, 1132, 0, 0, 0, 1134, 0, 0, 0, 1136, 0, 0, 0, 1138, 0, 0, 0, 1140, 0, 0, 0, 1142, 0, 0, 0, 1144, 0, 0, 0, 1146, 0, 0, 0, 1148, 0, 0, 0, 1150, 0, 0, 0, 1152, 0, 0, 0, 1154, 0, 0, 0, 1156, 0, 0, 0, 1158, 0, 0, 0, 1160, 0, 0, 0, 1162, 0, 0, 0, 1164, 0, 0, 0, 1166, 0, 0, 0, 1168, 0, 0, 0, 1170, 0, 0, 0, 1172, 0, 0, 0, 1174, 0, 0, 0, 1176, 0, 0, 0, 1178, 0, 0, 0, 1180, 0, 0, 0, 1182, 0, 0, 0, 1184, 0, 0, 0, 1186, 0, 0, 0, 1188, 0, 0, 0, 1190, 0, 0, 0, 1192, 0, 0, 0, 1194, 0, 0, 0, 1196, 0, 0, 0, 1198, 0, 0, 0, 1200, 0, 0, 0, 1202, 0, 0, 0, 1204, 0, 0, 0, 1206, 0, 0, 0, 1208, 0, 0, 0, 1210, 0, 0, 0, 1212, 0, 0, 0, 1214, 0, 0, 0, 1216, 0, 0, 0, 1218, 0, 0, 0, 1220, 0, 0, 0, 1222, 0, 0, 0, 1224, 0, 0, 0, 1226, 0, 0, 0, 1228, 0, 0, 0, 1230, 0, 0, 0, 1232, 0, 0, 0, 1234, 0, 0, 0, 1236, 0, 0, 0, 1238, 0, 0, 0, 1240, 0, 0, 0, 1242, 0, 0, 0, 1244, 0, 0, 0, 1246, 0, 0, 0, 1248, 0, 0, 0, 1250, 0, 0, 0, 1252, 0, 0, 0, 1254, 0, 0, 0, 1256, 0, 0, 0, 1258, 0, 0, 0, 1260, 0, 0, 0, 1262, 0, 0, 0, 1264, 0, 0, 0, 1266, 0, 0, 0, 1268, 0, 0, 0, 1270, 0, 0, 0, 1272, 0, 0, 0, 1274, 0, 0, 0, 1276, 0, 0, 0, 1278, 0, 0, 0, 1280, 0, 0, 0, 1282, 0, 0, 0, 1284, 0, 0, 0, 1286, 0, 0, 0, 1288, 0, 0, 0, 1290, 0, 0, 0, 1292, 0, 0, 0, 1294, 0, 0, 0, 1296, 0, 0, 0, 1298, 0, 0, 0, 1300, 0, 0, 0, 1302, 0, 0, 0, 1304, 0, 0, 0, 1306, 0, 0, 0, 1308, 0, 0, 0, 1310, 0, 0, 0, 1312, 0, 0, 0, 1314, 0, 0, 0, 1316, 0, 0, 0, 1318, 0, 0, 0, 1320, 0, 0, 0, 1322, 0, 0, 0, 1324, 0, 0, 0, 1326, 0, 0, 0, 1328, 0, 0, 0, 1330, 0, 0, 0, 1332, 0, 0, 0, 1334, 0, 0, 0, 1336, 0, 0, 0, 1338, 0, 0, 0, 1340, 0, 0, 0, 1342, 0, 0, 0, 1344, 0, 0, 0, 1346, 0, 0, 0, 1348, 0, 0, 0, 1350, 0, 0, 0, 1352, 0, 0, 0, 1354, 0, 0, 0, 1356, 0, 0, 0, 1358, 0, 0, 0, 1360, 0, 0, 0, 1362, 0, 0, 0, 1364, 0, 0, 0, 1366, 0, 0, 0, 1368, 0, 0, 0, 1370, 0, 0, 0, 1372, 0, 0, 0, 1374, 0, 0, 0, 1376, 0, 0, 0, 1378, 0, 0, 0, 1380, 0, 0, 0, 1382, 0, 0, 0, 1384, 0, 0, 0, 1386, 0, 0, 0, 1388, 0, 0, 0, 1390, 0, 0, 0, 1392, 0, 0, 0, 1394, 0, 0, 0, 1396, 0, 0, 0, 1398, 0, 0, 0, 1400, 0, 0, 0, 1402, 0, 0, 0, 1404, 0, 0, 0, 1406, 0, 0, 0, 1408, 0, 0, 0, 1410, 0, 0, 0, 1412, 0, 0, 0, 1414, 0, 0, 0, 1416, 0, 0, 0, 1418, 0, 0, 0, 1420, 0, 0, 0, 1422, 0, 0, 0, 1424, 0, 0, 0, 1426, 0, 0, 0, 1428, 0, 0, 0, 1430, 0, 0, 0, 1432, 0, 0, 0, 1434, 0, 0, 0, 1436, 0, 0, 0, 1438, 0, 0, 0, 1440, 0, 0, 0, 1442, 0, 0, 0, 1444, 0, 0, 0, 1446, 0, 0, 0, 1448, 0, 0, 0, 1450, 0, 0, 0, 1452, 0, 0, 0, 1454, 0, 0, 0, 1456, 0, 0, 0, 1458, 0, 0, 0, 1460, 0, 0, 0, 1462, 0, 0, 0, 1464, 0, 0, 0, 1466, 0, 0, 0, 1468, 0, 0, 0, 1470, 0, 0, 0, 1472, 0, 0, 0, 1474, 0, 0, 0, 1476, 0, 0, 0, 1478, 0, 0, 0, 1480, 0, 0, 0, 1482, 0, 0, 0, 1484, 0, 0, 0, 1486, 0, 0, 0, 1488, 0, 0, 0, 1490, 0, 0, 0, 1492, 0, 0, 0, 1494, 0, 0, 0, 1496, 0, 0, 0, 1498, 0, 0, 0, 1500, 0, 0, 0, 1502, 0, 0, 0, 1504, 0, 0, 0, 1506, 0, 0, 0, 1508, 0, 0, 0, 1510, 0, 0, 0, 1512, 0, 0, 0, 1514, 0, 0, 0, 1516, 0, 0, 0, 1518, 0, 0, 0, 1520, 0, 0, 0, 1522, 0, 0, 0, 1524, 0, 0, 0, 1526, 0, 0, 0, 1528, 0, 0, 0, 1530, 0, 0, 0, 1532, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv116__shim_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv116__shi */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv116__shim_type_infoE=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv117__class_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv117__cla */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv117__class_type_infoE=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSNSt3__19nullptr_tE=allocate([78,83,116,51,95,95,49,57,110,117,108,108,112,116,114,95,116,69,0] /* NSt3__19nullptr_tE\0 */, "i8", ALLOC_STATIC);
__ZTINSt3__19nullptr_tE=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv119__pointer_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv119__poi */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv117__pbase_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv117__pba */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv117__pbase_type_infoE=allocate(12, "*", ALLOC_STATIC);
__ZTIN10__cxxabiv119__pointer_type_infoE=allocate(12, "*", ALLOC_STATIC);
__ZTVN10__cxxabiv116__shim_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1534, 0, 0, 0, 1536, 0, 0, 0, 58, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1538, 0, 0, 0, 1540, 0, 0, 0, 1542, 0, 0, 0, 1544, 0, 0, 0, 1546, 0, 0, 0, 1548, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
__ZTVN10__cxxabiv117__pbase_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1550, 0, 0, 0, 1552, 0, 0, 0, 1554, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
__ZTVN10__cxxabiv123__fundamental_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1556, 0, 0, 0, 1558, 0, 0, 0, 1560, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv123__fundamental_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv123__fun */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv123__fundamental_type_infoE=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSv=allocate([118,0] /* v\00 */, "i8", ALLOC_STATIC);
__ZTIv=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPv=allocate([80,118,0] /* Pv\00 */, "i8", ALLOC_STATIC);
__ZTIPv=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKv=allocate([80,75,118,0] /* PKv\00 */, "i8", ALLOC_STATIC);
__ZTIPKv=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSDn=allocate([68,110,0] /* Dn\00 */, "i8", ALLOC_STATIC);
__ZTIDn=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPDn=allocate([80,68,110,0] /* PDn\00 */, "i8", ALLOC_STATIC);
__ZTIPDn=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKDn=allocate([80,75,68,110,0] /* PKDn\00 */, "i8", ALLOC_STATIC);
__ZTIPKDn=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSb=allocate([98,0] /* b\00 */, "i8", ALLOC_STATIC);
__ZTIb=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPb=allocate([80,98,0] /* Pb\00 */, "i8", ALLOC_STATIC);
__ZTIPb=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKb=allocate([80,75,98,0] /* PKb\00 */, "i8", ALLOC_STATIC);
__ZTIPKb=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSw=allocate([119,0] /* w\00 */, "i8", ALLOC_STATIC);
__ZTIw=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPw=allocate([80,119,0] /* Pw\00 */, "i8", ALLOC_STATIC);
__ZTIPw=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKw=allocate([80,75,119,0] /* PKw\00 */, "i8", ALLOC_STATIC);
__ZTIPKw=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSc=allocate([99,0] /* c\00 */, "i8", ALLOC_STATIC);
__ZTIc=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPc=allocate([80,99,0] /* Pc\00 */, "i8", ALLOC_STATIC);
__ZTIPc=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKc=allocate([80,75,99,0] /* PKc\00 */, "i8", ALLOC_STATIC);
__ZTIPKc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSh=allocate([104,0] /* h\00 */, "i8", ALLOC_STATIC);
__ZTIh=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPh=allocate([80,104,0] /* Ph\00 */, "i8", ALLOC_STATIC);
__ZTIPh=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKh=allocate([80,75,104,0] /* PKh\00 */, "i8", ALLOC_STATIC);
__ZTIPKh=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSa=allocate([97,0] /* a\00 */, "i8", ALLOC_STATIC);
__ZTIa=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPa=allocate([80,97,0] /* Pa\00 */, "i8", ALLOC_STATIC);
__ZTIPa=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKa=allocate([80,75,97,0] /* PKa\00 */, "i8", ALLOC_STATIC);
__ZTIPKa=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSs=allocate([115,0] /* s\00 */, "i8", ALLOC_STATIC);
__ZTIs=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPs=allocate([80,115,0] /* Ps\00 */, "i8", ALLOC_STATIC);
__ZTIPs=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKs=allocate([80,75,115,0] /* PKs\00 */, "i8", ALLOC_STATIC);
__ZTIPKs=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSt=allocate([116,0] /* t\00 */, "i8", ALLOC_STATIC);
__ZTIt=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPt=allocate([80,116,0] /* Pt\00 */, "i8", ALLOC_STATIC);
__ZTIPt=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKt=allocate([80,75,116,0] /* PKt\00 */, "i8", ALLOC_STATIC);
__ZTIPKt=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSi=allocate([105,0] /* i\00 */, "i8", ALLOC_STATIC);
__ZTIi=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPi=allocate([80,105,0] /* Pi\00 */, "i8", ALLOC_STATIC);
__ZTIPi=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKi=allocate([80,75,105,0] /* PKi\00 */, "i8", ALLOC_STATIC);
__ZTIPKi=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSj=allocate([106,0] /* j\00 */, "i8", ALLOC_STATIC);
__ZTIj=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPj=allocate([80,106,0] /* Pj\00 */, "i8", ALLOC_STATIC);
__ZTIPj=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKj=allocate([80,75,106,0] /* PKj\00 */, "i8", ALLOC_STATIC);
__ZTIPKj=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSl=allocate([108,0] /* l\00 */, "i8", ALLOC_STATIC);
__ZTIl=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPl=allocate([80,108,0] /* Pl\00 */, "i8", ALLOC_STATIC);
__ZTIPl=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKl=allocate([80,75,108,0] /* PKl\00 */, "i8", ALLOC_STATIC);
__ZTIPKl=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSm=allocate([109,0] /* m\00 */, "i8", ALLOC_STATIC);
__ZTIm=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPm=allocate([80,109,0] /* Pm\00 */, "i8", ALLOC_STATIC);
__ZTIPm=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKm=allocate([80,75,109,0] /* PKm\00 */, "i8", ALLOC_STATIC);
__ZTIPKm=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSx=allocate([120,0] /* x\00 */, "i8", ALLOC_STATIC);
__ZTIx=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPx=allocate([80,120,0] /* Px\00 */, "i8", ALLOC_STATIC);
__ZTIPx=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKx=allocate([80,75,120,0] /* PKx\00 */, "i8", ALLOC_STATIC);
__ZTIPKx=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSy=allocate([121,0] /* y\00 */, "i8", ALLOC_STATIC);
__ZTIy=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPy=allocate([80,121,0] /* Py\00 */, "i8", ALLOC_STATIC);
__ZTIPy=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKy=allocate([80,75,121,0] /* PKy\00 */, "i8", ALLOC_STATIC);
__ZTIPKy=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSf=allocate([102,0] /* f\00 */, "i8", ALLOC_STATIC);
__ZTIf=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPf=allocate([80,102,0] /* Pf\00 */, "i8", ALLOC_STATIC);
__ZTIPf=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKf=allocate([80,75,102,0] /* PKf\00 */, "i8", ALLOC_STATIC);
__ZTIPKf=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSd=allocate([100,0] /* d\00 */, "i8", ALLOC_STATIC);
__ZTId=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPd=allocate([80,100,0] /* Pd\00 */, "i8", ALLOC_STATIC);
__ZTIPd=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKd=allocate([80,75,100,0] /* PKd\00 */, "i8", ALLOC_STATIC);
__ZTIPKd=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSe=allocate([101,0] /* e\00 */, "i8", ALLOC_STATIC);
__ZTIe=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPe=allocate([80,101,0] /* Pe\00 */, "i8", ALLOC_STATIC);
__ZTIPe=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKe=allocate([80,75,101,0] /* PKe\00 */, "i8", ALLOC_STATIC);
__ZTIPKe=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSDs=allocate([68,115,0] /* Ds\00 */, "i8", ALLOC_STATIC);
__ZTIDs=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPDs=allocate([80,68,115,0] /* PDs\00 */, "i8", ALLOC_STATIC);
__ZTIPDs=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKDs=allocate([80,75,68,115,0] /* PKDs\00 */, "i8", ALLOC_STATIC);
__ZTIPKDs=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSDi=allocate([68,105,0] /* Di\00 */, "i8", ALLOC_STATIC);
__ZTIDi=allocate(8, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSPDi=allocate([80,68,105,0] /* PDi\00 */, "i8", ALLOC_STATIC);
__ZTIPDi=allocate(16, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZTSPKDi=allocate([80,75,68,105,0] /* PKDi\00 */, "i8", ALLOC_STATIC);
__ZTIPKDi=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
__ZTVN10__cxxabiv117__array_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1562, 0, 0, 0, 1564, 0, 0, 0, 1566, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv117__array_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,97,114,114,97,121,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv117__arr */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv117__array_type_infoE=allocate(12, "*", ALLOC_STATIC);
__ZTVN10__cxxabiv120__function_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1568, 0, 0, 0, 1570, 0, 0, 0, 1572, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv120__function_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,102,117,110,99,116,105,111,110,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv120__fun */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv120__function_type_infoE=allocate(12, "*", ALLOC_STATIC);
__ZTVN10__cxxabiv116__enum_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 1576, 0, 0, 0, 1578, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv116__enum_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,101,110,117,109,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv116__enu */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv116__enum_type_infoE=allocate(12, "*", ALLOC_STATIC);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1580, 0, 0, 0, 1582, 0, 0, 0, 1542, 0, 0, 0, 1584, 0, 0, 0, 1586, 0, 0, 0, 1588, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv120__si_class_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv120__si_ */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv120__si_class_type_infoE=allocate(12, "*", ALLOC_STATIC);
__ZTVN10__cxxabiv121__vmi_class_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 1592, 0, 0, 0, 1542, 0, 0, 0, 1594, 0, 0, 0, 1596, 0, 0, 0, 1598, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv121__vmi_class_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv121__vmi */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv121__vmi_class_type_infoE=allocate(12, "*", ALLOC_STATIC);
__ZTVN10__cxxabiv119__pointer_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1600, 0, 0, 0, 1602, 0, 0, 0, 1604, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
__ZTVN10__cxxabiv129__pointer_to_member_type_infoE=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 1608, 0, 0, 0, 1554, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__ZTSN10__cxxabiv129__pointer_to_member_type_infoE=allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,57,95,95,112,111,105,110,116,101,114,95,116,111,95,109,101,109,98,101,114,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv129__poi */, "i8", ALLOC_STATIC);
__ZTIN10__cxxabiv129__pointer_to_member_type_infoE=allocate(12, "*", ALLOC_STATIC);
__gm_=allocate(468, ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_mparams=allocate(24, "i32", ALLOC_STATIC);
STRING_TABLE.__str34=allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0] /* max system bytes = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str135=allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* system bytes     = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str236=allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* in use bytes     = % */, "i8", ALLOC_STATIC);
__ZSt7nothrow=allocate([undef], "i8", ALLOC_STATIC);
__ZL13__new_handler=allocate(1, "void ()*", ALLOC_STATIC);
__ZTVSt9bad_alloc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 1610, 0, 0, 0, 1612, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str337=allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0] /* std::bad_alloc\00 */, "i8", ALLOC_STATIC);
__ZTVSt20bad_array_new_length=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 0, 1616, 0, 0, 0, 1618, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str1438=allocate([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* bad_array_new_length */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTSSt9bad_alloc=allocate([83,116,57,98,97,100,95,97,108,108,111,99,0] /* St9bad_alloc\00 */, "i8", ALLOC_STATIC);
__ZTISt9bad_alloc=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSSt20bad_array_new_length=allocate([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* St20bad_array_new_le */, "i8", ALLOC_STATIC);
__ZTISt20bad_array_new_length=allocate(12, "*", ALLOC_STATIC);
HEAP32[((__ZTV12b2ChainShape+4)>>2)]=__ZTI12b2ChainShape;
HEAP32[((__ZTI7b2Shape)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((__ZTI7b2Shape+4)>>2)]=((STRING_TABLE.__ZTS7b2Shape)|0);
HEAP32[((__ZTI12b2ChainShape)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI12b2ChainShape+4)>>2)]=((STRING_TABLE.__ZTS12b2ChainShape)|0);
HEAP32[((__ZTI12b2ChainShape+8)>>2)]=__ZTI7b2Shape;
HEAP32[((__ZTV7b2Shape+4)>>2)]=__ZTI7b2Shape;
HEAP32[((__ZTV13b2CircleShape+4)>>2)]=__ZTI13b2CircleShape;
HEAP32[((__ZTI13b2CircleShape)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI13b2CircleShape+4)>>2)]=((STRING_TABLE.__ZTS13b2CircleShape)|0);
HEAP32[((__ZTI13b2CircleShape+8)>>2)]=__ZTI7b2Shape;
HEAP32[((__ZTV11b2EdgeShape+4)>>2)]=__ZTI11b2EdgeShape;
HEAP32[((__ZTI11b2EdgeShape)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI11b2EdgeShape+4)>>2)]=((STRING_TABLE.__ZTS11b2EdgeShape)|0);
HEAP32[((__ZTI11b2EdgeShape+8)>>2)]=__ZTI7b2Shape;
HEAP32[((__ZTV14b2PolygonShape+4)>>2)]=__ZTI14b2PolygonShape;
HEAP32[((__ZTI14b2PolygonShape)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI14b2PolygonShape+4)>>2)]=((STRING_TABLE.__ZTS14b2PolygonShape)|0);
HEAP32[((__ZTI14b2PolygonShape+8)>>2)]=__ZTI7b2Shape;
HEAP32[((__ZTV6b2Draw+4)>>2)]=__ZTI6b2Draw;
HEAP32[((__ZTI6b2Draw)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((__ZTI6b2Draw+4)>>2)]=((STRING_TABLE.__ZTS6b2Draw)|0);
HEAP32[((__ZTV17b2ContactListener+4)>>2)]=__ZTI17b2ContactListener;
HEAP32[((__ZTI17b2ContactListener)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((__ZTI17b2ContactListener+4)>>2)]=((STRING_TABLE.__ZTS17b2ContactListener)|0);
HEAP32[((__ZTV15b2ContactFilter+4)>>2)]=__ZTI15b2ContactFilter;
HEAP32[((__ZTI15b2ContactFilter)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((__ZTI15b2ContactFilter+4)>>2)]=((STRING_TABLE.__ZTS15b2ContactFilter)|0);
HEAP32[((__ZTV23b2ChainAndCircleContact+4)>>2)]=__ZTI23b2ChainAndCircleContact;
HEAP32[((__ZTI9b2Contact)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((__ZTI9b2Contact+4)>>2)]=((STRING_TABLE.__ZTS9b2Contact)|0);
HEAP32[((__ZTI23b2ChainAndCircleContact)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI23b2ChainAndCircleContact+4)>>2)]=((STRING_TABLE.__ZTS23b2ChainAndCircleContact)|0);
HEAP32[((__ZTI23b2ChainAndCircleContact+8)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV24b2ChainAndPolygonContact+4)>>2)]=__ZTI24b2ChainAndPolygonContact;
HEAP32[((__ZTI24b2ChainAndPolygonContact)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI24b2ChainAndPolygonContact+4)>>2)]=((STRING_TABLE.__ZTS24b2ChainAndPolygonContact)|0);
HEAP32[((__ZTI24b2ChainAndPolygonContact+8)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV15b2CircleContact+4)>>2)]=__ZTI15b2CircleContact;
HEAP32[((__ZTI15b2CircleContact)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI15b2CircleContact+4)>>2)]=((STRING_TABLE.__ZTS15b2CircleContact)|0);
HEAP32[((__ZTI15b2CircleContact+8)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV9b2Contact+4)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV22b2EdgeAndCircleContact+4)>>2)]=__ZTI22b2EdgeAndCircleContact;
HEAP32[((__ZTI22b2EdgeAndCircleContact)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI22b2EdgeAndCircleContact+4)>>2)]=((STRING_TABLE.__ZTS22b2EdgeAndCircleContact)|0);
HEAP32[((__ZTI22b2EdgeAndCircleContact+8)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV23b2EdgeAndPolygonContact+4)>>2)]=__ZTI23b2EdgeAndPolygonContact;
HEAP32[((__ZTI23b2EdgeAndPolygonContact)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI23b2EdgeAndPolygonContact+4)>>2)]=((STRING_TABLE.__ZTS23b2EdgeAndPolygonContact)|0);
HEAP32[((__ZTI23b2EdgeAndPolygonContact+8)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV25b2PolygonAndCircleContact+4)>>2)]=__ZTI25b2PolygonAndCircleContact;
HEAP32[((__ZTI25b2PolygonAndCircleContact)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI25b2PolygonAndCircleContact+4)>>2)]=((STRING_TABLE.__ZTS25b2PolygonAndCircleContact)|0);
HEAP32[((__ZTI25b2PolygonAndCircleContact+8)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV16b2PolygonContact+4)>>2)]=__ZTI16b2PolygonContact;
HEAP32[((__ZTI16b2PolygonContact)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI16b2PolygonContact+4)>>2)]=((STRING_TABLE.__ZTS16b2PolygonContact)|0);
HEAP32[((__ZTI16b2PolygonContact+8)>>2)]=__ZTI9b2Contact;
HEAP32[((__ZTV15b2DistanceJoint+4)>>2)]=__ZTI15b2DistanceJoint;
HEAP32[((__ZTI7b2Joint)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((__ZTI7b2Joint+4)>>2)]=((STRING_TABLE.__ZTS7b2Joint)|0);
HEAP32[((__ZTI15b2DistanceJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI15b2DistanceJoint+4)>>2)]=((STRING_TABLE.__ZTS15b2DistanceJoint)|0);
HEAP32[((__ZTI15b2DistanceJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV15b2FrictionJoint+4)>>2)]=__ZTI15b2FrictionJoint;
HEAP32[((__ZTI15b2FrictionJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI15b2FrictionJoint+4)>>2)]=((STRING_TABLE.__ZTS15b2FrictionJoint)|0);
HEAP32[((__ZTI15b2FrictionJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV11b2GearJoint+4)>>2)]=__ZTI11b2GearJoint;
HEAP32[((__ZTI11b2GearJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI11b2GearJoint+4)>>2)]=((STRING_TABLE.__ZTS11b2GearJoint)|0);
HEAP32[((__ZTI11b2GearJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV7b2Joint+4)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV12b2MouseJoint+4)>>2)]=__ZTI12b2MouseJoint;
HEAP32[((__ZTI12b2MouseJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI12b2MouseJoint+4)>>2)]=((STRING_TABLE.__ZTS12b2MouseJoint)|0);
HEAP32[((__ZTI12b2MouseJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV16b2PrismaticJoint+4)>>2)]=__ZTI16b2PrismaticJoint;
HEAP32[((__ZTI16b2PrismaticJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI16b2PrismaticJoint+4)>>2)]=((STRING_TABLE.__ZTS16b2PrismaticJoint)|0);
HEAP32[((__ZTI16b2PrismaticJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV13b2PulleyJoint+4)>>2)]=__ZTI13b2PulleyJoint;
HEAP32[((__ZTI13b2PulleyJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI13b2PulleyJoint+4)>>2)]=((STRING_TABLE.__ZTS13b2PulleyJoint)|0);
HEAP32[((__ZTI13b2PulleyJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV15b2RevoluteJoint+4)>>2)]=__ZTI15b2RevoluteJoint;
HEAP32[((__ZTI15b2RevoluteJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI15b2RevoluteJoint+4)>>2)]=((STRING_TABLE.__ZTS15b2RevoluteJoint)|0);
HEAP32[((__ZTI15b2RevoluteJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV11b2RopeJoint+4)>>2)]=__ZTI11b2RopeJoint;
HEAP32[((__ZTI11b2RopeJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI11b2RopeJoint+4)>>2)]=((STRING_TABLE.__ZTS11b2RopeJoint)|0);
HEAP32[((__ZTI11b2RopeJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV11b2WeldJoint+4)>>2)]=__ZTI11b2WeldJoint;
HEAP32[((__ZTI11b2WeldJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI11b2WeldJoint+4)>>2)]=((STRING_TABLE.__ZTS11b2WeldJoint)|0);
HEAP32[((__ZTI11b2WeldJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTV12b2WheelJoint+4)>>2)]=__ZTI12b2WheelJoint;
HEAP32[((__ZTI12b2WheelJoint)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTI12b2WheelJoint+4)>>2)]=((STRING_TABLE.__ZTS12b2WheelJoint)|0);
HEAP32[((__ZTI12b2WheelJoint+8)>>2)]=__ZTI7b2Joint;
HEAP32[((__ZTIN10__cxxabiv116__shim_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv116__shim_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv116__shim_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv116__shim_type_infoE+8)>>2)]=__ZTISt9type_info;
HEAP32[((__ZTIN10__cxxabiv117__class_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv117__class_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv117__class_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv117__class_type_infoE+8)>>2)]=__ZTIN10__cxxabiv116__shim_type_infoE;
HEAP32[((__ZTINSt3__19nullptr_tE)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((__ZTINSt3__19nullptr_tE+4)>>2)]=((STRING_TABLE.__ZTSNSt3__19nullptr_tE)|0);
HEAP32[((__ZTIN10__cxxabiv117__pbase_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv117__pbase_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv117__pbase_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv117__pbase_type_infoE+8)>>2)]=__ZTIN10__cxxabiv116__shim_type_infoE;
HEAP32[((__ZTIN10__cxxabiv119__pointer_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv119__pointer_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv119__pointer_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv119__pointer_type_infoE+8)>>2)]=__ZTIN10__cxxabiv117__pbase_type_infoE;
HEAP32[((__ZTVN10__cxxabiv116__shim_type_infoE+4)>>2)]=__ZTIN10__cxxabiv116__shim_type_infoE;
HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE+4)>>2)]=__ZTIN10__cxxabiv117__class_type_infoE;
HEAP32[((__ZTVN10__cxxabiv117__pbase_type_infoE+4)>>2)]=__ZTIN10__cxxabiv117__pbase_type_infoE;
HEAP32[((__ZTVN10__cxxabiv123__fundamental_type_infoE+4)>>2)]=__ZTIN10__cxxabiv123__fundamental_type_infoE;
HEAP32[((__ZTIN10__cxxabiv123__fundamental_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv123__fundamental_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv123__fundamental_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv123__fundamental_type_infoE+8)>>2)]=__ZTIN10__cxxabiv116__shim_type_infoE;
HEAP32[((__ZTIv)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIv+4)>>2)]=((STRING_TABLE.__ZTSv)|0);
HEAP32[((__ZTIPv)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPv+4)>>2)]=((STRING_TABLE.__ZTSPv)|0);
HEAP32[((__ZTIPv+12)>>2)]=__ZTIv;
HEAP32[((__ZTIPKv)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKv+4)>>2)]=((STRING_TABLE.__ZTSPKv)|0);
HEAP32[((__ZTIPKv+12)>>2)]=__ZTIv;
HEAP32[((__ZTIDn)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIDn+4)>>2)]=((STRING_TABLE.__ZTSDn)|0);
HEAP32[((__ZTIPDn)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPDn+4)>>2)]=((STRING_TABLE.__ZTSPDn)|0);
HEAP32[((__ZTIPDn+12)>>2)]=__ZTIDn;
HEAP32[((__ZTIPKDn)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKDn+4)>>2)]=((STRING_TABLE.__ZTSPKDn)|0);
HEAP32[((__ZTIPKDn+12)>>2)]=__ZTIDn;
HEAP32[((__ZTIb)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIb+4)>>2)]=((STRING_TABLE.__ZTSb)|0);
HEAP32[((__ZTIPb)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPb+4)>>2)]=((STRING_TABLE.__ZTSPb)|0);
HEAP32[((__ZTIPb+12)>>2)]=__ZTIb;
HEAP32[((__ZTIPKb)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKb+4)>>2)]=((STRING_TABLE.__ZTSPKb)|0);
HEAP32[((__ZTIPKb+12)>>2)]=__ZTIb;
HEAP32[((__ZTIw)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIw+4)>>2)]=((STRING_TABLE.__ZTSw)|0);
HEAP32[((__ZTIPw)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPw+4)>>2)]=((STRING_TABLE.__ZTSPw)|0);
HEAP32[((__ZTIPw+12)>>2)]=__ZTIw;
HEAP32[((__ZTIPKw)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKw+4)>>2)]=((STRING_TABLE.__ZTSPKw)|0);
HEAP32[((__ZTIPKw+12)>>2)]=__ZTIw;
HEAP32[((__ZTIc)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIc+4)>>2)]=((STRING_TABLE.__ZTSc)|0);
HEAP32[((__ZTIPc)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPc+4)>>2)]=((STRING_TABLE.__ZTSPc)|0);
HEAP32[((__ZTIPc+12)>>2)]=__ZTIc;
HEAP32[((__ZTIPKc)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKc+4)>>2)]=((STRING_TABLE.__ZTSPKc)|0);
HEAP32[((__ZTIPKc+12)>>2)]=__ZTIc;
HEAP32[((__ZTIh)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIh+4)>>2)]=((STRING_TABLE.__ZTSh)|0);
HEAP32[((__ZTIPh)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPh+4)>>2)]=((STRING_TABLE.__ZTSPh)|0);
HEAP32[((__ZTIPh+12)>>2)]=__ZTIh;
HEAP32[((__ZTIPKh)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKh+4)>>2)]=((STRING_TABLE.__ZTSPKh)|0);
HEAP32[((__ZTIPKh+12)>>2)]=__ZTIh;
HEAP32[((__ZTIa)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIa+4)>>2)]=((STRING_TABLE.__ZTSa)|0);
HEAP32[((__ZTIPa)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPa+4)>>2)]=((STRING_TABLE.__ZTSPa)|0);
HEAP32[((__ZTIPa+12)>>2)]=__ZTIa;
HEAP32[((__ZTIPKa)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKa+4)>>2)]=((STRING_TABLE.__ZTSPKa)|0);
HEAP32[((__ZTIPKa+12)>>2)]=__ZTIa;
HEAP32[((__ZTIs)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIs+4)>>2)]=((STRING_TABLE.__ZTSs)|0);
HEAP32[((__ZTIPs)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPs+4)>>2)]=((STRING_TABLE.__ZTSPs)|0);
HEAP32[((__ZTIPs+12)>>2)]=__ZTIs;
HEAP32[((__ZTIPKs)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKs+4)>>2)]=((STRING_TABLE.__ZTSPKs)|0);
HEAP32[((__ZTIPKs+12)>>2)]=__ZTIs;
HEAP32[((__ZTIt)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIt+4)>>2)]=((STRING_TABLE.__ZTSt)|0);
HEAP32[((__ZTIPt)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPt+4)>>2)]=((STRING_TABLE.__ZTSPt)|0);
HEAP32[((__ZTIPt+12)>>2)]=__ZTIt;
HEAP32[((__ZTIPKt)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKt+4)>>2)]=((STRING_TABLE.__ZTSPKt)|0);
HEAP32[((__ZTIPKt+12)>>2)]=__ZTIt;
HEAP32[((__ZTIi)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIi+4)>>2)]=((STRING_TABLE.__ZTSi)|0);
HEAP32[((__ZTIPi)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPi+4)>>2)]=((STRING_TABLE.__ZTSPi)|0);
HEAP32[((__ZTIPi+12)>>2)]=__ZTIi;
HEAP32[((__ZTIPKi)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKi+4)>>2)]=((STRING_TABLE.__ZTSPKi)|0);
HEAP32[((__ZTIPKi+12)>>2)]=__ZTIi;
HEAP32[((__ZTIj)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIj+4)>>2)]=((STRING_TABLE.__ZTSj)|0);
HEAP32[((__ZTIPj)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPj+4)>>2)]=((STRING_TABLE.__ZTSPj)|0);
HEAP32[((__ZTIPj+12)>>2)]=__ZTIj;
HEAP32[((__ZTIPKj)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKj+4)>>2)]=((STRING_TABLE.__ZTSPKj)|0);
HEAP32[((__ZTIPKj+12)>>2)]=__ZTIj;
HEAP32[((__ZTIl)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIl+4)>>2)]=((STRING_TABLE.__ZTSl)|0);
HEAP32[((__ZTIPl)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPl+4)>>2)]=((STRING_TABLE.__ZTSPl)|0);
HEAP32[((__ZTIPl+12)>>2)]=__ZTIl;
HEAP32[((__ZTIPKl)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKl+4)>>2)]=((STRING_TABLE.__ZTSPKl)|0);
HEAP32[((__ZTIPKl+12)>>2)]=__ZTIl;
HEAP32[((__ZTIm)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIm+4)>>2)]=((STRING_TABLE.__ZTSm)|0);
HEAP32[((__ZTIPm)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPm+4)>>2)]=((STRING_TABLE.__ZTSPm)|0);
HEAP32[((__ZTIPm+12)>>2)]=__ZTIm;
HEAP32[((__ZTIPKm)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKm+4)>>2)]=((STRING_TABLE.__ZTSPKm)|0);
HEAP32[((__ZTIPKm+12)>>2)]=__ZTIm;
HEAP32[((__ZTIx)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIx+4)>>2)]=((STRING_TABLE.__ZTSx)|0);
HEAP32[((__ZTIPx)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPx+4)>>2)]=((STRING_TABLE.__ZTSPx)|0);
HEAP32[((__ZTIPx+12)>>2)]=__ZTIx;
HEAP32[((__ZTIPKx)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKx+4)>>2)]=((STRING_TABLE.__ZTSPKx)|0);
HEAP32[((__ZTIPKx+12)>>2)]=__ZTIx;
HEAP32[((__ZTIy)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIy+4)>>2)]=((STRING_TABLE.__ZTSy)|0);
HEAP32[((__ZTIPy)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPy+4)>>2)]=((STRING_TABLE.__ZTSPy)|0);
HEAP32[((__ZTIPy+12)>>2)]=__ZTIy;
HEAP32[((__ZTIPKy)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKy+4)>>2)]=((STRING_TABLE.__ZTSPKy)|0);
HEAP32[((__ZTIPKy+12)>>2)]=__ZTIy;
HEAP32[((__ZTIf)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIf+4)>>2)]=((STRING_TABLE.__ZTSf)|0);
HEAP32[((__ZTIPf)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPf+4)>>2)]=((STRING_TABLE.__ZTSPf)|0);
HEAP32[((__ZTIPf+12)>>2)]=__ZTIf;
HEAP32[((__ZTIPKf)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKf+4)>>2)]=((STRING_TABLE.__ZTSPKf)|0);
HEAP32[((__ZTIPKf+12)>>2)]=__ZTIf;
HEAP32[((__ZTId)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTId+4)>>2)]=((STRING_TABLE.__ZTSd)|0);
HEAP32[((__ZTIPd)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPd+4)>>2)]=((STRING_TABLE.__ZTSPd)|0);
HEAP32[((__ZTIPd+12)>>2)]=__ZTId;
HEAP32[((__ZTIPKd)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKd+4)>>2)]=((STRING_TABLE.__ZTSPKd)|0);
HEAP32[((__ZTIPKd+12)>>2)]=__ZTId;
HEAP32[((__ZTIe)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIe+4)>>2)]=((STRING_TABLE.__ZTSe)|0);
HEAP32[((__ZTIPe)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPe+4)>>2)]=((STRING_TABLE.__ZTSPe)|0);
HEAP32[((__ZTIPe+12)>>2)]=__ZTIe;
HEAP32[((__ZTIPKe)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKe+4)>>2)]=((STRING_TABLE.__ZTSPKe)|0);
HEAP32[((__ZTIPKe+12)>>2)]=__ZTIe;
HEAP32[((__ZTIDs)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIDs+4)>>2)]=((STRING_TABLE.__ZTSDs)|0);
HEAP32[((__ZTIPDs)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPDs+4)>>2)]=((STRING_TABLE.__ZTSPDs)|0);
HEAP32[((__ZTIPDs+12)>>2)]=__ZTIDs;
HEAP32[((__ZTIPKDs)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKDs+4)>>2)]=((STRING_TABLE.__ZTSPKDs)|0);
HEAP32[((__ZTIPKDs+12)>>2)]=__ZTIDs;
HEAP32[((__ZTIDi)>>2)]=(((__ZTVN10__cxxabiv123__fundamental_type_infoE+8)|0));
HEAP32[((__ZTIDi+4)>>2)]=((STRING_TABLE.__ZTSDi)|0);
HEAP32[((__ZTIPDi)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPDi+4)>>2)]=((STRING_TABLE.__ZTSPDi)|0);
HEAP32[((__ZTIPDi+12)>>2)]=__ZTIDi;
HEAP32[((__ZTIPKDi)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((__ZTIPKDi+4)>>2)]=((STRING_TABLE.__ZTSPKDi)|0);
HEAP32[((__ZTIPKDi+12)>>2)]=__ZTIDi;
HEAP32[((__ZTVN10__cxxabiv117__array_type_infoE+4)>>2)]=__ZTIN10__cxxabiv117__array_type_infoE;
HEAP32[((__ZTIN10__cxxabiv117__array_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv117__array_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv117__array_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv117__array_type_infoE+8)>>2)]=__ZTIN10__cxxabiv116__shim_type_infoE;
HEAP32[((__ZTVN10__cxxabiv120__function_type_infoE+4)>>2)]=__ZTIN10__cxxabiv120__function_type_infoE;
HEAP32[((__ZTIN10__cxxabiv120__function_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv120__function_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv120__function_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv120__function_type_infoE+8)>>2)]=__ZTIN10__cxxabiv116__shim_type_infoE;
HEAP32[((__ZTVN10__cxxabiv116__enum_type_infoE+4)>>2)]=__ZTIN10__cxxabiv116__enum_type_infoE;
HEAP32[((__ZTIN10__cxxabiv116__enum_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv116__enum_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv116__enum_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv116__enum_type_infoE+8)>>2)]=__ZTIN10__cxxabiv116__shim_type_infoE;
HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE+4)>>2)]=__ZTIN10__cxxabiv120__si_class_type_infoE;
HEAP32[((__ZTIN10__cxxabiv120__si_class_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv120__si_class_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv120__si_class_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv120__si_class_type_infoE+8)>>2)]=__ZTIN10__cxxabiv117__class_type_infoE;
HEAP32[((__ZTVN10__cxxabiv121__vmi_class_type_infoE+4)>>2)]=__ZTIN10__cxxabiv121__vmi_class_type_infoE;
HEAP32[((__ZTIN10__cxxabiv121__vmi_class_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv121__vmi_class_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv121__vmi_class_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv121__vmi_class_type_infoE+8)>>2)]=__ZTIN10__cxxabiv117__class_type_infoE;
HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE+4)>>2)]=__ZTIN10__cxxabiv119__pointer_type_infoE;
HEAP32[((__ZTVN10__cxxabiv129__pointer_to_member_type_infoE+4)>>2)]=__ZTIN10__cxxabiv129__pointer_to_member_type_infoE;
HEAP32[((__ZTIN10__cxxabiv129__pointer_to_member_type_infoE)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTIN10__cxxabiv129__pointer_to_member_type_infoE+4)>>2)]=((STRING_TABLE.__ZTSN10__cxxabiv129__pointer_to_member_type_infoE)|0);
HEAP32[((__ZTIN10__cxxabiv129__pointer_to_member_type_infoE+8)>>2)]=__ZTIN10__cxxabiv117__pbase_type_infoE;
HEAP32[((__ZTVSt9bad_alloc+4)>>2)]=__ZTISt9bad_alloc;
HEAP32[((__ZTVSt20bad_array_new_length+4)>>2)]=__ZTISt20bad_array_new_length;
HEAP32[((__ZTISt9bad_alloc)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTISt9bad_alloc+4)>>2)]=((STRING_TABLE.__ZTSSt9bad_alloc)|0);
HEAP32[((__ZTISt9bad_alloc+8)>>2)]=__ZTISt9exception;
HEAP32[((__ZTISt20bad_array_new_length)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((__ZTISt20bad_array_new_length+4)>>2)]=((STRING_TABLE.__ZTSSt20bad_array_new_length)|0);
HEAP32[((__ZTISt20bad_array_new_length+8)>>2)]=__ZTISt9bad_alloc;
__ZN12b2BroadPhaseC1Ev = 1620;
__ZN12b2BroadPhaseD1Ev = 1622;
__ZN13b2DynamicTreeC1Ev = 1624;
__ZN13b2DynamicTreeD1Ev = 1626;
__ZN12b2ChainShapeD1Ev = 1628;
__ZN16b2BlockAllocatorC1Ev = 1630;
__ZN16b2BlockAllocatorD1Ev = 1632;
__ZN16b2StackAllocatorC1Ev = 1634;
__ZN16b2StackAllocatorD1Ev = 1636;
__ZN7b2TimerC1Ev = 1638;
__ZN6b2BodyC1EPK9b2BodyDefP7b2World = 1640;
__ZN6b2BodyD1Ev = 1642;
__ZN16b2ContactManagerC1Ev = 1644;
__ZN9b2FixtureC1Ev = 1646;
__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener = 1648;
__ZN8b2IslandD1Ev = 1650;
__ZN7b2WorldC1ERK6b2Vec2 = 1652;
__ZN7b2WorldD1Ev = 1654;
__ZN23b2ChainAndCircleContactC1EP9b2FixtureiS1_i = 1656;
__ZN24b2ChainAndPolygonContactC1EP9b2FixtureiS1_i = 1658;
__ZN15b2CircleContactC1EP9b2FixtureS1_ = 1660;
__ZN15b2ContactSolverC1EP18b2ContactSolverDef = 1662;
__ZN15b2ContactSolverD1Ev = 1664;
__ZN22b2EdgeAndCircleContactC1EP9b2FixtureS1_ = 1666;
__ZN23b2EdgeAndPolygonContactC1EP9b2FixtureS1_ = 1668;
__ZN25b2PolygonAndCircleContactC1EP9b2FixtureS1_ = 1670;
__ZN16b2PolygonContactC1EP9b2FixtureS1_ = 1672;
__ZN15b2DistanceJointC1EPK18b2DistanceJointDef = 1674;
__ZN15b2FrictionJointC1EPK18b2FrictionJointDef = 1676;
__ZN11b2GearJointC1EPK14b2GearJointDef = 1678;
__ZN12b2MouseJointC1EPK15b2MouseJointDef = 1680;
__ZN16b2PrismaticJointC1EPK19b2PrismaticJointDef = 1682;
__ZN13b2PulleyJointC1EPK16b2PulleyJointDef = 1684;
__ZN15b2RevoluteJointC1EPK18b2RevoluteJointDef = 1686;
__ZN11b2RopeJointC1EPK14b2RopeJointDef = 1688;
__ZN11b2WeldJointC1EPK14b2WeldJointDef = 1690;
__ZN12b2WheelJointC1EPK15b2WheelJointDef = 1692;
__ZN6b2RopeC1Ev = 1694;
__ZN6b2RopeD1Ev = 1696;
__ZN10__cxxabiv116__shim_type_infoD1Ev = 1698;
__ZN10__cxxabiv123__fundamental_type_infoD1Ev = 1700;
__ZN10__cxxabiv123__fundamental_type_infoD2Ev = 1698;
__ZN10__cxxabiv117__array_type_infoD1Ev = 1702;
__ZN10__cxxabiv117__array_type_infoD2Ev = 1698;
__ZN10__cxxabiv120__function_type_infoD1Ev = 1704;
__ZN10__cxxabiv120__function_type_infoD2Ev = 1698;
__ZN10__cxxabiv116__enum_type_infoD1Ev = 1706;
__ZN10__cxxabiv116__enum_type_infoD2Ev = 1698;
__ZN10__cxxabiv117__class_type_infoD1Ev = 1708;
__ZN10__cxxabiv117__class_type_infoD2Ev = 1698;
__ZN10__cxxabiv120__si_class_type_infoD1Ev = 1710;
__ZN10__cxxabiv120__si_class_type_infoD2Ev = 1708;
__ZN10__cxxabiv121__vmi_class_type_infoD1Ev = 1712;
__ZN10__cxxabiv121__vmi_class_type_infoD2Ev = 1708;
__ZN10__cxxabiv117__pbase_type_infoD1Ev = 1714;
__ZN10__cxxabiv117__pbase_type_infoD2Ev = 1698;
__ZN10__cxxabiv119__pointer_type_infoD1Ev = 1716;
__ZN10__cxxabiv119__pointer_type_infoD2Ev = 1714;
__ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev = 1718;
__ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev = 1714;
__ZNSt9bad_allocC1Ev = 1720;
__ZNSt9bad_allocD1Ev = 1722;
__ZNSt20bad_array_new_lengthC1Ev = 1724;
__ZNSt20bad_array_new_lengthD1Ev = 1726;
__ZNSt20bad_array_new_lengthD2Ev = 1722;
FUNCTION_TABLE = [0,0,__ZN15b2ContactFilterD1Ev,0,__ZN17b2ContactListenerD1Ev,0,__Z14b2PairLessThanRK6b2PairS1_,0,__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator,0,__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,0,__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,0,__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,0,__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,0,__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,0,__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,0,__ZNSt9bad_allocD2Ev,0,__ZN12b2ChainShapeD2Ev,0,__ZN12b2ChainShapeD0Ev,0,__ZNK12b2ChainShape5CloneEP16b2BlockAllocator,0,__ZNK12b2ChainShape13GetChildCountEv,0,__ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2,0,__ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,0,__ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi,0,__ZNK12b2ChainShape11ComputeMassEP10b2MassDataf,0,__ZN7b2ShapeD1Ev,0,__ZN7b2ShapeD0Ev,0,___cxa_pure_virtual,0,__ZN13b2CircleShapeD1Ev,0,__ZN13b2CircleShapeD0Ev,0,__ZNK13b2CircleShape5CloneEP16b2BlockAllocator,0,__ZNK13b2CircleShape13GetChildCountEv,0,__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2,0,__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,0,__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi,0,__ZNK13b2CircleShape11ComputeMassEP10b2MassDataf,0,__ZN11b2EdgeShapeD1Ev,0,__ZN11b2EdgeShapeD0Ev,0,__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator,0,__ZNK11b2EdgeShape13GetChildCountEv,0,__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2,0,__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,0,__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi,0,__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf,0,__ZN14b2PolygonShapeD1Ev,0,__ZN14b2PolygonShapeD0Ev,0,__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator,0,__ZNK14b2PolygonShape13GetChildCountEv,0,__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2,0,__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,0,__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi,0,__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf,0,__ZN6b2DrawD1Ev,0,__ZN6b2DrawD0Ev,0,__ZN17b2ContactListenerD0Ev,0,__ZN17b2ContactListener12BeginContactEP9b2Contact,0,__ZN17b2ContactListener10EndContactEP9b2Contact,0,__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold,0,__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,0,__ZN15b2ContactFilterD0Ev,0,__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_,0,__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN23b2ChainAndCircleContactD1Ev,0,__ZN23b2ChainAndCircleContactD0Ev,0,__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN24b2ChainAndPolygonContactD1Ev,0,__ZN24b2ChainAndPolygonContactD0Ev,0,__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN15b2CircleContactD1Ev,0,__ZN15b2CircleContactD0Ev,0,__ZN9b2ContactD1Ev,0,__ZN9b2ContactD0Ev,0,__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN22b2EdgeAndCircleContactD1Ev,0,__ZN22b2EdgeAndCircleContactD0Ev,0,__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN23b2EdgeAndPolygonContactD1Ev,0,__ZN23b2EdgeAndPolygonContactD0Ev,0,__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN25b2PolygonAndCircleContactD1Ev,0,__ZN25b2PolygonAndCircleContactD0Ev,0,__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN16b2PolygonContactD1Ev,0,__ZN16b2PolygonContactD0Ev,0,__ZNK15b2DistanceJoint10GetAnchorAEv,0,__ZNK15b2DistanceJoint10GetAnchorBEv,0,__ZNK15b2DistanceJoint16GetReactionForceEf,0,__ZNK15b2DistanceJoint17GetReactionTorqueEf,0,__ZN15b2DistanceJoint4DumpEv,0,__ZN15b2DistanceJointD1Ev,0,__ZN15b2DistanceJointD0Ev,0,__ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK15b2FrictionJoint10GetAnchorAEv,0,__ZNK15b2FrictionJoint10GetAnchorBEv,0,__ZNK15b2FrictionJoint16GetReactionForceEf,0,__ZNK15b2FrictionJoint17GetReactionTorqueEf,0,__ZN15b2FrictionJoint4DumpEv,0,__ZN15b2FrictionJointD1Ev,0,__ZN15b2FrictionJointD0Ev,0,__ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK11b2GearJoint10GetAnchorAEv,0,__ZNK11b2GearJoint10GetAnchorBEv,0,__ZNK11b2GearJoint16GetReactionForceEf,0,__ZNK11b2GearJoint17GetReactionTorqueEf,0,__ZN11b2GearJoint4DumpEv,0,__ZN11b2GearJointD1Ev,0,__ZN11b2GearJointD0Ev,0,__ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZN7b2Joint4DumpEv,0,__ZN7b2JointD1Ev,0,__ZN7b2JointD0Ev,0,__ZNK12b2MouseJoint10GetAnchorAEv,0,__ZNK12b2MouseJoint10GetAnchorBEv,0,__ZNK12b2MouseJoint16GetReactionForceEf,0,__ZNK12b2MouseJoint17GetReactionTorqueEf,0,__ZN12b2MouseJoint4DumpEv,0,__ZN12b2MouseJointD1Ev,0,__ZN12b2MouseJointD0Ev,0,__ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK16b2PrismaticJoint10GetAnchorAEv,0,__ZNK16b2PrismaticJoint10GetAnchorBEv,0,__ZNK16b2PrismaticJoint16GetReactionForceEf,0,__ZNK16b2PrismaticJoint17GetReactionTorqueEf,0,__ZN16b2PrismaticJoint4DumpEv,0,__ZN16b2PrismaticJointD1Ev,0,__ZN16b2PrismaticJointD0Ev,0,__ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK13b2PulleyJoint10GetAnchorAEv,0,__ZNK13b2PulleyJoint10GetAnchorBEv,0,__ZNK13b2PulleyJoint16GetReactionForceEf,0,__ZNK13b2PulleyJoint17GetReactionTorqueEf,0,__ZN13b2PulleyJoint4DumpEv,0,__ZN13b2PulleyJointD1Ev,0,__ZN13b2PulleyJointD0Ev,0,__ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK15b2RevoluteJoint10GetAnchorAEv,0,__ZNK15b2RevoluteJoint10GetAnchorBEv,0,__ZNK15b2RevoluteJoint16GetReactionForceEf,0,__ZNK15b2RevoluteJoint17GetReactionTorqueEf,0,__ZN15b2RevoluteJoint4DumpEv,0,__ZN15b2RevoluteJointD1Ev,0,__ZN15b2RevoluteJointD0Ev,0,__ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK11b2RopeJoint10GetAnchorAEv,0,__ZNK11b2RopeJoint10GetAnchorBEv,0,__ZNK11b2RopeJoint16GetReactionForceEf,0,__ZNK11b2RopeJoint17GetReactionTorqueEf,0,__ZN11b2RopeJoint4DumpEv,0,__ZN11b2RopeJointD1Ev,0,__ZN11b2RopeJointD0Ev,0,__ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK11b2WeldJoint10GetAnchorAEv,0,__ZNK11b2WeldJoint10GetAnchorBEv,0,__ZNK11b2WeldJoint16GetReactionForceEf,0,__ZNK11b2WeldJoint17GetReactionTorqueEf,0,__ZN11b2WeldJoint4DumpEv,0,__ZN11b2WeldJointD1Ev,0,__ZN11b2WeldJointD0Ev,0,__ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData,0,__ZNK12b2WheelJoint10GetAnchorAEv,0,__ZNK12b2WheelJoint10GetAnchorBEv,0,__ZNK12b2WheelJoint16GetReactionForceEf,0,__ZNK12b2WheelJoint17GetReactionTorqueEf,0,__ZN12b2WheelJoint4DumpEv,0,__ZN12b2WheelJointD1Ev,0,__ZN12b2WheelJointD0Ev,0,__ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2ContactManager__get_m_contactFilter_p0,0,_emscripten_bind_b2ContactManager__get_m_contactCount_p0,0,_emscripten_bind_b2ContactManager__set_m_contactFilter_p1,0,_emscripten_bind_b2ContactManager__b2ContactManager_p0,0,_emscripten_bind_b2ContactManager__AddPair_p2,0,_emscripten_bind_b2ContactManager__set_m_allocator_p1,0,_emscripten_bind_b2ContactManager__set_m_contactCount_p1,0,_emscripten_bind_b2ContactManager__Collide_p0,0,_emscripten_bind_b2ContactManager__set_m_contactList_p1,0,_emscripten_bind_b2ContactManager__FindNewContacts_p0,0,_emscripten_bind_b2ContactManager__get_m_contactListener_p0,0,_emscripten_bind_b2ContactManager____destroy___p0,0,_emscripten_bind_b2ContactManager__set_m_contactListener_p1,0,_emscripten_bind_b2ContactManager__get_m_broadPhase_p0,0,_emscripten_bind_b2ContactManager__Destroy_p1,0,_emscripten_bind_b2ContactManager__set_m_broadPhase_p1,0,_emscripten_bind_b2ContactManager__get_m_contactList_p0,0,_emscripten_bind_b2ContactManager__get_m_allocator_p0,0,_emscripten_bind_b2Fixture__GetRestitution_p0,0,_emscripten_bind_b2Fixture__SetFilterData_p1,0,_emscripten_bind_b2Fixture__SetFriction_p1,0,_emscripten_bind_b2Fixture__b2Fixture_p0,0,_emscripten_bind_b2Fixture__GetShape_p0,0,_emscripten_bind_b2Fixture__SetRestitution_p1,0,_emscripten_bind_b2Fixture__GetBody_p0,0,_emscripten_bind_b2Fixture__GetNext_p0,0,_emscripten_bind_b2Fixture__GetFriction_p0,0,_emscripten_bind_b2Fixture__GetUserData_p0,0,_emscripten_bind_b2Fixture__SetDensity_p1,0,_emscripten_bind_b2Fixture__GetMassData_p1,0,_emscripten_bind_b2Fixture__SetSensor_p1,0,_emscripten_bind_b2Fixture__GetAABB_p1,0,_emscripten_bind_b2Fixture__TestPoint_p1,0,_emscripten_bind_b2Fixture__SetUserData_p1,0,_emscripten_bind_b2Fixture____destroy___p0,0,_emscripten_bind_b2Fixture__RayCast_p3,0,_emscripten_bind_b2Fixture__Refilter_p0,0,_emscripten_bind_b2Fixture__Dump_p1,0,_emscripten_bind_b2Fixture__GetFilterData_p0,0,_emscripten_bind_b2Fixture__IsSensor_p0,0,_emscripten_bind_b2Fixture__GetType_p0,0,_emscripten_bind_b2Fixture__GetDensity_p0,0,_emscripten_bind_b2BroadPhase__GetTreeQuality_p0,0,_emscripten_bind_b2BroadPhase__GetFatAABB_p1,0,_emscripten_bind_b2BroadPhase__GetUserData_p1,0,_emscripten_bind_b2BroadPhase____destroy___p0,0,_emscripten_bind_b2BroadPhase__GetTreeHeight_p0,0,_emscripten_bind_b2BroadPhase__b2BroadPhase_p0,0,_emscripten_bind_b2BroadPhase__GetProxyCount_p0,0,_emscripten_bind_b2BroadPhase__GetTreeBalance_p0,0,_emscripten_bind_b2BroadPhase__TestOverlap_p2,0,_emscripten_bind_b2BroadPhase__TouchProxy_p1,0,_emscripten_bind_b2BroadPhase__CreateProxy_p2,0,_emscripten_bind_b2BroadPhase__MoveProxy_p3,0,_emscripten_bind_b2BroadPhase__DestroyProxy_p1,0,_emscripten_bind_b2World__QueryAABB_p2,0,_emscripten_bind_b2World__SetSubStepping_p1,0,_emscripten_bind_b2World__GetTreeQuality_p0,0,_emscripten_bind_b2World__GetTreeHeight_p0,0,_emscripten_bind_b2World__GetProfile_p0,0,_emscripten_bind_b2World__GetTreeBalance_p0,0,_emscripten_bind_b2World__GetSubStepping_p0,0,_emscripten_bind_b2World__GetContactManager_p0,0,_emscripten_bind_b2World__SetContactListener_p1,0,_emscripten_bind_b2World__DrawDebugData_p0,0,_emscripten_bind_b2World__SetContinuousPhysics_p1,0,_emscripten_bind_b2World__SetGravity_p1,0,_emscripten_bind_b2World__GetBodyCount_p0,0,_emscripten_bind_b2World__GetAutoClearForces_p0,0,_emscripten_bind_b2World__GetContinuousPhysics_p0,0,_emscripten_bind_b2World__GetJointList_p0,0,_emscripten_bind_b2World__CreateBody_p1,0,_emscripten_bind_b2World__GetBodyList_p0,0,_emscripten_bind_b2World__SetDestructionListener_p1,0,_emscripten_bind_b2World__DestroyJoint_p1,0,_emscripten_bind_b2World__b2World_p1,0,_emscripten_bind_b2World__GetJointCount_p0,0,_emscripten_bind_b2World__Step_p3,0,_emscripten_bind_b2World__ClearForces_p0,0,_emscripten_bind_b2World__GetWarmStarting_p0,0,_emscripten_bind_b2World__SetAllowSleeping_p1,0,_emscripten_bind_b2World__DestroyBody_p1,0,_emscripten_bind_b2World__GetAllowSleeping_p0,0,_emscripten_bind_b2World__CreateJoint_p1,0,_emscripten_bind_b2World__GetProxyCount_p0,0,_emscripten_bind_b2World__RayCast_p3,0,_emscripten_bind_b2World__IsLocked_p0,0,_emscripten_bind_b2World__GetContactList_p0,0,_emscripten_bind_b2World__SetDebugDraw_p1,0,_emscripten_bind_b2World____destroy___p0,0,_emscripten_bind_b2World__Dump_p0,0,_emscripten_bind_b2World__SetAutoClearForces_p1,0,_emscripten_bind_b2World__GetGravity_p0,0,_emscripten_bind_b2World__GetContactCount_p0,0,_emscripten_bind_b2World__SetWarmStarting_p1,0,_emscripten_bind_b2World__SetContactFilter_p1,0,_emscripten_bind_b2CircleShape____destroy___p0,0,_emscripten_bind_b2CircleShape__GetType_p0,0,_emscripten_bind_b2CircleShape__ComputeMass_p2,0,_emscripten_bind_b2CircleShape__set_m_radius_p1,0,_emscripten_bind_b2CircleShape__get_m_radius_p0,0,_emscripten_bind_b2CircleShape__GetVertex_p1,0,_emscripten_bind_b2CircleShape__Clone_p1,0,_emscripten_bind_b2CircleShape__GetSupportVertex_p1,0,_emscripten_bind_b2CircleShape__RayCast_p4,0,_emscripten_bind_b2CircleShape__ComputeAABB_p3,0,_emscripten_bind_b2CircleShape__GetVertexCount_p0,0,_emscripten_bind_b2CircleShape__GetChildCount_p0,0,_emscripten_bind_b2CircleShape__TestPoint_p2,0,_emscripten_bind_b2CircleShape__b2CircleShape_p0,0,_emscripten_bind_b2CircleShape__GetSupport_p1,0,_emscripten_bind_b2CircleShape__set_m_p_p1,0,_emscripten_bind_b2CircleShape__get_m_p_p0,0,_emscripten_bind_b2Draw__AppendFlags_p1,0,_emscripten_bind_b2Draw__DrawTransform_p1,0,_emscripten_bind_b2Draw__ClearFlags_p1,0,_emscripten_bind_b2Draw__DrawPolygon_p3,0,_emscripten_bind_b2Draw__DrawSolidCircle_p4,0,_emscripten_bind_b2Draw__DrawSolidPolygon_p3,0,_emscripten_bind_b2Draw__DrawCircle_p3,0,_emscripten_bind_b2Draw__SetFlags_p1,0,_emscripten_bind_b2Draw__DrawSegment_p3,0,_emscripten_bind_b2Draw__GetFlags_p0,0,_emscripten_bind_b2Joint__GetNext_p0,0,_emscripten_bind_b2Joint__GetBodyA_p0,0,_emscripten_bind_b2Joint__GetBodyB_p0,0,_emscripten_bind_b2Joint__GetReactionTorque_p1,0,_emscripten_bind_b2Joint__GetAnchorA_p0,0,_emscripten_bind_b2Joint__GetUserData_p0,0,_emscripten_bind_b2Joint__GetType_p0,0,_emscripten_bind_b2Joint__SetUserData_p1,0,_emscripten_bind_b2Joint__GetCollideConnected_p0,0,_emscripten_bind_b2Joint__Dump_p0,0,_emscripten_bind_b2Joint__GetAnchorB_p0,0,_emscripten_bind_b2Joint__GetReactionForce_p1,0,_emscripten_bind_b2Joint__IsActive_p0,0,_emscripten_bind_b2RayCastCallback__ReportFixture_p4,0,_emscripten_bind_b2DynamicTree____destroy___p0,0,_emscripten_bind_b2DynamicTree__b2DynamicTree_p0,0,_emscripten_bind_b2DynamicTree__GetFatAABB_p1,0,_emscripten_bind_b2DynamicTree__GetUserData_p1,0,_emscripten_bind_b2DynamicTree__GetMaxBalance_p0,0,_emscripten_bind_b2DynamicTree__GetHeight_p0,0,_emscripten_bind_b2DynamicTree__GetAreaRatio_p0,0,_emscripten_bind_b2DynamicTree__RebuildBottomUp_p0,0,_emscripten_bind_b2DynamicTree__CreateProxy_p2,0,_emscripten_bind_b2DynamicTree__MoveProxy_p3,0,_emscripten_bind_b2DynamicTree__Validate_p0,0,_emscripten_bind_b2DynamicTree__DestroyProxy_p1,0,_emscripten_bind_b2Timer__b2Timer_p0,0,_emscripten_bind_b2Timer__Reset_p0,0,_emscripten_bind_b2Timer____destroy___p0,0,_emscripten_bind_b2Timer__GetMilliseconds_p0,0,_emscripten_bind_b2ContactListener____destroy___p0,0,_emscripten_bind_b2ContactListener__b2ContactListener_p0,0,_emscripten_bind_b2ContactListener__EndContact_p1,0,_emscripten_bind_b2ContactListener__BeginContact_p1,0,_emscripten_bind_b2ContactListener__PreSolve_p2,0,_emscripten_bind_b2ContactListener__PostSolve_p2,0,_emscripten_bind_b2ChainShape____destroy___p0,0,_emscripten_bind_b2ChainShape__GetType_p0,0,_emscripten_bind_b2ChainShape__CreateChain_p2,0,_emscripten_bind_b2ChainShape__set_m_radius_p1,0,_emscripten_bind_b2ChainShape__get_m_radius_p0,0,_emscripten_bind_b2ChainShape__get_m_vertices_p0,0,_emscripten_bind_b2ChainShape__ComputeMass_p2,0,_emscripten_bind_b2ChainShape__Clone_p1,0,_emscripten_bind_b2ChainShape__get_m_count_p0,0,_emscripten_bind_b2ChainShape__GetChildEdge_p2,0,_emscripten_bind_b2ChainShape__b2ChainShape_p0,0,_emscripten_bind_b2ChainShape__ComputeAABB_p3,0,_emscripten_bind_b2ChainShape__RayCast_p4,0,_emscripten_bind_b2ChainShape__GetChildCount_p0,0,_emscripten_bind_b2ChainShape__TestPoint_p2,0,_emscripten_bind_b2ChainShape__SetPrevVertex_p1,0,_emscripten_bind_b2ChainShape__CreateLoop_p2,0,_emscripten_bind_b2ChainShape__set_m_vertices_p1,0,_emscripten_bind_b2ChainShape__SetNextVertex_p1,0,_emscripten_bind_b2ChainShape__set_m_count_p1,0,_emscripten_bind_b2QueryCallback__ReportFixture_p1,0,_emscripten_bind_b2BlockAllocator____destroy___p0,0,_emscripten_bind_b2BlockAllocator__Clear_p0,0,_emscripten_bind_b2BlockAllocator__Free_p2,0,_emscripten_bind_b2BlockAllocator__Allocate_p1,0,_emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0,0,_emscripten_bind_b2PolygonShape____destroy___p0,0,_emscripten_bind_b2PolygonShape__Set_p2,0,_emscripten_bind_b2PolygonShape__ComputeMass_p2,0,_emscripten_bind_b2PolygonShape__set_m_radius_p1,0,_emscripten_bind_b2PolygonShape__get_m_radius_p0,0,_emscripten_bind_b2PolygonShape__Clone_p1,0,_emscripten_bind_b2PolygonShape__GetVertex_p1,0,_emscripten_bind_b2PolygonShape__RayCast_p4,0,_emscripten_bind_b2PolygonShape__SetAsBox_p2,0,_emscripten_bind_b2PolygonShape__SetAsBox_p4,0,_emscripten_bind_b2PolygonShape__set_m_centroid_p1,0,_emscripten_bind_b2PolygonShape__ComputeAABB_p3,0,_emscripten_bind_b2PolygonShape__set_m_vertexCount_p1,0,_emscripten_bind_b2PolygonShape__GetVertexCount_p0,0,_emscripten_bind_b2PolygonShape__GetChildCount_p0,0,_emscripten_bind_b2PolygonShape__TestPoint_p2,0,_emscripten_bind_b2PolygonShape__GetType_p0,0,_emscripten_bind_b2PolygonShape__b2PolygonShape_p0,0,_emscripten_bind_b2PolygonShape__get_m_vertexCount_p0,0,_emscripten_bind_b2PolygonShape__get_m_centroid_p0,0,_emscripten_bind_b2EdgeShape____destroy___p0,0,_emscripten_bind_b2EdgeShape__Set_p2,0,_emscripten_bind_b2EdgeShape__ComputeMass_p2,0,_emscripten_bind_b2EdgeShape__set_m_radius_p1,0,_emscripten_bind_b2EdgeShape__get_m_radius_p0,0,_emscripten_bind_b2EdgeShape__Clone_p1,0,_emscripten_bind_b2EdgeShape__GetType_p0,0,_emscripten_bind_b2EdgeShape__RayCast_p4,0,_emscripten_bind_b2EdgeShape__ComputeAABB_p3,0,_emscripten_bind_b2EdgeShape__GetChildCount_p0,0,_emscripten_bind_b2EdgeShape__TestPoint_p2,0,_emscripten_bind_b2EdgeShape__b2EdgeShape_p0,0,_emscripten_bind_b2Contact__GetNext_p0,0,_emscripten_bind_b2Contact__SetEnabled_p1,0,_emscripten_bind_b2Contact__GetWorldManifold_p1,0,_emscripten_bind_b2Contact__GetRestitution_p0,0,_emscripten_bind_b2Contact__ResetFriction_p0,0,_emscripten_bind_b2Contact__GetFriction_p0,0,_emscripten_bind_b2Contact__IsTouching_p0,0,_emscripten_bind_b2Contact__IsEnabled_p0,0,_emscripten_bind_b2Contact__GetFixtureB_p0,0,_emscripten_bind_b2Contact__SetFriction_p1,0,_emscripten_bind_b2Contact__GetFixtureA_p0,0,_emscripten_bind_b2Contact__GetChildIndexA_p0,0,_emscripten_bind_b2Contact__GetChildIndexB_p0,0,_emscripten_bind_b2Contact__Evaluate_p3,0,_emscripten_bind_b2Contact__SetRestitution_p1,0,_emscripten_bind_b2Contact__GetManifold_p0,0,_emscripten_bind_b2Contact__ResetRestitution_p0,0,_emscripten_bind_b2Shape__get_m_radius_p0,0,_emscripten_bind_b2Shape__ComputeMass_p2,0,_emscripten_bind_b2Shape__set_m_radius_p1,0,_emscripten_bind_b2Shape__Clone_p1,0,_emscripten_bind_b2Shape__GetType_p0,0,_emscripten_bind_b2Shape__RayCast_p4,0,_emscripten_bind_b2Shape__ComputeAABB_p3,0,_emscripten_bind_b2Shape__GetChildCount_p0,0,_emscripten_bind_b2Shape__TestPoint_p2,0,_emscripten_bind_b2Body__GetAngle_p0,0,_emscripten_bind_b2Body__GetUserData_p0,0,_emscripten_bind_b2Body__IsSleepingAllowed_p0,0,_emscripten_bind_b2Body__SetAngularDamping_p1,0,_emscripten_bind_b2Body__SetActive_p1,0,_emscripten_bind_b2Body__SetGravityScale_p1,0,_emscripten_bind_b2Body__SetUserData_p1,0,_emscripten_bind_b2Body__GetAngularVelocity_p0,0,_emscripten_bind_b2Body__GetFixtureList_p0,0,_emscripten_bind_b2Body__ApplyForce_p2,0,_emscripten_bind_b2Body__GetLocalPoint_p1,0,_emscripten_bind_b2Body__SetLinearVelocity_p1,0,_emscripten_bind_b2Body__GetJointList_p0,0,_emscripten_bind_b2Body__GetLinearVelocity_p0,0,_emscripten_bind_b2Body__GetNext_p0,0,_emscripten_bind_b2Body__SetSleepingAllowed_p1,0,_emscripten_bind_b2Body__SetTransform_p2,0,_emscripten_bind_b2Body__GetMass_p0,0,_emscripten_bind_b2Body__SetAngularVelocity_p1,0,_emscripten_bind_b2Body__GetMassData_p1,0,_emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1,0,_emscripten_bind_b2Body__ResetMassData_p0,0,_emscripten_bind_b2Body__ApplyForceToCenter_p1,0,_emscripten_bind_b2Body__ApplyTorque_p1,0,_emscripten_bind_b2Body__IsAwake_p0,0,_emscripten_bind_b2Body__SetType_p1,0,_emscripten_bind_b2Body__CreateFixture_p1,0,_emscripten_bind_b2Body__CreateFixture_p2,0,_emscripten_bind_b2Body__SetMassData_p1,0,_emscripten_bind_b2Body__GetTransform_p0,0,_emscripten_bind_b2Body__GetWorldCenter_p0,0,_emscripten_bind_b2Body__GetAngularDamping_p0,0,_emscripten_bind_b2Body__ApplyLinearImpulse_p2,0,_emscripten_bind_b2Body__IsFixedRotation_p0,0,_emscripten_bind_b2Body__GetLocalCenter_p0,0,_emscripten_bind_b2Body__GetWorldVector_p1,0,_emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1,0,_emscripten_bind_b2Body__GetContactList_p0,0,_emscripten_bind_b2Body__GetWorldPoint_p1,0,_emscripten_bind_b2Body__SetAwake_p1,0,_emscripten_bind_b2Body__GetLinearDamping_p0,0,_emscripten_bind_b2Body__IsBullet_p0,0,_emscripten_bind_b2Body__GetWorld_p0,0,_emscripten_bind_b2Body__GetLocalVector_p1,0,_emscripten_bind_b2Body__SetLinearDamping_p1,0,_emscripten_bind_b2Body__Dump_p0,0,_emscripten_bind_b2Body__SetBullet_p1,0,_emscripten_bind_b2Body__GetType_p0,0,_emscripten_bind_b2Body__GetGravityScale_p0,0,_emscripten_bind_b2Body__DestroyFixture_p1,0,_emscripten_bind_b2Body__GetInertia_p0,0,_emscripten_bind_b2Body__IsActive_p0,0,_emscripten_bind_b2Body__SetFixedRotation_p1,0,_emscripten_bind_b2Body__ApplyAngularImpulse_p1,0,_emscripten_bind_b2Body__GetPosition_p0,0,_emscripten_bind_b2StackAllocator__GetMaxAllocation_p0,0,_emscripten_bind_b2StackAllocator____destroy___p0,0,_emscripten_bind_b2StackAllocator__b2StackAllocator_p0,0,_emscripten_bind_b2StackAllocator__Allocate_p1,0,_emscripten_bind_b2StackAllocator__Free_p1,0,_emscripten_bind_b2DestructionListener__SayGoodbye_p1,0,_emscripten_bind_b2Filter____destroy___p0,0,_emscripten_bind_b2Filter__set_maskBits_p1,0,_emscripten_bind_b2Filter__set_categoryBits_p1,0,_emscripten_bind_b2Filter__get_groupIndex_p0,0,_emscripten_bind_b2Filter__set_groupIndex_p1,0,_emscripten_bind_b2Filter__get_maskBits_p0,0,_emscripten_bind_b2Filter__b2Filter_p0,0,_emscripten_bind_b2Filter__get_categoryBits_p0,0,_emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2FrictionJointDef____destroy___p0,0,_emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2FrictionJointDef__get_maxForce_p0,0,_emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0,0,_emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2FrictionJointDef__set_maxForce_p1,0,_emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2FrictionJointDef__set_maxTorque_p1,0,_emscripten_bind_b2FrictionJointDef__get_maxTorque_p0,0,_emscripten_bind_b2FrictionJointDef__Initialize_p3,0,_emscripten_bind_b2BodyDef__get_linearDamping_p0,0,_emscripten_bind_b2BodyDef__get_awake_p0,0,_emscripten_bind_b2BodyDef__get_type_p0,0,_emscripten_bind_b2BodyDef__get_allowSleep_p0,0,_emscripten_bind_b2BodyDef__set_position_p1,0,_emscripten_bind_b2BodyDef__set_linearVelocity_p1,0,_emscripten_bind_b2BodyDef__b2BodyDef_p0,0,_emscripten_bind_b2BodyDef__get_bullet_p0,0,_emscripten_bind_b2BodyDef__get_userData_p0,0,_emscripten_bind_b2BodyDef__set_angularDamping_p1,0,_emscripten_bind_b2BodyDef__set_fixedRotation_p1,0,_emscripten_bind_b2BodyDef__set_allowSleep_p1,0,_emscripten_bind_b2BodyDef__get_gravityScale_p0,0,_emscripten_bind_b2BodyDef__set_angularVelocity_p1,0,_emscripten_bind_b2BodyDef__set_userData_p1,0,_emscripten_bind_b2BodyDef__get_position_p0,0,_emscripten_bind_b2BodyDef____destroy___p0,0,_emscripten_bind_b2BodyDef__set_type_p1,0,_emscripten_bind_b2BodyDef__set_gravityScale_p1,0,_emscripten_bind_b2BodyDef__get_angularDamping_p0,0,_emscripten_bind_b2BodyDef__set_bullet_p1,0,_emscripten_bind_b2BodyDef__set_active_p1,0,_emscripten_bind_b2BodyDef__set_angle_p1,0,_emscripten_bind_b2BodyDef__get_angle_p0,0,_emscripten_bind_b2BodyDef__get_angularVelocity_p0,0,_emscripten_bind_b2BodyDef__get_linearVelocity_p0,0,_emscripten_bind_b2BodyDef__get_active_p0,0,_emscripten_bind_b2BodyDef__set_linearDamping_p1,0,_emscripten_bind_b2BodyDef__get_fixedRotation_p0,0,_emscripten_bind_b2BodyDef__set_awake_p1,0,_emscripten_bind_b2Vec2__Normalize_p0,0,_emscripten_bind_b2Vec2__set_x_p1,0,_emscripten_bind_b2Vec2__b2Vec2_p0,0,_emscripten_bind_b2Vec2__b2Vec2_p2,0,_emscripten_bind_b2Vec2__Set_p2,0,_emscripten_bind_b2Vec2__get_x_p0,0,_emscripten_bind_b2Vec2__get_y_p0,0,_emscripten_bind_b2Vec2__set_y_p1,0,_emscripten_bind_b2Vec2__IsValid_p0,0,_emscripten_bind_b2Vec2__Skew_p0,0,_emscripten_bind_b2Vec2__LengthSquared_p0,0,_emscripten_bind_b2Vec2__op_add_p1,0,_emscripten_bind_b2Vec2__SetZero_p0,0,_emscripten_bind_b2Vec2__Length_p0,0,_emscripten_bind_b2Vec2____destroy___p0,0,_emscripten_bind_b2Vec2__op_mul_p1,0,_emscripten_bind_b2Vec2__op_sub_p0,0,_emscripten_bind_b2Vec3____destroy___p0,0,_emscripten_bind_b2Vec3__set_z_p1,0,_emscripten_bind_b2Vec3__Set_p3,0,_emscripten_bind_b2Vec3__get_z_p0,0,_emscripten_bind_b2Vec3__op_add_p1,0,_emscripten_bind_b2Vec3__SetZero_p0,0,_emscripten_bind_b2Vec3__b2Vec3_p0,0,_emscripten_bind_b2Vec3__b2Vec3_p3,0,_emscripten_bind_b2Vec3__op_mul_p1,0,_emscripten_bind_b2Vec3__op_sub_p0,0,_emscripten_bind_b2DistanceProxy__get_m_radius_p0,0,_emscripten_bind_b2DistanceProxy__Set_p2,0,_emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0,0,_emscripten_bind_b2DistanceProxy__set_m_radius_p1,0,_emscripten_bind_b2DistanceProxy____destroy___p0,0,_emscripten_bind_b2DistanceProxy__get_m_vertices_p0,0,_emscripten_bind_b2DistanceProxy__GetSupportVertex_p1,0,_emscripten_bind_b2DistanceProxy__get_m_count_p0,0,_emscripten_bind_b2DistanceProxy__GetVertexCount_p0,0,_emscripten_bind_b2DistanceProxy__GetVertex_p1,0,_emscripten_bind_b2DistanceProxy__GetSupport_p1,0,_emscripten_bind_b2DistanceProxy__set_m_vertices_p1,0,_emscripten_bind_b2DistanceProxy__set_m_count_p1,0,_emscripten_bind_b2FixtureDef____destroy___p0,0,_emscripten_bind_b2FixtureDef__get_isSensor_p0,0,_emscripten_bind_b2FixtureDef__set_userData_p1,0,_emscripten_bind_b2FixtureDef__set_shape_p1,0,_emscripten_bind_b2FixtureDef__get_density_p0,0,_emscripten_bind_b2FixtureDef__get_shape_p0,0,_emscripten_bind_b2FixtureDef__b2FixtureDef_p0,0,_emscripten_bind_b2FixtureDef__set_density_p1,0,_emscripten_bind_b2FixtureDef__set_restitution_p1,0,_emscripten_bind_b2FixtureDef__get_restitution_p0,0,_emscripten_bind_b2FixtureDef__set_isSensor_p1,0,_emscripten_bind_b2FixtureDef__get_filter_p0,0,_emscripten_bind_b2FixtureDef__get_friction_p0,0,_emscripten_bind_b2FixtureDef__set_friction_p1,0,_emscripten_bind_b2FixtureDef__get_userData_p0,0,_emscripten_bind_b2FixtureDef__set_filter_p1,0,_emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0,0,_emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0,0,_emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0,0,_emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1,0,_emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1,0,_emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0,0,_emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1,0,_emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0,0,_emscripten_bind_b2PrismaticJointDef__Initialize_p4,0,_emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1,0,_emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0,0,_emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0,0,_emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1,0,_emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2PrismaticJointDef____destroy___p0,0,_emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0,0,_emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1,0,_emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1,0,_emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0,0,_emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1,0,_emscripten_bind_b2Rot____destroy___p0,0,_emscripten_bind_b2Rot__Set_p1,0,_emscripten_bind_b2Rot__GetAngle_p0,0,_emscripten_bind_b2Rot__GetYAxis_p0,0,_emscripten_bind_b2Rot__GetXAxis_p0,0,_emscripten_bind_b2Rot__set_c_p1,0,_emscripten_bind_b2Rot__SetIdentity_p0,0,_emscripten_bind_b2Rot__b2Rot_p0,0,_emscripten_bind_b2Rot__b2Rot_p1,0,_emscripten_bind_b2Rot__get_c_p0,0,_emscripten_bind_b2WheelJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2WheelJointDef__set_motorSpeed_p1,0,_emscripten_bind_b2WheelJointDef__get_localAxisA_p0,0,_emscripten_bind_b2WheelJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2WheelJointDef__get_frequencyHz_p0,0,_emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1,0,_emscripten_bind_b2WheelJointDef__get_enableMotor_p0,0,_emscripten_bind_b2WheelJointDef____destroy___p0,0,_emscripten_bind_b2WheelJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0,0,_emscripten_bind_b2WheelJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2WheelJointDef__get_dampingRatio_p0,0,_emscripten_bind_b2WheelJointDef__set_enableMotor_p1,0,_emscripten_bind_b2WheelJointDef__set_frequencyHz_p1,0,_emscripten_bind_b2WheelJointDef__Initialize_p4,0,_emscripten_bind_b2WheelJointDef__set_dampingRatio_p1,0,_emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0,0,_emscripten_bind_b2WheelJointDef__set_localAxisA_p1,0,_emscripten_bind_b2WheelJointDef__get_motorSpeed_p0,0,_emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0,0,_emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1,0,_emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0,0,_emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1,0,_emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0,0,_emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1,0,_emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0,0,_emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1,0,_emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1,0,_emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0,0,_emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1,0,_emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1,0,_emscripten_bind_b2RevoluteJointDef____destroy___p0,0,_emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0,0,_emscripten_bind_b2RevoluteJointDef__Initialize_p3,0,_emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0,0,_emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0,0,_emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2PulleyJointDef____destroy___p0,0,_emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2PulleyJointDef__get_ratio_p0,0,_emscripten_bind_b2PulleyJointDef__get_lengthB_p0,0,_emscripten_bind_b2PulleyJointDef__get_lengthA_p0,0,_emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2PulleyJointDef__set_ratio_p1,0,_emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0,0,_emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1,0,_emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0,0,_emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1,0,_emscripten_bind_b2PulleyJointDef__Initialize_p7,0,_emscripten_bind_b2PulleyJointDef__set_lengthB_p1,0,_emscripten_bind_b2PulleyJointDef__set_lengthA_p1,0,_emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0,0,_emscripten_bind_b2JointDef__get_bodyA_p0,0,_emscripten_bind_b2JointDef__set_userData_p1,0,_emscripten_bind_b2JointDef__set_bodyA_p1,0,_emscripten_bind_b2JointDef__set_bodyB_p1,0,_emscripten_bind_b2JointDef____destroy___p0,0,_emscripten_bind_b2JointDef__get_bodyB_p0,0,_emscripten_bind_b2JointDef__set_type_p1,0,_emscripten_bind_b2JointDef__get_collideConnected_p0,0,_emscripten_bind_b2JointDef__get_type_p0,0,_emscripten_bind_b2JointDef__set_collideConnected_p1,0,_emscripten_bind_b2JointDef__b2JointDef_p0,0,_emscripten_bind_b2JointDef__get_userData_p0,0,_emscripten_bind_b2Transform____destroy___p0,0,_emscripten_bind_b2Transform__Set_p2,0,_emscripten_bind_b2Transform__set_p_p1,0,_emscripten_bind_b2Transform__set_q_p1,0,_emscripten_bind_b2Transform__get_p_p0,0,_emscripten_bind_b2Transform__get_q_p0,0,_emscripten_bind_b2Transform__b2Transform_p0,0,_emscripten_bind_b2Transform__b2Transform_p2,0,_emscripten_bind_b2Transform__SetIdentity_p0,0,_emscripten_bind_b2Color____destroy___p0,0,_emscripten_bind_b2Color__set_b_p1,0,_emscripten_bind_b2Color__Set_p3,0,_emscripten_bind_b2Color__get_b_p0,0,_emscripten_bind_b2Color__b2Color_p0,0,_emscripten_bind_b2Color__b2Color_p3,0,_emscripten_bind_b2WeldJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2WeldJointDef____destroy___p0,0,_emscripten_bind_b2WeldJointDef__get_frequencyHz_p0,0,_emscripten_bind_b2WeldJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2WeldJointDef__set_dampingRatio_p1,0,_emscripten_bind_b2WeldJointDef__set_referenceAngle_p1,0,_emscripten_bind_b2WeldJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2WeldJointDef__get_referenceAngle_p0,0,_emscripten_bind_b2WeldJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2WeldJointDef__get_dampingRatio_p0,0,_emscripten_bind_b2WeldJointDef__set_frequencyHz_p1,0,_emscripten_bind_b2WeldJointDef__Initialize_p3,0,_emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0,0,_emscripten_bind_b2MouseJointDef____destroy___p0,0,_emscripten_bind_b2MouseJointDef__get_frequencyHz_p0,0,_emscripten_bind_b2MouseJointDef__set_dampingRatio_p1,0,_emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0,0,_emscripten_bind_b2MouseJointDef__get_maxForce_p0,0,_emscripten_bind_b2MouseJointDef__set_target_p1,0,_emscripten_bind_b2MouseJointDef__set_maxForce_p1,0,_emscripten_bind_b2MouseJointDef__get_target_p0,0,_emscripten_bind_b2MouseJointDef__set_frequencyHz_p1,0,_emscripten_bind_b2MouseJointDef__get_dampingRatio_p0,0,_emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2DistanceJointDef__get_length_p0,0,_emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0,0,_emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1,0,_emscripten_bind_b2DistanceJointDef____destroy___p0,0,_emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0,0,_emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0,0,_emscripten_bind_b2DistanceJointDef__set_length_p1,0,_emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1,0,_emscripten_bind_b2DistanceJointDef__Initialize_p4,0,_emscripten_bind_b2GearJointDef____destroy___p0,0,_emscripten_bind_b2GearJointDef__set_joint1_p1,0,_emscripten_bind_b2GearJointDef__set_joint2_p1,0,_emscripten_bind_b2GearJointDef__set_ratio_p1,0,_emscripten_bind_b2GearJointDef__get_joint1_p0,0,_emscripten_bind_b2GearJointDef__get_joint2_p0,0,_emscripten_bind_b2GearJointDef__b2GearJointDef_p0,0,_emscripten_bind_b2GearJointDef__get_ratio_p0,0,_emscripten_bind_b2RopeJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2RopeJointDef____destroy___p0,0,_emscripten_bind_b2RopeJointDef__get_maxLength_p0,0,_emscripten_bind_b2RopeJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2RopeJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2RopeJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0,0,_emscripten_bind_b2RopeJointDef__set_maxLength_p1,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD0Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv117__pbase_type_infoD0Ev,0,__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv117__array_type_infoD0Ev,0,__ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv120__function_type_infoD0Ev,0,__ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__enum_type_infoD0Ev,0,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv119__pointer_type_infoD0Ev,0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt9bad_allocD2Ev,0,__ZNSt20bad_array_new_lengthD0Ev,0,__ZNKSt20bad_array_new_length4whatEv,0,__ZN12b2BroadPhaseC2Ev,0,__ZN12b2BroadPhaseD2Ev,0,__ZN13b2DynamicTreeC2Ev,0,__ZN13b2DynamicTreeD2Ev,0,__ZN12b2ChainShapeD2Ev,0,__ZN16b2BlockAllocatorC2Ev,0,__ZN16b2BlockAllocatorD2Ev,0,__ZN16b2StackAllocatorC2Ev,0,__ZN16b2StackAllocatorD2Ev,0,__ZN7b2TimerC2Ev,0,__ZN6b2BodyC2EPK9b2BodyDefP7b2World,0,__ZN6b2BodyD2Ev,0,__ZN16b2ContactManagerC2Ev,0,__ZN9b2FixtureC2Ev,0,__ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener,0,__ZN8b2IslandD2Ev,0,__ZN7b2WorldC2ERK6b2Vec2,0,__ZN7b2WorldD2Ev,0,__ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i,0,__ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i,0,__ZN15b2CircleContactC2EP9b2FixtureS1_,0,__ZN15b2ContactSolverC2EP18b2ContactSolverDef,0,__ZN15b2ContactSolverD2Ev,0,__ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_,0,__ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_,0,__ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_,0,__ZN16b2PolygonContactC2EP9b2FixtureS1_,0,__ZN15b2DistanceJointC2EPK18b2DistanceJointDef,0,__ZN15b2FrictionJointC2EPK18b2FrictionJointDef,0,__ZN11b2GearJointC2EPK14b2GearJointDef,0,__ZN12b2MouseJointC2EPK15b2MouseJointDef,0,__ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef,0,__ZN13b2PulleyJointC2EPK16b2PulleyJointDef,0,__ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef,0,__ZN11b2RopeJointC2EPK14b2RopeJointDef,0,__ZN11b2WeldJointC2EPK14b2WeldJointDef,0,__ZN12b2WheelJointC2EPK15b2WheelJointDef,0,__ZN6b2RopeC2Ev,0,__ZN6b2RopeD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNSt9bad_allocC2Ev,0,__ZNSt9bad_allocD2Ev,0,__ZNSt20bad_array_new_lengthC2Ev,0,__ZNSt9bad_allocD2Ev,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  initRuntime();

  var ret = null;
  if (Module['_main']) {
    ret = Module.callMain(args);
    if (!Module['noExitRuntime']) {
      exitRuntime();
    }
  }
  return ret;
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preRun']) {
  Module['preRun']();
}


if (!Module['noInitialRun']) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}

if (Module['postRun']) {
  Module['postRun']();
}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["__Z5b2MinIiET_S0_S0_","__Z5b2MaxIiET_S0_S0_","__ZN12b2BroadPhase12UnBufferMoveEi","__Z5b2DotRK6b2Vec2S1_","__ZN6b2Vec27SetZeroEv","__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv","__ZN12b2BroadPhase10BufferMoveEi","__ZN12b2BroadPhase12DestroyProxyEi","__ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2","__ZN12b2BroadPhase10TouchProxyEi","__ZN12b2BroadPhase13QueryCallbackEi","__Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_","__Z5b2MulRK11b2TransformRK6b2Vec2","__ZmiRK6b2Vec2S1_","__Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_","__ZN12b2BroadPhaseC2Ev","__ZN12b2BroadPhaseD2Ev","__ZN6b2Vec2C2Eff","__ZN6b2Vec23SetEff","__Z6b2MulTRK11b2TransformRK6b2Vec2","__ZmlfRK6b2Vec2","__ZplRK6b2Vec2S1_","__Z17b2DistanceSquaredRK6b2Vec2S1_","__ZN6b2Vec29NormalizeEv","__ZNK6b2Vec26LengthEv","__ZN6b2Vec2C1Eff","__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_","__ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_","__ZN6b2Vec2C2Ev","__ZN5b2RotC2Ev","__Z5b2MinIfET_S0_S0_","__Z7b2CrossRK6b2Vec2S1_","__Z6b2MulTRK11b2TransformS1_","__ZNK6b2Vec2ngEv","__Z5b2MulRK5b2RotRK6b2Vec2","__ZN12b2EPCollider21ComputeEdgeSeparationEv","__ZN12b2EPCollider24ComputePolygonSeparationEv","__ZN12b2ClipVertexC1Ev","__ZN15b2ReferenceFaceC1Ev","__Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_","__ZN12b2EPColliderC1Ev","__ZN12b2EPColliderC2Ev","__ZN13b2TempPolygonC1Ev","__ZN11b2TransformC1Ev","__ZN6b2Vec2C1Ev","__ZN11b2TransformC2Ev","__ZN5b2RotC1Ev","__ZN13b2TempPolygonC2Ev","__ZN15b2ReferenceFaceC2Ev","__ZN12b2ClipVertexC2Ev","__Z6b2MulTRK5b2RotS1_","__Z6b2MulTRK5b2RotRK6b2Vec2","__Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_","__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_","__ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_","__Z7b2CrossRK6b2Vec2f","__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_","__ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f","__Z6b2SwapIfEvRT_S1_","__Z5b2AbsIfET_S0_","__ZN6b2Vec2clEi","__ZNK6b2Vec2clEi","__ZNK7b2Shape7GetTypeEv","__Z16b2GetPointStatesP12b2PointStateS0_PK10b2ManifoldS3_","__ZNK6b2AABB7RayCastEP15b2RayCastOutputRK14b2RayCastInput","__Z5b2AbsRK6b2Vec2","__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi","__Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_","__ZN15b2DistanceInputC1Ev","__ZN16b2DistanceOutputC1Ev","__ZN16b2DistanceOutputC2Ev","__ZN15b2DistanceInputC2Ev","__ZN15b2DistanceProxyC1Ev","__ZN15b2DistanceProxyC2Ev","__ZN15b2DistanceProxy3SetEPK7b2Shapei","__ZN9b2Simplex6Solve2Ev","__ZN9b2Simplex6Solve3Ev","__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput","__ZN9b2SimplexC1Ev","__ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_","__ZNK6b2Vec213LengthSquaredEv","__ZN6b2Vec2pLERKS_","__ZN6b2Vec2mIERKS_","__ZNK9b2Simplex15GetClosestPointEv","__ZNK9b2Simplex18GetSearchDirectionEv","__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2","__ZNK15b2DistanceProxy9GetVertexEi","__ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_","__Z10b2DistanceRK6b2Vec2S1_","__ZNK9b2Simplex10WriteCacheEP14b2SimplexCache","__ZNK9b2Simplex9GetMetricEv","__Z7b2CrossfRK6b2Vec2","__ZN9b2SimplexC2Ev","__ZN15b2SimplexVertexC1Ev","__ZN15b2SimplexVertexC2Ev","__ZN13b2DynamicTreeC2Ev","__ZN13b2DynamicTreeD2Ev","__ZN13b2DynamicTree12AllocateNodeEv","__ZN13b2DynamicTree8FreeNodeEi","__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv","__ZNK10b2TreeNode6IsLeafEv","__ZN13b2DynamicTree10InsertLeafEi","__ZN13b2DynamicTree12DestroyProxyEi","__ZN13b2DynamicTree10RemoveLeafEi","__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2","__ZNK6b2AABB8ContainsERKS_","__ZNK6b2AABB12GetPerimeterEv","__ZNK13b2DynamicTree9GetHeightEv","__ZN6b2AABBC1Ev","__ZN6b2AABB7CombineERKS_S1_","__ZN13b2DynamicTree7BalanceEi","__ZNK13b2DynamicTree12GetAreaRatioEv","__Z5b2AbsIiET_S0_","__ZeqRK6b2Vec2S1_","__ZNK13b2DynamicTree13ComputeHeightEi","__ZNK13b2DynamicTree13ComputeHeightEv","__ZNK13b2DynamicTree17ValidateStructureEi","__ZNK13b2DynamicTree15ValidateMetricsEi","__ZNK13b2DynamicTree8ValidateEv","__ZNK13b2DynamicTree13GetMaxBalanceEv","__ZN13b2DynamicTree15RebuildBottomUpEv","__Z5b2MinRK6b2Vec2S1_","__Z5b2MaxIfET_S0_S0_","__Z5b2MaxRK6b2Vec2S1_","__ZN6b2AABBC2Ev","__Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput","__ZN7b2Sweep9NormalizeEv","__ZNK7b2Sweep12GetTransformEP11b2Transformf","__ZN20b2SeparationFunctionC1Ev","__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f","__ZN7b2ShapeD2Ev","__ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2","__ZNK12b2ChainShape13GetChildCountEv","__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f","__ZNK20b2SeparationFunction8EvaluateEiif","__ZN20b2SeparationFunctionC2Ev","__ZN7b2SweepC1Ev","__ZN7b2SweepC2Ev","__ZN5b2Rot3SetEf","__ZN12b2ChainShapeD0Ev","__ZN12b2ChainShape10CreateLoopEPK6b2Vec2i","__ZN12b2ChainShape11CreateChainEPK6b2Vec2i","__ZN12b2ChainShape13SetPrevVertexERK6b2Vec2","__ZN12b2ChainShape13SetNextVertexERK6b2Vec2","__ZNK12b2ChainShape5CloneEP16b2BlockAllocator","__ZN12b2ChainShapeC1Ev","__ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei","__ZN11b2EdgeShapeC1Ev","__ZN11b2EdgeShapeD1Ev","__ZN12b2ChainShapeD2Ev","__ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZNK13b2CircleShape13GetChildCountEv","__ZNK11b2EdgeShape13GetChildCountEv","__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2","__ZN7b2ShapeC2Ev","__ZN7b2ShapeaSERKS_","__ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK12b2ChainShape11ComputeMassEP10b2MassDataf","__ZN11b2EdgeShapeD2Ev","__ZN7b2ShapeD1Ev","__ZN7b2ShapeD0Ev","__ZNK13b2CircleShape5CloneEP16b2BlockAllocator","__ZN13b2CircleShapeC1Ev","__ZN13b2CircleShapeaSERKS_","__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2","__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK13b2CircleShape11ComputeMassEP10b2MassDataf","__ZN13b2CircleShapeD1Ev","__ZN13b2CircleShapeD0Ev","__ZN13b2CircleShapeD2Ev","__ZN11b2EdgeShape3SetERK6b2Vec2S2_","__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator","__ZN11b2EdgeShapeaSERKS_","__ZN11b2EdgeShapeC2Ev","__ZN12b2ChainShapeC2Ev","__ZN13b2CircleShapeC2Ev","__ZNK14b2PolygonShape13GetChildCountEv","__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf","__ZN11b2EdgeShapeD0Ev","__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator","__ZN14b2PolygonShapeC1Ev","__ZN14b2PolygonShapeaSERKS_","__ZN14b2PolygonShape8SetAsBoxEff","__ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f","__ZN14b2PolygonShape3SetEPK6b2Vec2i","__ZL15ComputeCentroidPK6b2Vec2i","__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2","__ZN6b2Vec2mLEf","__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf","__ZN14b2PolygonShapeD1Ev","__ZN14b2PolygonShapeD0Ev","__ZN14b2PolygonShapeD2Ev","__ZN16b2BlockAllocatorC2Ev","__ZN16b2BlockAllocatorD2Ev","__ZN14b2PolygonShapeC2Ev","__ZN6b2DrawD2Ev","__ZN6b2Vec3C2Ev","__ZN6b2DrawC2Ev","__ZN6b2Draw8SetFlagsEj","__ZNK6b2Draw8GetFlagsEv","__ZN6b2Draw11AppendFlagsEj","__ZN6b2Draw10ClearFlagsEj","__Z5b2DotRK6b2Vec3S1_","__ZNK7b2Mat3312GetInverse22EPS_","__ZN16b2BlockAllocator8AllocateEi","__ZN16b2BlockAllocator4FreeEPvi","__ZN16b2BlockAllocator5ClearEv","__ZN6b2DrawD1Ev","__ZN6b2DrawD0Ev","___cxx_global_var_init","__ZNK7b2Mat337Solve33ERK6b2Vec3","__Z7b2CrossRK6b2Vec3S1_","__ZN6b2Vec3C1Ev","__ZNK7b2Mat337Solve22ERK6b2Vec2","__ZNK7b2Mat3315GetSymInverse33EPS_","__ZN6b2BodyD2Ev","__Z9b2IsValidf","__ZN6b2Vec3C2Efff","__ZN16b2StackAllocatorC2Ev","__ZNK16b2StackAllocator16GetMaxAllocationEv","__ZNK7b2World8IsLockedEv","__ZN6b2Vec3C1Efff","__GLOBAL__I_a","__Z7b2Alloci","__Z6b2FreePv","__Z5b2LogPKcz","__ZN16b2StackAllocatorD2Ev","__ZN16b2StackAllocator8AllocateEi","__ZN16b2StackAllocator4FreeEPv","__ZN7b2TimerC2Ev","__ZN7b2Timer5ResetEv","__ZNK7b2Timer15GetMillisecondsEv","__ZN6b2BodyC2EPK9b2BodyDefP7b2World","__ZNK6b2Vec27IsValidEv","__ZN6b2Body7SetTypeE10b2BodyType","__ZN9b2Contact11GetFixtureAEv","__ZN9b2Contact11GetFixtureBEv","__ZNK6b2Body13ShouldCollideEPKS_","__ZN6b2Body13ResetMassDataEv","__ZN6b2Body19SynchronizeFixturesEv","__ZN6b2Body8SetAwakeEb","__ZN6b2Body13CreateFixtureEPK12b2FixtureDef","__ZN6b2Body13CreateFixtureEPK7b2Shapef","__ZN12b2FixtureDefC1Ev","__ZN6b2Body14DestroyFixtureEP9b2Fixture","__ZN10b2MassDataC1Ev","__ZNK9b2Fixture11GetMassDataEP10b2MassData","__ZN6b2Body11SetMassDataEPK10b2MassData","__ZNK6b2Body8IsActiveEv","__ZN8b2FilterC2Ev","__ZN9b2Fixture7GetBodyEv","__ZNK9b2Contact10IsTouchingEv","__ZNK9b2Contact14GetChildIndexAEv","__ZNK9b2Contact14GetChildIndexBEv","__ZN9b2Contact7GetNextEv","__ZNK6b2Body7IsAwakeEv","__ZN6b2Body12SetTransformERK6b2Vec2f","__ZN6b2Body9SetActiveEb","__ZN6b2Body4DumpEv","__ZN10b2MassDataC2Ev","__ZN12b2FixtureDefC2Ev","__ZN8b2FilterC1Ev","___cxx_global_var_init115","__ZN15b2ContactFilterC1Ev","__ZN15b2ContactFilterD1Ev","___cxx_global_var_init1","__ZN17b2ContactListenerC1Ev","__ZN17b2ContactListenerD1Ev","__ZN16b2ContactManagerC2Ev","__ZN16b2ContactManager7DestroyEP9b2Contact","__ZN16b2ContactManager7CollideEv","__ZN6b2Body14GetContactListEv","__Z14b2PairLessThanRK6b2PairS1_","__ZNK12b2BroadPhase11TestOverlapEii","__ZN16b2ContactManager15FindNewContactsEv","__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_","__ZN16b2ContactManager7AddPairEPvS0_","__ZNK13b2DynamicTree10GetFatAABBEi","__ZNK13b2DynamicTree11GetUserDataEi","__ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB","__ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_","__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_","__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_","__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_","__ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_","__ZN17b2ContactListenerD2Ev","__ZN17b2ContactListener12BeginContactEP9b2Contact","__ZN17b2ContactListener10EndContactEP9b2Contact","__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold","__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse","__ZN15b2ContactFilterD2Ev","__ZN17b2ContactListenerC2Ev","__ZN15b2ContactFilterC2Ev","__ZN15b2GrowableStackIiLi256EE8GetCountEv","__ZN15b2GrowableStackIiLi256EEC2Ev","__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_","__ZN15b2GrowableStackIiLi256EEC1Ev","__ZN15b2GrowableStackIiLi256EE4PushERKi","__ZN15b2GrowableStackIiLi256EE3PopEv","__Z13b2TestOverlapRK6b2AABBS1_","__ZN15b2GrowableStackIiLi256EED1Ev","__ZN15b2GrowableStackIiLi256EED2Ev","__ZN17b2ContactListenerD0Ev","__GLOBAL__I_a120","__ZN9b2FixtureC2Ev","__ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef","__ZN9b2Fixture7DestroyEP16b2BlockAllocator","__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform","__ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase","__ZN9b2Contact16FlagForFilteringEv","__ZN6b2Body8GetWorldEv","__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_","__ZN9b2Fixture13SetFilterDataERK8b2Filter","__ZN9b2Fixture8RefilterEv","__ZN9b2Fixture9SetSensorEb","__ZN9b2Fixture4DumpEi","__ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener","__ZN8b2IslandD2Ev","__Z7b2ClampIfET_S0_S0_S0_","__ZN6b2Body20SynchronizeTransformEv","__ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b","__ZNK6b2Body7GetTypeEv","__ZN7b2World22SetDestructionListenerEP21b2DestructionListener","__ZN7b2World16SetContactFilterEP15b2ContactFilter","__ZN7b2World18SetContactListenerEP17b2ContactListener","__ZN7b2World12SetDebugDrawEP6b2Draw","__ZN8b2Island6ReportEPK27b2ContactVelocityConstraint","__ZN16b2ContactManagerD1Ev","__ZN8b2Island8SolveTOIERK10b2TimeStepii","__ZN7b2WorldC2ERK6b2Vec2","__ZN7b2WorldD2Ev","__ZN7b2World10CreateBodyEPK9b2BodyDef","__ZN7b2World11DestroyBodyEP6b2Body","__ZN7b2World12DestroyJointEP7b2Joint","__ZN7b2World11CreateJointEPK10b2JointDef","__ZN7b2World16SetAllowSleepingEb","__ZN8b2Island5ClearEv","__ZNK9b2Contact9IsEnabledEv","__ZN6b2Body7GetNextEv","__ZN8b2Island3AddEP6b2Body","__ZN8b2Island3AddEP9b2Contact","__ZN8b2Island3AddEP7b2Joint","__ZN7b2World5SolveERK10b2TimeStep","__ZN7b2World8SolveTOIERK10b2TimeStep","__ZNK9b2Fixture8IsSensorEv","__ZNK6b2Body8IsBulletEv","__ZN9b2Fixture8GetShapeEv","__ZN9b2Contact10SetEnabledEb","__ZN7b2Joint8GetBodyAEv","__ZN7b2Joint8GetBodyBEv","__ZNK6b2Body12GetTransformEv","__ZNK7b2Joint7GetTypeEv","__ZN7b2Sweep7AdvanceEf","__ZN10b2TOIInputC1Ev","__ZN6b2Body7AdvanceEf","__ZN7b2World4StepEfii","__ZN7b2World11ClearForcesEv","__ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB","__ZNK12b2BroadPhase5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB","__ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_","__ZN14b2RayCastInputC1Ev","__ZNK12b2BroadPhase7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput","__ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color","__ZNK9b2Fixture7GetTypeEv","__ZN7b2World9DrawJointEP7b2Joint","__ZN7b2ColorC1Efff","__ZN6b2Body14GetFixtureListEv","__ZN9b2Fixture7GetNextEv","__ZN7b2Joint7GetNextEv","__ZNK6b2Body14GetWorldCenterEv","__ZNK12b2BroadPhase13GetProxyCountEv","__ZN7b2World13DrawDebugDataEv","__ZNK12b2BroadPhase10GetFatAABBEi","__ZNK7b2World13GetProxyCountEv","__ZNK7b2World13GetTreeHeightEv","__ZNK12b2BroadPhase13GetTreeHeightEv","__ZNK7b2World14GetTreeBalanceEv","__ZNK12b2BroadPhase14GetTreeBalanceEv","__ZNK7b2World14GetTreeQualityEv","__ZNK12b2BroadPhase14GetTreeQualityEv","__ZN7b2World4DumpEv","__ZN9b2ContactD2Ev","__ZN7b2ColorC2Efff","__ZNK9b2Fixture13GetFilterDataEv","__ZNK6b2AABB9GetCenterEv","__ZNK6b2AABB10GetExtentsEv","__ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi","__ZNK12b2BroadPhase11GetUserDataEi","__ZN15b2RayCastOutputC1Ev","__ZNK9b2Fixture7RayCastEP15b2RayCastOutputRK14b2RayCastInputi","__ZN15b2RayCastOutputC2Ev","__ZN19b2WorldQueryWrapper13QueryCallbackEi","__ZN14b2RayCastInputC2Ev","__ZN10b2TOIInputC2Ev","__ZN16b2ContactManagerD2Ev","__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_","__ZN15b2ContactFilterD0Ev","__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput","__ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB","__ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i","__ZN23b2ChainAndCircleContactD1Ev","__ZN23b2ChainAndCircleContactD0Ev","__ZN23b2ChainAndCircleContactD2Ev","__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN24b2ChainAndPolygonContactD1Ev","__ZN24b2ChainAndPolygonContactD0Ev","__ZN24b2ChainAndPolygonContactD2Ev","__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN15b2CircleContactD1Ev","__ZN15b2CircleContactD0Ev","__ZN15b2CircleContactD2Ev","__ZN9b2Contact19InitializeRegistersEv","__ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_","__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN9b2Contact7DestroyEPS_P16b2BlockAllocator","__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i","__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN15b2CircleContactC2EP9b2FixtureS1_","__Z16b2MixRestitutionff","__ZN9b2Contact11GetManifoldEv","__ZN7b2Mat227SetZeroEv","__ZN9b2ContactC2EP9b2FixtureiS1_i","__ZN10b2ManifoldC1Ev","__Z13b2MixFrictionff","__ZN9b2Contact6UpdateEP17b2ContactListener","__ZN9b2ContactD1Ev","__ZN9b2ContactD0Ev","__ZN10b2ManifoldC2Ev","__ZN15b2ManifoldPointC1Ev","__ZN15b2ManifoldPointC2Ev","__ZN15b2ContactSolverC2EP18b2ContactSolverDef","__ZN15b2ContactSolverD2Ev","__ZN15b2ContactSolver29InitializeVelocityConstraintsEv","__ZN15b2WorldManifoldC1Ev","__ZNK7b2Mat2210GetInverseEv","__ZN15b2ContactSolver9WarmStartEv","__ZN15b2ContactSolver24SolveVelocityConstraintsEv","__Z5b2MulRK7b2Mat22RK6b2Vec2","__ZN15b2ContactSolver13StoreImpulsesEv","__ZN15b2ContactSolver24SolvePositionConstraintsEv","__ZN24b2PositionSolverManifoldC1Ev","__ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i","__ZN15b2ContactSolver27SolveTOIPositionConstraintsEii","__ZN24b2PositionSolverManifoldC2Ev","__ZN7b2Mat22C1Ev","__ZN7b2Mat22C2Ev","__ZN15b2WorldManifoldC2Ev","__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_","__ZN7b2JointD2Ev","__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN22b2EdgeAndCircleContactD1Ev","__ZN22b2EdgeAndCircleContactD0Ev","__ZN22b2EdgeAndCircleContactD2Ev","__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN23b2EdgeAndPolygonContactD1Ev","__ZN23b2EdgeAndPolygonContactD0Ev","__ZN23b2EdgeAndPolygonContactD2Ev","__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN25b2PolygonAndCircleContactD1Ev","__ZN25b2PolygonAndCircleContactD0Ev","__ZN25b2PolygonAndCircleContactD2Ev","__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN16b2PolygonContactD1Ev","__ZN16b2PolygonContactD0Ev","__ZN16b2PolygonContactD2Ev","__ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_","__ZNK6b2Body13GetLocalPointERK6b2Vec2","__ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_","__ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_","__ZN16b2PolygonContactC2EP9b2FixtureS1_","__ZN15b2DistanceJointC2EPK18b2DistanceJointDef","__ZNK15b2DistanceJoint17GetReactionTorqueEf","__ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData","__ZN5b2RotC1Ef","__ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK15b2DistanceJoint10GetAnchorAEv","__ZNK6b2Body13GetWorldPointERK6b2Vec2","__ZNK15b2DistanceJoint10GetAnchorBEv","__ZNK15b2DistanceJoint16GetReactionForceEf","__ZN15b2DistanceJoint4DumpEv","__ZN15b2DistanceJointD1Ev","__ZN15b2DistanceJointD0Ev","__ZN15b2DistanceJointD2Ev","__ZN5b2RotC2Ef","__ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK15b2FrictionJoint17GetReactionTorqueEf","__ZNK15b2FrictionJoint11GetMaxForceEv","__ZNK15b2FrictionJoint12GetMaxTorqueEv","__ZN18b2FrictionJointDef10InitializeEP6b2BodyS1_RK6b2Vec2","__ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData","__ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK15b2FrictionJoint10GetAnchorAEv","__ZNK15b2FrictionJoint10GetAnchorBEv","__ZNK15b2FrictionJoint16GetReactionForceEf","__ZN15b2FrictionJoint11SetMaxForceEf","__ZN15b2FrictionJoint12SetMaxTorqueEf","__ZN15b2FrictionJoint4DumpEv","__ZN15b2FrictionJointD1Ev","__ZN15b2FrictionJointC2EPK18b2FrictionJointDef","__ZN15b2FrictionJointD0Ev","__ZN15b2FrictionJointD2Ev","__ZN11b2GearJointC2EPK14b2GearJointDef","__ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData","__ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK11b2GearJoint17GetReactionTorqueEf","__ZNK11b2GearJoint8GetRatioEv","__ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK11b2GearJoint10GetAnchorAEv","__ZNK11b2GearJoint10GetAnchorBEv","__ZNK11b2GearJoint16GetReactionForceEf","__ZN11b2GearJoint8SetRatioEf","__ZN11b2GearJoint4DumpEv","__ZN11b2GearJointD1Ev","__ZN11b2GearJointD0Ev","__ZN11b2GearJointD2Ev","__ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator","__ZNK12b2MouseJoint9GetTargetEv","__ZN12b2MouseJoint11SetMaxForceEf","__ZNK12b2MouseJoint11GetMaxForceEv","__ZN12b2MouseJoint12SetFrequencyEf","__ZNK12b2MouseJoint12GetFrequencyEv","__ZN12b2MouseJoint15SetDampingRatioEf","__ZNK12b2MouseJoint15GetDampingRatioEv","__ZNK6b2Body7GetMassEv","__ZN7b2Joint7DestroyEPS_P16b2BlockAllocator","__ZN7b2JointC2EPK10b2JointDef","__ZNK7b2Joint8IsActiveEv","__ZN7b2Joint4DumpEv","__ZN7b2JointD1Ev","__ZN7b2JointD0Ev","__ZN12b2MouseJoint9SetTargetERK6b2Vec2","__ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData","__ZN12b2MouseJointC2EPK15b2MouseJointDef","__ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK12b2MouseJoint17GetReactionTorqueEf","__ZNK6b2Body8GetAngleEv","__ZN6b2Vec37SetZeroEv","__ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK12b2MouseJoint10GetAnchorAEv","__ZNK12b2MouseJoint10GetAnchorBEv","__ZNK12b2MouseJoint16GetReactionForceEf","__ZN12b2MouseJoint4DumpEv","__ZN12b2MouseJointD1Ev","__ZN12b2MouseJointD0Ev","__ZN12b2MouseJointD2Ev","__ZN19b2PrismaticJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_","__ZNK6b2Body14GetLocalVectorERK6b2Vec2","__ZN7b2Mat33C1Ev","__ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef","__ZN6b2Vec33SetEfff","__ZN6b2Vec3mLEf","__ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData","__ZN6b2Vec3pLERKS_","__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK6b2Vec3ngEv","__ZmiRK6b2Vec3S1_","__Z7b2Mul22RK7b2Mat33RK6b2Vec2","__ZNK16b2PrismaticJoint17GetReactionTorqueEf","__ZNK16b2PrismaticJoint14IsLimitEnabledEv","__ZNK16b2PrismaticJoint13GetLowerLimitEv","__ZNK16b2PrismaticJoint13GetUpperLimitEv","__ZNK16b2PrismaticJoint14IsMotorEnabledEv","__ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK7b2Mat225SolveERK6b2Vec2","__ZNK16b2PrismaticJoint10GetAnchorAEv","__ZNK16b2PrismaticJoint10GetAnchorBEv","__ZNK16b2PrismaticJoint16GetReactionForceEf","__ZNK16b2PrismaticJoint19GetJointTranslationEv","__ZNK6b2Body14GetWorldVectorERK6b2Vec2","__ZNK16b2PrismaticJoint13GetJointSpeedEv","__ZN16b2PrismaticJoint11EnableLimitEb","__ZN16b2PrismaticJoint9SetLimitsEff","__ZN16b2PrismaticJoint11EnableMotorEb","__ZN16b2PrismaticJoint13SetMotorSpeedEf","__ZNK16b2PrismaticJoint13GetMotorForceEf","__ZN16b2PrismaticJoint16SetMaxMotorForceEf","__ZN16b2PrismaticJoint4DumpEv","__ZN16b2PrismaticJointD1Ev","__ZN16b2PrismaticJointD0Ev","__ZN16b2PrismaticJointD2Ev","__ZN7b2Mat33C2Ev","__ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f","__ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData","__ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN13b2PulleyJointC2EPK16b2PulleyJointDef","__ZNK13b2PulleyJoint17GetReactionTorqueEf","__ZNK13b2PulleyJoint8GetRatioEv","__ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK13b2PulleyJoint10GetAnchorAEv","__ZNK13b2PulleyJoint10GetAnchorBEv","__ZNK13b2PulleyJoint16GetReactionForceEf","__ZNK13b2PulleyJoint16GetGroundAnchorAEv","__ZNK13b2PulleyJoint16GetGroundAnchorBEv","__ZNK13b2PulleyJoint10GetLengthAEv","__ZNK13b2PulleyJoint10GetLengthBEv","__ZN13b2PulleyJoint4DumpEv","__ZN13b2PulleyJointD1Ev","__ZN13b2PulleyJointD0Ev","__ZN13b2PulleyJointD2Ev","__ZN18b2RevoluteJointDef10InitializeEP6b2BodyS1_RK6b2Vec2","__ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef","__ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData","__ZNK15b2RevoluteJoint17GetReactionTorqueEf","__ZNK15b2RevoluteJoint13GetJointAngleEv","__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK15b2RevoluteJoint10GetAnchorAEv","__ZNK15b2RevoluteJoint10GetAnchorBEv","__ZNK15b2RevoluteJoint16GetReactionForceEf","__ZNK15b2RevoluteJoint13GetJointSpeedEv","__ZNK15b2RevoluteJoint14IsMotorEnabledEv","__ZNK15b2RevoluteJoint14GetMotorTorqueEf","__ZNK15b2RevoluteJoint14IsLimitEnabledEv","__ZNK15b2RevoluteJoint13GetLowerLimitEv","__ZNK15b2RevoluteJoint13GetUpperLimitEv","__ZN15b2RevoluteJoint11EnableMotorEb","__ZN15b2RevoluteJoint13SetMotorSpeedEf","__ZN15b2RevoluteJoint17SetMaxMotorTorqueEf","__ZN15b2RevoluteJoint11EnableLimitEb","__ZN15b2RevoluteJoint9SetLimitsEff","__ZN15b2RevoluteJoint4DumpEv","__ZN15b2RevoluteJointD1Ev","__ZN15b2RevoluteJointD0Ev","__ZN15b2RevoluteJointD2Ev","__ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData","__ZN11b2RopeJointC2EPK14b2RopeJointDef","__ZNK11b2RopeJoint17GetReactionTorqueEf","__ZNK11b2RopeJoint12GetMaxLengthEv","__ZNK11b2RopeJoint13GetLimitStateEv","__ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK11b2RopeJoint10GetAnchorAEv","__ZNK11b2RopeJoint10GetAnchorBEv","__ZNK11b2RopeJoint16GetReactionForceEf","__ZN11b2RopeJoint4DumpEv","__ZN11b2RopeJointD1Ev","__ZN11b2RopeJointD0Ev","__ZN11b2RopeJointD2Ev","__ZN14b2WeldJointDef10InitializeEP6b2BodyS1_RK6b2Vec2","__ZN11b2WeldJointC2EPK14b2WeldJointDef","__ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData","__ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData","__Z5b2MulRK7b2Mat33RK6b2Vec3","__ZNK11b2WeldJoint17GetReactionTorqueEf","__ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK11b2WeldJoint10GetAnchorAEv","__ZNK11b2WeldJoint10GetAnchorBEv","__ZNK11b2WeldJoint16GetReactionForceEf","__ZN11b2WeldJoint4DumpEv","__ZN11b2WeldJointD1Ev","__ZN11b2WeldJointD0Ev","__ZN11b2WeldJointD2Ev","__ZplRK6b2Vec3S1_","__ZmlfRK6b2Vec3","__ZN15b2WheelJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_","__ZN12b2WheelJointC2EPK15b2WheelJointDef","__ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData","__ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK12b2WheelJoint17GetReactionTorqueEf","__ZNK12b2WheelJoint13GetJointSpeedEv","__ZNK12b2WheelJoint14IsMotorEnabledEv","__ZNK12b2WheelJoint14GetMotorTorqueEf","__ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK12b2WheelJoint10GetAnchorAEv","__ZNK12b2WheelJoint10GetAnchorBEv","__ZNK12b2WheelJoint16GetReactionForceEf","__ZNK12b2WheelJoint19GetJointTranslationEv","__ZN12b2WheelJoint11EnableMotorEb","__ZN12b2WheelJoint13SetMotorSpeedEf","__ZN12b2WheelJoint17SetMaxMotorTorqueEf","__ZN12b2WheelJoint4DumpEv","__ZN12b2WheelJointD1Ev","__ZN12b2WheelJointD0Ev","__ZN12b2WheelJointD2Ev","__ZN6b2RopeC2Ev","__ZN6b2RopeD2Ev","__ZN6b2Rope10InitializeEPK9b2RopeDef","__ZN6b2Rope8SetAngleEf","_emscripten_bind_b2ContactManager__get_m_contactFilter_p0","_emscripten_bind_b2ContactManager__get_m_contactCount_p0","_emscripten_bind_b2ContactManager__set_m_contactFilter_p1","_emscripten_bind_b2ContactManager__set_m_allocator_p1","_emscripten_bind_b2ContactManager__set_m_contactCount_p1","_emscripten_bind_b2ContactManager__set_m_contactList_p1","_emscripten_bind_b2ContactManager__get_m_contactListener_p0","_emscripten_bind_b2ContactManager__set_m_contactListener_p1","_emscripten_bind_b2ContactManager__get_m_broadPhase_p0","_emscripten_bind_b2ContactManager__get_m_contactList_p0","_emscripten_bind_b2ContactManager__get_m_allocator_p0","__ZNK9b2Fixture14GetRestitutionEv","__ZN9b2Fixture11SetFrictionEf","__ZN9b2Fixture14SetRestitutionEf","__ZN6b2Rope4StepEfi","__ZN6b2Rope7SolveC2Ev","__ZN6b2Rope7SolveC3Ev","__ZNK6b2Vec24SkewEv","__ZNK6b2Rope4DrawEP6b2Draw","_emscripten_bind_b2ContactManager__b2ContactManager_p0","_emscripten_bind_b2ContactManager__AddPair_p2","_emscripten_bind_b2ContactManager__Collide_p0","_emscripten_bind_b2ContactManager__FindNewContacts_p0","_emscripten_bind_b2ContactManager____destroy___p0","_emscripten_bind_b2ContactManager__Destroy_p1","_emscripten_bind_b2ContactManager__set_m_broadPhase_p1","_emscripten_bind_b2Fixture__GetRestitution_p0","_emscripten_bind_b2Fixture__SetFilterData_p1","_emscripten_bind_b2Fixture__SetFriction_p1","_emscripten_bind_b2Fixture__b2Fixture_p0","_emscripten_bind_b2Fixture__GetShape_p0","_emscripten_bind_b2Fixture__SetRestitution_p1","__ZNK9b2Fixture11GetFrictionEv","__ZNK9b2Fixture11GetUserDataEv","__ZN9b2Fixture10SetDensityEf","__ZNK9b2Fixture7GetAABBEi","__ZN9b2Fixture11SetUserDataEPv","__ZNK9b2Fixture10GetDensityEv","__ZN7b2World14SetSubSteppingEb","__ZNK7b2World10GetProfileEv","__ZNK7b2World14GetSubSteppingEv","__ZNK7b2World17GetContactManagerEv","__ZN7b2World20SetContinuousPhysicsEb","__ZNK7b2World12GetBodyCountEv","__ZNK7b2World18GetAutoClearForcesEv","__ZNK7b2World20GetContinuousPhysicsEv","__ZN7b2World12GetJointListEv","__ZN7b2World11GetBodyListEv","__ZNK7b2World13GetJointCountEv","__ZNK7b2World15GetWarmStartingEv","__ZNK7b2World16GetAllowSleepingEv","__ZN7b2World14GetContactListEv","__ZN7b2World18SetAutoClearForcesEb","_emscripten_bind_b2Fixture__GetBody_p0","_emscripten_bind_b2Fixture__GetNext_p0","_emscripten_bind_b2Fixture__GetFriction_p0","_emscripten_bind_b2Fixture__GetUserData_p0","_emscripten_bind_b2Fixture__SetDensity_p1","_emscripten_bind_b2Fixture__GetMassData_p1","_emscripten_bind_b2Fixture__SetSensor_p1","_emscripten_bind_b2Fixture__GetAABB_p1","_emscripten_bind_b2Fixture__TestPoint_p1","__ZNK9b2Fixture9TestPointERK6b2Vec2","_emscripten_bind_b2Fixture__SetUserData_p1","_emscripten_bind_b2Fixture____destroy___p0","_emscripten_bind_b2Fixture__RayCast_p3","_emscripten_bind_b2Fixture__Refilter_p0","_emscripten_bind_b2Fixture__Dump_p1","_emscripten_bind_b2Fixture__GetFilterData_p0","_emscripten_bind_b2Fixture__IsSensor_p0","_emscripten_bind_b2Fixture__GetType_p0","_emscripten_bind_b2Fixture__GetDensity_p0","_emscripten_bind_b2BroadPhase__GetTreeQuality_p0","_emscripten_bind_b2BroadPhase__GetFatAABB_p1","_emscripten_bind_b2BroadPhase__GetUserData_p1","_emscripten_bind_b2BroadPhase____destroy___p0","_emscripten_bind_b2BroadPhase__GetTreeHeight_p0","_emscripten_bind_b2BroadPhase__b2BroadPhase_p0","_emscripten_bind_b2BroadPhase__GetProxyCount_p0","_emscripten_bind_b2BroadPhase__GetTreeBalance_p0","_emscripten_bind_b2BroadPhase__TestOverlap_p2","_emscripten_bind_b2BroadPhase__TouchProxy_p1","_emscripten_bind_b2BroadPhase__CreateProxy_p2","_emscripten_bind_b2BroadPhase__MoveProxy_p3","_emscripten_bind_b2BroadPhase__DestroyProxy_p1","_emscripten_bind_b2World__QueryAABB_p2","_emscripten_bind_b2World__SetSubStepping_p1","_emscripten_bind_b2World__GetTreeQuality_p0","_emscripten_bind_b2World__GetTreeHeight_p0","_emscripten_bind_b2World__GetProfile_p0","_emscripten_bind_b2World__GetTreeBalance_p0","_emscripten_bind_b2World__GetSubStepping_p0","_emscripten_bind_b2World__GetContactManager_p0","_emscripten_bind_b2World__SetContactListener_p1","_emscripten_bind_b2World__DrawDebugData_p0","_emscripten_bind_b2World__SetContinuousPhysics_p1","_emscripten_bind_b2World__SetGravity_p1","__ZN7b2World10SetGravityERK6b2Vec2","_emscripten_bind_b2World__GetBodyCount_p0","_emscripten_bind_b2World__GetAutoClearForces_p0","_emscripten_bind_b2World__GetContinuousPhysics_p0","_emscripten_bind_b2World__GetJointList_p0","_emscripten_bind_b2World__CreateBody_p1","_emscripten_bind_b2World__GetBodyList_p0","_emscripten_bind_b2World__SetDestructionListener_p1","_emscripten_bind_b2World__DestroyJoint_p1","_emscripten_bind_b2World__b2World_p1","_emscripten_bind_b2World__GetJointCount_p0","_emscripten_bind_b2World__Step_p3","_emscripten_bind_b2World__ClearForces_p0","_emscripten_bind_b2World__GetWarmStarting_p0","_emscripten_bind_b2World__SetAllowSleeping_p1","_emscripten_bind_b2World__DestroyBody_p1","_emscripten_bind_b2World__GetAllowSleeping_p0","_emscripten_bind_b2World__CreateJoint_p1","_emscripten_bind_b2World__GetProxyCount_p0","_emscripten_bind_b2World__RayCast_p3","_emscripten_bind_b2World__IsLocked_p0","_emscripten_bind_b2World__GetContactList_p0","_emscripten_bind_b2World__SetDebugDraw_p1","_emscripten_bind_b2World____destroy___p0","_emscripten_bind_b2World__Dump_p0","_emscripten_bind_b2World__SetAutoClearForces_p1","__ZNK13b2CircleShape14GetVertexCountEv","__ZNK13b2CircleShape10GetSupportERK6b2Vec2","__ZNK7b2World15GetContactCountEv","__ZN7b2World15SetWarmStartingEb","_emscripten_bind_b2CircleShape__set_m_radius_p1","_emscripten_bind_b2CircleShape__get_m_radius_p0","__ZNK13b2CircleShape9GetVertexEi","__ZNK13b2CircleShape16GetSupportVertexERK6b2Vec2","_emscripten_bind_b2CircleShape__get_m_p_p0","__ZNK7b2Joint11GetUserDataEv","__ZN7b2Joint11SetUserDataEPv","__ZNK7b2Joint19GetCollideConnectedEv","_emscripten_bind_b2World__GetGravity_p0","__ZNK7b2World10GetGravityEv","_emscripten_bind_b2World__GetContactCount_p0","_emscripten_bind_b2World__SetWarmStarting_p1","_emscripten_bind_b2World__SetContactFilter_p1","_emscripten_bind_b2CircleShape____destroy___p0","_emscripten_bind_b2CircleShape__GetType_p0","_emscripten_bind_b2CircleShape__ComputeMass_p2","_emscripten_bind_b2CircleShape__GetVertex_p1","_emscripten_bind_b2CircleShape__Clone_p1","_emscripten_bind_b2CircleShape__GetSupportVertex_p1","_emscripten_bind_b2CircleShape__RayCast_p4","_emscripten_bind_b2CircleShape__ComputeAABB_p3","_emscripten_bind_b2CircleShape__GetVertexCount_p0","_emscripten_bind_b2CircleShape__GetChildCount_p0","_emscripten_bind_b2CircleShape__TestPoint_p2","_emscripten_bind_b2CircleShape__b2CircleShape_p0","_emscripten_bind_b2CircleShape__GetSupport_p1","_emscripten_bind_b2CircleShape__set_m_p_p1","_emscripten_bind_b2Draw__AppendFlags_p1","_emscripten_bind_b2Draw__DrawTransform_p1","_emscripten_bind_b2Draw__ClearFlags_p1","_emscripten_bind_b2Draw__DrawPolygon_p3","_emscripten_bind_b2Draw__DrawSolidCircle_p4","_emscripten_bind_b2Draw__DrawSolidPolygon_p3","_emscripten_bind_b2Draw__DrawCircle_p3","_emscripten_bind_b2Draw__SetFlags_p1","_emscripten_bind_b2Draw__DrawSegment_p3","_emscripten_bind_b2Draw__GetFlags_p0","_emscripten_bind_b2Joint__GetNext_p0","_emscripten_bind_b2Joint__GetBodyA_p0","_emscripten_bind_b2Joint__GetBodyB_p0","_emscripten_bind_b2Joint__GetReactionTorque_p1","_emscripten_bind_b2Joint__GetAnchorA_p0","_emscripten_bind_b2Joint__GetUserData_p0","_emscripten_bind_b2Joint__GetType_p0","_emscripten_bind_b2Joint__SetUserData_p1","_emscripten_bind_b2Joint__GetCollideConnected_p0","_emscripten_bind_b2Joint__Dump_p0","_emscripten_bind_b2Joint__GetAnchorB_p0","_emscripten_bind_b2Joint__GetReactionForce_p1","_emscripten_bind_b2Joint__IsActive_p0","_emscripten_bind_b2RayCastCallback__ReportFixture_p4","_emscripten_bind_b2DynamicTree____destroy___p0","_emscripten_bind_b2DynamicTree__b2DynamicTree_p0","_emscripten_bind_b2DynamicTree__GetFatAABB_p1","_emscripten_bind_b2DynamicTree__GetUserData_p1","_emscripten_bind_b2DynamicTree__GetMaxBalance_p0","_emscripten_bind_b2DynamicTree__GetHeight_p0","_emscripten_bind_b2DynamicTree__GetAreaRatio_p0","_emscripten_bind_b2DynamicTree__RebuildBottomUp_p0","_emscripten_bind_b2DynamicTree__CreateProxy_p2","_emscripten_bind_b2DynamicTree__MoveProxy_p3","_emscripten_bind_b2DynamicTree__Validate_p0","_emscripten_bind_b2DynamicTree__DestroyProxy_p1","_emscripten_bind_b2ChainShape__set_m_radius_p1","_emscripten_bind_b2ChainShape__get_m_radius_p0","_emscripten_bind_b2ChainShape__get_m_vertices_p0","_emscripten_bind_b2ChainShape__get_m_count_p0","_emscripten_bind_b2ChainShape__set_m_vertices_p1","_emscripten_bind_b2ChainShape__set_m_count_p1","_emscripten_bind_b2PolygonShape__set_m_radius_p1","_emscripten_bind_b2PolygonShape__get_m_radius_p0","__ZNK14b2PolygonShape9GetVertexEi","_emscripten_bind_b2PolygonShape__set_m_vertexCount_p1","__ZNK14b2PolygonShape14GetVertexCountEv","_emscripten_bind_b2PolygonShape__get_m_vertexCount_p0","_emscripten_bind_b2PolygonShape__get_m_centroid_p0","_emscripten_bind_b2EdgeShape__set_m_radius_p1","_emscripten_bind_b2EdgeShape__get_m_radius_p0","_emscripten_bind_b2Timer__b2Timer_p0","_emscripten_bind_b2Timer__Reset_p0","_emscripten_bind_b2Timer____destroy___p0","_emscripten_bind_b2Timer__GetMilliseconds_p0","_emscripten_bind_b2ContactListener____destroy___p0","_emscripten_bind_b2ContactListener__b2ContactListener_p0","_emscripten_bind_b2ContactListener__EndContact_p1","_emscripten_bind_b2ContactListener__BeginContact_p1","_emscripten_bind_b2ContactListener__PreSolve_p2","_emscripten_bind_b2ContactListener__PostSolve_p2","_emscripten_bind_b2ChainShape____destroy___p0","_emscripten_bind_b2ChainShape__GetType_p0","_emscripten_bind_b2ChainShape__CreateChain_p2","_emscripten_bind_b2ChainShape__ComputeMass_p2","_emscripten_bind_b2ChainShape__Clone_p1","_emscripten_bind_b2ChainShape__GetChildEdge_p2","_emscripten_bind_b2ChainShape__b2ChainShape_p0","_emscripten_bind_b2ChainShape__ComputeAABB_p3","_emscripten_bind_b2ChainShape__RayCast_p4","_emscripten_bind_b2ChainShape__GetChildCount_p0","_emscripten_bind_b2ChainShape__TestPoint_p2","_emscripten_bind_b2ChainShape__SetPrevVertex_p1","_emscripten_bind_b2ChainShape__CreateLoop_p2","_emscripten_bind_b2ChainShape__SetNextVertex_p1","_emscripten_bind_b2QueryCallback__ReportFixture_p1","_emscripten_bind_b2BlockAllocator____destroy___p0","_emscripten_bind_b2BlockAllocator__Clear_p0","_emscripten_bind_b2BlockAllocator__Free_p2","_emscripten_bind_b2BlockAllocator__Allocate_p1","_emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0","_emscripten_bind_b2PolygonShape____destroy___p0","_emscripten_bind_b2PolygonShape__Set_p2","_emscripten_bind_b2PolygonShape__ComputeMass_p2","_emscripten_bind_b2PolygonShape__Clone_p1","_emscripten_bind_b2PolygonShape__GetVertex_p1","_emscripten_bind_b2PolygonShape__RayCast_p4","_emscripten_bind_b2PolygonShape__SetAsBox_p2","_emscripten_bind_b2PolygonShape__SetAsBox_p4","_emscripten_bind_b2PolygonShape__set_m_centroid_p1","_emscripten_bind_b2PolygonShape__ComputeAABB_p3","_emscripten_bind_b2PolygonShape__GetVertexCount_p0","_emscripten_bind_b2PolygonShape__GetChildCount_p0","_emscripten_bind_b2PolygonShape__TestPoint_p2","_emscripten_bind_b2PolygonShape__GetType_p0","_emscripten_bind_b2PolygonShape__b2PolygonShape_p0","_emscripten_bind_b2EdgeShape____destroy___p0","_emscripten_bind_b2EdgeShape__Set_p2","_emscripten_bind_b2EdgeShape__ComputeMass_p2","_emscripten_bind_b2EdgeShape__Clone_p1","_emscripten_bind_b2EdgeShape__GetType_p0","_emscripten_bind_b2EdgeShape__RayCast_p4","_emscripten_bind_b2EdgeShape__ComputeAABB_p3","_emscripten_bind_b2EdgeShape__GetChildCount_p0","__ZNK9b2Contact14GetRestitutionEv","__ZNK9b2Contact11GetFrictionEv","__ZN9b2Contact11SetFrictionEf","__ZN9b2Contact14SetRestitutionEf","_emscripten_bind_b2Shape__get_m_radius_p0","_emscripten_bind_b2Shape__set_m_radius_p1","__ZNK6b2Body11GetUserDataEv","__ZNK6b2Body17IsSleepingAllowedEv","__ZN6b2Body17SetAngularDampingEf","__ZN6b2Body15SetGravityScaleEf","__ZN6b2Body11SetUserDataEPv","__ZNK6b2Body18GetAngularVelocityEv","__ZN6b2Body12GetJointListEv","_emscripten_bind_b2EdgeShape__TestPoint_p2","_emscripten_bind_b2EdgeShape__b2EdgeShape_p0","_emscripten_bind_b2Contact__GetNext_p0","_emscripten_bind_b2Contact__SetEnabled_p1","_emscripten_bind_b2Contact__GetWorldManifold_p1","__ZNK9b2Contact16GetWorldManifoldEP15b2WorldManifold","_emscripten_bind_b2Contact__GetRestitution_p0","_emscripten_bind_b2Contact__ResetFriction_p0","__ZN9b2Contact13ResetFrictionEv","_emscripten_bind_b2Contact__GetFriction_p0","_emscripten_bind_b2Contact__IsTouching_p0","_emscripten_bind_b2Contact__IsEnabled_p0","_emscripten_bind_b2Contact__GetFixtureB_p0","_emscripten_bind_b2Contact__SetFriction_p1","_emscripten_bind_b2Contact__GetFixtureA_p0","_emscripten_bind_b2Contact__GetChildIndexA_p0","_emscripten_bind_b2Contact__GetChildIndexB_p0","_emscripten_bind_b2Contact__Evaluate_p3","_emscripten_bind_b2Contact__SetRestitution_p1","_emscripten_bind_b2Contact__GetManifold_p0","_emscripten_bind_b2Contact__ResetRestitution_p0","__ZN9b2Contact16ResetRestitutionEv","_emscripten_bind_b2Shape__ComputeMass_p2","_emscripten_bind_b2Shape__Clone_p1","_emscripten_bind_b2Shape__GetType_p0","_emscripten_bind_b2Shape__RayCast_p4","_emscripten_bind_b2Shape__ComputeAABB_p3","_emscripten_bind_b2Shape__GetChildCount_p0","_emscripten_bind_b2Shape__TestPoint_p2","_emscripten_bind_b2Body__GetAngle_p0","_emscripten_bind_b2Body__GetUserData_p0","_emscripten_bind_b2Body__IsSleepingAllowed_p0","_emscripten_bind_b2Body__SetAngularDamping_p1","_emscripten_bind_b2Body__SetActive_p1","_emscripten_bind_b2Body__SetGravityScale_p1","_emscripten_bind_b2Body__SetUserData_p1","_emscripten_bind_b2Body__GetAngularVelocity_p0","_emscripten_bind_b2Body__GetFixtureList_p0","_emscripten_bind_b2Body__ApplyForce_p2","__ZN6b2Body10ApplyForceERK6b2Vec2S2_","_emscripten_bind_b2Body__GetLocalPoint_p1","_emscripten_bind_b2Body__SetLinearVelocity_p1","__ZN6b2Body17SetLinearVelocityERK6b2Vec2","_emscripten_bind_b2Body__GetJointList_p0","_emscripten_bind_b2Body__GetLinearVelocity_p0","__ZNK6b2Body17GetLinearVelocityEv","_emscripten_bind_b2Body__GetNext_p0","_emscripten_bind_b2Body__SetSleepingAllowed_p1","__ZN6b2Body18SetSleepingAllowedEb","_emscripten_bind_b2Body__SetTransform_p2","_emscripten_bind_b2Body__GetMass_p0","_emscripten_bind_b2Body__SetAngularVelocity_p1","__ZN6b2Body18SetAngularVelocityEf","_emscripten_bind_b2Body__GetMassData_p1","__ZNK6b2Body11GetMassDataEP10b2MassData","__ZNK6b2Body17GetAngularDampingEv","__ZNK6b2Body15IsFixedRotationEv","__ZNK6b2Body14GetLocalCenterEv","__ZNK6b2Body16GetLinearDampingEv","__ZN6b2Body16SetLinearDampingEf","__ZN6b2Body9SetBulletEb","__ZNK6b2Body15GetGravityScaleEv","__ZNK6b2Body11GetPositionEv","_emscripten_bind_b2Filter__set_maskBits_p1","_emscripten_bind_b2Filter__set_categoryBits_p1","_emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1","__ZNK6b2Body31GetLinearVelocityFromWorldPointERK6b2Vec2","_emscripten_bind_b2Body__ResetMassData_p0","_emscripten_bind_b2Body__ApplyForceToCenter_p1","__ZN6b2Body18ApplyForceToCenterERK6b2Vec2","_emscripten_bind_b2Body__ApplyTorque_p1","__ZN6b2Body11ApplyTorqueEf","_emscripten_bind_b2Body__IsAwake_p0","_emscripten_bind_b2Body__SetType_p1","_emscripten_bind_b2Body__CreateFixture_p1","_emscripten_bind_b2Body__CreateFixture_p2","_emscripten_bind_b2Body__SetMassData_p1","_emscripten_bind_b2Body__GetTransform_p0","_emscripten_bind_b2Body__GetWorldCenter_p0","_emscripten_bind_b2Body__GetAngularDamping_p0","_emscripten_bind_b2Body__ApplyLinearImpulse_p2","__ZN6b2Body18ApplyLinearImpulseERK6b2Vec2S2_","_emscripten_bind_b2Body__IsFixedRotation_p0","_emscripten_bind_b2Body__GetLocalCenter_p0","_emscripten_bind_b2Body__GetWorldVector_p1","_emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1","__ZNK6b2Body31GetLinearVelocityFromLocalPointERK6b2Vec2","_emscripten_bind_b2Body__GetContactList_p0","_emscripten_bind_b2Body__GetWorldPoint_p1","_emscripten_bind_b2Body__SetAwake_p1","_emscripten_bind_b2Body__GetLinearDamping_p0","_emscripten_bind_b2Body__IsBullet_p0","_emscripten_bind_b2Body__GetWorld_p0","_emscripten_bind_b2Body__GetLocalVector_p1","_emscripten_bind_b2Body__SetLinearDamping_p1","_emscripten_bind_b2Body__Dump_p0","_emscripten_bind_b2Body__SetBullet_p1","_emscripten_bind_b2Body__GetType_p0","_emscripten_bind_b2Body__GetGravityScale_p0","_emscripten_bind_b2Body__DestroyFixture_p1","_emscripten_bind_b2Body__GetInertia_p0","__ZNK6b2Body10GetInertiaEv","_emscripten_bind_b2Body__IsActive_p0","_emscripten_bind_b2Body__SetFixedRotation_p1","__ZN6b2Body16SetFixedRotationEb","_emscripten_bind_b2Body__ApplyAngularImpulse_p1","__ZN6b2Body19ApplyAngularImpulseEf","_emscripten_bind_b2Body__GetPosition_p0","_emscripten_bind_b2StackAllocator__GetMaxAllocation_p0","_emscripten_bind_b2StackAllocator____destroy___p0","_emscripten_bind_b2StackAllocator__b2StackAllocator_p0","_emscripten_bind_b2StackAllocator__Allocate_p1","_emscripten_bind_b2StackAllocator__Free_p1","_emscripten_bind_b2DestructionListener__SayGoodbye_p1","_emscripten_bind_b2Filter____destroy___p0","_emscripten_bind_b2Filter__get_groupIndex_p0","_emscripten_bind_b2Filter__set_groupIndex_p1","_emscripten_bind_b2Filter__get_maskBits_p0","_emscripten_bind_b2Filter__get_categoryBits_p0","_emscripten_bind_b2FrictionJointDef__get_maxForce_p0","_emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0","_emscripten_bind_b2FrictionJointDef__set_maxForce_p1","_emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0","_emscripten_bind_b2FrictionJointDef__set_maxTorque_p1","_emscripten_bind_b2FrictionJointDef__get_maxTorque_p0","_emscripten_bind_b2BodyDef__get_linearDamping_p0","_emscripten_bind_b2BodyDef__get_awake_p0","_emscripten_bind_b2BodyDef__get_type_p0","_emscripten_bind_b2BodyDef__get_allowSleep_p0","_emscripten_bind_b2BodyDef__get_bullet_p0","_emscripten_bind_b2BodyDef__get_userData_p0","_emscripten_bind_b2BodyDef__set_angularDamping_p1","_emscripten_bind_b2BodyDef__set_fixedRotation_p1","_emscripten_bind_b2BodyDef__set_allowSleep_p1","_emscripten_bind_b2BodyDef__get_gravityScale_p0","_emscripten_bind_b2BodyDef__set_angularVelocity_p1","_emscripten_bind_b2BodyDef__set_userData_p1","_emscripten_bind_b2BodyDef__get_position_p0","_emscripten_bind_b2BodyDef__set_type_p1","_emscripten_bind_b2BodyDef__set_gravityScale_p1","_emscripten_bind_b2BodyDef__get_angularDamping_p0","_emscripten_bind_b2BodyDef__set_bullet_p1","_emscripten_bind_b2BodyDef__set_active_p1","_emscripten_bind_b2BodyDef__set_angle_p1","_emscripten_bind_b2BodyDef__get_angle_p0","_emscripten_bind_b2BodyDef__get_angularVelocity_p0","_emscripten_bind_b2BodyDef__get_linearVelocity_p0","_emscripten_bind_b2BodyDef__get_active_p0","_emscripten_bind_b2BodyDef__set_linearDamping_p1","_emscripten_bind_b2BodyDef__get_fixedRotation_p0","_emscripten_bind_b2BodyDef__set_awake_p1","_emscripten_bind_b2Vec2__set_x_p1","_emscripten_bind_b2Vec2__get_x_p0","_emscripten_bind_b2Vec2__get_y_p0","_emscripten_bind_b2Vec2__set_y_p1","_emscripten_bind_b2Vec3__set_z_p1","_emscripten_bind_b2Vec3__get_z_p0","_emscripten_bind_b2Filter__b2Filter_p0","_emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1","_emscripten_bind_b2FrictionJointDef____destroy___p0","_emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1","_emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0","__ZN18b2FrictionJointDefC1Ev","_emscripten_bind_b2FrictionJointDef__Initialize_p3","_emscripten_bind_b2BodyDef__set_position_p1","_emscripten_bind_b2BodyDef__set_linearVelocity_p1","_emscripten_bind_b2BodyDef__b2BodyDef_p0","__ZN9b2BodyDefC1Ev","_emscripten_bind_b2BodyDef____destroy___p0","_emscripten_bind_b2Vec2__Normalize_p0","_emscripten_bind_b2Vec2__b2Vec2_p0","_emscripten_bind_b2Vec2__b2Vec2_p2","_emscripten_bind_b2Vec2__Set_p2","_emscripten_bind_b2Vec2__IsValid_p0","_emscripten_bind_b2Vec2__Skew_p0","_emscripten_bind_b2Vec2__LengthSquared_p0","_emscripten_bind_b2Vec2__op_add_p1","_emscripten_bind_b2Vec2__SetZero_p0","_emscripten_bind_b2Vec2__Length_p0","_emscripten_bind_b2Vec2____destroy___p0","_emscripten_bind_b2Vec2__op_mul_p1","_emscripten_bind_b2Vec2__op_sub_p0","_emscripten_bind_b2Vec3____destroy___p0","_emscripten_bind_b2Vec3__Set_p3","_emscripten_bind_b2Vec3__op_add_p1","_emscripten_bind_b2Vec3__SetZero_p0","_emscripten_bind_b2Vec3__b2Vec3_p0","_emscripten_bind_b2Vec3__b2Vec3_p3","_emscripten_bind_b2Vec3__op_mul_p1","_emscripten_bind_b2DistanceProxy__get_m_radius_p0","_emscripten_bind_b2DistanceProxy__set_m_radius_p1","_emscripten_bind_b2DistanceProxy__get_m_vertices_p0","_emscripten_bind_b2DistanceProxy__get_m_count_p0","__ZNK15b2DistanceProxy14GetVertexCountEv","_emscripten_bind_b2DistanceProxy__set_m_vertices_p1","_emscripten_bind_b2DistanceProxy__set_m_count_p1","_emscripten_bind_b2FixtureDef__get_isSensor_p0","_emscripten_bind_b2FixtureDef__set_userData_p1","_emscripten_bind_b2FixtureDef__set_shape_p1","_emscripten_bind_b2FixtureDef__get_density_p0","_emscripten_bind_b2FixtureDef__get_shape_p0","_emscripten_bind_b2FixtureDef__set_density_p1","_emscripten_bind_b2FixtureDef__set_restitution_p1","_emscripten_bind_b2FixtureDef__get_restitution_p0","_emscripten_bind_b2FixtureDef__set_isSensor_p1","_emscripten_bind_b2FixtureDef__get_filter_p0","_emscripten_bind_b2FixtureDef__get_friction_p0","_emscripten_bind_b2FixtureDef__set_friction_p1","_emscripten_bind_b2FixtureDef__get_userData_p0","_emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0","_emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0","_emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0","_emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1","_emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1","_emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0","_emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1","_emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1","_emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0","_emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0","_emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1","_emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0","_emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0","_emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0","_emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1","_emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1","_emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0","_emscripten_bind_b2Rot__set_c_p1","__ZN5b2Rot11SetIdentityEv","_emscripten_bind_b2Rot__get_c_p0","_emscripten_bind_b2Vec3__op_sub_p0","_emscripten_bind_b2DistanceProxy__Set_p2","_emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0","_emscripten_bind_b2DistanceProxy____destroy___p0","_emscripten_bind_b2DistanceProxy__GetSupportVertex_p1","__ZNK15b2DistanceProxy16GetSupportVertexERK6b2Vec2","_emscripten_bind_b2DistanceProxy__GetVertexCount_p0","_emscripten_bind_b2DistanceProxy__GetVertex_p1","_emscripten_bind_b2DistanceProxy__GetSupport_p1","_emscripten_bind_b2FixtureDef____destroy___p0","_emscripten_bind_b2FixtureDef__b2FixtureDef_p0","_emscripten_bind_b2FixtureDef__set_filter_p1","_emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1","_emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1","_emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0","__ZN19b2PrismaticJointDefC1Ev","_emscripten_bind_b2PrismaticJointDef__Initialize_p4","_emscripten_bind_b2PrismaticJointDef____destroy___p0","_emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1","_emscripten_bind_b2Rot____destroy___p0","_emscripten_bind_b2Rot__Set_p1","_emscripten_bind_b2Rot__GetAngle_p0","__ZNK5b2Rot8GetAngleEv","_emscripten_bind_b2Rot__GetYAxis_p0","__ZNK5b2Rot8GetYAxisEv","_emscripten_bind_b2Rot__GetXAxis_p0","__ZNK5b2Rot8GetXAxisEv","_emscripten_bind_b2Rot__SetIdentity_p0","_emscripten_bind_b2Rot__b2Rot_p0","_emscripten_bind_b2Rot__b2Rot_p1","_emscripten_bind_b2WheelJointDef__set_motorSpeed_p1","_emscripten_bind_b2WheelJointDef__get_localAxisA_p0","_emscripten_bind_b2WheelJointDef__get_frequencyHz_p0","_emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1","_emscripten_bind_b2WheelJointDef__get_enableMotor_p0","_emscripten_bind_b2WheelJointDef__get_localAnchorA_p0","_emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0","_emscripten_bind_b2WheelJointDef__get_localAnchorB_p0","_emscripten_bind_b2WheelJointDef__get_dampingRatio_p0","_emscripten_bind_b2WheelJointDef__set_enableMotor_p1","_emscripten_bind_b2WheelJointDef__set_frequencyHz_p1","_emscripten_bind_b2WheelJointDef__set_dampingRatio_p1","_emscripten_bind_b2WheelJointDef__get_motorSpeed_p0","_emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0","_emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1","_emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0","_emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1","_emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0","_emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1","_emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0","_emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1","_emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1","_emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0","_emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0","_emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0","_emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1","_emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1","_emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0","_emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0","_emscripten_bind_b2PulleyJointDef__get_ratio_p0","_emscripten_bind_b2PulleyJointDef__get_lengthB_p0","_emscripten_bind_b2PulleyJointDef__get_lengthA_p0","_emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0","_emscripten_bind_b2PulleyJointDef__set_ratio_p1","_emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0","_emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0","_emscripten_bind_b2PulleyJointDef__set_lengthB_p1","_emscripten_bind_b2PulleyJointDef__set_lengthA_p1","_emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0","_emscripten_bind_b2JointDef__get_bodyA_p0","_emscripten_bind_b2JointDef__set_userData_p1","_emscripten_bind_b2JointDef__set_bodyA_p1","_emscripten_bind_b2JointDef__set_bodyB_p1","_emscripten_bind_b2JointDef__get_bodyB_p0","_emscripten_bind_b2JointDef__set_type_p1","_emscripten_bind_b2JointDef__get_collideConnected_p0","_emscripten_bind_b2JointDef__get_type_p0","_emscripten_bind_b2JointDef__set_collideConnected_p1","_emscripten_bind_b2JointDef__get_userData_p0","_emscripten_bind_b2Transform__get_p_p0","_emscripten_bind_b2Transform__get_q_p0","_emscripten_bind_b2WheelJointDef__set_localAnchorA_p1","_emscripten_bind_b2WheelJointDef__set_localAnchorB_p1","_emscripten_bind_b2WheelJointDef____destroy___p0","_emscripten_bind_b2WheelJointDef__Initialize_p4","_emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0","__ZN15b2WheelJointDefC1Ev","_emscripten_bind_b2WheelJointDef__set_localAxisA_p1","_emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1","_emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1","_emscripten_bind_b2RevoluteJointDef____destroy___p0","_emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0","__ZN18b2RevoluteJointDefC1Ev","_emscripten_bind_b2RevoluteJointDef__Initialize_p3","_emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1","_emscripten_bind_b2PulleyJointDef____destroy___p0","_emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1","_emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1","_emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0","__ZN16b2PulleyJointDefC1Ev","_emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1","_emscripten_bind_b2PulleyJointDef__Initialize_p7","_emscripten_bind_b2JointDef____destroy___p0","_emscripten_bind_b2JointDef__b2JointDef_p0","__ZN10b2JointDefC1Ev","_emscripten_bind_b2Transform____destroy___p0","_emscripten_bind_b2Transform__Set_p2","__ZN11b2Transform3SetERK6b2Vec2f","_emscripten_bind_b2Transform__set_p_p1","_emscripten_bind_b2Transform__set_q_p1","_emscripten_bind_b2Transform__b2Transform_p0","_emscripten_bind_b2Transform__b2Transform_p2","__ZN7b2ColorC2Ev","_emscripten_bind_b2Color__set_b_p1","__ZN7b2Color3SetEfff","_emscripten_bind_b2Color__get_b_p0","_emscripten_bind_b2WeldJointDef__get_frequencyHz_p0","_emscripten_bind_b2WeldJointDef__set_dampingRatio_p1","_emscripten_bind_b2WeldJointDef__set_referenceAngle_p1","_emscripten_bind_b2WeldJointDef__get_localAnchorA_p0","_emscripten_bind_b2WeldJointDef__get_referenceAngle_p0","_emscripten_bind_b2WeldJointDef__get_localAnchorB_p0","_emscripten_bind_b2WeldJointDef__get_dampingRatio_p0","_emscripten_bind_b2WeldJointDef__set_frequencyHz_p1","_emscripten_bind_b2MouseJointDef__get_frequencyHz_p0","_emscripten_bind_b2MouseJointDef__set_dampingRatio_p1","_emscripten_bind_b2MouseJointDef__get_maxForce_p0","_emscripten_bind_b2MouseJointDef__set_maxForce_p1","_emscripten_bind_b2MouseJointDef__get_target_p0","_emscripten_bind_b2MouseJointDef__set_frequencyHz_p1","_emscripten_bind_b2MouseJointDef__get_dampingRatio_p0","_emscripten_bind_b2DistanceJointDef__get_length_p0","_emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0","_emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1","_emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0","_emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0","_emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0","_emscripten_bind_b2DistanceJointDef__set_length_p1","_emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1","_emscripten_bind_b2GearJointDef__set_joint1_p1","_emscripten_bind_b2GearJointDef__set_joint2_p1","_emscripten_bind_b2GearJointDef__set_ratio_p1","_emscripten_bind_b2GearJointDef__get_joint1_p0","_emscripten_bind_b2GearJointDef__get_joint2_p0","_emscripten_bind_b2GearJointDef__get_ratio_p0","_emscripten_bind_b2RopeJointDef__get_maxLength_p0","_emscripten_bind_b2RopeJointDef__get_localAnchorA_p0","_emscripten_bind_b2RopeJointDef__get_localAnchorB_p0","_emscripten_bind_b2RopeJointDef__set_maxLength_p1","__ZN10b2JointDefC2Ev","__ZN11b2TransformC1ERK6b2Vec2RK5b2Rot","_emscripten_bind_b2Transform__SetIdentity_p0","__ZN11b2Transform11SetIdentityEv","_emscripten_bind_b2Color____destroy___p0","_emscripten_bind_b2Color__Set_p3","_emscripten_bind_b2Color__b2Color_p0","__ZN7b2ColorC1Ev","_emscripten_bind_b2Color__b2Color_p3","_emscripten_bind_b2WeldJointDef__set_localAnchorA_p1","_emscripten_bind_b2WeldJointDef____destroy___p0","_emscripten_bind_b2WeldJointDef__set_localAnchorB_p1","_emscripten_bind_b2WeldJointDef__Initialize_p3","_emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0","__ZN14b2WeldJointDefC1Ev","_emscripten_bind_b2MouseJointDef____destroy___p0","_emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0","__ZN15b2MouseJointDefC1Ev","_emscripten_bind_b2MouseJointDef__set_target_p1","_emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1","_emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1","_emscripten_bind_b2DistanceJointDef____destroy___p0","_emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0","__ZN18b2DistanceJointDefC1Ev","_emscripten_bind_b2DistanceJointDef__Initialize_p4","_emscripten_bind_b2GearJointDef____destroy___p0","_emscripten_bind_b2GearJointDef__b2GearJointDef_p0","__ZN14b2GearJointDefC1Ev","_emscripten_bind_b2RopeJointDef__set_localAnchorA_p1","_emscripten_bind_b2RopeJointDef____destroy___p0","_emscripten_bind_b2RopeJointDef__set_localAnchorB_p1","_emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0","__ZN14b2RopeJointDefC1Ev","__ZN14b2RopeJointDefC2Ev","__ZN14b2GearJointDefC2Ev","__ZN18b2DistanceJointDefC2Ev","__ZN15b2MouseJointDefC2Ev","__ZN14b2WeldJointDefC2Ev","__ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv","__ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv","__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv","__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv","__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi","__ZN11b2TransformC2ERK6b2Vec2RK5b2Rot","__ZN16b2PulleyJointDefC2Ev","__ZN18b2RevoluteJointDefC2Ev","__ZN15b2WheelJointDefC2Ev","__ZN19b2PrismaticJointDefC2Ev","__ZN9b2BodyDefC2Ev","__ZN18b2FrictionJointDefC2Ev","__ZN10__cxxabiv116__shim_type_infoD0Ev","__ZN10__cxxabiv116__shim_type_infoD2Ev","__ZN10__cxxabiv123__fundamental_type_infoD0Ev","__ZN10__cxxabiv117__array_type_infoD0Ev","__ZN10__cxxabiv120__function_type_infoD0Ev","__ZN10__cxxabiv116__enum_type_infoD0Ev","__ZN10__cxxabiv117__class_type_infoD0Ev","__ZN10__cxxabiv120__si_class_type_infoD0Ev","__ZN10__cxxabiv121__vmi_class_type_infoD0Ev","__ZN10__cxxabiv117__pbase_type_infoD0Ev","__ZN10__cxxabiv119__pointer_type_infoD0Ev","__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev","__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv","__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi","__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi","__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi","__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv","__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i","__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi","__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi","__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv","___dynamic_cast","__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi","__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i","__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi","__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi","__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvi","__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i","__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i","__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_free","_sys_trim","_calloc","_realloc","_release_unused_segments","_memalign","_internal_memalign","_independent_calloc","_internal_realloc","_malloc_footprint","_malloc_max_footprint","_ialloc","_independent_comalloc","_valloc","_pvalloc","_malloc_trim","_mallinfo","_internal_mallinfo","_malloc_stats","_internal_malloc_stats","_mallopt","_init_mparams","_malloc_usable_size","_mmap_resize","_segment_holding","_init_top","_mmap_alloc","_init_bins","_change_mparam","_prepend_alloc","__ZNKSt9bad_alloc4whatEv","__ZSt15get_new_handlerv","__ZSt15set_new_handlerPFvvE","__ZNSt9bad_allocC2Ev","__ZdlPv","__ZdlPvRKSt9nothrow_t","__ZdaPv","__ZdaPvRKSt9nothrow_t","__ZNSt9bad_allocD0Ev","__ZNSt9bad_allocD2Ev","_add_segment","__Znwj","__ZnwjRKSt9nothrow_t","__Znaj","__ZnajRKSt9nothrow_t","__ZNKSt20bad_array_new_length4whatEv","__ZNSt20bad_array_new_lengthC2Ev","__ZNSt20bad_array_new_lengthD0Ev","__ZSt17__throw_bad_allocv"]


// Bindings utilities

var Object__cache = {}; // we do it this way so we do not modify |Object|
function wrapPointer(ptr, __class__) {
  var cache = __class__ ? __class__.prototype.__cache__ : Object__cache;
  var ret = cache[ptr];
  if (ret) return ret;
  __class__ = __class__ || Object;
  ret = Object.create(__class__.prototype);
  ret.ptr = ptr;
  ret.__class__ = __class__;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  if (obj.__class__ !== Object) {
    delete obj.__class__.prototype.__cache__[obj.ptr];
  } else {
    delete Object__cache[obj.ptr];
  }
}
Module['destroy'] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

function customizeVTable(object, replacementPairs) {
  // Does not handle multiple inheritance

  // Find out vtable size
  var vTable = getValue(object.ptr, 'void*');
  // This assumes our modification where we null-terminate vtables
  var size = 0;
  while (getValue(vTable + Runtime.QUANTUM_SIZE*size, 'void*')) {
    size++;
  }

  // Prepare replacement lookup table and add replacements to FUNCTION_TABLE
  // There is actually no good way to do this! So we do the following hack:
  // We create a fake vtable with canary functions, to detect which actual
  // function is being called
  var vTable2 = _malloc(size*Runtime.QUANTUM_SIZE);
  setValue(object.ptr, vTable2, 'void*');
  var canaryValue;
  var functions = FUNCTION_TABLE.length;
  for (var i = 0; i < size; i++) {
    var index = FUNCTION_TABLE.length;
    (function(j) {
      FUNCTION_TABLE.push(function() {
        canaryValue = j;
      });
    })(i);
    FUNCTION_TABLE.push(0);
    setValue(vTable2 + Runtime.QUANTUM_SIZE*i, index, 'void*');
  }
  var args = [{ptr: 0}];
  replacementPairs.forEach(function(pair) {
    // We need the wrapper function that converts arguments to not fail. Keep adding arguments til it works.
    while(1) {
      try {
        pair['original'].apply(object, args);
        break;
      } catch(e) {
        args.push(args[0]);
      }
    }
    pair.originalIndex = getValue(vTable + canaryValue*Runtime.QUANTUM_SIZE, 'void*');
  });
  FUNCTION_TABLE = FUNCTION_TABLE.slice(0, functions);

  // Do the replacements

  var replacements = {};
  replacementPairs.forEach(function(pair) {
    var replacementIndex = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(pair['replacement']);
    FUNCTION_TABLE.push(0);
    replacements[pair.originalIndex] = replacementIndex;
  });

  // Copy and modify vtable
  for (var i = 0; i < size; i++) {
    var value = getValue(vTable + Runtime.QUANTUM_SIZE*i, 'void*');
    if (value in replacements) value = replacements[value];
    setValue(vTable2 + Runtime.QUANTUM_SIZE*i, value, 'void*');
  }
  return object;
}
Module['customizeVTable'] = customizeVTable;

b2ContactManager.prototype['get_m_contactFilter'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactFilter_p0(this.ptr), Module['b2ContactFilter']);
}

b2ContactManager.prototype['get_m_contactCount'] = function() {
    return _emscripten_bind_b2ContactManager__get_m_contactCount_p0(this.ptr);
}

b2ContactManager.prototype['set_m_contactFilter'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactFilter_p1(this.ptr, arg0.ptr);
}

function b2ContactManager() {
    this.ptr = _emscripten_bind_b2ContactManager__b2ContactManager_p0();
  b2ContactManager.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ContactManager;
}
b2ContactManager.prototype.__cache__ = {};
Module['b2ContactManager'] = b2ContactManager;

b2ContactManager.prototype['AddPair'] = function(arg0, arg1) {
    _emscripten_bind_b2ContactManager__AddPair_p2(this.ptr, arg0, arg1);
}

b2ContactManager.prototype['set_m_allocator'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_allocator_p1(this.ptr, arg0.ptr);
}

b2ContactManager.prototype['set_m_contactCount'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactCount_p1(this.ptr, arg0);
}

b2ContactManager.prototype['Collide'] = function() {
    _emscripten_bind_b2ContactManager__Collide_p0(this.ptr);
}

b2ContactManager.prototype['set_m_contactList'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactList_p1(this.ptr, arg0.ptr);
}

b2ContactManager.prototype['FindNewContacts'] = function() {
    _emscripten_bind_b2ContactManager__FindNewContacts_p0(this.ptr);
}

b2ContactManager.prototype['get_m_contactListener'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactListener_p0(this.ptr), Module['b2ContactListener']);
}

b2ContactManager.prototype['__destroy__'] = function() {
    _emscripten_bind_b2ContactManager____destroy___p0(this.ptr);
}

b2ContactManager.prototype['set_m_contactListener'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactListener_p1(this.ptr, arg0.ptr);
}

b2ContactManager.prototype['get_m_broadPhase'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_broadPhase_p0(this.ptr), Module['b2BroadPhase']);
}

b2ContactManager.prototype['Destroy'] = function(arg0) {
    _emscripten_bind_b2ContactManager__Destroy_p1(this.ptr, arg0.ptr);
}

b2ContactManager.prototype['set_m_broadPhase'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_broadPhase_p1(this.ptr, arg0.ptr);
}

b2ContactManager.prototype['get_m_contactList'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactList_p0(this.ptr), Module['b2Contact']);
}

b2ContactManager.prototype['get_m_allocator'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_allocator_p0(this.ptr), Module['b2BlockAllocator']);
}

b2Fixture.prototype['GetRestitution'] = function() {
    return _emscripten_bind_b2Fixture__GetRestitution_p0(this.ptr);
}

b2Fixture.prototype['SetFilterData'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetFilterData_p1(this.ptr, arg0.ptr);
}

b2Fixture.prototype['SetFriction'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetFriction_p1(this.ptr, arg0);
}

function b2Fixture() {
    this.ptr = _emscripten_bind_b2Fixture__b2Fixture_p0();
  b2Fixture.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Fixture;
}
b2Fixture.prototype.__cache__ = {};
Module['b2Fixture'] = b2Fixture;

b2Fixture.prototype['GetShape'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetShape_p0(this.ptr), Module['b2Shape']);
}

b2Fixture.prototype['SetRestitution'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetRestitution_p1(this.ptr, arg0);
}

b2Fixture.prototype['GetBody'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetBody_p0(this.ptr), Module['b2Body']);
}

b2Fixture.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetNext_p0(this.ptr), Module['b2Fixture']);
}

b2Fixture.prototype['GetFriction'] = function() {
    return _emscripten_bind_b2Fixture__GetFriction_p0(this.ptr);
}

b2Fixture.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2Fixture__GetUserData_p0(this.ptr);
}

b2Fixture.prototype['SetDensity'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetDensity_p1(this.ptr, arg0);
}

b2Fixture.prototype['GetMassData'] = function(arg0) {
    _emscripten_bind_b2Fixture__GetMassData_p1(this.ptr, arg0.ptr);
}

b2Fixture.prototype['SetSensor'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetSensor_p1(this.ptr, arg0);
}

b2Fixture.prototype['GetAABB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Fixture__GetAABB_p1(this.ptr, arg0), Module['b2AABB']);
}

b2Fixture.prototype['TestPoint'] = function(arg0) {
    return _emscripten_bind_b2Fixture__TestPoint_p1(this.ptr, arg0.ptr);
}

b2Fixture.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetUserData_p1(this.ptr, arg0);
}

b2Fixture.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Fixture____destroy___p0(this.ptr);
}

b2Fixture.prototype['RayCast'] = function(arg0, arg1, arg2) {
    return _emscripten_bind_b2Fixture__RayCast_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}

b2Fixture.prototype['Refilter'] = function() {
    _emscripten_bind_b2Fixture__Refilter_p0(this.ptr);
}

b2Fixture.prototype['Dump'] = function(arg0) {
    _emscripten_bind_b2Fixture__Dump_p1(this.ptr, arg0);
}

b2Fixture.prototype['GetFilterData'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetFilterData_p0(this.ptr), Module['b2Filter']);
}

b2Fixture.prototype['IsSensor'] = function() {
    return _emscripten_bind_b2Fixture__IsSensor_p0(this.ptr);
}

b2Fixture.prototype['GetType'] = function() {
    return _emscripten_bind_b2Fixture__GetType_p0(this.ptr);
}

b2Fixture.prototype['GetDensity'] = function() {
    return _emscripten_bind_b2Fixture__GetDensity_p0(this.ptr);
}

b2BroadPhase.prototype['GetTreeQuality'] = function() {
    return _emscripten_bind_b2BroadPhase__GetTreeQuality_p0(this.ptr);
}

b2BroadPhase.prototype['GetFatAABB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2BroadPhase__GetFatAABB_p1(this.ptr, arg0), Module['b2AABB']);
}

b2BroadPhase.prototype['GetUserData'] = function(arg0) {
    return _emscripten_bind_b2BroadPhase__GetUserData_p1(this.ptr, arg0);
}

b2BroadPhase.prototype['__destroy__'] = function() {
    _emscripten_bind_b2BroadPhase____destroy___p0(this.ptr);
}

b2BroadPhase.prototype['GetTreeHeight'] = function() {
    return _emscripten_bind_b2BroadPhase__GetTreeHeight_p0(this.ptr);
}

function b2BroadPhase() {
    this.ptr = _emscripten_bind_b2BroadPhase__b2BroadPhase_p0();
  b2BroadPhase.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BroadPhase;
}
b2BroadPhase.prototype.__cache__ = {};
Module['b2BroadPhase'] = b2BroadPhase;

b2BroadPhase.prototype['GetProxyCount'] = function() {
    return _emscripten_bind_b2BroadPhase__GetProxyCount_p0(this.ptr);
}

b2BroadPhase.prototype['GetTreeBalance'] = function() {
    return _emscripten_bind_b2BroadPhase__GetTreeBalance_p0(this.ptr);
}

b2BroadPhase.prototype['TestOverlap'] = function(arg0, arg1) {
    return _emscripten_bind_b2BroadPhase__TestOverlap_p2(this.ptr, arg0, arg1);
}

b2BroadPhase.prototype['TouchProxy'] = function(arg0) {
    _emscripten_bind_b2BroadPhase__TouchProxy_p1(this.ptr, arg0);
}

b2BroadPhase.prototype['CreateProxy'] = function(arg0, arg1) {
    return _emscripten_bind_b2BroadPhase__CreateProxy_p2(this.ptr, arg0.ptr, arg1);
}

b2BroadPhase.prototype['MoveProxy'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2BroadPhase__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr);
}

b2BroadPhase.prototype['DestroyProxy'] = function(arg0) {
    _emscripten_bind_b2BroadPhase__DestroyProxy_p1(this.ptr, arg0);
}

b2World.prototype['QueryAABB'] = function(arg0, arg1) {
    _emscripten_bind_b2World__QueryAABB_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2World.prototype['SetSubStepping'] = function(arg0) {
    _emscripten_bind_b2World__SetSubStepping_p1(this.ptr, arg0);
}

b2World.prototype['GetTreeQuality'] = function() {
    return _emscripten_bind_b2World__GetTreeQuality_p0(this.ptr);
}

b2World.prototype['GetTreeHeight'] = function() {
    return _emscripten_bind_b2World__GetTreeHeight_p0(this.ptr);
}

b2World.prototype['GetProfile'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetProfile_p0(this.ptr), Module['b2Profile']);
}

b2World.prototype['GetTreeBalance'] = function() {
    return _emscripten_bind_b2World__GetTreeBalance_p0(this.ptr);
}

b2World.prototype['GetSubStepping'] = function() {
    return _emscripten_bind_b2World__GetSubStepping_p0(this.ptr);
}

b2World.prototype['GetContactManager'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetContactManager_p0(this.ptr), Module['b2ContactManager']);
}

b2World.prototype['SetContactListener'] = function(arg0) {
    _emscripten_bind_b2World__SetContactListener_p1(this.ptr, arg0.ptr);
}

b2World.prototype['DrawDebugData'] = function() {
    _emscripten_bind_b2World__DrawDebugData_p0(this.ptr);
}

b2World.prototype['SetContinuousPhysics'] = function(arg0) {
    _emscripten_bind_b2World__SetContinuousPhysics_p1(this.ptr, arg0);
}

b2World.prototype['SetGravity'] = function(arg0) {
    _emscripten_bind_b2World__SetGravity_p1(this.ptr, arg0.ptr);
}

b2World.prototype['GetBodyCount'] = function() {
    return _emscripten_bind_b2World__GetBodyCount_p0(this.ptr);
}

b2World.prototype['GetAutoClearForces'] = function() {
    return _emscripten_bind_b2World__GetAutoClearForces_p0(this.ptr);
}

b2World.prototype['GetContinuousPhysics'] = function() {
    return _emscripten_bind_b2World__GetContinuousPhysics_p0(this.ptr);
}

b2World.prototype['GetJointList'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetJointList_p0(this.ptr), Module['b2Joint']);
}

b2World.prototype['CreateBody'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2World__CreateBody_p1(this.ptr, arg0.ptr), Module['b2Body']);
}

b2World.prototype['GetBodyList'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetBodyList_p0(this.ptr), Module['b2Body']);
}

b2World.prototype['SetDestructionListener'] = function(arg0) {
    _emscripten_bind_b2World__SetDestructionListener_p1(this.ptr, arg0.ptr);
}

b2World.prototype['DestroyJoint'] = function(arg0) {
    _emscripten_bind_b2World__DestroyJoint_p1(this.ptr, arg0.ptr);
}

function b2World(arg0) {
    this.ptr = _emscripten_bind_b2World__b2World_p1(arg0.ptr);
  b2World.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2World;
}
b2World.prototype.__cache__ = {};
Module['b2World'] = b2World;

b2World.prototype['GetJointCount'] = function() {
    return _emscripten_bind_b2World__GetJointCount_p0(this.ptr);
}

b2World.prototype['Step'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2World__Step_p3(this.ptr, arg0, arg1, arg2);
}

b2World.prototype['ClearForces'] = function() {
    _emscripten_bind_b2World__ClearForces_p0(this.ptr);
}

b2World.prototype['GetWarmStarting'] = function() {
    return _emscripten_bind_b2World__GetWarmStarting_p0(this.ptr);
}

b2World.prototype['SetAllowSleeping'] = function(arg0) {
    _emscripten_bind_b2World__SetAllowSleeping_p1(this.ptr, arg0);
}

b2World.prototype['DestroyBody'] = function(arg0) {
    _emscripten_bind_b2World__DestroyBody_p1(this.ptr, arg0.ptr);
}

b2World.prototype['GetAllowSleeping'] = function() {
    return _emscripten_bind_b2World__GetAllowSleeping_p0(this.ptr);
}

b2World.prototype['CreateJoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2World__CreateJoint_p1(this.ptr, arg0.ptr), Module['b2Joint']);
}

b2World.prototype['GetProxyCount'] = function() {
    return _emscripten_bind_b2World__GetProxyCount_p0(this.ptr);
}

b2World.prototype['RayCast'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2World__RayCast_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}

b2World.prototype['IsLocked'] = function() {
    return _emscripten_bind_b2World__IsLocked_p0(this.ptr);
}

b2World.prototype['GetContactList'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetContactList_p0(this.ptr), Module['b2Contact']);
}

b2World.prototype['SetDebugDraw'] = function(arg0) {
    _emscripten_bind_b2World__SetDebugDraw_p1(this.ptr, arg0.ptr);
}

b2World.prototype['__destroy__'] = function() {
    _emscripten_bind_b2World____destroy___p0(this.ptr);
}

b2World.prototype['Dump'] = function() {
    _emscripten_bind_b2World__Dump_p0(this.ptr);
}

b2World.prototype['SetAutoClearForces'] = function(arg0) {
    _emscripten_bind_b2World__SetAutoClearForces_p1(this.ptr, arg0);
}

b2World.prototype['GetGravity'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetGravity_p0(this.ptr), Module['b2Vec2']);
}

b2World.prototype['GetContactCount'] = function() {
    return _emscripten_bind_b2World__GetContactCount_p0(this.ptr);
}

b2World.prototype['SetWarmStarting'] = function(arg0) {
    _emscripten_bind_b2World__SetWarmStarting_p1(this.ptr, arg0);
}

b2World.prototype['SetContactFilter'] = function(arg0) {
    _emscripten_bind_b2World__SetContactFilter_p1(this.ptr, arg0.ptr);
}

b2CircleShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2CircleShape____destroy___p0(this.ptr);
}

b2CircleShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2CircleShape__GetType_p0(this.ptr);
}

b2CircleShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2CircleShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}

b2CircleShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2CircleShape__set_m_radius_p1(this.ptr, arg0);
}

b2CircleShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2CircleShape__get_m_radius_p0(this.ptr);
}

b2CircleShape.prototype['GetVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2CircleShape__GetVertex_p1(this.ptr, arg0), Module['b2Vec2']);
}

b2CircleShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2CircleShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}

b2CircleShape.prototype['GetSupportVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2CircleShape__GetSupportVertex_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2CircleShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2CircleShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}

b2CircleShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2CircleShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}

b2CircleShape.prototype['GetVertexCount'] = function() {
    return _emscripten_bind_b2CircleShape__GetVertexCount_p0(this.ptr);
}

b2CircleShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2CircleShape__GetChildCount_p0(this.ptr);
}

b2CircleShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2CircleShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}

function b2CircleShape() {
    this.ptr = _emscripten_bind_b2CircleShape__b2CircleShape_p0();
  b2CircleShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2CircleShape;
}
b2CircleShape.prototype.__cache__ = {};
Module['b2CircleShape'] = b2CircleShape;

b2CircleShape.prototype['GetSupport'] = function(arg0) {
    return _emscripten_bind_b2CircleShape__GetSupport_p1(this.ptr, arg0.ptr);
}

b2CircleShape.prototype['set_m_p'] = function(arg0) {
    _emscripten_bind_b2CircleShape__set_m_p_p1(this.ptr, arg0.ptr);
}

b2CircleShape.prototype['get_m_p'] = function() {
    return wrapPointer(_emscripten_bind_b2CircleShape__get_m_p_p0(this.ptr), Module['b2Vec2']);
}

function b2Draw(){ throw "b2Draw is abstract!" }
b2Draw.prototype.__cache__ = {};
Module['b2Draw'] = b2Draw;

b2Draw.prototype['AppendFlags'] = function(arg0) {
    _emscripten_bind_b2Draw__AppendFlags_p1(this.ptr, arg0);
}

b2Draw.prototype['DrawTransform'] = function(arg0) {
    _emscripten_bind_b2Draw__DrawTransform_p1(this.ptr, arg0.ptr);
}

b2Draw.prototype['ClearFlags'] = function(arg0) {
    _emscripten_bind_b2Draw__ClearFlags_p1(this.ptr, arg0);
}

b2Draw.prototype['DrawPolygon'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
}

b2Draw.prototype['DrawSolidCircle'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2Draw__DrawSolidCircle_p4(this.ptr, arg0.ptr, arg1, arg2.ptr, arg3.ptr);
}

b2Draw.prototype['DrawSolidPolygon'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawSolidPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
}

b2Draw.prototype['DrawCircle'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawCircle_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
}

b2Draw.prototype['SetFlags'] = function(arg0) {
    _emscripten_bind_b2Draw__SetFlags_p1(this.ptr, arg0);
}

b2Draw.prototype['DrawSegment'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawSegment_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}

b2Draw.prototype['GetFlags'] = function() {
    return _emscripten_bind_b2Draw__GetFlags_p0(this.ptr);
}

function b2Joint(){ throw "b2Joint is abstract!" }
b2Joint.prototype.__cache__ = {};
Module['b2Joint'] = b2Joint;

b2Joint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetNext_p0(this.ptr), Module['b2Joint']);
}

b2Joint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetBodyA_p0(this.ptr), Module['b2Body']);
}

b2Joint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetBodyB_p0(this.ptr), Module['b2Body']);
}

b2Joint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2Joint__GetReactionTorque_p1(this.ptr, arg0);
}

b2Joint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2Joint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2Joint__GetUserData_p0(this.ptr);
}

b2Joint.prototype['GetType'] = function() {
    return _emscripten_bind_b2Joint__GetType_p0(this.ptr);
}

b2Joint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2Joint__SetUserData_p1(this.ptr, arg0);
}

b2Joint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2Joint__GetCollideConnected_p0(this.ptr);
}

b2Joint.prototype['Dump'] = function() {
    _emscripten_bind_b2Joint__Dump_p0(this.ptr);
}

b2Joint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2Joint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Joint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}

b2Joint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2Joint__IsActive_p0(this.ptr);
}

function b2RayCastCallback(){ throw "b2RayCastCallback is abstract!" }
b2RayCastCallback.prototype.__cache__ = {};
Module['b2RayCastCallback'] = b2RayCastCallback;

b2RayCastCallback.prototype['ReportFixture'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2RayCastCallback__ReportFixture_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}

b2DynamicTree.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DynamicTree____destroy___p0(this.ptr);
}

function b2DynamicTree() {
    this.ptr = _emscripten_bind_b2DynamicTree__b2DynamicTree_p0();
  b2DynamicTree.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DynamicTree;
}
b2DynamicTree.prototype.__cache__ = {};
Module['b2DynamicTree'] = b2DynamicTree;

b2DynamicTree.prototype['GetFatAABB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DynamicTree__GetFatAABB_p1(this.ptr, arg0), Module['b2AABB']);
}

b2DynamicTree.prototype['GetUserData'] = function(arg0) {
    return _emscripten_bind_b2DynamicTree__GetUserData_p1(this.ptr, arg0);
}

b2DynamicTree.prototype['GetMaxBalance'] = function() {
    return _emscripten_bind_b2DynamicTree__GetMaxBalance_p0(this.ptr);
}

b2DynamicTree.prototype['GetHeight'] = function() {
    return _emscripten_bind_b2DynamicTree__GetHeight_p0(this.ptr);
}

b2DynamicTree.prototype['GetAreaRatio'] = function() {
    return _emscripten_bind_b2DynamicTree__GetAreaRatio_p0(this.ptr);
}

b2DynamicTree.prototype['RebuildBottomUp'] = function() {
    _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0(this.ptr);
}

b2DynamicTree.prototype['CreateProxy'] = function(arg0, arg1) {
    return _emscripten_bind_b2DynamicTree__CreateProxy_p2(this.ptr, arg0.ptr, arg1);
}

b2DynamicTree.prototype['MoveProxy'] = function(arg0, arg1, arg2) {
    return _emscripten_bind_b2DynamicTree__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr);
}

b2DynamicTree.prototype['Validate'] = function() {
    _emscripten_bind_b2DynamicTree__Validate_p0(this.ptr);
}

b2DynamicTree.prototype['DestroyProxy'] = function(arg0) {
    _emscripten_bind_b2DynamicTree__DestroyProxy_p1(this.ptr, arg0);
}

function b2Timer() {
    this.ptr = _emscripten_bind_b2Timer__b2Timer_p0();
  b2Timer.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Timer;
}
b2Timer.prototype.__cache__ = {};
Module['b2Timer'] = b2Timer;

b2Timer.prototype['Reset'] = function() {
    _emscripten_bind_b2Timer__Reset_p0(this.ptr);
}

b2Timer.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Timer____destroy___p0(this.ptr);
}

b2Timer.prototype['GetMilliseconds'] = function() {
    return _emscripten_bind_b2Timer__GetMilliseconds_p0(this.ptr);
}

b2ContactListener.prototype['__destroy__'] = function() {
    _emscripten_bind_b2ContactListener____destroy___p0(this.ptr);
}

function b2ContactListener() {
    this.ptr = _emscripten_bind_b2ContactListener__b2ContactListener_p0();
  b2ContactListener.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ContactListener;
}
b2ContactListener.prototype.__cache__ = {};
Module['b2ContactListener'] = b2ContactListener;

b2ContactListener.prototype['EndContact'] = function(arg0) {
    _emscripten_bind_b2ContactListener__EndContact_p1(this.ptr, arg0.ptr);
}

b2ContactListener.prototype['BeginContact'] = function(arg0) {
    _emscripten_bind_b2ContactListener__BeginContact_p1(this.ptr, arg0.ptr);
}

b2ContactListener.prototype['PreSolve'] = function(arg0, arg1) {
    _emscripten_bind_b2ContactListener__PreSolve_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2ContactListener.prototype['PostSolve'] = function(arg0, arg1) {
    _emscripten_bind_b2ContactListener__PostSolve_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2ChainShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2ChainShape____destroy___p0(this.ptr);
}

b2ChainShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2ChainShape__GetType_p0(this.ptr);
}

b2ChainShape.prototype['CreateChain'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__CreateChain_p2(this.ptr, arg0.ptr, arg1);
}

b2ChainShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2ChainShape__set_m_radius_p1(this.ptr, arg0);
}

b2ChainShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2ChainShape__get_m_radius_p0(this.ptr);
}

b2ChainShape.prototype['get_m_vertices'] = function() {
    return wrapPointer(_emscripten_bind_b2ChainShape__get_m_vertices_p0(this.ptr), Module['b2Vec2']);
}

b2ChainShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}

b2ChainShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2ChainShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}

b2ChainShape.prototype['get_m_count'] = function() {
    return _emscripten_bind_b2ChainShape__get_m_count_p0(this.ptr);
}

b2ChainShape.prototype['GetChildEdge'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__GetChildEdge_p2(this.ptr, arg0.ptr, arg1);
}

function b2ChainShape() {
    this.ptr = _emscripten_bind_b2ChainShape__b2ChainShape_p0();
  b2ChainShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ChainShape;
}
b2ChainShape.prototype.__cache__ = {};
Module['b2ChainShape'] = b2ChainShape;

b2ChainShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2ChainShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}

b2ChainShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2ChainShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}

b2ChainShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2ChainShape__GetChildCount_p0(this.ptr);
}

b2ChainShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2ChainShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2ChainShape.prototype['SetPrevVertex'] = function(arg0) {
    _emscripten_bind_b2ChainShape__SetPrevVertex_p1(this.ptr, arg0.ptr);
}

b2ChainShape.prototype['CreateLoop'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__CreateLoop_p2(this.ptr, arg0.ptr, arg1);
}

b2ChainShape.prototype['set_m_vertices'] = function(arg0) {
    _emscripten_bind_b2ChainShape__set_m_vertices_p1(this.ptr, arg0.ptr);
}

b2ChainShape.prototype['SetNextVertex'] = function(arg0) {
    _emscripten_bind_b2ChainShape__SetNextVertex_p1(this.ptr, arg0.ptr);
}

b2ChainShape.prototype['set_m_count'] = function(arg0) {
    _emscripten_bind_b2ChainShape__set_m_count_p1(this.ptr, arg0);
}

function b2QueryCallback(){ throw "b2QueryCallback is abstract!" }
b2QueryCallback.prototype.__cache__ = {};
Module['b2QueryCallback'] = b2QueryCallback;

b2QueryCallback.prototype['ReportFixture'] = function(arg0) {
    return _emscripten_bind_b2QueryCallback__ReportFixture_p1(this.ptr, arg0.ptr);
}

b2BlockAllocator.prototype['__destroy__'] = function() {
    _emscripten_bind_b2BlockAllocator____destroy___p0(this.ptr);
}

b2BlockAllocator.prototype['Clear'] = function() {
    _emscripten_bind_b2BlockAllocator__Clear_p0(this.ptr);
}

b2BlockAllocator.prototype['Free'] = function(arg0, arg1) {
    _emscripten_bind_b2BlockAllocator__Free_p2(this.ptr, arg0, arg1);
}

b2BlockAllocator.prototype['Allocate'] = function(arg0) {
    return _emscripten_bind_b2BlockAllocator__Allocate_p1(this.ptr, arg0);
}

function b2BlockAllocator() {
    this.ptr = _emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0();
  b2BlockAllocator.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BlockAllocator;
}
b2BlockAllocator.prototype.__cache__ = {};
Module['b2BlockAllocator'] = b2BlockAllocator;

b2PolygonShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PolygonShape____destroy___p0(this.ptr);
}

b2PolygonShape.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2PolygonShape__Set_p2(this.ptr, arg0.ptr, arg1);
}

b2PolygonShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2PolygonShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}

b2PolygonShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2PolygonShape__set_m_radius_p1(this.ptr, arg0);
}

b2PolygonShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2PolygonShape__get_m_radius_p0(this.ptr);
}

b2PolygonShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PolygonShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}

b2PolygonShape.prototype['GetVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PolygonShape__GetVertex_p1(this.ptr, arg0), Module['b2Vec2']);
}

b2PolygonShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2PolygonShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}

b2PolygonShape.prototype['SetAsBox'] = function(arg0, arg1, arg2, arg3) {
  if (arg2 === undefined)
    _emscripten_bind_b2PolygonShape__SetAsBox_p2(this.ptr, arg0, arg1);
  else 
    _emscripten_bind_b2PolygonShape__SetAsBox_p4(this.ptr, arg0, arg1, arg2.ptr, arg3);
}

b2PolygonShape.prototype['set_m_centroid'] = function(arg0) {
    _emscripten_bind_b2PolygonShape__set_m_centroid_p1(this.ptr, arg0.ptr);
}

b2PolygonShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2PolygonShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}

b2PolygonShape.prototype['set_m_vertexCount'] = function(arg0) {
    _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1(this.ptr, arg0);
}

b2PolygonShape.prototype['GetVertexCount'] = function() {
    return _emscripten_bind_b2PolygonShape__GetVertexCount_p0(this.ptr);
}

b2PolygonShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2PolygonShape__GetChildCount_p0(this.ptr);
}

b2PolygonShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2PolygonShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2PolygonShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2PolygonShape__GetType_p0(this.ptr);
}

function b2PolygonShape() {
    this.ptr = _emscripten_bind_b2PolygonShape__b2PolygonShape_p0();
  b2PolygonShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PolygonShape;
}
b2PolygonShape.prototype.__cache__ = {};
Module['b2PolygonShape'] = b2PolygonShape;

b2PolygonShape.prototype['get_m_vertexCount'] = function() {
    return _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0(this.ptr);
}

b2PolygonShape.prototype['get_m_centroid'] = function() {
    return wrapPointer(_emscripten_bind_b2PolygonShape__get_m_centroid_p0(this.ptr), Module['b2Vec2']);
}

b2EdgeShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2EdgeShape____destroy___p0(this.ptr);
}

b2EdgeShape.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2EdgeShape__Set_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2EdgeShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2EdgeShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}

b2EdgeShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2EdgeShape__set_m_radius_p1(this.ptr, arg0);
}

b2EdgeShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2EdgeShape__get_m_radius_p0(this.ptr);
}

b2EdgeShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2EdgeShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}

b2EdgeShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2EdgeShape__GetType_p0(this.ptr);
}

b2EdgeShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2EdgeShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}

b2EdgeShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2EdgeShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}

b2EdgeShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2EdgeShape__GetChildCount_p0(this.ptr);
}

b2EdgeShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2EdgeShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}

function b2EdgeShape() {
    this.ptr = _emscripten_bind_b2EdgeShape__b2EdgeShape_p0();
  b2EdgeShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2EdgeShape;
}
b2EdgeShape.prototype.__cache__ = {};
Module['b2EdgeShape'] = b2EdgeShape;

function b2Contact(){ throw "b2Contact is abstract!" }
b2Contact.prototype.__cache__ = {};
Module['b2Contact'] = b2Contact;

b2Contact.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetNext_p0(this.ptr), Module['b2Contact']);
}

b2Contact.prototype['SetEnabled'] = function(arg0) {
    _emscripten_bind_b2Contact__SetEnabled_p1(this.ptr, arg0);
}

b2Contact.prototype['GetWorldManifold'] = function(arg0) {
    _emscripten_bind_b2Contact__GetWorldManifold_p1(this.ptr, arg0.ptr);
}

b2Contact.prototype['GetRestitution'] = function() {
    return _emscripten_bind_b2Contact__GetRestitution_p0(this.ptr);
}

b2Contact.prototype['ResetFriction'] = function() {
    _emscripten_bind_b2Contact__ResetFriction_p0(this.ptr);
}

b2Contact.prototype['GetFriction'] = function() {
    return _emscripten_bind_b2Contact__GetFriction_p0(this.ptr);
}

b2Contact.prototype['IsTouching'] = function() {
    return _emscripten_bind_b2Contact__IsTouching_p0(this.ptr);
}

b2Contact.prototype['IsEnabled'] = function() {
    return _emscripten_bind_b2Contact__IsEnabled_p0(this.ptr);
}

b2Contact.prototype['GetFixtureB'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetFixtureB_p0(this.ptr), Module['b2Fixture']);
}

b2Contact.prototype['SetFriction'] = function(arg0) {
    _emscripten_bind_b2Contact__SetFriction_p1(this.ptr, arg0);
}

b2Contact.prototype['GetFixtureA'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetFixtureA_p0(this.ptr), Module['b2Fixture']);
}

b2Contact.prototype['GetChildIndexA'] = function() {
    return _emscripten_bind_b2Contact__GetChildIndexA_p0(this.ptr);
}

b2Contact.prototype['GetChildIndexB'] = function() {
    return _emscripten_bind_b2Contact__GetChildIndexB_p0(this.ptr);
}

b2Contact.prototype['Evaluate'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Contact__Evaluate_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}

b2Contact.prototype['SetRestitution'] = function(arg0) {
    _emscripten_bind_b2Contact__SetRestitution_p1(this.ptr, arg0);
}

b2Contact.prototype['GetManifold'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetManifold_p0(this.ptr), Module['b2Manifold']);
}

b2Contact.prototype['ResetRestitution'] = function() {
    _emscripten_bind_b2Contact__ResetRestitution_p0(this.ptr);
}

function b2Shape(){ throw "b2Shape is abstract!" }
b2Shape.prototype.__cache__ = {};
Module['b2Shape'] = b2Shape;

b2Shape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2Shape__get_m_radius_p0(this.ptr);
}

b2Shape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2Shape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}

b2Shape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2Shape__set_m_radius_p1(this.ptr, arg0);
}

b2Shape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Shape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}

b2Shape.prototype['GetType'] = function() {
    return _emscripten_bind_b2Shape__GetType_p0(this.ptr);
}

b2Shape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2Shape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}

b2Shape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Shape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}

b2Shape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2Shape__GetChildCount_p0(this.ptr);
}

b2Shape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2Shape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}

function b2Body(){ throw "b2Body is abstract!" }
b2Body.prototype.__cache__ = {};
Module['b2Body'] = b2Body;

b2Body.prototype['GetAngle'] = function() {
    return _emscripten_bind_b2Body__GetAngle_p0(this.ptr);
}

b2Body.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2Body__GetUserData_p0(this.ptr);
}

b2Body.prototype['IsSleepingAllowed'] = function() {
    return _emscripten_bind_b2Body__IsSleepingAllowed_p0(this.ptr);
}

b2Body.prototype['SetAngularDamping'] = function(arg0) {
    _emscripten_bind_b2Body__SetAngularDamping_p1(this.ptr, arg0);
}

b2Body.prototype['SetActive'] = function(arg0) {
    _emscripten_bind_b2Body__SetActive_p1(this.ptr, arg0);
}

b2Body.prototype['SetGravityScale'] = function(arg0) {
    _emscripten_bind_b2Body__SetGravityScale_p1(this.ptr, arg0);
}

b2Body.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2Body__SetUserData_p1(this.ptr, arg0);
}

b2Body.prototype['GetAngularVelocity'] = function() {
    return _emscripten_bind_b2Body__GetAngularVelocity_p0(this.ptr);
}

b2Body.prototype['GetFixtureList'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetFixtureList_p0(this.ptr), Module['b2Fixture']);
}

b2Body.prototype['ApplyForce'] = function(arg0, arg1) {
    _emscripten_bind_b2Body__ApplyForce_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2Body.prototype['GetLocalPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLocalPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2Body.prototype['SetLinearVelocity'] = function(arg0) {
    _emscripten_bind_b2Body__SetLinearVelocity_p1(this.ptr, arg0.ptr);
}

b2Body.prototype['GetJointList'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetJointList_p0(this.ptr), Module['b2JointEdge']);
}

b2Body.prototype['GetLinearVelocity'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocity_p0(this.ptr), Module['b2Vec2']);
}

b2Body.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetNext_p0(this.ptr), Module['b2Body']);
}

b2Body.prototype['SetSleepingAllowed'] = function(arg0) {
    _emscripten_bind_b2Body__SetSleepingAllowed_p1(this.ptr, arg0);
}

b2Body.prototype['SetTransform'] = function(arg0, arg1) {
    _emscripten_bind_b2Body__SetTransform_p2(this.ptr, arg0.ptr, arg1);
}

b2Body.prototype['GetMass'] = function() {
    return _emscripten_bind_b2Body__GetMass_p0(this.ptr);
}

b2Body.prototype['SetAngularVelocity'] = function(arg0) {
    _emscripten_bind_b2Body__SetAngularVelocity_p1(this.ptr, arg0);
}

b2Body.prototype['GetMassData'] = function(arg0) {
    _emscripten_bind_b2Body__GetMassData_p1(this.ptr, arg0.ptr);
}

b2Body.prototype['GetLinearVelocityFromWorldPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2Body.prototype['ResetMassData'] = function() {
    _emscripten_bind_b2Body__ResetMassData_p0(this.ptr);
}

b2Body.prototype['ApplyForceToCenter'] = function(arg0) {
    _emscripten_bind_b2Body__ApplyForceToCenter_p1(this.ptr, arg0.ptr);
}

b2Body.prototype['ApplyTorque'] = function(arg0) {
    _emscripten_bind_b2Body__ApplyTorque_p1(this.ptr, arg0);
}

b2Body.prototype['IsAwake'] = function() {
    return _emscripten_bind_b2Body__IsAwake_p0(this.ptr);
}

b2Body.prototype['SetType'] = function(arg0) {
    _emscripten_bind_b2Body__SetType_p1(this.ptr, arg0);
}

b2Body.prototype['CreateFixture'] = function(arg0, arg1) {
  if (arg1 === undefined)
    return wrapPointer(_emscripten_bind_b2Body__CreateFixture_p1(this.ptr, arg0.ptr), Module['b2Fixture']);
  else 
    return wrapPointer(_emscripten_bind_b2Body__CreateFixture_p2(this.ptr, arg0.ptr, arg1), Module['b2Fixture']);
}

b2Body.prototype['SetMassData'] = function(arg0) {
    _emscripten_bind_b2Body__SetMassData_p1(this.ptr, arg0.ptr);
}

b2Body.prototype['GetTransform'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetTransform_p0(this.ptr), Module['b2Transform']);
}

b2Body.prototype['GetWorldCenter'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetWorldCenter_p0(this.ptr), Module['b2Vec2']);
}

b2Body.prototype['GetAngularDamping'] = function() {
    return _emscripten_bind_b2Body__GetAngularDamping_p0(this.ptr);
}

b2Body.prototype['ApplyLinearImpulse'] = function(arg0, arg1) {
    _emscripten_bind_b2Body__ApplyLinearImpulse_p2(this.ptr, arg0.ptr, arg1.ptr);
}

b2Body.prototype['IsFixedRotation'] = function() {
    return _emscripten_bind_b2Body__IsFixedRotation_p0(this.ptr);
}

b2Body.prototype['GetLocalCenter'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetLocalCenter_p0(this.ptr), Module['b2Vec2']);
}

b2Body.prototype['GetWorldVector'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetWorldVector_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2Body.prototype['GetLinearVelocityFromLocalPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2Body.prototype['GetContactList'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetContactList_p0(this.ptr), Module['b2ContactEdge']);
}

b2Body.prototype['GetWorldPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetWorldPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2Body.prototype['SetAwake'] = function(arg0) {
    _emscripten_bind_b2Body__SetAwake_p1(this.ptr, arg0);
}

b2Body.prototype['GetLinearDamping'] = function() {
    return _emscripten_bind_b2Body__GetLinearDamping_p0(this.ptr);
}

b2Body.prototype['IsBullet'] = function() {
    return _emscripten_bind_b2Body__IsBullet_p0(this.ptr);
}

b2Body.prototype['GetWorld'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetWorld_p0(this.ptr), Module['b2World']);
}

b2Body.prototype['GetLocalVector'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLocalVector_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2Body.prototype['SetLinearDamping'] = function(arg0) {
    _emscripten_bind_b2Body__SetLinearDamping_p1(this.ptr, arg0);
}

b2Body.prototype['Dump'] = function() {
    _emscripten_bind_b2Body__Dump_p0(this.ptr);
}

b2Body.prototype['SetBullet'] = function(arg0) {
    _emscripten_bind_b2Body__SetBullet_p1(this.ptr, arg0);
}

b2Body.prototype['GetType'] = function() {
    return _emscripten_bind_b2Body__GetType_p0(this.ptr);
}

b2Body.prototype['GetGravityScale'] = function() {
    return _emscripten_bind_b2Body__GetGravityScale_p0(this.ptr);
}

b2Body.prototype['DestroyFixture'] = function(arg0) {
    _emscripten_bind_b2Body__DestroyFixture_p1(this.ptr, arg0.ptr);
}

b2Body.prototype['GetInertia'] = function() {
    return _emscripten_bind_b2Body__GetInertia_p0(this.ptr);
}

b2Body.prototype['IsActive'] = function() {
    return _emscripten_bind_b2Body__IsActive_p0(this.ptr);
}

b2Body.prototype['SetFixedRotation'] = function(arg0) {
    _emscripten_bind_b2Body__SetFixedRotation_p1(this.ptr, arg0);
}

b2Body.prototype['ApplyAngularImpulse'] = function(arg0) {
    _emscripten_bind_b2Body__ApplyAngularImpulse_p1(this.ptr, arg0);
}

b2Body.prototype['GetPosition'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetPosition_p0(this.ptr), Module['b2Vec2']);
}

b2StackAllocator.prototype['GetMaxAllocation'] = function() {
    return _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0(this.ptr);
}

b2StackAllocator.prototype['__destroy__'] = function() {
    _emscripten_bind_b2StackAllocator____destroy___p0(this.ptr);
}

function b2StackAllocator() {
    this.ptr = _emscripten_bind_b2StackAllocator__b2StackAllocator_p0();
  b2StackAllocator.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2StackAllocator;
}
b2StackAllocator.prototype.__cache__ = {};
Module['b2StackAllocator'] = b2StackAllocator;

b2StackAllocator.prototype['Allocate'] = function(arg0) {
    return _emscripten_bind_b2StackAllocator__Allocate_p1(this.ptr, arg0);
}

b2StackAllocator.prototype['Free'] = function(arg0) {
    _emscripten_bind_b2StackAllocator__Free_p1(this.ptr, arg0);
}

function b2DestructionListener(){ throw "b2DestructionListener is abstract!" }
b2DestructionListener.prototype.__cache__ = {};
Module['b2DestructionListener'] = b2DestructionListener;

b2DestructionListener.prototype['SayGoodbye'] = function(arg0) {
    _emscripten_bind_b2DestructionListener__SayGoodbye_p1(this.ptr, arg0.ptr);
}

b2Filter.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Filter____destroy___p0(this.ptr);
}

b2Filter.prototype['set_maskBits'] = function(arg0) {
    _emscripten_bind_b2Filter__set_maskBits_p1(this.ptr, arg0);
}

b2Filter.prototype['set_categoryBits'] = function(arg0) {
    _emscripten_bind_b2Filter__set_categoryBits_p1(this.ptr, arg0);
}

b2Filter.prototype['get_groupIndex'] = function() {
    return _emscripten_bind_b2Filter__get_groupIndex_p0(this.ptr);
}

b2Filter.prototype['set_groupIndex'] = function(arg0) {
    _emscripten_bind_b2Filter__set_groupIndex_p1(this.ptr, arg0);
}

b2Filter.prototype['get_maskBits'] = function() {
    return _emscripten_bind_b2Filter__get_maskBits_p0(this.ptr);
}

function b2Filter() {
    this.ptr = _emscripten_bind_b2Filter__b2Filter_p0();
  b2Filter.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Filter;
}
b2Filter.prototype.__cache__ = {};
Module['b2Filter'] = b2Filter;

b2Filter.prototype['get_categoryBits'] = function() {
    return _emscripten_bind_b2Filter__get_categoryBits_p0(this.ptr);
}

b2FrictionJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2FrictionJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2FrictionJointDef____destroy___p0(this.ptr);
}

b2FrictionJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2FrictionJointDef.prototype['get_maxForce'] = function() {
    return _emscripten_bind_b2FrictionJointDef__get_maxForce_p0(this.ptr);
}

function b2FrictionJointDef() {
    this.ptr = _emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0();
  b2FrictionJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2FrictionJointDef;
}
b2FrictionJointDef.prototype.__cache__ = {};
Module['b2FrictionJointDef'] = b2FrictionJointDef;

b2FrictionJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2FrictionJointDef.prototype['set_maxForce'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_maxForce_p1(this.ptr, arg0);
}

b2FrictionJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2FrictionJointDef.prototype['set_maxTorque'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1(this.ptr, arg0);
}

b2FrictionJointDef.prototype['get_maxTorque'] = function() {
    return _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0(this.ptr);
}

b2FrictionJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2FrictionJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}

b2BodyDef.prototype['get_linearDamping'] = function() {
    return _emscripten_bind_b2BodyDef__get_linearDamping_p0(this.ptr);
}

b2BodyDef.prototype['get_awake'] = function() {
    return _emscripten_bind_b2BodyDef__get_awake_p0(this.ptr);
}

b2BodyDef.prototype['get_type'] = function() {
    return _emscripten_bind_b2BodyDef__get_type_p0(this.ptr);
}

b2BodyDef.prototype['get_allowSleep'] = function() {
    return _emscripten_bind_b2BodyDef__get_allowSleep_p0(this.ptr);
}

b2BodyDef.prototype['set_position'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_position_p1(this.ptr, arg0.ptr);
}

b2BodyDef.prototype['set_linearVelocity'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_linearVelocity_p1(this.ptr, arg0.ptr);
}

function b2BodyDef() {
    this.ptr = _emscripten_bind_b2BodyDef__b2BodyDef_p0();
  b2BodyDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BodyDef;
}
b2BodyDef.prototype.__cache__ = {};
Module['b2BodyDef'] = b2BodyDef;

b2BodyDef.prototype['get_bullet'] = function() {
    return _emscripten_bind_b2BodyDef__get_bullet_p0(this.ptr);
}

b2BodyDef.prototype['get_userData'] = function() {
    return _emscripten_bind_b2BodyDef__get_userData_p0(this.ptr);
}

b2BodyDef.prototype['set_angularDamping'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_angularDamping_p1(this.ptr, arg0);
}

b2BodyDef.prototype['set_fixedRotation'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_fixedRotation_p1(this.ptr, arg0);
}

b2BodyDef.prototype['set_allowSleep'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_allowSleep_p1(this.ptr, arg0);
}

b2BodyDef.prototype['get_gravityScale'] = function() {
    return _emscripten_bind_b2BodyDef__get_gravityScale_p0(this.ptr);
}

b2BodyDef.prototype['set_angularVelocity'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_angularVelocity_p1(this.ptr, arg0);
}

b2BodyDef.prototype['set_userData'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_userData_p1(this.ptr, arg0);
}

b2BodyDef.prototype['get_position'] = function() {
    return wrapPointer(_emscripten_bind_b2BodyDef__get_position_p0(this.ptr), Module['b2Vec2']);
}

b2BodyDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2BodyDef____destroy___p0(this.ptr);
}

b2BodyDef.prototype['set_type'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_type_p1(this.ptr, arg0);
}

b2BodyDef.prototype['set_gravityScale'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_gravityScale_p1(this.ptr, arg0);
}

b2BodyDef.prototype['get_angularDamping'] = function() {
    return _emscripten_bind_b2BodyDef__get_angularDamping_p0(this.ptr);
}

b2BodyDef.prototype['set_bullet'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_bullet_p1(this.ptr, arg0);
}

b2BodyDef.prototype['set_active'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_active_p1(this.ptr, arg0);
}

b2BodyDef.prototype['set_angle'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_angle_p1(this.ptr, arg0);
}

b2BodyDef.prototype['get_angle'] = function() {
    return _emscripten_bind_b2BodyDef__get_angle_p0(this.ptr);
}

b2BodyDef.prototype['get_angularVelocity'] = function() {
    return _emscripten_bind_b2BodyDef__get_angularVelocity_p0(this.ptr);
}

b2BodyDef.prototype['get_linearVelocity'] = function() {
    return wrapPointer(_emscripten_bind_b2BodyDef__get_linearVelocity_p0(this.ptr), Module['b2Vec2']);
}

b2BodyDef.prototype['get_active'] = function() {
    return _emscripten_bind_b2BodyDef__get_active_p0(this.ptr);
}

b2BodyDef.prototype['set_linearDamping'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_linearDamping_p1(this.ptr, arg0);
}

b2BodyDef.prototype['get_fixedRotation'] = function() {
    return _emscripten_bind_b2BodyDef__get_fixedRotation_p0(this.ptr);
}

b2BodyDef.prototype['set_awake'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_awake_p1(this.ptr, arg0);
}

b2Vec2.prototype['Normalize'] = function() {
    return _emscripten_bind_b2Vec2__Normalize_p0(this.ptr);
}

b2Vec2.prototype['set_x'] = function(arg0) {
    _emscripten_bind_b2Vec2__set_x_p1(this.ptr, arg0);
}

function b2Vec2(arg0, arg1) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Vec2__b2Vec2_p0();
  else 
    this.ptr = _emscripten_bind_b2Vec2__b2Vec2_p2(arg0, arg1);
  b2Vec2.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Vec2;
}
b2Vec2.prototype.__cache__ = {};
Module['b2Vec2'] = b2Vec2;

b2Vec2.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2Vec2__Set_p2(this.ptr, arg0, arg1);
}

b2Vec2.prototype['get_x'] = function() {
    return _emscripten_bind_b2Vec2__get_x_p0(this.ptr);
}

b2Vec2.prototype['get_y'] = function() {
    return _emscripten_bind_b2Vec2__get_y_p0(this.ptr);
}

b2Vec2.prototype['set_y'] = function(arg0) {
    _emscripten_bind_b2Vec2__set_y_p1(this.ptr, arg0);
}

b2Vec2.prototype['IsValid'] = function() {
    return _emscripten_bind_b2Vec2__IsValid_p0(this.ptr);
}

b2Vec2.prototype['Skew'] = function() {
    return wrapPointer(_emscripten_bind_b2Vec2__Skew_p0(this.ptr), Module['b2Vec2']);
}

b2Vec2.prototype['LengthSquared'] = function() {
    return _emscripten_bind_b2Vec2__LengthSquared_p0(this.ptr);
}

b2Vec2.prototype['op_add'] = function(arg0) {
    _emscripten_bind_b2Vec2__op_add_p1(this.ptr, arg0.ptr);
}

b2Vec2.prototype['SetZero'] = function() {
    _emscripten_bind_b2Vec2__SetZero_p0(this.ptr);
}

b2Vec2.prototype['Length'] = function() {
    return _emscripten_bind_b2Vec2__Length_p0(this.ptr);
}

b2Vec2.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Vec2____destroy___p0(this.ptr);
}

b2Vec2.prototype['op_mul'] = function(arg0) {
    _emscripten_bind_b2Vec2__op_mul_p1(this.ptr, arg0);
}

b2Vec2.prototype['op_sub'] = function() {
    return wrapPointer(_emscripten_bind_b2Vec2__op_sub_p0(this.ptr), Module['b2Vec2']);
}

b2Vec3.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Vec3____destroy___p0(this.ptr);
}

b2Vec3.prototype['set_z'] = function(arg0) {
    _emscripten_bind_b2Vec3__set_z_p1(this.ptr, arg0);
}

b2Vec3.prototype['Set'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Vec3__Set_p3(this.ptr, arg0, arg1, arg2);
}

b2Vec3.prototype['get_z'] = function() {
    return _emscripten_bind_b2Vec3__get_z_p0(this.ptr);
}

b2Vec3.prototype['op_add'] = function(arg0) {
    _emscripten_bind_b2Vec3__op_add_p1(this.ptr, arg0.ptr);
}

b2Vec3.prototype['SetZero'] = function() {
    _emscripten_bind_b2Vec3__SetZero_p0(this.ptr);
}

function b2Vec3(arg0, arg1, arg2) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Vec3__b2Vec3_p0();
  else 
    this.ptr = _emscripten_bind_b2Vec3__b2Vec3_p3(arg0, arg1, arg2);
  b2Vec3.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Vec3;
}
b2Vec3.prototype.__cache__ = {};
Module['b2Vec3'] = b2Vec3;

b2Vec3.prototype['op_mul'] = function(arg0) {
    _emscripten_bind_b2Vec3__op_mul_p1(this.ptr, arg0);
}

b2Vec3.prototype['op_sub'] = function() {
    return wrapPointer(_emscripten_bind_b2Vec3__op_sub_p0(this.ptr), Module['b2Vec3']);
}

b2DistanceProxy.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2DistanceProxy__get_m_radius_p0(this.ptr);
}

b2DistanceProxy.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2DistanceProxy__Set_p2(this.ptr, arg0.ptr, arg1);
}

function b2DistanceProxy() {
    this.ptr = _emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0();
  b2DistanceProxy.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DistanceProxy;
}
b2DistanceProxy.prototype.__cache__ = {};
Module['b2DistanceProxy'] = b2DistanceProxy;

b2DistanceProxy.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2DistanceProxy__set_m_radius_p1(this.ptr, arg0);
}

b2DistanceProxy.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DistanceProxy____destroy___p0(this.ptr);
}

b2DistanceProxy.prototype['get_m_vertices'] = function() {
    return _emscripten_bind_b2DistanceProxy__get_m_vertices_p0(this.ptr);
}

b2DistanceProxy.prototype['GetSupportVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DistanceProxy__GetSupportVertex_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}

b2DistanceProxy.prototype['get_m_count'] = function() {
    return _emscripten_bind_b2DistanceProxy__get_m_count_p0(this.ptr);
}

b2DistanceProxy.prototype['GetVertexCount'] = function() {
    return _emscripten_bind_b2DistanceProxy__GetVertexCount_p0(this.ptr);
}

b2DistanceProxy.prototype['GetVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DistanceProxy__GetVertex_p1(this.ptr, arg0), Module['b2Vec2']);
}

b2DistanceProxy.prototype['GetSupport'] = function(arg0) {
    return _emscripten_bind_b2DistanceProxy__GetSupport_p1(this.ptr, arg0.ptr);
}

b2DistanceProxy.prototype['set_m_vertices'] = function(arg0) {
    _emscripten_bind_b2DistanceProxy__set_m_vertices_p1(this.ptr, arg0.ptr);
}

b2DistanceProxy.prototype['set_m_count'] = function(arg0) {
    _emscripten_bind_b2DistanceProxy__set_m_count_p1(this.ptr, arg0);
}

b2FixtureDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2FixtureDef____destroy___p0(this.ptr);
}

b2FixtureDef.prototype['get_isSensor'] = function() {
    return _emscripten_bind_b2FixtureDef__get_isSensor_p0(this.ptr);
}

b2FixtureDef.prototype['set_userData'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_userData_p1(this.ptr, arg0);
}

b2FixtureDef.prototype['set_shape'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_shape_p1(this.ptr, arg0.ptr);
}

b2FixtureDef.prototype['get_density'] = function() {
    return _emscripten_bind_b2FixtureDef__get_density_p0(this.ptr);
}

b2FixtureDef.prototype['get_shape'] = function() {
    return _emscripten_bind_b2FixtureDef__get_shape_p0(this.ptr);
}

function b2FixtureDef() {
    this.ptr = _emscripten_bind_b2FixtureDef__b2FixtureDef_p0();
  b2FixtureDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2FixtureDef;
}
b2FixtureDef.prototype.__cache__ = {};
Module['b2FixtureDef'] = b2FixtureDef;

b2FixtureDef.prototype['set_density'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_density_p1(this.ptr, arg0);
}

b2FixtureDef.prototype['set_restitution'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_restitution_p1(this.ptr, arg0);
}

b2FixtureDef.prototype['get_restitution'] = function() {
    return _emscripten_bind_b2FixtureDef__get_restitution_p0(this.ptr);
}

b2FixtureDef.prototype['set_isSensor'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_isSensor_p1(this.ptr, arg0);
}

b2FixtureDef.prototype['get_filter'] = function() {
    return wrapPointer(_emscripten_bind_b2FixtureDef__get_filter_p0(this.ptr), Module['b2Filter']);
}

b2FixtureDef.prototype['get_friction'] = function() {
    return _emscripten_bind_b2FixtureDef__get_friction_p0(this.ptr);
}

b2FixtureDef.prototype['set_friction'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_friction_p1(this.ptr, arg0);
}

b2FixtureDef.prototype['get_userData'] = function() {
    return _emscripten_bind_b2FixtureDef__get_userData_p0(this.ptr);
}

b2FixtureDef.prototype['set_filter'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_filter_p1(this.ptr, arg0.ptr);
}

b2PrismaticJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2PrismaticJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2PrismaticJointDef.prototype['get_motorSpeed'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0(this.ptr);
}

b2PrismaticJointDef.prototype['get_enableMotor'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0(this.ptr);
}

b2PrismaticJointDef.prototype['get_referenceAngle'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0(this.ptr);
}

b2PrismaticJointDef.prototype['set_enableLimit'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1(this.ptr, arg0);
}

b2PrismaticJointDef.prototype['set_motorSpeed'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1(this.ptr, arg0);
}

b2PrismaticJointDef.prototype['get_localAxisA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0(this.ptr), Module['b2Vec2']);
}

b2PrismaticJointDef.prototype['set_upperTranslation'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1(this.ptr, arg0);
}

function b2PrismaticJointDef() {
    this.ptr = _emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0();
  b2PrismaticJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PrismaticJointDef;
}
b2PrismaticJointDef.prototype.__cache__ = {};
Module['b2PrismaticJointDef'] = b2PrismaticJointDef;

b2PrismaticJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2PrismaticJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
}

b2PrismaticJointDef.prototype['set_lowerTranslation'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1(this.ptr, arg0);
}

b2PrismaticJointDef.prototype['get_upperTranslation'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0(this.ptr);
}

b2PrismaticJointDef.prototype['get_enableLimit'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0(this.ptr);
}

b2PrismaticJointDef.prototype['set_referenceAngle'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1(this.ptr, arg0);
}

b2PrismaticJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2PrismaticJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2PrismaticJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PrismaticJointDef____destroy___p0(this.ptr);
}

b2PrismaticJointDef.prototype['get_maxMotorForce'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0(this.ptr);
}

b2PrismaticJointDef.prototype['set_maxMotorForce'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1(this.ptr, arg0);
}

b2PrismaticJointDef.prototype['set_enableMotor'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1(this.ptr, arg0);
}

b2PrismaticJointDef.prototype['get_lowerTranslation'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0(this.ptr);
}

b2PrismaticJointDef.prototype['set_localAxisA'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1(this.ptr, arg0.ptr);
}

b2Rot.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Rot____destroy___p0(this.ptr);
}

b2Rot.prototype['Set'] = function(arg0) {
    _emscripten_bind_b2Rot__Set_p1(this.ptr, arg0);
}

b2Rot.prototype['GetAngle'] = function() {
    return _emscripten_bind_b2Rot__GetAngle_p0(this.ptr);
}

b2Rot.prototype['GetYAxis'] = function() {
    return wrapPointer(_emscripten_bind_b2Rot__GetYAxis_p0(this.ptr), Module['b2Vec2']);
}

b2Rot.prototype['GetXAxis'] = function() {
    return wrapPointer(_emscripten_bind_b2Rot__GetXAxis_p0(this.ptr), Module['b2Vec2']);
}

b2Rot.prototype['set_c'] = function(arg0) {
    _emscripten_bind_b2Rot__set_c_p1(this.ptr, arg0);
}

b2Rot.prototype['SetIdentity'] = function() {
    _emscripten_bind_b2Rot__SetIdentity_p0(this.ptr);
}

function b2Rot(arg0) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Rot__b2Rot_p0();
  else 
    this.ptr = _emscripten_bind_b2Rot__b2Rot_p1(arg0);
  b2Rot.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Rot;
}
b2Rot.prototype.__cache__ = {};
Module['b2Rot'] = b2Rot;

b2Rot.prototype['get_c'] = function() {
    return _emscripten_bind_b2Rot__get_c_p0(this.ptr);
}

b2WheelJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2WheelJointDef.prototype['set_motorSpeed'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1(this.ptr, arg0);
}

b2WheelJointDef.prototype['get_localAxisA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAxisA_p0(this.ptr), Module['b2Vec2']);
}

b2WheelJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2WheelJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0(this.ptr);
}

b2WheelJointDef.prototype['set_maxMotorTorque'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1(this.ptr, arg0);
}

b2WheelJointDef.prototype['get_enableMotor'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_enableMotor_p0(this.ptr);
}

b2WheelJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2WheelJointDef____destroy___p0(this.ptr);
}

b2WheelJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2WheelJointDef.prototype['get_maxMotorTorque'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0(this.ptr);
}

b2WheelJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2WheelJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0(this.ptr);
}

b2WheelJointDef.prototype['set_enableMotor'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_enableMotor_p1(this.ptr, arg0);
}

b2WheelJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1(this.ptr, arg0);
}

b2WheelJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2WheelJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
}

b2WheelJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1(this.ptr, arg0);
}

function b2WheelJointDef() {
    this.ptr = _emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0();
  b2WheelJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WheelJointDef;
}
b2WheelJointDef.prototype.__cache__ = {};
Module['b2WheelJointDef'] = b2WheelJointDef;

b2WheelJointDef.prototype['set_localAxisA'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_localAxisA_p1(this.ptr, arg0.ptr);
}

b2WheelJointDef.prototype['get_motorSpeed'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0(this.ptr);
}

b2RevoluteJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2RevoluteJointDef.prototype['get_lowerAngle'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0(this.ptr);
}

b2RevoluteJointDef.prototype['set_upperAngle'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1(this.ptr, arg0);
}

b2RevoluteJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2RevoluteJointDef.prototype['get_enableLimit'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0(this.ptr);
}

b2RevoluteJointDef.prototype['set_lowerAngle'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1(this.ptr, arg0);
}

b2RevoluteJointDef.prototype['get_enableMotor'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0(this.ptr);
}

b2RevoluteJointDef.prototype['set_motorSpeed'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1(this.ptr, arg0);
}

b2RevoluteJointDef.prototype['get_upperAngle'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0(this.ptr);
}

b2RevoluteJointDef.prototype['set_referenceAngle'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1(this.ptr, arg0);
}

b2RevoluteJointDef.prototype['set_maxMotorTorque'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1(this.ptr, arg0);
}

b2RevoluteJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2RevoluteJointDef.prototype['get_referenceAngle'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0(this.ptr);
}

b2RevoluteJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2RevoluteJointDef.prototype['set_enableLimit'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1(this.ptr, arg0);
}

b2RevoluteJointDef.prototype['set_enableMotor'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1(this.ptr, arg0);
}

b2RevoluteJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2RevoluteJointDef____destroy___p0(this.ptr);
}

function b2RevoluteJointDef() {
    this.ptr = _emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0();
  b2RevoluteJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RevoluteJointDef;
}
b2RevoluteJointDef.prototype.__cache__ = {};
Module['b2RevoluteJointDef'] = b2RevoluteJointDef;

b2RevoluteJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2RevoluteJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}

b2RevoluteJointDef.prototype['get_maxMotorTorque'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0(this.ptr);
}

b2RevoluteJointDef.prototype['get_motorSpeed'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0(this.ptr);
}

b2PulleyJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2PulleyJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PulleyJointDef____destroy___p0(this.ptr);
}

b2PulleyJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2PulleyJointDef.prototype['get_ratio'] = function() {
    return _emscripten_bind_b2PulleyJointDef__get_ratio_p0(this.ptr);
}

b2PulleyJointDef.prototype['get_lengthB'] = function() {
    return _emscripten_bind_b2PulleyJointDef__get_lengthB_p0(this.ptr);
}

b2PulleyJointDef.prototype['get_lengthA'] = function() {
    return _emscripten_bind_b2PulleyJointDef__get_lengthA_p0(this.ptr);
}

b2PulleyJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2PulleyJointDef.prototype['set_ratio'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_ratio_p1(this.ptr, arg0);
}

b2PulleyJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2PulleyJointDef.prototype['get_groundAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2PulleyJointDef.prototype['set_groundAnchorB'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1(this.ptr, arg0.ptr);
}

function b2PulleyJointDef() {
    this.ptr = _emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0();
  b2PulleyJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PulleyJointDef;
}
b2PulleyJointDef.prototype.__cache__ = {};
Module['b2PulleyJointDef'] = b2PulleyJointDef;

b2PulleyJointDef.prototype['set_groundAnchorA'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1(this.ptr, arg0.ptr);
}

b2PulleyJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    _emscripten_bind_b2PulleyJointDef__Initialize_p7(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr, arg4.ptr, arg5.ptr, arg6);
}

b2PulleyJointDef.prototype['set_lengthB'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_lengthB_p1(this.ptr, arg0);
}

b2PulleyJointDef.prototype['set_lengthA'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_lengthA_p1(this.ptr, arg0);
}

b2PulleyJointDef.prototype['get_groundAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2JointDef.prototype['get_bodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2JointDef__get_bodyA_p0(this.ptr), Module['b2Body']);
}

b2JointDef.prototype['set_userData'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_userData_p1(this.ptr, arg0);
}

b2JointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}

b2JointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}

b2JointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2JointDef____destroy___p0(this.ptr);
}

b2JointDef.prototype['get_bodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2JointDef__get_bodyB_p0(this.ptr), Module['b2Body']);
}

b2JointDef.prototype['set_type'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_type_p1(this.ptr, arg0);
}

b2JointDef.prototype['get_collideConnected'] = function() {
    return _emscripten_bind_b2JointDef__get_collideConnected_p0(this.ptr);
}

b2JointDef.prototype['get_type'] = function() {
    return _emscripten_bind_b2JointDef__get_type_p0(this.ptr);
}

b2JointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_collideConnected_p1(this.ptr, arg0);
}

function b2JointDef() {
    this.ptr = _emscripten_bind_b2JointDef__b2JointDef_p0();
  b2JointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2JointDef;
}
b2JointDef.prototype.__cache__ = {};
Module['b2JointDef'] = b2JointDef;

b2JointDef.prototype['get_userData'] = function() {
    return _emscripten_bind_b2JointDef__get_userData_p0(this.ptr);
}

b2Transform.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Transform____destroy___p0(this.ptr);
}

b2Transform.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2Transform__Set_p2(this.ptr, arg0.ptr, arg1);
}

b2Transform.prototype['set_p'] = function(arg0) {
    _emscripten_bind_b2Transform__set_p_p1(this.ptr, arg0.ptr);
}

b2Transform.prototype['set_q'] = function(arg0) {
    _emscripten_bind_b2Transform__set_q_p1(this.ptr, arg0.ptr);
}

b2Transform.prototype['get_p'] = function() {
    return wrapPointer(_emscripten_bind_b2Transform__get_p_p0(this.ptr), Module['b2Vec2']);
}

b2Transform.prototype['get_q'] = function() {
    return wrapPointer(_emscripten_bind_b2Transform__get_q_p0(this.ptr), Module['b2Rot']);
}

function b2Transform(arg0, arg1) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Transform__b2Transform_p0();
  else 
    this.ptr = _emscripten_bind_b2Transform__b2Transform_p2(arg0.ptr, arg1.ptr);
  b2Transform.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Transform;
}
b2Transform.prototype.__cache__ = {};
Module['b2Transform'] = b2Transform;

b2Transform.prototype['SetIdentity'] = function() {
    _emscripten_bind_b2Transform__SetIdentity_p0(this.ptr);
}

b2Color.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Color____destroy___p0(this.ptr);
}

b2Color.prototype['set_b'] = function(arg0) {
    _emscripten_bind_b2Color__set_b_p1(this.ptr, arg0);
}

b2Color.prototype['Set'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Color__Set_p3(this.ptr, arg0, arg1, arg2);
}

b2Color.prototype['get_b'] = function() {
    return _emscripten_bind_b2Color__get_b_p0(this.ptr);
}

function b2Color(arg0, arg1, arg2) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Color__b2Color_p0();
  else 
    this.ptr = _emscripten_bind_b2Color__b2Color_p3(arg0, arg1, arg2);
  b2Color.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Color;
}
b2Color.prototype.__cache__ = {};
Module['b2Color'] = b2Color;

b2WeldJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2WeldJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2WeldJointDef____destroy___p0(this.ptr);
}

b2WeldJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0(this.ptr);
}

b2WeldJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2WeldJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1(this.ptr, arg0);
}

b2WeldJointDef.prototype['set_referenceAngle'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1(this.ptr, arg0);
}

b2WeldJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2WeldJointDef.prototype['get_referenceAngle'] = function() {
    return _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0(this.ptr);
}

b2WeldJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2WeldJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0(this.ptr);
}

b2WeldJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1(this.ptr, arg0);
}

b2WeldJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2WeldJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}

function b2WeldJointDef() {
    this.ptr = _emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0();
  b2WeldJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WeldJointDef;
}
b2WeldJointDef.prototype.__cache__ = {};
Module['b2WeldJointDef'] = b2WeldJointDef;

b2MouseJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2MouseJointDef____destroy___p0(this.ptr);
}

b2MouseJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0(this.ptr);
}

b2MouseJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1(this.ptr, arg0);
}

function b2MouseJointDef() {
    this.ptr = _emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0();
  b2MouseJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2MouseJointDef;
}
b2MouseJointDef.prototype.__cache__ = {};
Module['b2MouseJointDef'] = b2MouseJointDef;

b2MouseJointDef.prototype['get_maxForce'] = function() {
    return _emscripten_bind_b2MouseJointDef__get_maxForce_p0(this.ptr);
}

b2MouseJointDef.prototype['set_target'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_target_p1(this.ptr, arg0.ptr);
}

b2MouseJointDef.prototype['set_maxForce'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_maxForce_p1(this.ptr, arg0);
}

b2MouseJointDef.prototype['get_target'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJointDef__get_target_p0(this.ptr), Module['b2Vec2']);
}

b2MouseJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1(this.ptr, arg0);
}

b2MouseJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0(this.ptr);
}

b2DistanceJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2DistanceJointDef.prototype['get_length'] = function() {
    return _emscripten_bind_b2DistanceJointDef__get_length_p0(this.ptr);
}

b2DistanceJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0(this.ptr);
}

b2DistanceJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2DistanceJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1(this.ptr, arg0);
}

b2DistanceJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DistanceJointDef____destroy___p0(this.ptr);
}

b2DistanceJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2DistanceJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

b2DistanceJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0(this.ptr);
}

function b2DistanceJointDef() {
    this.ptr = _emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0();
  b2DistanceJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DistanceJointDef;
}
b2DistanceJointDef.prototype.__cache__ = {};
Module['b2DistanceJointDef'] = b2DistanceJointDef;

b2DistanceJointDef.prototype['set_length'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_length_p1(this.ptr, arg0);
}

b2DistanceJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1(this.ptr, arg0);
}

b2DistanceJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2DistanceJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
}

b2GearJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2GearJointDef____destroy___p0(this.ptr);
}

b2GearJointDef.prototype['set_joint1'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_joint1_p1(this.ptr, arg0.ptr);
}

b2GearJointDef.prototype['set_joint2'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_joint2_p1(this.ptr, arg0.ptr);
}

b2GearJointDef.prototype['set_ratio'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_ratio_p1(this.ptr, arg0);
}

b2GearJointDef.prototype['get_joint1'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJointDef__get_joint1_p0(this.ptr), Module['b2Joint']);
}

b2GearJointDef.prototype['get_joint2'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJointDef__get_joint2_p0(this.ptr), Module['b2Joint']);
}

function b2GearJointDef() {
    this.ptr = _emscripten_bind_b2GearJointDef__b2GearJointDef_p0();
  b2GearJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2GearJointDef;
}
b2GearJointDef.prototype.__cache__ = {};
Module['b2GearJointDef'] = b2GearJointDef;

b2GearJointDef.prototype['get_ratio'] = function() {
    return _emscripten_bind_b2GearJointDef__get_ratio_p0(this.ptr);
}

b2RopeJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}

b2RopeJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2RopeJointDef____destroy___p0(this.ptr);
}

b2RopeJointDef.prototype['get_maxLength'] = function() {
    return _emscripten_bind_b2RopeJointDef__get_maxLength_p0(this.ptr);
}

b2RopeJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}

b2RopeJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}

b2RopeJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}

function b2RopeJointDef() {
    this.ptr = _emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0();
  b2RopeJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RopeJointDef;
}
b2RopeJointDef.prototype.__cache__ = {};
Module['b2RopeJointDef'] = b2RopeJointDef;

b2RopeJointDef.prototype['set_maxLength'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_maxLength_p1(this.ptr, arg0);
}


this['Box2D'] = Module; // With or without a closure, the proper usage is Box2D.*

// Additional bindings that the bindings generator does not automatically generate (like enums)

Module['b2_staticBody']    = 0;
Module['b2_kinematicBody'] = 1;
Module['b2_dynamicBody']   = 2;

