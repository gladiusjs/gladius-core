/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['cli-table/utils.js']) {
  _$jscoverage['cli-table/utils.js'] = [];
  _$jscoverage['cli-table/utils.js'][10] = 0;
  _$jscoverage['cli-table/utils.js'][11] = 0;
  _$jscoverage['cli-table/utils.js'][20] = 0;
  _$jscoverage['cli-table/utils.js'][21] = 0;
  _$jscoverage['cli-table/utils.js'][22] = 0;
  _$jscoverage['cli-table/utils.js'][24] = 0;
  _$jscoverage['cli-table/utils.js'][25] = 0;
  _$jscoverage['cli-table/utils.js'][28] = 0;
  _$jscoverage['cli-table/utils.js'][29] = 0;
  _$jscoverage['cli-table/utils.js'][30] = 0;
  _$jscoverage['cli-table/utils.js'][31] = 0;
  _$jscoverage['cli-table/utils.js'][34] = 0;
  _$jscoverage['cli-table/utils.js'][35] = 0;
  _$jscoverage['cli-table/utils.js'][37] = 0;
  _$jscoverage['cli-table/utils.js'][46] = 0;
  _$jscoverage['cli-table/utils.js'][47] = 0;
  _$jscoverage['cli-table/utils.js'][48] = 0;
  _$jscoverage['cli-table/utils.js'][59] = 0;
  _$jscoverage['cli-table/utils.js'][60] = 0;
  _$jscoverage['cli-table/utils.js'][61] = 0;
  _$jscoverage['cli-table/utils.js'][62] = 0;
  _$jscoverage['cli-table/utils.js'][63] = 0;
  _$jscoverage['cli-table/utils.js'][64] = 0;
  _$jscoverage['cli-table/utils.js'][65] = 0;
  _$jscoverage['cli-table/utils.js'][66] = 0;
  _$jscoverage['cli-table/utils.js'][67] = 0;
  _$jscoverage['cli-table/utils.js'][68] = 0;
  _$jscoverage['cli-table/utils.js'][69] = 0;
  _$jscoverage['cli-table/utils.js'][70] = 0;
  _$jscoverage['cli-table/utils.js'][72] = 0;
  _$jscoverage['cli-table/utils.js'][73] = 0;
  _$jscoverage['cli-table/utils.js'][75] = 0;
  _$jscoverage['cli-table/utils.js'][76] = 0;
  _$jscoverage['cli-table/utils.js'][77] = 0;
  _$jscoverage['cli-table/utils.js'][78] = 0;
  _$jscoverage['cli-table/utils.js'][79] = 0;
  _$jscoverage['cli-table/utils.js'][80] = 0;
}
_$jscoverage['cli-table/utils.js'][10]++;
exports.repeat = (function (str, times) {
  _$jscoverage['cli-table/utils.js'][11]++;
  return Array(times + 1).join(str);
});
_$jscoverage['cli-table/utils.js'][20]++;
exports.pad = (function (str, len, pad, dir) {
  _$jscoverage['cli-table/utils.js'][21]++;
  if (len + 1 >= str.length) {
    _$jscoverage['cli-table/utils.js'][22]++;
    switch (dir) {
    case "left":
      _$jscoverage['cli-table/utils.js'][24]++;
      str = Array(len + 1 - str.length).join(pad) + str;
      _$jscoverage['cli-table/utils.js'][25]++;
      break;
    case "both":
      _$jscoverage['cli-table/utils.js'][28]++;
      var right = Math.ceil((padlen = len - str.length) / 2);
      _$jscoverage['cli-table/utils.js'][29]++;
      var left = padlen - right;
      _$jscoverage['cli-table/utils.js'][30]++;
      str = Array(left + 1).join(pad) + str + Array(right + 1).join(pad);
      _$jscoverage['cli-table/utils.js'][31]++;
      break;
    default:
      _$jscoverage['cli-table/utils.js'][34]++;
      str = str + Array(len + 1 - str.length).join(pad);
    }
  }
  _$jscoverage['cli-table/utils.js'][35]++;
  ;
  _$jscoverage['cli-table/utils.js'][37]++;
  return str;
});
_$jscoverage['cli-table/utils.js'][46]++;
exports.truncate = (function (str, length, chr) {
  _$jscoverage['cli-table/utils.js'][47]++;
  chr = chr || "\u00e2\u0080\u00a6";
  _$jscoverage['cli-table/utils.js'][48]++;
  return str.length >= length? str.substr(0, length - chr.length) + chr: str;
});
_$jscoverage['cli-table/utils.js'][59]++;
function clone(a) {
  _$jscoverage['cli-table/utils.js'][60]++;
  var b;
  _$jscoverage['cli-table/utils.js'][61]++;
  if (Array.isArray(a)) {
    _$jscoverage['cli-table/utils.js'][62]++;
    b = [];
    _$jscoverage['cli-table/utils.js'][63]++;
    for (var i = 0, l = a.length; i < l; i++) {
      _$jscoverage['cli-table/utils.js'][64]++;
      b.push(typeof a[i] == "object"? clone(a[i]): a[i]);
}
    _$jscoverage['cli-table/utils.js'][65]++;
    return b;
  }
  else {
    _$jscoverage['cli-table/utils.js'][66]++;
    if (typeof a == "object") {
      _$jscoverage['cli-table/utils.js'][67]++;
      b = {};
      _$jscoverage['cli-table/utils.js'][68]++;
      for (var i in a) {
        _$jscoverage['cli-table/utils.js'][69]++;
        b[i] = typeof a[i] == "object"? clone(a[i]): a[i];
}
      _$jscoverage['cli-table/utils.js'][70]++;
      return b;
    }
  }
  _$jscoverage['cli-table/utils.js'][72]++;
  return a;
}
_$jscoverage['cli-table/utils.js'][73]++;
;
_$jscoverage['cli-table/utils.js'][75]++;
exports.options = (function (defaults, opts) {
  _$jscoverage['cli-table/utils.js'][76]++;
  var c = clone(opts);
  _$jscoverage['cli-table/utils.js'][77]++;
  for (var i in defaults) {
    _$jscoverage['cli-table/utils.js'][78]++;
    if (! (i in opts)) {
      _$jscoverage['cli-table/utils.js'][79]++;
      c[i] = defaults[i];
    }
}
  _$jscoverage['cli-table/utils.js'][80]++;
  return c;
});
_$jscoverage['cli-table/utils.js'].source = ["","/**"," * Repeats a string."," *"," * @param {String} char(s)"," * @param {Number} number of times"," * @return {String} repeated string"," */","","exports.repeat = function (str, times){","  return Array(times + 1).join(str);","};","","/**"," * Pads a string"," *"," * @api public"," */","","exports.pad = function (str, len, pad, dir) {","  if (len + 1 &gt;= str.length)","    switch (dir){","      case 'left':","        str = Array(len + 1 - str.length).join(pad) + str;","        break;","      ","      case 'both':","        var right = Math.ceil((padlen = len - str.length) / 2);","        var left = padlen - right;","        str = Array(left + 1).join(pad) + str + Array(right + 1).join(pad);","        break;"," ","      default:","        str = str + Array(len + 1 - str.length).join(pad);","    };","","  return str;","};","","/**"," * Truncates a string"," *"," * @api public"," */","","exports.truncate = function (str, length, chr){","  chr = chr || '&#226;&#128;&#166;';","  return str.length &gt;= length ? str.substr(0, length - chr.length) + chr : str;","};","","/**"," * Copies and merges options with defaults."," *"," * @param {Object} defaults"," * @param {Object} supplied options"," * @return {Object} new (merged) object"," */","","function clone(a){","  var b;","  if (Array.isArray(a)){","    b = [];","    for (var i = 0, l = a.length; i &lt; l; i++)","      b.push(typeof a[i] == 'object' ? clone(a[i]) : a[i]);","    return b;","  } else if (typeof a == 'object'){","    b = {};","    for (var i in a)","      b[i] = typeof a[i] == 'object' ? clone(a[i]) : a[i];","    return b;","  }","  return a;","};","","exports.options = function (defaults, opts){","  var c = clone(opts);","  for (var i in defaults)","    if (!(i in opts))","      c[i] = defaults[i];","  return c;","};"];
